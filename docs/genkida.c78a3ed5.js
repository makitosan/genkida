// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"ApMz":[function(require,module,exports) {
var global = arguments[3];
/*!
 * Vue.js v2.5.16
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

var emptyObject = Object.freeze({});

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}

/**
 * Check if value is primitive
 */
function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' ||
  // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}

/**
 * Get the raw type string of a value e.g. [object Object]
 */
var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString(val) {
  return val == null ? '' : typeof val === 'object' ? JSON.stringify(val, null, 2) : String(val);
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if a attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array
 */
function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

/**
 * Create a cached version of a pure function.
 */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});

/**
 * Simple bind polyfill for environments that do not support it... e.g.
 * PhantomJS 1.x. Technically we don't need this anymore since native bind is
 * now more performant in most browsers, but removing it would be breaking for
 * code that was able to run in PhantomJS 1.x, so this must be kept for
 * backwards compatibility.
 */

/* istanbul ignore next */
function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}

/**
 * Mix properties into target object.
 */
function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
function noop(a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) {
  return false;
};

/**
 * Return same value
 */
var identity = function (_) {
  return _;
};

/**
 * Generate a static keys string from compiler modules.
 */
function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual(a, b) {
  if (a === b) {
    return true;
  }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}

function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }
  return -1;
}

/**
 * Ensure a function is called only once.
 */
function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = ['component', 'directive', 'filter'];

var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured'];

/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: 'production' !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: 'production' !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};

/*  */

/**
 * Check if a string starts with $ or _
 */
function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}

/**
 * Define a property.
 */
function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }
      obj = obj[segments[i]];
    }
    return obj;
  };
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = {}.watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer;
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = function () {
    function Set() {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };
    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check
var formatComponentName = noop;

if ('production' !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }
    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) {
        res += str;
      }
      if (n > 1) {
        str += str;
      }
      n >>= 1;
    }
    return res;
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget(_target) {
  if (Dep.target) {
    targetStack.push(Dep.target);
  }
  Dep.target = _target;
}

function popTarget() {
  Dep.target = targetStack.pop();
}

/*  */

var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function (text) {
  if (text === void 0) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.isCloned = true;
  return cloned;
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;
    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;
      case 'splice':
        inserted = args.slice(2);
        break;
    }
    if (inserted) {
      ob.observeArray(inserted);
    }
    // notify change
    ob.dep.notify();
    return result;
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto ? protoAugment : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment(target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob;
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive(obj, key, val, customSetter, shallow) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return;
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  if (!getter && arguments.length === 2) {
    val = obj[key];
  }
  var setter = property && property.set;

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */
      if ('production' !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set(target, key, val) {
  if ('production' !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }
  var ob = target.__ob__;
  if (target._isVue || ob && ob.vmCount) {
    'production' !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }
  if (!ob) {
    target[key] = val;
    return val;
  }
  defineReactive(ob.value, key, val);
  ob.dep.notify();
  return val;
}

/**
 * Delete a property and trigger change if necessary.
 */
function del(target, key) {
  if ('production' !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }
  var ob = target.__ob__;
  if (target._isVue || ob && ob.vmCount) {
    'production' !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }
  if (!hasOwn(target, key)) {
    return;
  }
  delete target[key];
  if (!ob) {
    return;
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if ('production' !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }
    return defaultStrat(parent, child);
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData(to, from) {
  if (!from) {
    return to;
  }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}

/**
 * Data
 */
function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      'production' !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);

      return parentVal;
    }
    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook(parentVal, childVal) {
  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    'production' !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }
  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */
  if (!childVal) {
    return Object.create(parentVal || null);
  }
  if ('production' !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) {
    return childVal;
  }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }
  return ret;
};

/**
 * Other object hashes.
 */
strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && 'production' !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) {
    return childVal;
  }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) {
    extend(ret, childVal);
  }
  return ret;
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};

/**
 * Validate component names
 */
function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps(options, vm) {
  var props = options.props;
  if (!props) {
    return;
  }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if ('production' !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : { type: val };
    }
  } else if ('production' !== 'production') {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject(options, vm) {
  var inject = options.inject;
  if (!inject) {
    return;
  }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({ from: key }, val) : { from: val };
    }
  } else if ('production' !== 'production') {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives(options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions(parent, child, vm) {
  if ('production' !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options;
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) {
    return assets[id];
  }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ('production' !== 'production' && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }
  return res;
}

/*  */

function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if ('production' !== 'production' &&
  // skip validation for weex recycle-list child component props
  !(false && isObject(value) && '@binding' in value)) {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ('production' !== 'production' && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}

/**
 * Assert whether a prop is valid.
 */
function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn("Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ') + ", got " + toRawType(value) + ".", vm);
    return;
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  };
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }
  return -1;
}

/*  */

function handleError(err, vm, info) {
  if (vm) {
    var cur = vm;
    while (cur = cur.$parent) {
      var hooks = cur.$options.errorCaptured;
      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;
            if (capture) {
              return;
            }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }
  globalHandleError(err, vm, info);
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      logError(e, null, 'config.errorHandler');
    }
  }
  logError(err, vm, info);
}

function logError(err, vm, info) {
  if ('production' !== 'production') {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}

/*  */
/* globals MessageChannel */

var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using both microtasks and (macro) tasks.
// In < 2.4 we used microtasks everywhere, but there are some scenarios where
// microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using (macro) tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use microtask by default, but expose a way to force (macro) task when
// needed (e.g. in event handlers attached by v-on).
var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false;

// Determine (macro) task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.
/* istanbul ignore if */
if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (isNative(MessageChannel) ||
// PhantomJS
MessageChannel.toString() === '[object MessageChannelConstructor]')) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;
  macroTimerFunc = function () {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

// Determine microtask defer implementation.
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  microTimerFunc = function () {
    p.then(flushCallbacks);
    // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) {
      setTimeout(noop);
    }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}

/**
 * Wrap a function so that if any code inside triggers state change,
 * the changes are queued using a (macro) task instead of a microtask.
 */
function withMacroTask(fn) {
  return fn._withTask || (fn._withTask = function () {
    useMacroTask = true;
    var res = fn.apply(null, arguments);
    useMacroTask = false;
    return res;
  });
}

function nextTick(cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}

/*  */

var mark;
var measure;

if ('production' !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function (tag) {
      return perf.mark(tag);
    };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if ('production' !== 'production') {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed;
    }
  };

  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse(val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return;
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns) {
  function invoker() {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments);
    }
  }
  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, vm) {
  var name, def, cur, old, event;
  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    /* istanbul ignore if */
    if (isUndef(cur)) {
      'production' !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return;
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if ('production' !== 'production') {
        var keyInLowerCase = key.toLowerCase();
        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }
      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }
  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true;
    }
  }
  return false;
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i);
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res;
}

/*  */

function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }
  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node;
}

function resolveAsyncComponent(factory, baseCtor, context) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function () {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      'production' !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject('production' !== 'production' ? "timeout (" + res.timeout + "ms)" : null);
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}

/*  */

function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}

/*  */

function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}

/*  */

/*  */

function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn, once) {
  if (once) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$off(event[i], fn);
      }
      return vm;
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm;
    }
    if (!fn) {
      vm._events[event] = null;
      return vm;
    }
    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;
      while (i$1--) {
        cb = cbs[i$1];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break;
        }
      }
    }
    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if ('production' !== 'production') {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, "event handler for \"" + event + "\"");
        }
      }
    }
    return vm;
  };
}

/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots(children, context) {
  var slots = {};
  if (!children) {
    return slots;
  }
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}

function resolveScopedSlots(fns, // see flow/vnode
res) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res;
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle(vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */
      , vm.$options._parentElm, vm.$options._refElm);
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return;
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if ('production' !== 'production') {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if ('production' !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if ('production' !== 'production') {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  parentVnode.data.scopedSlots || // has new scoped slots
  vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if ('production' !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }
  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return;
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, hook + " hook");
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if ('production' !== 'production') {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue() {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) {
    return a.id - b.id;
  });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ('production' !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher(watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$1 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$1; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = 'production' !== 'production' ? expOrFn.toString() : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      'production' !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }
  this.value = this.lazy ? undefined : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value;
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();
    if (value !== this.value ||
    // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend() {
  var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown() {
  var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) {
    initProps(vm, opts.props);
  }
  if (opts.methods) {
    initMethods(vm, opts.methods);
  }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) {
    initComputed(vm, opts.computed);
  }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function (key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if ('production' !== 'production') {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }
      defineReactive(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {
      defineReactive(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);
  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};
  if (!isPlainObject(data)) {
    data = {};
    'production' !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if ('production' !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }
    if (props && hasOwn(props, key)) {
      'production' !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if ('production' !== 'production' && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if ('production' !== 'production') {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : userDef;
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
    sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
  }
  if ('production' !== 'production' && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value;
    }
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if ('production' !== 'production') {
      if (methods[key] == null) {
        warn("Method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
      }
      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }
      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () {
    return this._data;
  };
  var propsDef = {};
  propsDef.get = function () {
    return this._props;
  };
  if ('production' !== 'production') {
    dataDef.set = function (newData) {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };
}

/*  */

function initProvide(vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if ('production' !== 'production') {
        defineReactive(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {
        defineReactive(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject).filter(function (key) {
      /* istanbul ignore next */
      return Object.getOwnPropertyDescriptor(inject, key).enumerable;
    }) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if ('production' !== 'production') {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }
    return result;
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList(val, render) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    ret._isVList = true;
  }
  return ret;
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    // scoped slot
    props = props || {};
    if (bindObject) {
      if ('production' !== 'production' && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes) {
      if ('production' !== 'production' && slotNodes._rendered) {
        warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
      }
      slotNodes._rendered = true;
    }
    nodes = slotNodes || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes);
  } else {
    return nodes;
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}

/*  */

function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      'production' !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function (key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }
  return data;
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree;
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      'production' !== 'production' && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data;
}

/*  */

function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}

/*  */

function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    return resolveSlots(children, parent);
  };

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }
    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);
    }
    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

// Register the component hook to weex native render engine.
// The hook will be triggered by native, not javascript.


// Updates the state of the component to weex native render engine.

/*  */

// https://github.com/Hanks10100/weex-native-directive/tree/master/component

// listening on native callback

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init(vnode, hydrating, parentElm, refElm) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },

  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if ('production' !== 'production') {
      warn("Invalid Component definition: " + String(Ctor), context);
    }
    return;
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);

  // Weex specific: invoke recycle-list optimized @render function for
  // extracting cell-slot template.
  // https://github.com/Hanks10100/weex-native-directive/tree/master/component
  /* istanbul ignore if */
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent, // activeInstance in lifecycle state
parentElm, refElm) {
  var options = {
    _isComponent: true,
    parent: parent,
    _parentVnode: vnode,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    hooks[key] = componentVNodeHooks[key];
  }
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    'production' !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  }
  // warn against non-primitive key
  if ('production' !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }
    if (isDef(data)) {
      registerDeepBindings(data);
    }
    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender(vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if ('production' !== 'production') {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    // reset _rendered flag on slots for duplicate slot check
    if ('production' !== 'production') {
      for (var key in vm.$slots) {
        // $flow-disable-line
        vm.$slots[key]._rendered = false;
      }
    }

    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if ('production' !== 'production') {
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ('production' !== 'production' && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode;
  };
}

/*  */

var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ('production' !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */
    if ('production' !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if ('production' !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified;
}

function dedupe(latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res;
  } else {
    return latest;
  }
}

function Vue(options) {
  if ('production' !== 'production' && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this;
  };
}

/*  */

function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}

/*  */

function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;
    if ('production' !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ('production' !== 'production' && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}

/*  */

function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */
  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed() {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache, key, this$1.keys);
    }
  },

  mounted: function mounted() {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },

  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
      // not included
      include && (!name || !matches(include, name)) ||
      // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
      // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || slot && slot[0];
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive

  /*  */

};function initGlobalAPI(Vue) {
  // config
  var configDef = {};
  configDef.get = function () {
    return config;
  };
  if ('production' !== 'production') {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.5.16';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false;
};

/*  */

function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */
  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }
  if (isObject(value)) {
    return stringifyObject(value);
  }
  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */
  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }
      res += stringified;
    }
  }
  return res;
}

function stringifyObject(value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }
      res += key;
    }
  }
  return res;
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot');

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isPreTag = function (tag) {
  return tag === 'pre';
};

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }
  if (isReservedTag(tag)) {
    return false;
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      'production' !== 'production' && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }
    return selected;
  } else {
    return el;
  }
}

/*  */

function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm;
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) {
      map[key] = i;
    }
  }
  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove() {
      if (--remove.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove.listeners = listeners;
    return remove;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if ('production' !== 'production') {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if ('production' !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break;
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if ('production' !== 'production') {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }
      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope(vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }
      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if ('production' !== 'production') {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return;
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }
      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    }
    // assert node match
    if ('production' !== 'production') {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true /* hydrating */);
      }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ('production' !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ('production' !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false;
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }
      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if ('production' !== 'production') {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);

        // create new node
        createElm(vnode, insertedVnodeQueue,
        // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res;
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];

/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && !el.__ieph) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs

  /*  */

};function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass

  /*  */

};var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;break; // "
        case 0x27:
          inSingle = true;break; // '
        case 0x60:
          inTemplateString = true;break; // `
        case 0x28:
          paren++;break; // (
        case 0x29:
          paren--;break; // )
        case 0x5B:
          square++;break; // [
        case 0x5D:
          square--;break; // ]
        case 0x7B:
          curly++;break; // {
        case 0x7D:
          curly--;break; // }
      }
      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0;
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') {
            break;
          }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}

/*  */

function baseWarn(msg) {
  console.error("[Vue compiler]: " + msg);
}

function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value) {
  (el.props || (el.props = [])).push({ name: name, value: value });
  el.plain = false;
}

function addAttr(el, name, value) {
  (el.attrs || (el.attrs = [])).push({ name: name, value: value });
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr(el, name, value) {
  el.attrsMap[name] = value;
  el.attrsList.push({ name: name, value: value });
}

function addDirective(el, name, rawName, value, arg, modifiers) {
  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
  el.plain = false;
}

function addHandler(el, name, value, modifiers, important, warn) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if ('production' !== 'production' && warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.');
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = '!' + name; // mark the event as captured
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = '~' + name; // mark the event as once
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = '&' + name; // mark the event as passive
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (name === 'click') {
    if (modifiers.right) {
      name = 'contextmenu';
      delete modifiers.right;
    } else if (modifiers.middle) {
      name = 'mouseup';
    }
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = {
    value: value.trim()
  };
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr(el, name, removeFromMap) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val;
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: "(" + value + ")",
    expression: "\"" + value + "\"",
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode(value, assignment) {
  var res = parseModel(value);
  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len;
var str;
var chr;
var index$1;
var expressionPos;
var expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }
    if (chr === 0x5B) {
      inBracket++;
    }
    if (chr === 0x5D) {
      inBracket--;
    }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break;
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model(el, dir, _warn) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if ('production' !== 'production') {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1("<" + el.tag + " v-model=\"" + value + "\" type=\"file\">:\n" + "File inputs are read only. Use a v-on:change listener instead.");
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false;
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false;
  } else if ('production' !== 'production') {
    warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "v-model is not supported on this element type. " + 'If you are working with contenteditable, it\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.');
  }

  // ensure runtime directive metadata
  return true;
}

function genCheckboxModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked', "Array.isArray(" + value + ")" + "?_i(" + value + "," + valueBinding + ")>-1" + (trueValueBinding === 'true' ? ":(" + value + ")" : ":_q(" + value + "," + trueValueBinding + ")"));
  addHandler(el, 'change', "var $$a=" + value + "," + '$$el=$event.target,' + "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" + 'if(Array.isArray($$a)){' + "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," + '$$i=_i($$a,$$v);' + "if($$el.checked){$$i<0&&(" + genAssignmentCode(value, '$$a.concat([$$v])') + ")}" + "else{$$i>-1&&(" + genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))') + ")}" + "}else{" + genAssignmentCode(value, '$$c') + "}", null, true);
}

function genRadioModel(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? "_n(" + valueBinding + ")" : valueBinding;
  addProp(el, 'checked', "_q(" + value + "," + valueBinding + ")");
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect(el, value, modifiers) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" + ".call($event.target.options,function(o){return o.selected})" + ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" + "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + genAssignmentCode(value, assignment);
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel(el, value, modifiers) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  if ('production' !== 'production') {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " + 'because the latter already expands to a value binding internally');
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', "(" + value + ")");
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler(handler, event, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler() {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
}

function add$1(event, handler, once$$1, capture, passive) {
  handler = withMacroTask(handler);
  if (once$$1) {
    handler = createOnceHandler(handler, event, capture);
  }
  target$1.addEventListener(event, handler, supportsPassive ? { capture: capture, passive: passive } : capture);
}

function remove$2(event, handler, capture, _target) {
  (_target || target$1).removeEventListener(event, handler._withTask || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners

  /*  */

};function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }
      if (cur === oldProps[key]) {
        continue;
      }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}
  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.lazy) {
      // inputs with lazy should only be updated when not in focus
      return false;
    }
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }
  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps

  /*  */

};var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle ? extend(data.staticStyle, style) : style;
}

// normalize possible array / string values into Object
function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }
  return bindingStyle;
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res;
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle

  /*  */

  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
};function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition(def) {
  if (!def) {
    return;
  }
  /* istanbul ignore else */
  if (typeof def === 'object') {
    var res = {};
    if (def.css !== false) {
      extend(res, autoCssTransition(def.name || 'v'));
    }
    extend(res, def);
    return res;
  } else if (typeof def === 'string') {
    return autoCssTransition(def);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : /* istanbul ignore next */function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) {
    return cb();
  }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
}

function toMs(s) {
  return Number(s.slice(0, -1)) * 1000;
}

/*  */

function enter(vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return;
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;

  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;

  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ('production' !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ('production' !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [attrs, klass, events, domProps, style, transition];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    'production' !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) {
      return;
    }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show

  /*  */

  // Provides transition support for a single element/component.
  // supports transition mode (out-in / in-out)

};var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render(h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return;
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) {
      return c.tag || isAsyncPlaceholder(c);
    });
    /* istanbul ignore if */
    if (!children.length) {
      return;
    }

    // warn multiple elements
    if ('production' !== 'production' && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode;

    // warn invalid mode
    if ('production' !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) {
      return d.name === 'show';
    })) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) &&
    // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }
        var delayedLeave;
        var performLeave = function () {
          delayedLeave();
        };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }

  /*  */

  // Provides transition support for list items.
  // supports move transitions using the FLIP technique.

  // Because the vdom's children update algorithm is "unstable" - i.e.
  // it doesn't guarantee the relative positioning of removed elements,
  // we force transition-group to update its children into two passes:
  // in the first pass, we remove all nodes that need to be removed,
  // triggering their leaving transition; in the second pass, we insert/move
  // into the final desired state. This way in the second pass removed
  // nodes will remain where they should be.

};var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;
        } else if ('production' !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },

  beforeUpdate: function beforeUpdate() {
    // force removing pass
    this.__patch__(this._vnode, this.kept, false, // hydrating
    true // removeOnly (!important, avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove;
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup

  /*  */

  // install platform specific utils
};Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if ('production' !== 'production' && 'production' !== 'test' && isChrome) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }
    if ('production' !== 'production' && 'production' !== 'test' && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return;
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while (match = tagRE.exec(text)) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}

/*  */

function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if ('production' !== 'production' && staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData(el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }
  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }
  return data;
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData

  /*  */

};function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    if ('production' !== 'production') {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn("style=\"" + staticStyle + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style="{{ val }}">, use <div :style="val">.');
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1(el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + el.styleBinding + "),";
  }
  return data;
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1

  /*  */

};var decoder;

var he = {
  decode: function decode(html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent;
  }

  /*  */

};var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr');

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');

/**
 * Not type-checking this file because it's mostly vendor code.
 */

/*!
 * HTML Parser By John Resig (ejohn.org)
 * Modified by Juriy "kangax" Zaytsev
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
// but for Vue templates we can enforce a simple charset
var ncname = '[a-zA-Z_][\\w\\-\\.]*';
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being pased as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

var IS_REGEX_CAPTURING_BROKEN = false;
'x'.replace(/x(.)?/g, function (m, g) {
  IS_REGEX_CAPTURING_BROKEN = g === '';
});

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t'
};
var encodedAttr = /&(?:lt|gt|quot|amp);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd));
            }
            advance(commentEnd + 3);
            continue;
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(lastTag, html)) {
            advance(1);
          }
          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) {
            break;
          }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
        advance(textEnd);
      }

      if (textEnd < 0) {
        text = html;
        html = '';
      }

      if (options.chars && text) {
        options.chars(text);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if ('production' !== 'production' && !stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"");
      }
      break;
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
        advance(attr[0].length);
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
        if (args[3] === '') {
          delete args[3];
        }
        if (args[4] === '') {
          delete args[4];
        }
        if (args[5] === '') {
          delete args[5];
        }
      }
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) {
      start = index;
    }
    if (end == null) {
      end = index;
    }

    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
    }

    // Find the closest opened tag of the same type
    if (tagName) {
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ('production' !== 'production' && (i > pos || !tagName) && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.");
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([^]*?)\s+(?:in|of)\s+([^]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;

var argRE = /:(.*)$/;
var bindRE = /^:|^v-bind:/;
var modifierRE = /\.[^.]+/g;

var decodeHTMLCached = cached(he.decode);

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    parent: parent,
    children: []
  };
}

/**
 * Convert HTML string to AST.
 */
function parse(template, options) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg) {
    if (!warned) {
      warned = true;
      warn$2(msg);
    }
  }

  function closeElement(element) {
    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    start: function start(tag, attrs, unary) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        'production' !== 'production' && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.');
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
        // element-scope stuff
        processElement(element, options);
      }

      function checkRootConstraints(el) {
        if ('production' !== 'production') {
          if (el.tag === 'slot' || el.tag === 'template') {
            warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.');
          }
          if (el.attrsMap.hasOwnProperty('v-for')) {
            warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');
          }
        }
      }

      // tree management
      if (!root) {
        root = element;
        checkRootConstraints(root);
      } else if (!stack.length) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          checkRootConstraints(element);
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          });
        } else if ('production' !== 'production') {
          warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.");
        }
      }
      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent);
        } else if (element.slotScope) {
          // scoped slot
          currentParent.plain = false;
          var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        } else {
          currentParent.children.push(element);
          element.parent = currentParent;
        }
      }
      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end() {
      // remove trailing whitespace
      var element = stack[stack.length - 1];
      var lastNode = element.children[element.children.length - 1];
      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
        element.children.pop();
      }
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      closeElement(element);
    },

    chars: function chars(text) {
      if (!currentParent) {
        if ('production' !== 'production') {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.');
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.");
          }
        }
        return;
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }
      var children = currentParent.children;
      text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
      // only preserve whitespace if its not right after a starting tag
      : preserveWhitespace && children.length ? ' ' : '';
      if (text) {
        var res;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          children.push({
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          });
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          children.push({
            type: 3,
            text: text
          });
        }
      }
    },
    comment: function comment(text) {
      currentParent.children.push({
        type: 3,
        text: text,
        isComment: true
      });
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var l = el.attrsList.length;
  if (l) {
    var attrs = el.attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      attrs[i] = {
        name: el.attrsList[i].name,
        value: JSON.stringify(el.attrsList[i].value)
      };
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = !element.key && !element.attrsList.length;

  processRef(element);
  processSlot(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    if ('production' !== 'production' && el.tag === 'template') {
      warn$2("<template> cannot be keyed. Place the key on real elements instead.");
    }
    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;
  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else if ('production' !== 'production') {
      warn$2("Invalid v-for expression: " + exp);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) {
    return;
  }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '');
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if ('production' !== 'production') {
    warn$2("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.");
  }
}

function findPrevElement(children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if ('production' !== 'production' && children[i].text !== ' ') {
        warn$2("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.");
      }
      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

function processSlot(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if ('production' !== 'production' && el.key) {
      warn$2("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.");
    }
  } else {
    var slotScope;
    if (el.tag === 'template') {
      slotScope = getAndRemoveAttr(el, 'scope');
      /* istanbul ignore if */
      if ('production' !== 'production' && slotScope) {
        warn$2("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", true);
      }
      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
    } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
      /* istanbul ignore if */
      if ('production' !== 'production' && el.attrsMap['v-for']) {
        warn$2("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", true);
      }
      el.slotScope = slotScope;
    }
    var slotTarget = getBindingAttr(el, 'slot');
    if (slotTarget) {
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
      // preserve slot as an attribute for native shadow DOM compat
      // only for non-scoped slots.
      if (el.tag !== 'template' && !el.slotScope) {
        addAttr(el, 'slot', slotTarget);
      }
    }
  }
}

function processComponent(el) {
  var binding;
  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, isProp;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name);
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isProp = false;
        if (modifiers) {
          if (modifiers.prop) {
            isProp = true;
            name = camelize(name);
            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }
          if (modifiers.camel) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            addHandler(el, "update:" + camelize(name), genAssignmentCode(value, "$event"));
          }
        }
        if (isProp || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value);
        } else {
          addAttr(el, name, value);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        addHandler(el, name, value, modifiers, false, warn$2);
      } else {
        // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
        }
        addDirective(el, name, rawName, value, arg, modifiers);
        if ('production' !== 'production' && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if ('production' !== 'production') {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.');
        }
      }
      addAttr(el, name, JSON.stringify(value));
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true');
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true;
    }
    parent = parent.parent;
  }
  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if ('production' !== 'production' && map[attrs[i].name] && !isIE && !isEdge) {
      warn$2('duplicate attribute: ' + attrs[i].name);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map;
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug(attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.");
    }
    _el = _el.parent;
  }
}

/*  */

/**
 * Expand input[v-model] with dyanmic type bindings into v-if-else chains
 * Turn this:
 *   <input v-model="data[type]" :type="type">
 * into this:
 *   <input v-if="type === 'checkbox'" type="checkbox" v-model="data[type]">
 *   <input v-else-if="type === 'radio'" type="radio" v-model="data[type]">
 *   <input v-else :type="type" v-model="data[type]">
 */

function preTransformNode(el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return;
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + map['v-bind'] + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? "&&(" + ifCondition + ")" : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0;
    }
  }
}

function cloneASTElement(el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent);
}

var model$2 = {
  preTransformNode: preTransformNode
};

var modules$1 = [klass$1, style$1, model$2];

/*  */

function text(el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', "_s(" + dir.value + ")");
  }
}

/*  */

function html(el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', "_s(" + dir.value + ")");
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html

  /*  */

};var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize(root, options) {
  if (!root) {
    return;
  }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));
}

function markStatic$1(node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }
  if (node.type === 3) {
    // text
    return true;
  }
  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node.if && !node.for && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false;
    }
    if (node.for) {
      return true;
    }
  }
  return false;
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  esc: 'Escape',
  tab: 'Tab',
  enter: 'Enter',
  space: ' ',
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  'delete': ['Backspace', 'Delete']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative, warn) {
  var res = isNative ? 'nativeOn:{' : 'on:{';
  for (var name in events) {
    res += "\"" + name + "\":" + genHandler(name, events[name]) + ",";
  }
  return res.slice(0, -1) + '}';
}

function genHandler(name, handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(name, handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }
    /* istanbul ignore if */
    return "function($event){" + handler.value + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : handler.value;
    /* istanbul ignore if */
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return "if(!('button' in $event)&&" + keys.map(genFilterCode).join('&&') + ")return null;";
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}

/*  */

function on(el, dir) {
  if ('production' !== 'production' && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}

/*  */

function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop

  /*  */

};var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) {
    return !isReservedTag(el.tag);
  };
  this.onceId = 0;
  this.staticRenderFns = [];
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data = el.plain ? undefined : genData$2(el, state);

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code;
  }
}

// hoist static sub-trees out
function genStatic(el, state) {
  el.staticProcessed = true;
  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
}

// v-once
function genOnce(el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }
      parent = parent.parent;
    }
    if (!key) {
      'production' !== 'production' && state.warn("v-once can only be used inside v-for that is keyed. ");
      return genElement(el, state);
    }
    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if ('production' !== 'production' && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData$2(el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) {
    data += dirs + ',';
  }

  // key
  if (el.key) {
    data += "key:" + el.key + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:{" + genProps(el.attrs) + "},";
  }
  // DOM props
  if (el.props) {
    data += "domProps:{" + genProps(el.props) + "},";
  }
  // event handlers
  if (el.events) {
    data += genHandlers(el.events, false, state.warn) + ",";
  }
  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true, state.warn) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += genScopedSlots(el.scopedSlots, state) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;
  if (!dirs) {
    return;
  }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:\"" + dir.arg + "\"" : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];
  if ('production' !== 'production' && (el.children.length !== 1 || ast.type !== 1)) {
    state.warn('Inline-template components must have exactly one child element.');
  }
  if (ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(slots, state) {
  return "scopedSlots:_u([" + Object.keys(slots).map(function (key) {
    return genScopedSlot(key, slots[key], state);
  }).join(',') + "])";
}

function genScopedSlot(key, el, state) {
  if (el.for && !el.forProcessed) {
    return genForScopedSlot(key, el, state);
  }
  var fn = "function(" + String(el.slotScope) + "){" + "return " + (el.tag === 'template' ? el.if ? el.if + "?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}";
  return "{key:" + key + ",fn:" + fn + "}";
}

function genForScopedSlot(key, el, state) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';
  el.forProcessed = true; // avoid recursion
  return "_l((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + genScopedSlot(key, el, state) + '})';
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      return (altGenElement || genElement)(el$1, state);
    }
    var normalizationType = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType ? "," + normalizationType : '');
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType(children, maybeComponent) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue;
    }
    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }
    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }
  return res;
}

function needsNormalization(el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  }if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs && "{" + el.attrs.map(function (a) {
    return camelize(a.name) + ":" + a.value;
  }).join(',') + "}";
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')';
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData$2(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var res = '';
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    /* istanbul ignore if */
    {
      res += "\"" + prop.name + "\":" + transformSpecialNewlines(prop.value) + ",";
    }
  }
  return res.slice(0, -1);
}

// #3895, #4268
function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
}

/*  */

// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors(ast) {
  var errors = [];
  if (ast) {
    checkNode(ast, errors);
  }
  return errors;
}

function checkNode(node, errors) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", errors);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", errors);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", errors);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], errors);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, errors);
  }
}

function checkEvent(exp, text, errors) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    errors.push("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
  }
  checkExpression(exp, text, errors);
}

function checkFor(node, text, errors) {
  checkExpression(node.for || '', text, errors);
  checkIdentifier(node.alias, 'v-for alias', text, errors);
  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
}

function checkIdentifier(ident, type, text, errors) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      errors.push("invalid " + type + " \"" + ident + "\" in expression: " + text.trim());
    }
  }
}

function checkExpression(exp, text, errors) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      errors.push("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim());
    } else {
      errors.push("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n");
    }
  }
}

/*  */

function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);

  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    if ('production' !== 'production') {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    }

    // check cache
    var key = options.delimiters ? String(options.delimiters) + template : template;
    if (cache[key]) {
      return cache[key];
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    if ('production' !== 'production') {
      if (compiled.errors && compiled.errors.length) {
        warn$$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
          return "- " + e;
        }).join('\n') + '\n', vm);
      }
      if (compiled.tips && compiled.tips.length) {
        compiled.tips.forEach(function (msg) {
          return tip(msg, vm);
        });
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    if ('production' !== 'production') {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;

          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }

    return cache[key] = res;
  };
}

/*  */

function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];
      finalOptions.warn = function (msg, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        // merge custom modules
        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      var compiled = baseCompile(template, finalOptions);
      if ('production' !== 'production') {
        errors.push.apply(errors, detectErrors(compiled.ast));
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode(href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0;
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML;
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (el, hydrating) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    'production' !== 'production' && warn("Do not mount Vue to <html> or <body> - mount to normal elements instead.");
    return this;
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if ('production' !== 'production' && !template) {
            warn("Template element not found or is empty: " + options.template, this);
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if ('production' !== 'production') {
          warn('invalid template option:' + template, this);
        }
        return this;
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if ('production' !== 'production' && config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if ('production' !== 'production' && config.performance && mark) {
        mark('compile end');
        measure("vue " + this._name + " compile", 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating);
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML(el) {
  if (el.outerHTML) {
    return el.outerHTML;
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML;
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;
},{}],"tuDi":[function(require,module,exports) {

},{}],"MpYs":[function(require,module,exports) {
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],"U72i":[function(require,module,exports) {
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],"lytE":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_to-integer":"MpYs","./_defined":"U72i"}],"1kq3":[function(require,module,exports) {
module.exports = true;

},{}],"i1Q6":[function(require,module,exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],"zKeE":[function(require,module,exports) {
var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],"g31e":[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],"3zRh":[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":"g31e"}],"BxvP":[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"zotD":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":"BxvP"}],"wLcK":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],"6MLN":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":"wLcK"}],"9kxq":[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_is-object":"BxvP","./_global":"i1Q6"}],"R6c1":[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":"6MLN","./_fails":"wLcK","./_dom-create":"9kxq"}],"EKwp":[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":"BxvP"}],"Gfzd":[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":"zotD","./_ie8-dom-define":"R6c1","./_to-primitive":"EKwp","./_descriptors":"6MLN"}],"0WCH":[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],"akPY":[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_object-dp":"Gfzd","./_property-desc":"0WCH","./_descriptors":"6MLN"}],"yS17":[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],"vSO4":[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var has = require('./_has');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":"i1Q6","./_core":"zKeE","./_ctx":"3zRh","./_hide":"akPY","./_has":"yS17"}],"gojl":[function(require,module,exports) {
module.exports = require('./_hide');

},{"./_hide":"akPY"}],"dhak":[function(require,module,exports) {
module.exports = {};

},{}],"ShN9":[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],"E5Ce":[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":"ShN9"}],"Wyka":[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_iobject":"E5Ce","./_defined":"U72i"}],"S7IM":[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":"MpYs"}],"Zwq5":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":"MpYs"}],"LNnS":[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-iobject":"Wyka","./_to-length":"S7IM","./_to-absolute-index":"Zwq5"}],"NB7d":[function(require,module,exports) {

var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":"zKeE","./_global":"i1Q6","./_library":"1kq3"}],"X6va":[function(require,module,exports) {
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],"/wuY":[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":"NB7d","./_uid":"X6va"}],"B9Lq":[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_has":"yS17","./_to-iobject":"Wyka","./_array-includes":"LNnS","./_shared-key":"/wuY"}],"KxjL":[function(require,module,exports) {
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],"knrM":[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":"B9Lq","./_enum-bug-keys":"KxjL"}],"gjjs":[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_object-dp":"Gfzd","./_an-object":"zotD","./_object-keys":"knrM","./_descriptors":"6MLN"}],"ebIA":[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":"i1Q6"}],"TNJq":[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":"zotD","./_object-dps":"gjjs","./_enum-bug-keys":"KxjL","./_shared-key":"/wuY","./_dom-create":"9kxq","./_html":"ebIA"}],"Ug9I":[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_shared":"NB7d","./_uid":"X6va","./_global":"i1Q6"}],"11Ut":[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_object-dp":"Gfzd","./_has":"yS17","./_wks":"Ug9I"}],"b7Q2":[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":"TNJq","./_property-desc":"0WCH","./_set-to-string-tag":"11Ut","./_hide":"akPY","./_wks":"Ug9I"}],"mbLO":[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":"U72i"}],"HHE0":[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":"yS17","./_to-object":"mbLO","./_shared-key":"/wuY"}],"uRfg":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_library":"1kq3","./_export":"vSO4","./_redefine":"gojl","./_hide":"akPY","./_iterators":"dhak","./_iter-create":"b7Q2","./_set-to-string-tag":"11Ut","./_object-gpo":"HHE0","./_wks":"Ug9I"}],"i+u+":[function(require,module,exports) {
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_string-at":"lytE","./_iter-define":"uRfg"}],"ID6i":[function(require,module,exports) {
module.exports = function () { /* empty */ };

},{}],"xwD+":[function(require,module,exports) {
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],"OYXR":[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":"ID6i","./_iter-step":"xwD+","./_iterators":"dhak","./_to-iobject":"Wyka","./_iter-define":"uRfg"}],"COf8":[function(require,module,exports) {

require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

},{"./es6.array.iterator":"OYXR","./_global":"i1Q6","./_hide":"akPY","./_iterators":"dhak","./_wks":"Ug9I"}],"ZHvQ":[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":"ShN9","./_wks":"Ug9I"}],"KUik":[function(require,module,exports) {
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],"hEIm":[function(require,module,exports) {
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":"zotD"}],"af0K":[function(require,module,exports) {
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":"dhak","./_wks":"Ug9I"}],"7AqT":[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":"ZHvQ","./_wks":"Ug9I","./_iterators":"dhak","./_core":"zKeE"}],"ozpD":[function(require,module,exports) {
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_ctx":"3zRh","./_iter-call":"hEIm","./_is-array-iter":"af0K","./_an-object":"zotD","./_to-length":"S7IM","./core.get-iterator-method":"7AqT"}],"B1ls":[function(require,module,exports) {
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_an-object":"zotD","./_a-function":"g31e","./_wks":"Ug9I"}],"o4G5":[function(require,module,exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],"uzcO":[function(require,module,exports) {


var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_ctx":"3zRh","./_invoke":"o4G5","./_html":"ebIA","./_dom-create":"9kxq","./_global":"i1Q6","./_cof":"ShN9"}],"H109":[function(require,module,exports) {


var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_global":"i1Q6","./_task":"uzcO","./_cof":"ShN9"}],"AIlg":[function(require,module,exports) {
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":"g31e"}],"kX4D":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],"/cCi":[function(require,module,exports) {

var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":"i1Q6"}],"5Czc":[function(require,module,exports) {
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":"zotD","./_is-object":"BxvP","./_new-promise-capability":"AIlg"}],"O6kh":[function(require,module,exports) {
var hide = require('./_hide');
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

},{"./_hide":"akPY"}],"FGzK":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var core = require('./_core');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_global":"i1Q6","./_core":"zKeE","./_object-dp":"Gfzd","./_descriptors":"6MLN","./_wks":"Ug9I"}],"Lli7":[function(require,module,exports) {
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":"Ug9I"}],"9kJF":[function(require,module,exports) {


'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_library":"1kq3","./_global":"i1Q6","./_ctx":"3zRh","./_classof":"ZHvQ","./_export":"vSO4","./_is-object":"BxvP","./_a-function":"g31e","./_an-instance":"KUik","./_for-of":"ozpD","./_species-constructor":"B1ls","./_task":"uzcO","./_microtask":"H109","./_new-promise-capability":"AIlg","./_perform":"kX4D","./_user-agent":"/cCi","./_promise-resolve":"5Czc","./_wks":"Ug9I","./_redefine-all":"O6kh","./_set-to-string-tag":"11Ut","./_set-species":"FGzK","./_core":"zKeE","./_iter-detect":"Lli7"}],"zaru":[function(require,module,exports) {

// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_export":"vSO4","./_core":"zKeE","./_global":"i1Q6","./_species-constructor":"B1ls","./_promise-resolve":"5Czc"}],"+CEt":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":"vSO4","./_new-promise-capability":"AIlg","./_perform":"kX4D"}],"9u1Q":[function(require,module,exports) {
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
require('../modules/es7.promise.finally');
require('../modules/es7.promise.try');
module.exports = require('../modules/_core').Promise;

},{"../modules/es6.object.to-string":"tuDi","../modules/es6.string.iterator":"i+u+","../modules/web.dom.iterable":"COf8","../modules/es6.promise":"9kJF","../modules/es7.promise.finally":"zaru","../modules/es7.promise.try":"+CEt","../modules/_core":"zKeE"}],"L3Vt":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":"9u1Q"}],"yh9p":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"JgNJ":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"REa7":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"dskh":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"yh9p","ieee754":"JgNJ","isarray":"REa7","buffer":"dskh"}],"/5ie":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
  name: 'Editor',
  data: function () {
    return {
      srcUrl: null,
      originalImage: null, // not-resized original image
      originalOverlayImage: null, // no-resized overlay image
      overlayProperties: {
        x: 0,
        y: 0,
        w: 0,
        h: 0
      },
      srcImage: null,
      imgNode: null,
      // TS related values
      net: null,
      posenetImage: null,
      modelOutputs: null,
      POINT_COLOR: 'red',
      LINE_WIDTH: 2
    };
  },
  mounted() {
    this.loadPosenet();
  },
  methods: {
    fileChanged: function (event) {
      if (!event.target.files.length) return;
      let file = event.target.files[0];
      let filereader = new FileReader();
      filereader.onload = function () {
        this.imgLoad(filereader.result, this.net);

        this.genki();
      }.bind(this);
      filereader.readAsDataURL(file);
    },
    loadImage: function () {
      Jimp.read(this.srcUrl).then(function (lenna) {
        this.originalImage = lenna.clone();
        this.srcImage = lenna;
        lenna.resize(350, 234).getBase64(Jimp.MIME_PNG, function (err, src) {
          this.imgNode.setAttribute('src', src);

          err && console.log(err);
        }.bind(this));
      }.bind(this)).catch(function (err) {
        console.error(err);
      });
    },
    genki: function () {
      let url = document.getElementById('parts_genkidama');
      this.overlay(url.src, 0.8);
      // this.overlayProperties.w = 50
      // this.overlayProperties.h = 50
    },
    overlay: function (url, opacity = 1) {
      Jimp.read(url).then(function (overlay) {
        this.originalOverlayImage = overlay.clone();
        this.srcImage = this.originalImage.clone();
        overlay.resize(this.overlayProperties.w, this.overlayProperties.h);
        overlay.opacity(opacity);

        this.srcImage.composite(overlay, this.overlayProperties.x - this.overlayProperties.w / 2, this.overlayProperties.y - this.overlayProperties.h / 2).getBase64(Jimp.MIME_PNG, function (err, src) {
          this.imgNode.setAttribute('src', src);

          err && console.log(err);
        }.bind(this));
      }.bind(this)).catch(function (err) {
        console.error(err);
      });
    },
    upload: function () {
      let original = this.originalImage.clone();
      let overlay = this.originalOverlayImage.clone();
      original.composite(overlay, 0, 0).getBase64(Jimp.MIME_PNG, function (err, src) {
        let params = new URLSearchParams();
        params.append('img', src);
        this.$http.post('/api/file/save', params).then(res => {
          console.log('upload completed');
        }).catch(error => {
          console.log('error');
        });
      }.bind(this));
    },
    loadPosenet: async function () {
      console.log('loading posenet start');
      this.net = await this.$posenet.load();
      console.log('loading posenet end');
    },
    imgLoad: async function (src, net) {
      // Purge prevoius variables and free up GPU memory
      this.disposeModelOutputs();

      // Load an example image
      this.posenetImage = await this.loadImageFromLocal(src);

      // Creates a tensor from an image
      const input = this.$tf.fromPixels(this.posenetImage);

      // Stores the raw model outputs from both single- and multi-pose results can
      // be decoded.
      // Normally you would call estimateSinglePose or estimateMultiplePoses,
      // but by calling this method we can previous the outputs of the model and
      // visualize them.
      this.modelOutputs = await this.net.predictForMultiPose(input, 16);

      // Process the model outputs to convert into poses
      await this.decodeSinglePoseAndDrawResults();

      // setStatusText('');
      // document.getElementById('results').style.display = 'block';
      input.dispose();
    },
    /**
     * Purges variables and frees up GPU memory using dispose() method
     */
    disposeModelOutputs: function () {
      if (this.modelOutputs) {
        this.modelOutputs.heatmapScores.dispose();
        this.modelOutputs.offsets.dispose();
        this.modelOutputs.displacementFwd.dispose();
        this.modelOutputs.displacementBwd.dispose();
      }
    },
    loadImageFromLocal: async function (src) {
      const image = new Image();
      const promise = new _promise2.default((resolve, reject) => {
        image.crossOrigin = '';
        image.onload = () => {
          resolve(image);
        };
      });
      image.src = src;
      return promise;
    },
    decodeSinglePoseAndDrawResults: async function () {
      if (!this.modelOutputs) {
        return;
      }

      const pose = await this.$posenet.decodeSinglePose(this.modelOutputs.heatmapScores, this.modelOutputs.offsets, 16);
      this.drawSinglePoseResults(pose);
    },
    /**
     * Draw the results from the single-pose estimation on to a canvas
     */
    drawSinglePoseResults: function (pose) {
      const canvas = document.querySelector('#single canvas');
      this.drawResults(canvas, [pose], 0.2, 0.2);

      // const {part, showHeatmap, showOffsets} = guiState.visualizeOutputs;
      const part = 0;
      const showHeatmap = 0;
      const showoffsets = 0;
      // displacements not used for single pose decoding
      const showDisplacements = false;
      const partId = +part;

      // visualizeOutputs(
      //   partId, showHeatmap, showOffsets, showDisplacements,
      //   canvas.getContext('2d'));
    },
    drawResults: function (canvas, poses, minPartConfidence, minPoseConfidence) {
      this.renderImageToCanvas(this.posenetImage, [this.posenetImage.width, this.posenetImage.height], canvas);
      poses.forEach(pose => {
        if (pose.score >= minPoseConfidence) {
          this.drawKeypoints(pose.keypoints, minPartConfidence, canvas.getContext('2d'));
          this.drawSkeleton(pose.keypoints, minPartConfidence, canvas.getContext('2d'));

          // size is 3,4 ears distance
          this.overlayProperties.w = Math.abs(pose.keypoints[3].position.x - pose.keypoints[4].position.x);
          this.overlayProperties.h = this.overlayProperties.w;

          // 9 or 10
          // console.log('x' + pose.keypoints[10].position.x);
          if (pose.keypoints[10].position.y < pose.keypoints[9].position.y) {
            this.overlayProperties.x = pose.keypoints[10].position.x;
            this.overlayProperties.y = pose.keypoints[10].position.y - this.overlayProperties.w;
          } else {
            this.overlayProperties.x = pose.keypoints[9].position.x;
            this.overlayProperties.y = pose.keypoints[9].position.y - this.overlayProperties.w;
          }
        }
      });

      let url = canvas.toDataURL().replace(/^data:image\/\w+;base64,/, "");
      let buffer = new Buffer(url, 'base64');

      // https://github.com/oliver-moran/jimp/issues/231
      Jimp.read(buffer.buffer).then(function (lenna) {
        console.log('w:' + lenna.bitmap.width + ' h:' + lenna.bitmap.height);
        this.originalImage = lenna.clone();
        this.srcImage = lenna;
        lenna.getBase64(Jimp.MIME_PNG, function (err, src) {
          this.imgNode = document.getElementById('result_img');
          this.imgNode.setAttribute('src', src);

          err && console.log(err);
        }.bind(this));
      }.bind(this)).catch(function (err) {
        console.error(err);
      });
    },
    // ------------------------------------------------------------
    // utility functions
    // ------------------------------------------------------------
    renderImageToCanvas: function (image, size, canvas) {
      canvas.width = size[0];
      canvas.height = size[1];
      const ctx = canvas.getContext('2d');
      ctx.drawImage(image, 0, 0);
    },

    /**
     * Draws a pose skeleton by looking up all adjacent keypoints/joints
     */
    drawSkeleton: function (keypoints, minConfidence, ctx, scale = 1) {
      const adjacentKeyPoints = this.$posenet.getAdjacentKeyPoints(keypoints, minConfidence);
      adjacentKeyPoints.forEach(keypoints => {
        this.drawSegment(this.toTuple(keypoints[0].position), this.toTuple(keypoints[1].position), this.POINT_COLOR, scale, ctx);
      });
    },
    /**
     * Draw pose keypoints onto a canvas
     */
    drawKeypoints: function (keypoints, minConfidence, ctx, scale = 1) {
      for (let i = 0; i < keypoints.length; i++) {
        const keypoint = keypoints[i];

        if (keypoint.score < minConfidence) {
          continue;
        }
        const { y, x } = keypoint.position;
        this.drawPoint(ctx, y * scale, x * scale, 3, this.POINT_COLOR);
      }
    },
    toTuple: function ({ y, x }) {
      return [y, x];
    },
    drawPoint: function (ctx, y, x, r, color) {
      ctx.beginPath();
      ctx.arc(x, y, r, 0, 2 * Math.PI);
      ctx.fillStyle = color;
      ctx.fill();
    },
    /**
     * Draws a line on a canvas, i.e. a joint
     */
    drawSegment: function ([ay, ax], [by, bx], color, scale, ctx) {
      ctx.beginPath();
      ctx.moveTo(ax * scale, ay * scale);
      ctx.lineTo(bx * scale, by * scale);
      ctx.lineWidth = this.LINE_WIDTH;
      ctx.strokeStyle = color;
      ctx.stroke();
    }
  }
};
        var $b64e16 = exports.default || module.exports;
      
      if (typeof $b64e16 === 'function') {
        $b64e16 = $b64e16.options;
      }
    
        /* template */
        Object.assign($b64e16, (function () {
          var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"container"},[_vm._m(0),_vm._v(" "),_vm._m(1),_vm._v(" "),_c('div',[_c('button',{on:{"click":_vm.genki}},[_vm._v("GENKI")])]),_vm._v(" "),_c('div',[_vm._v("\n    x: "),_c('input',{directives:[{name:"model",rawName:"v-model.number",value:(_vm.overlayProperties.x),expression:"overlayProperties.x",modifiers:{"number":true}}],attrs:{"type":"number"},domProps:{"value":(_vm.overlayProperties.x)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.overlayProperties, "x", _vm._n($event.target.value))},"blur":function($event){_vm.$forceUpdate()}}}),_vm._v("\n    y: "),_c('input',{directives:[{name:"model",rawName:"v-model.number",value:(_vm.overlayProperties.y),expression:"overlayProperties.y",modifiers:{"number":true}}],attrs:{"type":"number"},domProps:{"value":(_vm.overlayProperties.y)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.overlayProperties, "y", _vm._n($event.target.value))},"blur":function($event){_vm.$forceUpdate()}}})]),_vm._v(" "),_c('input',{attrs:{"accept":"image/*","id":"input_img","type":"file"},on:{"change":_vm.fileChanged}})])}
var staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"none"},attrs:{"id":"single"}},[_c('canvas')])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"result"}},[_c('img',{attrs:{"id":"result_img"}})])}]

          return {
            render: render,
            staticRenderFns: staticRenderFns,
            _compiled: true,
            _scopeId: "data-v-b64e16",
            functional: undefined
          };
        })());
      
},{"babel-runtime/core-js/promise":"L3Vt","buffer":"dskh"}],"1BYO":[function(require,module,exports) {

        var $3b41fd = exports.default || module.exports;
      
      if (typeof $3b41fd === 'function') {
        $3b41fd = $3b41fd.options;
      }
    
        /* template */
        Object.assign($3b41fd, (function () {
          var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}
var staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('p',[_vm._v("Hello World")])])}]

          return {
            render: render,
            staticRenderFns: staticRenderFns,
            _compiled: true,
            _scopeId: null,
            functional: undefined
          };
        })());
      
},{}],"pBGv":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};
},{}],"b+9/":[function(require,module,exports) {
var process = require("process");
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var __dirname = "/Users/aki/workspace/makitosan/genkida/node_modules/jimp/browser/lib";
var define;
/*
Jimp v0.2.27
https://github.com/oliver-moran/jimp
Ported for the Web by Phil Seaton

The MIT License (MIT)

Copyright (c) 2014 Oliver Moran

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var window = window || self;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
};(function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
      }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
        var n = t[o][1][e];return s(n ? n : e);
      }, l, l.exports, e, t, n, r);
    }return n[o].exports;
  }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
    s(r[o]);
  }return s;
})({ 1: [function (require, module, exports) {
    (function (process, global, Buffer, __argument0, __argument1, __argument2, __argument3, __dirname) {
      function log(t) {
        clear(), process.stdout.write(t), chars = t.length;
      }function clear() {
        for (; chars-- > 0;) {
          process.stdout.write("\b");
        }
      }function noop() {}function isNodePattern(t) {
        if ("undefined" == typeof t) return !1;if ("function" != typeof t) throw new Error("Callback must be a function");return !0;
      }function throwError(t, i) {
        if ("string" == typeof t && (t = new Error(t)), "function" == typeof i) return i.call(this, t);throw t;
      }function Jimp() {
        if ("number" == typeof arguments[0] && "number" == typeof arguments[1]) {
          var t = arguments[0],
              i = arguments[1],
              a = arguments[2];if ("number" == typeof arguments[2]) {
            this._background = arguments[2];var a = arguments[3];
          }if ("undefined" == typeof a && (a = noop), "function" != typeof a) return throwError.call(this, "cb must be a function", a);this.bitmap = { data: new Buffer(t * i * 4), width: t, height: i };for (var r = 0; r < this.bitmap.data.length; r += 4) {
            this.bitmap.data.writeUInt32BE(this._background, r);
          }a.call(this, null, this);
        } else if ("object" == _typeof(arguments[0]) && arguments[0].constructor == Jimp) {
          var e = arguments[0],
              a = arguments[1];if ("undefined" == typeof a && (a = noop), "function" != typeof a) return throwError.call(this, "cb must be a function", a);var n = new Buffer(e.bitmap.data.length);e.scan(0, 0, e.bitmap.width, e.bitmap.height, function (t, i, a) {
            var r = e.bitmap.data.readUInt32BE(a, !0);n.writeUInt32BE(r, a, !0);
          }), this.bitmap = { data: n, width: e.bitmap.width, height: e.bitmap.height }, this._quality = e._quality, this._deflateLevel = e._deflateLevel, this._deflateStrategy = e._deflateStrategy, this._filterType = e._filterType, this._rgba = e._rgba, this._background = e._background, a.call(this, null, this);
        } else if (URLRegEx({ exact: !0 }).test(arguments[0])) {
          var h = arguments[0],
              a = arguments[1];if ("undefined" == typeof a && (a = noop), "function" != typeof a) return throwError.call(this, "cb must be a function", a);var o = this;Request(h, function (t, i, r) {
            if (t) return throwError.call(o, t, a);if ("object" != (typeof r === "undefined" ? "undefined" : _typeof(r)) || !Buffer.isBuffer(r)) return throwError.call(o, "Could not load Buffer from URL <" + h + "> (HTTP: " + i.statusCode + ")", a);var e = getMIMEFromBuffer(r);return "string" != typeof e ? throwError.call(o, "Could not find MIME for Buffer <" + h + "> (HTTP: " + i.statusCode + ")", a) : void parseBitmap.call(o, r, e, a);
          });
        } else if ("string" == typeof arguments[0]) {
          var s = arguments[0],
              a = arguments[1];if ("undefined" == typeof a && (a = noop), "function" != typeof a) return throwError.call(this, "cb must be a function", a);var o = this;getMIMEFromPath(s, function (t, i) {
            FS.readFile(s, function (t, r) {
              return t ? throwError.call(o, t, a) : void parseBitmap.call(o, r, i, a);
            });
          });
        } else {
          if ("object" != _typeof(arguments[0])) return throwError.call(this, "No matching constructor overloading was found. Please see the docs for how to call the Jimp constructor.", a);var p = arguments[0],
              m = getMIMEFromBuffer(p),
              a = arguments[1];if (!Buffer.isBuffer(p)) return throwError.call(this, "data must be a Buffer", a);if ("string" != typeof m) return throwError.call(this, "mime must be a string", a);if ("function" != typeof a) return throwError.call(this, "cb must be a function", a);parseBitmap.call(this, p, m, a);
        }
      }function getMIMEFromBuffer(t, i) {
        var a = FileType(t);return a ? a.mime : i ? MIME.lookup(i) : null;
      }function getMIMEFromPath(t, i) {
        ReadChunk(t, 0, 262, function (t, a) {
          if (!t) {
            var r = FileType(a);return i && i(null, r && r.mime || "");
          }i(null, "");
        });
      }function parseBitmap(t, i, a) {
        var r = this;switch (this._originalMime = i, i.toLowerCase()) {case Jimp.MIME_PNG:
            var e = new PNG();e.parse(t, function (t, i) {
              return t ? throwError.call(r, t, a) : (r.bitmap = { data: new Buffer(i.data), width: i.width, height: i.height }, a.call(r, null, r));
            });break;case Jimp.MIME_JPEG:
            try {
              return this.bitmap = JPEG.decode(t), exifRotate(this, t), a.call(this, null, this);
            } catch (t) {
              return a.call(this, t, this);
            }case Jimp.MIME_BMP:
            return this.bitmap = BMP.decode(t), a.call(this, null, this);default:
            return throwError.call(this, "Unsupported MIME type: " + i, a);}
      }function exifRotate(t, i) {
        var a;try {
          a = EXIFParser.create(i).parse();
        } catch (t) {
          return;
        }if (a && a.tags && a.tags.Orientation) switch (a.tags.Orientation) {case 1:
            break;case 2:
            t.mirror(!0, !1);break;case 3:
            t.rotate(180);break;case 4:
            t.mirror(!1, !0);break;case 5:
            t.mirror(!0, !1).rotate(270);break;case 6:
            t.rotate(90);break;case 7:
            t.mirror(!0, !1).rotate(90);break;case 8:
            t.rotate(270);}
      }function histogram() {
        var t = { r: new Array(256).fill(0), g: new Array(256).fill(0), b: new Array(256).fill(0) };return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (i, a, r) {
          t.r[this.bitmap.data[r + 0]]++, t.g[this.bitmap.data[r + 1]]++, t.b[this.bitmap.data[r + 2]]++;
        }), t;
      }function simpleRotate(t) {
        for (var i = Math.round(t / 90) % 4; i < 0;) {
          i += 4;
        }for (; i > 0;) {
          for (var a = new Buffer(this.bitmap.data.length), r = 0, e = 0; e < this.bitmap.width; e++) {
            for (var n = this.bitmap.height - 1; n >= 0; n--) {
              var h = this.bitmap.width * n + e << 2,
                  o = this.bitmap.data.readUInt32BE(h, !0);a.writeUInt32BE(o, r, !0), r += 4;
            }
          }this.bitmap.data = new Buffer(a);var s = this.bitmap.width;this.bitmap.width = this.bitmap.height, this.bitmap.height = s, i--;
        }
      }function advancedRotate(t, i) {
        function a(t, i) {
          return function (a, r) {
            return { x: a + t, y: r + i };
          };
        }var r,
            e,
            n = t % 360 * Math.PI / 180,
            h = Math.cos(n),
            o = Math.sin(n);if (1 == i || "string" == typeof i) {
          r = Math.round(Math.abs(this.bitmap.width * h) + Math.abs(this.bitmap.height * o)), e = Math.round(Math.abs(this.bitmap.width * o) + Math.abs(this.bitmap.height * h));var s = this.clone();this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, i, a) {
            this.bitmap.data.writeUInt32BE(this._background, a);
          });var p = Math.max(r, e, this.bitmap.width, this.bitmap.height);this.resize(p, p, i), this.blit(s, this.bitmap.width / 2 - s.bitmap.width / 2, this.bitmap.height / 2 - s.bitmap.height / 2);
        }for (var m = new Buffer(this.bitmap.data.length), u = a(-(this.bitmap.width / 2), -(this.bitmap.height / 2)), l = a(this.bitmap.width / 2, this.bitmap.height / 2), b = 0; b < this.bitmap.height; b++) {
          for (var f = 0; f < this.bitmap.width; f++) {
            var d = u(f, this.bitmap.height - b),
                c = l(h * d.x - o * d.y, h * d.y + o * d.x);if (c.x >= 0 && c.x < this.bitmap.width && c.y >= 0 && c.y < this.bitmap.height) {
              var g = (this.bitmap.width * (this.bitmap.height - c.y | 0) + c.x | 0) << 2,
                  w = this.bitmap.data.readUInt32BE(g, !0),
                  y = this.bitmap.width * b + f << 2;m.writeUInt32BE(w, y);
            } else {
              var y = this.bitmap.width * b + f << 2;m.writeUInt32BE(this._background, y);
            }
          }
        }if (this.bitmap.data = m, 1 == i || "string" == typeof i) {
          var f = this.bitmap.width / 2 - r / 2,
              b = this.bitmap.height / 2 - e / 2;this.crop(f, b, r, e);
        }
      }function compositeBitmapOverBackground(t) {
        return new Jimp(t.bitmap.width, t.bitmap.height, t._background).composite(t, 0, 0).bitmap;
      }function loadPages(t, i) {
        var a = i.map(function (i) {
          return Jimp.read(t + "/" + i);
        });return Promise.all(a);
      }function printText(t, i, a, r) {
        for (var e = 0; e < r.length; e++) {
          t.chars[r[e]] && (drawCharacter(this, t, i, a, t.chars[r[e]]), i += (t.kernings[r[e]] && t.kernings[r[e]][r[e + 1]] ? t.kernings[r[e]][r[e + 1]] : 0) + (t.chars[r[e]].xadvance || 0));
        }
      }function drawCharacter(t, i, a, r, e) {
        if (e.width > 0 && e.height > 0) {
          var n = i.pages[e.page].clone().crop(e.x, e.y, e.width, e.height);return t.composite(n, a + e.xoffset, r + e.yoffset);
        }return t;
      }function measureText(t, i) {
        for (var a = 0, r = 0; r < i.length; r++) {
          t.chars[i[r]] && (a += t.chars[i[r]].xoffset + (t.kernings[i[r]] && t.kernings[i[r]][i[r + 1]] ? t.kernings[i[r]][i[r + 1]] : 0) + (t.chars[i[r]].xadvance || 0));
        }return a;
      }var FS,
          PNG = require("pngjs").PNG,
          JPEG = require("jpeg-js"),
          BMP = require("bmp-js"),
          MIME = require("mime"),
          TinyColor = require("tinycolor2"),
          Resize = require("./resize.js"),
          Resize2 = require("./resize2.js"),
          StreamToBuffer = require("stream-to-buffer"),
          ReadChunk = require("read-chunk"),
          FileType = require("file-type"),
          PixelMatch = require("pixelmatch"),
          EXIFParser = require("exif-parser"),
          ImagePHash = require("./phash.js"),
          BigNumber = require("bignumber.js"),
          URLRegEx = require("url-regex"),
          BMFont = require("load-bmfont"),
          Path = require("path"),
          Request,
          Request,
          Promise = global.Promise || require("es6-promise").Promise,
          chars = 0;process.on("exit", clear), Jimp.read = function (t, i) {
        var a = new Promise(function (a, r) {
          if (i = i || function (t, i) {
            t ? r(t) : a(i);
          }, "string" != typeof t && ("object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) || !Buffer.isBuffer(t))) return throwError.call(this, "src must be a string or a Buffer", i);new Jimp(t, i);
        });return a;
      }, Jimp.AUTO = -1, Jimp.MIME_PNG = "image/png", Jimp.MIME_JPEG = "image/jpeg", Jimp.MIME_BMP = "image/bmp", Jimp.PNG_FILTER_AUTO = -1, Jimp.PNG_FILTER_NONE = 0, Jimp.PNG_FILTER_SUB = 1, Jimp.PNG_FILTER_UP = 2, Jimp.PNG_FILTER_AVERAGE = 3, Jimp.PNG_FILTER_PAETH = 4, Jimp.RESIZE_NEAREST_NEIGHBOR = "nearestNeighbor", Jimp.RESIZE_BILINEAR = "bilinearInterpolation", Jimp.RESIZE_BICUBIC = "bicubicInterpolation", Jimp.RESIZE_HERMITE = "hermiteInterpolation", Jimp.RESIZE_BEZIER = "bezierInterpolation", Jimp.HORIZONTAL_ALIGN_LEFT = 1, Jimp.HORIZONTAL_ALIGN_CENTER = 2, Jimp.HORIZONTAL_ALIGN_RIGHT = 4, Jimp.VERTICAL_ALIGN_TOP = 8, Jimp.VERTICAL_ALIGN_MIDDLE = 16, Jimp.VERTICAL_ALIGN_BOTTOM = 32, Jimp.FONT_SANS_8_BLACK = Path.join(__dirname, "fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt"), Jimp.FONT_SANS_16_BLACK = Path.join(__dirname, "fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt"), Jimp.FONT_SANS_32_BLACK = Path.join(__dirname, "fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt"), Jimp.FONT_SANS_64_BLACK = Path.join(__dirname, "fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt"), Jimp.FONT_SANS_128_BLACK = Path.join(__dirname, "fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt"), Jimp.FONT_SANS_8_WHITE = Path.join(__dirname, "fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt"), Jimp.FONT_SANS_16_WHITE = Path.join(__dirname, "fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt"), Jimp.FONT_SANS_32_WHITE = Path.join(__dirname, "fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt"), Jimp.FONT_SANS_64_WHITE = Path.join(__dirname, "fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt"), Jimp.FONT_SANS_128_WHITE = Path.join(__dirname, "fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt"), Jimp.rgbaToInt = function (t, i, a, r, e) {
        if ("number" != typeof t || "number" != typeof i || "number" != typeof a || "number" != typeof r) return throwError.call(this, "r, g, b and a must be numbers", e);if (t < 0 || t > 255) return throwError.call(this, "r must be between 0 and 255", e);if ((i < 0 || i > 255) && throwError.call(this, "g must be between 0 and 255", e), a < 0 || a > 255) return throwError.call(this, "b must be between 0 and 255", e);if (r < 0 || r > 255) return throwError.call(this, "a must be between 0 and 255", e);var n = t * Math.pow(256, 3) + i * Math.pow(256, 2) + a * Math.pow(256, 1) + r * Math.pow(256, 0);return isNodePattern(e) ? e.call(this, null, n) : n;
      }, Jimp.intToRGBA = function (t, i) {
        if ("number" != typeof t) return throwError.call(this, "i must be a number", i);var a = {};return a.r = Math.floor(t / Math.pow(256, 3)), a.g = Math.floor((t - a.r * Math.pow(256, 3)) / Math.pow(256, 2)), a.b = Math.floor((t - a.r * Math.pow(256, 3) - a.g * Math.pow(256, 2)) / Math.pow(256, 1)), a.a = Math.floor((t - a.r * Math.pow(256, 3) - a.g * Math.pow(256, 2) - a.b * Math.pow(256, 1)) / Math.pow(256, 0)), isNodePattern(i) ? i.call(this, null, a) : a;
      }, Jimp.limit255 = function (t) {
        return t = Math.max(t, 0), t = Math.min(t, 255);
      }, Jimp.diff = function (t, i, a) {
        if ("object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) || t.constructor != Jimp || "object" != (typeof i === "undefined" ? "undefined" : _typeof(i)) || i.constructor != Jimp) return throwError.call(this, "img1 and img2 must be an Jimp images");if (t.bitmap.width != i.bitmap.width || t.bitmap.height != i.bitmap.height) switch (t.bitmap.width * t.bitmap.height > i.bitmap.width * i.bitmap.height) {case !0:
            t = t.clone().resize(i.bitmap.width, i.bitmap.height);break;default:
            i = i.clone().resize(t.bitmap.width, t.bitmap.height);}if (a = a || .1, "number" != typeof a || a < 0 || a > 1) return throwError.call(this, "threshold must be a number between 0 and 1");var r = new Jimp(t.bitmap.width, t.bitmap.height, 4294967295),
            e = PixelMatch(t.bitmap.data, i.bitmap.data, r.bitmap.data, r.bitmap.width, r.bitmap.height, { threshold: a });return { percent: e / (r.bitmap.width * r.bitmap.height), image: r };
      }, Jimp.distance = function (t, i) {
        var a = new ImagePHash(),
            r = a.getHash(t),
            e = a.getHash(i);return a.distance(r, e);
      }, Jimp.prototype.bitmap = { data: null, width: null, height: null }, Jimp.prototype._quality = 100, Jimp.prototype._deflateLevel = 9, Jimp.prototype._deflateStrategy = 3, Jimp.prototype._filterType = Jimp.PNG_FILTER_AUTO, Jimp.prototype._rgba = !0, Jimp.prototype._background = 0, Jimp.prototype.clone = function (t) {
        var i = new Jimp(this);return isNodePattern(t) ? t.call(i, null, i) : i;
      }, Jimp.prototype.quality = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "n must be a number", i) : t < 0 || t > 100 ? throwError.call(this, "n must be a number 0 - 100", i) : (this._quality = Math.round(t), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.deflateLevel = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "l must be a number", i) : t < 0 || t > 9 ? throwError.call(this, "l must be a number 0 - 9", i) : (this._deflateLevel = Math.round(t), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.deflateStrategy = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "s must be a number", i) : t < 0 || t > 3 ? throwError.call(this, "s must be a number 0 - 3", i) : (this._deflateStrategy = Math.round(t), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.filterType = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "n must be a number", i) : t < -1 || t > 4 ? throwError.call(this, "n must be -1 (auto) or a number 0 - 4", i) : (this._filterType = Math.round(t), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.rgba = function (t, i) {
        return "boolean" != typeof t ? throwError.call(this, "bool must be a boolean, true for RGBA or false for RGB", i) : (this._rgba = t, isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.background = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "hex must be a hexadecimal rgba value", i) : (this._background = t, isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.scan = function (t, i, a, r, e, n) {
        if ("number" != typeof t || "number" != typeof i) return throwError.call(this, "x and y must be numbers", n);if ("number" != typeof a || "number" != typeof r) return throwError.call(this, "w and h must be numbers", n);if ("function" != typeof e) return throwError.call(this, "f must be a function", n);t = Math.round(t), i = Math.round(i), a = Math.round(a), r = Math.round(r);for (var h = i; h < i + r; h++) {
          for (var o = t; o < t + a; o++) {
            var s = this.bitmap.width * h + o << 2;e.call(this, o, h, s);
          }
        }return isNodePattern(n) ? n.call(this, null, this) : this;
      }, Jimp.prototype.getPixelIndex = function (t, i, a) {
        if ("number" != typeof t || "number" != typeof i) return throwError.call(this, "x and y must be numbers", a);t = Math.round(t), i = Math.round(i);var r = this.bitmap.width * i + t << 2;return (t < 0 || t > this.bitmap.width) && (r = -1), (i < 0 || i > this.bitmap.height) && (r = -1), isNodePattern(a) ? a.call(this, null, r) : r;
      }, Jimp.prototype.getPixelColor = Jimp.prototype.getPixelColour = function (t, i, a) {
        if ("number" != typeof t || "number" != typeof i) return throwError.call(this, "x and y must be numbers", a);t = Math.round(t), i = Math.round(i);var r = this.getPixelIndex(t, i),
            e = this.bitmap.data.readUInt32BE(r);return isNodePattern(a) ? a.call(this, null, e) : e;
      }, Jimp.prototype.setPixelColor = Jimp.prototype.setPixelColour = function (t, i, a, r) {
        if ("number" != typeof t || "number" != typeof i || "number" != typeof a) return throwError.call(this, "hex, x and y must be numbers", r);i = Math.round(i), a = Math.round(a);var e = this.getPixelIndex(i, a);return this.bitmap.data.writeUInt32BE(t, e, !0), isNodePattern(r) ? r.call(this, null, this) : this;
      };for (var maxHashLength = [], i = 0; i < 65; i++) {
        var l = i > 1 ? new BigNumber(Array(65).join("1"), 2).toString(i) : NaN;maxHashLength.push(l.length);
      }Jimp.prototype.hash = function (t, i) {
        if (t = t || 64, "function" == typeof t && (i = t, t = 64), "number" != typeof t) return throwError.call(this, "base must be a number", i);if (t < 2 || t > 64) return throwError.call(this, "base must be a number between 2 and 64", i);var a = new ImagePHash().getHash(this);for (a = new BigNumber(a, 2).toString(t); a.length < maxHashLength[t];) {
          a = "0" + a;
        }return isNodePattern(i) ? i.call(this, null, a) : a;
      }, Jimp.prototype.crop = function (t, i, a, r, e) {
        if ("number" != typeof t || "number" != typeof i) return throwError.call(this, "x and y must be numbers", e);if ("number" != typeof a || "number" != typeof r) return throwError.call(this, "w and h must be numbers", e);t = Math.round(t), i = Math.round(i), a = Math.round(a), r = Math.round(r);var n = new Buffer(this.bitmap.data.length),
            h = 0;return this.scan(t, i, a, r, function (t, i, a) {
          var r = this.bitmap.data.readUInt32BE(a, !0);n.writeUInt32BE(r, h, !0), h += 4;
        }), this.bitmap.data = new Buffer(n), this.bitmap.width = a, this.bitmap.height = r, isNodePattern(e) ? e.call(this, null, this) : this;
      }, Jimp.prototype.autocrop = function () {
        for (var t, i = this.bitmap.width, a = this.bitmap.height, r = 1, e = 2e-4, n = !0, h = 0, o = arguments.length; h < o; h++) {
          "number" == typeof arguments[h] && (e = arguments[h]), "boolean" == typeof arguments[h] && (n = arguments[h]), "function" == typeof arguments[h] && (t = arguments[h]);
        }var s = this.getPixelColor(0, 0),
            p = 0,
            m = 0,
            u = 0,
            l = 0,
            b = Jimp.intToRGBA(s);t: for (var f = 0; f < a - r; f++) {
          for (var d = 0; d < i; d++) {
            var c = this.getPixelColor(d, f),
                g = Jimp.intToRGBA(c),
                w = Math.abs(Math.max(b.r - g.r ^ 2, b.r - g.r - b.a + g.a ^ 2) + Math.max(b.g - g.g ^ 2, b.g - g.g - b.a + g.a ^ 2) + Math.max(b.b - g.b ^ 2, b.b - g.b - b.a + g.a ^ 2)) / 196608;if (w > e) break t;
          }p++;
        }t: for (var d = 0; d < i - r; d++) {
          for (var f = 0 + p; f < a; f++) {
            var c = this.getPixelColor(d, f),
                g = Jimp.intToRGBA(c),
                w = Math.abs(Math.max(b.r - g.r ^ 2, b.r - g.r - b.a + g.a ^ 2) + Math.max(b.g - g.g ^ 2, b.g - g.g - b.a + g.a ^ 2) + Math.max(b.b - g.b ^ 2, b.b - g.b - b.a + g.a ^ 2)) / 196608;if (w > e) break t;
          }m++;
        }s = this.getPixelColor(i - 1, a - 1);t: for (var f = a - 1; f >= 0 + p + r; f--) {
          for (var d = i - m - 1; d >= 0; d--) {
            var c = this.getPixelColor(d, f),
                g = Jimp.intToRGBA(c),
                w = Math.abs(Math.max(b.r - g.r ^ 2, b.r - g.r - b.a + g.a ^ 2) + Math.max(b.g - g.g ^ 2, b.g - g.g - b.a + g.a ^ 2) + Math.max(b.b - g.b ^ 2, b.b - g.b - b.a + g.a ^ 2)) / 196608;if (w > e) break t;
          }u++;
        }t: for (var d = i - 1; d >= 0 + m + r; d--) {
          for (var f = a - 1; f >= 0 + p; f--) {
            var c = this.getPixelColor(d, f),
                g = Jimp.intToRGBA(c),
                w = Math.abs(Math.max(b.r - g.r ^ 2, b.r - g.r - b.a + g.a ^ 2) + Math.max(b.g - g.g ^ 2, b.g - g.g - b.a + g.a ^ 2) + Math.max(b.b - g.b ^ 2, b.b - g.b - b.a + g.a ^ 2)) / 196608;if (w > e) break t;
          }l++;
        }var y = i - (l + m),
            E = a - (u + p),
            M = !1;return M = n ? 0 !== m && 0 !== p && 0 !== l && 0 !== u : 0 !== m || 0 !== p || 0 !== l || 0 !== u, M && this.crop(m, p, y, E), isNodePattern(t) ? t.call(this, null, this) : this;
      }, Jimp.prototype.blit = function (t, i, a, r, e, n, h, o) {
        if ("object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) || t.constructor != Jimp) return throwError.call(this, "The source must be a Jimp image", o);if ("number" != typeof i || "number" != typeof a) return throwError.call(this, "x and y must be numbers", o);if ("function" == typeof r) o = r, r = 0, e = 0, n = t.bitmap.width, h = t.bitmap.height;else {
          if ((typeof r === "undefined" ? "undefined" : _typeof(r)) != (typeof e === "undefined" ? "undefined" : _typeof(e)) || (typeof e === "undefined" ? "undefined" : _typeof(e)) != (typeof n === "undefined" ? "undefined" : _typeof(n)) || (typeof n === "undefined" ? "undefined" : _typeof(n)) != (typeof h === "undefined" ? "undefined" : _typeof(h))) return throwError.call(this, "srcx, srcy, srcw, srch must be numbers", o);r = r || 0, e = e || 0, n = n || t.bitmap.width, h = h || t.bitmap.height;
        }i = Math.round(i), a = Math.round(a), r = Math.round(r), e = Math.round(e), n = Math.round(n), h = Math.round(h);var s = this;return t.scan(r, e, n, h, function (t, n, h) {
          var o = s.getPixelIndex(i + t - r, a + n - e);s.bitmap.data[o] = this.bitmap.data[h], s.bitmap.data[o + 1] = this.bitmap.data[h + 1], s.bitmap.data[o + 2] = this.bitmap.data[h + 2], s.bitmap.data[o + 3] = this.bitmap.data[h + 3];
        }), isNodePattern(o) ? o.call(this, null, this) : this;
      }, Jimp.prototype.mask = function (t, i, a, r) {
        if ("object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) || t.constructor != Jimp) return throwError.call(this, "The source must be a Jimp image", r);if ("number" != typeof i || "number" != typeof a) return throwError.call(this, "x and y must be numbers", r);i = Math.round(i), a = Math.round(a);var e = this;return t.scan(0, 0, t.bitmap.width, t.bitmap.height, function (t, r, n) {
          var h = e.getPixelIndex(i + t, a + r),
              o = (this.bitmap.data[n + 0] + this.bitmap.data[n + 1] + this.bitmap.data[n + 2]) / 3;e.bitmap.data[h + 3] *= o / 255;
        }), isNodePattern(r) ? r.call(this, null, this) : this;
      }, Jimp.prototype.composite = function (t, i, a, r) {
        if ("object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) || t.constructor != Jimp) return throwError.call(this, "The source must be a Jimp image", r);if ("number" != typeof i || "number" != typeof a) return throwError.call(this, "x and y must be numbers", r);i = Math.round(i), a = Math.round(a);var e = this;return t.scan(0, 0, t.bitmap.width, t.bitmap.height, function (t, r, n) {
          var h = e.getPixelIndex(i + t, a + r),
              o = { r: this.bitmap.data[n + 0] / 255, g: this.bitmap.data[n + 1] / 255, b: this.bitmap.data[n + 2] / 255, a: this.bitmap.data[n + 3] / 255 },
              s = { r: e.bitmap.data[h + 0] / 255, g: e.bitmap.data[h + 1] / 255, b: e.bitmap.data[h + 2] / 255, a: e.bitmap.data[h + 3] / 255 },
              p = s.a + o.a - s.a * o.a,
              m = (o.r * o.a + s.r * s.a * (1 - o.a)) / p,
              u = (o.g * o.a + s.g * s.a * (1 - o.a)) / p,
              l = (o.b * o.a + s.b * s.a * (1 - o.a)) / p;e.bitmap.data[h + 0] = Jimp.limit255(255 * m), e.bitmap.data[h + 1] = Jimp.limit255(255 * u), e.bitmap.data[h + 2] = Jimp.limit255(255 * l), e.bitmap.data[h + 3] = Jimp.limit255(255 * p);
        }), isNodePattern(r) ? r.call(this, null, this) : this;
      }, Jimp.prototype.brightness = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "val must be numbers", i) : t < -1 || t > 1 ? throwError.call(this, "val must be a number between -1 and +1", i) : (this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (i, a, r) {
          t < 0 ? (this.bitmap.data[r] = this.bitmap.data[r] * (1 + t), this.bitmap.data[r + 1] = this.bitmap.data[r + 1] * (1 + t), this.bitmap.data[r + 2] = this.bitmap.data[r + 2] * (1 + t)) : (this.bitmap.data[r] = this.bitmap.data[r] + (255 - this.bitmap.data[r]) * t, this.bitmap.data[r + 1] = this.bitmap.data[r + 1] + (255 - this.bitmap.data[r + 1]) * t, this.bitmap.data[r + 2] = this.bitmap.data[r + 2] + (255 - this.bitmap.data[r + 2]) * t);
        }), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.contrast = function (t, i) {
        function a(i) {
          if (t < 0) {
            var a = i > 127 ? 1 - i / 255 : i / 255;return a < 0 && (a = 0), a = .5 * Math.pow(2 * a, 1 + t), i > 127 ? 255 * (1 - a) : 255 * a;
          }var a = i > 127 ? 1 - i / 255 : i / 255;return a < 0 && (a = 0), a = .5 * Math.pow(2 * a, 1 == t ? 127 : 1 / (1 - t)), i > 127 ? 255 * (1 - a) : 255 * a;
        }return "number" != typeof t ? throwError.call(this, "val must be numbers", i) : t < -1 || t > 1 ? throwError.call(this, "val must be a number between -1 and +1", i) : (this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, i, r) {
          this.bitmap.data[r] = a(this.bitmap.data[r]), this.bitmap.data[r + 1] = a(this.bitmap.data[r + 1]), this.bitmap.data[r + 2] = a(this.bitmap.data[r + 2]);
        }), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.posterize = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "n must be numbers", i) : (t < 2 && (t = 2), this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (i, a, r) {
          this.bitmap.data[r] = Math.floor(this.bitmap.data[r] / 255 * (t - 1)) / (t - 1) * 255, this.bitmap.data[r + 1] = Math.floor(this.bitmap.data[r + 1] / 255 * (t - 1)) / (t - 1) * 255, this.bitmap.data[r + 2] = Math.floor(this.bitmap.data[r + 2] / 255 * (t - 1)) / (t - 1) * 255;
        }), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.normalize = function (t) {
        var i = histogram.call(this),
            a = function a(t, i, _a) {
          return 255 * (t - i) / (_a - i);
        },
            r = function r(t) {
          return [t.findIndex(function (t) {
            return t > 0;
          }), 255 - t.slice().reverse().findIndex(function (t) {
            return t > 0;
          })];
        },
            e = { r: r(i.r), g: r(i.g), b: r(i.b) };return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, i, r) {
          var n = this.bitmap.data[r + 0],
              h = this.bitmap.data[r + 1],
              o = this.bitmap.data[r + 2];this.bitmap.data[r + 0] = a(n, e.r[0], e.r[1]), this.bitmap.data[r + 1] = a(h, e.g[0], e.g[1]), this.bitmap.data[r + 2] = a(o, e.b[0], e.b[1]);
        }), isNodePattern(t) ? t.call(this, null, this) : this;
      }, Jimp.prototype.invert = function (t) {
        return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, i, a) {
          this.bitmap.data[a] = 255 - this.bitmap.data[a], this.bitmap.data[a + 1] = 255 - this.bitmap.data[a + 1], this.bitmap.data[a + 2] = 255 - this.bitmap.data[a + 2];
        }), isNodePattern(t) ? t.call(this, null, this) : this;
      }, Jimp.prototype.mirror = Jimp.prototype.flip = function (t, i, a) {
        if ("boolean" != typeof t || "boolean" != typeof i) return throwError.call(this, "horizontal and vertical must be Booleans", a);var r = new Buffer(this.bitmap.data.length);return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (a, e, n) {
          var h = t ? this.bitmap.width - 1 - a : a,
              o = i ? this.bitmap.height - 1 - e : e,
              s = this.bitmap.width * o + h << 2,
              p = this.bitmap.data.readUInt32BE(n, !0);r.writeUInt32BE(p, s, !0);
        }), this.bitmap.data = new Buffer(r), isNodePattern(a) ? a.call(this, null, this) : this;
      }, Jimp.prototype.gaussian = function (t, i) {
        if ("number" != typeof t) return throwError.call(this, "r must be a number", i);if (t < 1) return throwError.call(this, "r must be greater than 0", i);for (var a = Math.ceil(2.57 * t), r = 0; r < this.bitmap.height; r++) {
          log("Gaussian: " + Math.round(r / this.bitmap.height * 100) + "%");for (var e = 0; e < this.bitmap.width; e++) {
            for (var n = 0, h = 0, o = 0, s = 0, p = 0, m = r - a; m < r + a + 1; m++) {
              for (var u = e - a; u < e + a + 1; u++) {
                var l = Math.min(this.bitmap.width - 1, Math.max(0, u)),
                    b = Math.min(this.bitmap.height - 1, Math.max(0, m)),
                    f = (u - e) * (u - e) + (m - r) * (m - r),
                    d = Math.exp(-f / (2 * t * t)) / (2 * Math.PI * t * t),
                    c = b * this.bitmap.width + l << 2;n += this.bitmap.data[c] * d, h += this.bitmap.data[c + 1] * d, o += this.bitmap.data[c + 2] * d, s += this.bitmap.data[c + 3] * d, p += d;
              }var c = r * this.bitmap.width + e << 2;this.bitmap.data[c] = Math.round(n / p), this.bitmap.data[c + 1] = Math.round(h / p), this.bitmap.data[c + 2] = Math.round(o / p), this.bitmap.data[c + 3] = Math.round(s / p);
            }
          }
        }return clear(), isNodePattern(i) ? i.call(this, null, this) : this;
      };var mul_table = [1, 57, 41, 21, 203, 34, 97, 73, 227, 91, 149, 62, 105, 45, 39, 137, 241, 107, 3, 173, 39, 71, 65, 238, 219, 101, 187, 87, 81, 151, 141, 133, 249, 117, 221, 209, 197, 187, 177, 169, 5, 153, 73, 139, 133, 127, 243, 233, 223, 107, 103, 99, 191, 23, 177, 171, 165, 159, 77, 149, 9, 139, 135, 131, 253, 245, 119, 231, 224, 109, 211, 103, 25, 195, 189, 23, 45, 175, 171, 83, 81, 79, 155, 151, 147, 9, 141, 137, 67, 131, 129, 251, 123, 30, 235, 115, 113, 221, 217, 53, 13, 51, 50, 49, 193, 189, 185, 91, 179, 175, 43, 169, 83, 163, 5, 79, 155, 19, 75, 147, 145, 143, 35, 69, 17, 67, 33, 65, 255, 251, 247, 243, 239, 59, 29, 229, 113, 111, 219, 27, 213, 105, 207, 51, 201, 199, 49, 193, 191, 47, 93, 183, 181, 179, 11, 87, 43, 85, 167, 165, 163, 161, 159, 157, 155, 77, 19, 75, 37, 73, 145, 143, 141, 35, 138, 137, 135, 67, 33, 131, 129, 255, 63, 250, 247, 61, 121, 239, 237, 117, 29, 229, 227, 225, 111, 55, 109, 216, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 48, 190, 47, 93, 185, 183, 181, 179, 178, 176, 175, 173, 171, 85, 21, 167, 165, 41, 163, 161, 5, 79, 157, 78, 154, 153, 19, 75, 149, 74, 147, 73, 144, 143, 71, 141, 140, 139, 137, 17, 135, 134, 133, 66, 131, 65, 129, 1],
          shg_table = [0, 9, 10, 10, 14, 12, 14, 14, 16, 15, 16, 15, 16, 15, 15, 17, 18, 17, 12, 18, 16, 17, 17, 19, 19, 18, 19, 18, 18, 19, 19, 19, 20, 19, 20, 20, 20, 20, 20, 20, 15, 20, 19, 20, 20, 20, 21, 21, 21, 20, 20, 20, 21, 18, 21, 21, 21, 21, 20, 21, 17, 21, 21, 21, 22, 22, 21, 22, 22, 21, 22, 21, 19, 22, 22, 19, 20, 22, 22, 21, 21, 21, 22, 22, 22, 18, 22, 22, 21, 22, 22, 23, 22, 20, 23, 22, 22, 23, 23, 21, 19, 21, 21, 21, 23, 23, 23, 22, 23, 23, 21, 23, 22, 23, 18, 22, 23, 20, 22, 23, 23, 23, 21, 22, 20, 22, 21, 22, 24, 24, 24, 24, 24, 22, 21, 24, 23, 23, 24, 21, 24, 23, 24, 22, 24, 24, 22, 24, 24, 22, 23, 24, 24, 24, 20, 23, 22, 23, 24, 24, 24, 24, 24, 24, 24, 23, 21, 23, 22, 23, 24, 24, 24, 22, 24, 24, 24, 23, 22, 24, 24, 25, 23, 25, 25, 23, 24, 25, 25, 24, 22, 25, 25, 25, 24, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 25, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 22, 25, 25, 23, 25, 25, 20, 24, 25, 24, 25, 25, 22, 24, 25, 24, 25, 24, 25, 25, 24, 25, 25, 25, 25, 22, 25, 25, 25, 24, 25, 24, 25, 18];Jimp.prototype.blur = function (t, i) {
        if ("number" != typeof t) return throwError.call(this, "r must be a number", i);if (t < 1) return throwError.call(this, "r must be greater than 0", i);for (var a, r, e, n, h, o, s, p, m, u, l, b, f, d, c = this.bitmap.width - 1, g = this.bitmap.height - 1, w = (this.bitmap.width * this.bitmap.height, t + 1), y = mul_table[t], E = shg_table[t], M = [], J = [], v = [], _ = [], P = [], N = [], I = 2; I-- > 0;) {
          for (f = b = 0, o = 0; o < this.bitmap.height; o++) {
            for (a = this.bitmap.data[f] * w, r = this.bitmap.data[f + 1] * w, e = this.bitmap.data[f + 2] * w, n = this.bitmap.data[f + 3] * w, s = 1; s <= t; s++) {
              p = f + ((s > c ? c : s) << 2), a += this.bitmap.data[p++], r += this.bitmap.data[p++], e += this.bitmap.data[p++], n += this.bitmap.data[p];
            }for (h = 0; h < this.bitmap.width; h++) {
              M[b] = a, J[b] = r, v[b] = e, _[b] = n, 0 == o && (P[h] = ((p = h + w) < c ? p : c) << 2, N[h] = (p = h - t) > 0 ? p << 2 : 0), m = f + P[h], u = f + N[h], a += this.bitmap.data[m++] - this.bitmap.data[u++], r += this.bitmap.data[m++] - this.bitmap.data[u++], e += this.bitmap.data[m++] - this.bitmap.data[u++], n += this.bitmap.data[m] - this.bitmap.data[u], b++;
            }f += this.bitmap.width << 2;
          }for (h = 0; h < this.bitmap.width; h++) {
            for (l = h, a = M[l] * w, r = J[l] * w, e = v[l] * w, n = _[l] * w, s = 1; s <= t; s++) {
              l += s > g ? 0 : this.bitmap.width, a += M[l], r += J[l], e += v[l], n += _[l];
            }for (b = h << 2, o = 0; o < this.bitmap.height; o++) {
              this.bitmap.data[b + 3] = d = n * y >>> E, d > 255 && (this.bitmap.data[b + 3] = 255), d > 0 ? (d = 255 / d, this.bitmap.data[b] = (a * y >>> E) * d, this.bitmap.data[b + 1] = (r * y >>> E) * d, this.bitmap.data[b + 2] = (e * y >>> E) * d) : this.bitmap.data[b] = this.bitmap.data[b + 1] = this.bitmap.data[b + 2] = 0, 0 == h && (P[o] = ((p = o + w) < g ? p : g) * this.bitmap.width, N[o] = (p = o - t) > 0 ? p * this.bitmap.width : 0), m = h + P[o], u = h + N[o], a += M[m] - M[u], r += J[m] - J[u], e += v[m] - v[u], n += _[m] - _[u], b += this.bitmap.width << 2;
            }
          }
        }return isNodePattern(i) ? i.call(this, null, this) : this;
      }, Jimp.prototype.greyscale = function (t) {
        return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, i, a) {
          var r = parseInt(.2126 * this.bitmap.data[a] + .7152 * this.bitmap.data[a + 1] + .0722 * this.bitmap.data[a + 2], 10);this.bitmap.data[a] = r, this.bitmap.data[a + 1] = r, this.bitmap.data[a + 2] = r;
        }), isNodePattern(t) ? t.call(this, null, this) : this;
      }, Jimp.prototype.grayscale = Jimp.prototype.greyscale, Jimp.prototype.sepia = function (t) {
        return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, i, a) {
          var r = this.bitmap.data[a],
              e = this.bitmap.data[a + 1],
              n = this.bitmap.data[a + 2];r = .393 * r + .769 * e + .189 * n, e = .349 * r + .686 * e + .168 * n, n = .272 * r + .534 * e + .131 * n, this.bitmap.data[a] = r < 255 ? r : 255, this.bitmap.data[a + 1] = e < 255 ? e : 255, this.bitmap.data[a + 2] = n < 255 ? n : 255;
        }), isNodePattern(t) ? t.call(this, null, this) : this;
      }, Jimp.prototype.opacity = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "f must be a number", i) : t < 0 || t > 1 ? throwError.call(this, "f must be a number from 0 to 1", i) : (this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (i, a, r) {
          var e = this.bitmap.data[r + 3] * t;this.bitmap.data[r + 3] = e;
        }), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.fade = function (t, i) {
        return "number" != typeof t ? throwError.call(this, "f must be a number", i) : t < 0 || t > 1 ? throwError.call(this, "f must be a number from 0 to 1", i) : (this.opacity(1 - t), isNodePattern(i) ? i.call(this, null, this) : this);
      }, Jimp.prototype.opaque = function (t) {
        return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, i, a) {
          this.bitmap.data[a + 3] = 255;
        }), isNodePattern(t) ? t.call(this, null, this) : this;
      }, Jimp.prototype.resize = function (t, i, a, r) {
        if ("number" != typeof t || "number" != typeof i) return throwError.call(this, "w and h must be numbers", r);if ("function" == typeof a && "undefined" == typeof r && (r = a, a = null), t == Jimp.AUTO && i == Jimp.AUTO) return throwError.call(this, "w and h cannot both the set to auto", r);if (t == Jimp.AUTO && (t = this.bitmap.width * (i / this.bitmap.height)), i == Jimp.AUTO && (i = this.bitmap.height * (t / this.bitmap.width)), t = Math.round(t), i = Math.round(i), "function" == typeof Resize2[a]) {
          var e = { data: new Buffer(t * i * 4), width: t, height: i };Resize2[a](this.bitmap, e), this.bitmap = e;
        } else {
          var n = this,
              h = new Resize(this.bitmap.width, this.bitmap.height, t, i, !0, !0, function (a) {
            n.bitmap.data = new Buffer(a), n.bitmap.width = t, n.bitmap.height = i;
          });h.resize(this.bitmap.data);
        }return isNodePattern(r) ? r.call(this, null, this) : this;
      }, Jimp.prototype.cover = function (t, i, a, r, e) {
        if ("number" != typeof t || "number" != typeof i) return throwError.call(this, "w and h must be numbers", e);a && "function" == typeof a && "undefined" == typeof e ? (e = a, a = null, r = null) : "function" == typeof r && "undefined" == typeof e && (e = r, r = null), a = a || Jimp.HORIZONTAL_ALIGN_CENTER | Jimp.VERTICAL_ALIGN_MIDDLE;var n = 7 & a,
            h = a >> 3;if ((0 == n || n & n - 1) && (0 == h || h & h - 1)) return throwError.call(this, "only use one flag per alignment direction", e);var o = n >> 1,
            s = h >> 1,
            p = t / i > this.bitmap.width / this.bitmap.height ? t / this.bitmap.width : i / this.bitmap.height;return this.scale(p, r), this.crop((this.bitmap.width - t) / 2 * o, (this.bitmap.height - i) / 2 * s, t, i), isNodePattern(e) ? e.call(this, null, this) : this;
      }, Jimp.prototype.contain = function (t, i, a, r, e) {
        if ("number" != typeof t || "number" != typeof i) return throwError.call(this, "w and h must be numbers", e);switch (typeof a === "undefined" ? "undefined" : _typeof(a)) {case "string":
            "function" == typeof r && "undefined" == typeof e && (e = r), r = a, a = null;case "function":
            "undefined" == typeof e && (e = a), r = null, a = null;default:
            "function" == typeof r && "undefined" == typeof e && (e = r, r = null);}a = a || Jimp.HORIZONTAL_ALIGN_CENTER | Jimp.VERTICAL_ALIGN_MIDDLE;var n = 7 & a,
            h = a >> 3;if ((0 == n || n & n - 1) && (0 == h || h & h - 1)) return throwError.call(this, "only use one flag per alignment direction", e);var o = n >> 1,
            s = h >> 1,
            p = t / i > this.bitmap.width / this.bitmap.height ? i / this.bitmap.height : t / this.bitmap.width,
            m = this.clone().scale(p, r);return this.resize(t, i, r), this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, i, a) {
          this.bitmap.data.writeUInt32BE(this._background, a);
        }), this.blit(m, (this.bitmap.width - m.bitmap.width) / 2 * o, (this.bitmap.height - m.bitmap.height) / 2 * s), isNodePattern(e) ? e.call(this, null, this) : this;
      }, Jimp.prototype.scale = function (t, i, a) {
        if ("number" != typeof t) return throwError.call(this, "f must be a number", a);if (t < 0) return throwError.call(this, "f must be a positive number", a);"function" == typeof i && "undefined" == typeof a && (a = i, i = null);var r = this.bitmap.width * t,
            e = this.bitmap.height * t;return this.resize(r, e, i), isNodePattern(a) ? a.call(this, null, this) : this;
      }, Jimp.prototype.scaleToFit = function (t, i, a, r) {
        if ("number" != typeof t || "number" != typeof i) return throwError.call(this, "w and h must be numbers", r);"function" == typeof a && "undefined" == typeof r && (r = a, a = null);var e = t / i > this.bitmap.width / this.bitmap.height ? i / this.bitmap.height : t / this.bitmap.width;return this.scale(e, a), isNodePattern(r) ? r.call(this, null, this) : this;
      }, Jimp.prototype.rotate = function (t, i, a) {
        return "undefined" != typeof i && null !== i || (i = !0), "function" == typeof i && "undefined" == typeof a && (a = i, i = !0), "number" != typeof t ? throwError.call(this, "deg must be a number", a) : "boolean" != typeof i && "string" != typeof i ? throwError.call(this, "mode must be a boolean or a string", a) : (t % 90 == 0 && i !== !1 ? simpleRotate.call(this, t, a) : advancedRotate.call(this, t, i, a), isNodePattern(a) ? a.call(this, null, this) : this);
      }, Jimp.prototype.getBuffer = function (t, i) {
        if (t == Jimp.AUTO && (t = this._originalMime || Jimp.MIME_PNG), "string" != typeof t) return throwError.call(this, "mime must be a string", i);if ("function" != typeof i) return throwError.call(this, "cb must be a function", i);switch (t.toLowerCase()) {case Jimp.MIME_PNG:
            var a = this,
                r = new PNG({ width: this.bitmap.width, height: this.bitmap.height, bitDepth: 8, deflateLevel: this._deflateLevel, deflateStrategy: this._deflateStrategy, filterType: this._filterType, colorType: this._rgba ? 6 : 2, inputHasAlpha: !0 });this._rgba ? r.data = new Buffer(this.bitmap.data) : r.data = compositeBitmapOverBackground(this).data, StreamToBuffer(r.pack(), function (t, r) {
              return i.call(a, null, r);
            });break;case Jimp.MIME_JPEG:
            var e = JPEG.encode(compositeBitmapOverBackground(this), this._quality);return i.call(this, null, e.data);case Jimp.MIME_BMP:
            var n = BMP.encode(compositeBitmapOverBackground(this));return i.call(this, null, n.data);default:
            return i.call(this, "Unsupported MIME type: " + t);}return this;
      }, Jimp.prototype.getBase64 = function (t, i) {
        return t == Jimp.AUTO && (t = this._originalMime || Jimp.MIME_PNG), "string" != typeof t ? throwError.call(this, "mime must be a string", i) : "function" != typeof i ? throwError.call(this, "cb must be a function", i) : (this.getBuffer(t, function (a, r) {
          var e = "data:" + t + ";base64," + r.toString("base64");return i.call(this, null, e);
        }), this);
      }, Jimp.prototype.dither565 = function (t) {
        var i = [1, 9, 3, 11, 13, 5, 15, 7, 4, 12, 2, 10, 16, 8, 14, 6];return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (t, a, r) {
          var e = ((3 & a) << 2) + t % 4,
              n = i[e];this.bitmap.data[r] = Math.min(this.bitmap.data[r] + n, 255), this.bitmap.data[r + 1] = Math.min(this.bitmap.data[r + 1] + n, 255), this.bitmap.data[r + 2] = Math.min(this.bitmap.data[r + 2] + n, 255);
        }), isNodePattern(t) ? t.call(this, null, this) : this;
      }, Jimp.prototype.dither16 = Jimp.prototype.dither565, Jimp.prototype.color = Jimp.prototype.colour = function (t, i) {
        if (!t || !Array.isArray(t)) return throwError.call(this, "actions must be an array", i);var a = this;return this.scan(0, 0, this.bitmap.width, this.bitmap.height, function (r, e, n) {
          var h = TinyColor({ r: this.bitmap.data[n], g: this.bitmap.data[n + 1], b: this.bitmap.data[n + 2] }),
              o = function o(t, i) {
            return c = h.toRgb(), c[t] = Math.max(0, Math.min(c[t] + i, 255)), TinyColor(c);
          };t.forEach(function (t) {
            if ("mix" === t.apply) h = TinyColor.mix(h, t.params[0], t.params[1]);else if ("tint" === t.apply) h = TinyColor.mix(h, "white", t.params[0]);else if ("shade" === t.apply) h = TinyColor.mix(h, "black", t.params[0]);else if ("xor" === t.apply) {
              var r = TinyColor(t.params[0]).toRgb();h = h.toRgb(), h = TinyColor({ r: h.r ^ r.r, g: h.g ^ r.g, b: h.b ^ r.b });
            } else if ("red" === t.apply) h = o("r", t.params[0]);else if ("green" === t.apply) h = o("g", t.params[0]);else if ("blue" === t.apply) h = o("b", t.params[0]);else {
              "hue" === t.apply && (t.apply = "spin");var e = h[t.apply];if (!e) return throwError.call(a, "action " + t.apply + " not supported", i);h = e.apply(h, t.params);
            }
          }), h = h.toRgb(), this.bitmap.data[n] = h.r, this.bitmap.data[n + 1] = h.g, this.bitmap.data[n + 2] = h.b;
        }), isNodePattern(i) ? i.call(this, null, this) : this;
      }, Jimp.loadFont = function (t, i) {
        if ("string" != typeof t) return throwError.call(this, "file must be a string", i);var a = this;return new Promise(function (r, e) {
          i = i || function (t, i) {
            t ? e(t) : r(i);
          }, BMFont(t, function (r, e) {
            var n = {},
                h = {};if (r) return throwError.call(a, r, i);for (var o = 0; o < e.chars.length; o++) {
              n[String.fromCharCode(e.chars[o].id)] = e.chars[o];
            }for (var o = 0; o < e.kernings.length; o++) {
              var s = String.fromCharCode(e.kernings[o].first);h[s] = h[s] || {}, h[s][String.fromCharCode(e.kernings[o].second)] = e.kernings[o].amount;
            }loadPages(Path.dirname(t), e.pages).then(function (t) {
              i(null, { chars: n, kernings: h, pages: t, common: e.common, info: e.info });
            });
          });
        });
      }, Jimp.prototype.print = function (t, i, a, r, e, n) {
        if ("function" == typeof e && "undefined" == typeof n && (n = e, e = 1 / 0), "undefined" == typeof e && (e = 1 / 0), "object" != (typeof t === "undefined" ? "undefined" : _typeof(t))) return throwError.call(this, "font must be a Jimp loadFont", n);if ("number" != typeof i || "number" != typeof a || "number" != typeof e) return throwError.call(this, "x, y and maxWidth must be numbers", n);if ("string" != typeof r) return throwError.call(this, "text must be a string", n);if ("number" != typeof e) return throwError.call(this, "maxWidth must be a number", n);for (var h = this, o = r.split(" "), s = "", p = 0; p < o.length; p++) {
          var m = s + o[p] + " ",
              u = measureText(t, m);u > e && p > 0 ? (h = h.print(t, i, a, s), s = o[p] + " ", a += t.common.lineHeight) : s = m;
        }return printText.call(this, t, i, a, s), isNodePattern(n) ? n.call(this, null, h) : h;
      }, Jimp.prototype.write = function (t, i) {
        if ("string" != typeof t) return throwError.call(this, "path must be a string", i);if ("undefined" == typeof i && (i = function i() {}), "function" != typeof i) return throwError.call(this, "cb must be a function", i);var a = this,
            r = MIME.lookup(t);return this.getBuffer(r, function (r, e) {
          if (r) return throwError.call(a, r, i);var n = FS.createWriteStream(t);n.on("open", function (t) {
            n.write(e), n.end();
          }).on("error", function (t) {
            return throwError.call(a, t, i);
          }), n.on("finish", function (t) {
            return i.call(a, null, a);
          });
        }), this;
      };var gl;"object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (gl = window), "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && (gl = self), gl.Jimp = Jimp, gl.Buffer = Buffer;
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/..");
  }, { "./phash.js": 107, "./resize.js": 108, "./resize2.js": 109, "_process": 12, "bignumber.js": 4, "bmp-js": 5, "buffer": 14, "es6-promise": 16, "exif-parser": 18, "file-type": 27, "jpeg-js": 36, "load-bmfont": 39, "mime": 41, "path": 59, "pixelmatch": 60, "pngjs": 80, "read-chunk": 83, "stream-to-buffer": 95, "tinycolor2": 98, "url-regex": 100 }], 2: [function (require, module, exports) {
    // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
    //
    // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
    //
    // Originally from narwhal.js (http://narwhaljs.org)
    // Copyright (c) 2009 Thomas Robinson <280north.com>
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the 'Software'), to
    // deal in the Software without restriction, including without limitation the
    // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    // sell copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
    // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    // when used in node, this will actually load the util module we depend on
    // versus loading the builtin util module as happens otherwise
    // this is a bug in node module loading as far as I am concerned
    var util = require('util/');var pSlice = Array.prototype.slice;var hasOwn = Object.prototype.hasOwnProperty; // 1. The assert module provides functions that throw
    // AssertionError's when particular conditions are not met. The
    // assert module must conform to the following interface.
    var assert = module.exports = ok; // 2. The AssertionError is defined in assert.
    // new assert.AssertionError({ message: message,
    //                             actual: actual,
    //                             expected: expected })
    assert.AssertionError = function AssertionError(options) {
      this.name = 'AssertionError';this.actual = options.actual;this.expected = options.expected;this.operator = options.operator;if (options.message) {
        this.message = options.message;this.generatedMessage = false;
      } else {
        this.message = getMessage(this);this.generatedMessage = true;
      }var stackStartFunction = options.stackStartFunction || fail;if (Error.captureStackTrace) {
        Error.captureStackTrace(this, stackStartFunction);
      } else {
        // non v8 browsers so we can have a stacktrace
        var err = new Error();if (err.stack) {
          var out = err.stack; // try to strip useless frames
          var fn_name = stackStartFunction.name;var idx = out.indexOf('\n' + fn_name);if (idx >= 0) {
            // once we have located the function frame
            // we need to strip out everything before it (and its line)
            var next_line = out.indexOf('\n', idx + 1);out = out.substring(next_line + 1);
          }this.stack = out;
        }
      }
    }; // assert.AssertionError instanceof Error
    util.inherits(assert.AssertionError, Error);function replacer(key, value) {
      if (util.isUndefined(value)) {
        return '' + value;
      }if (util.isNumber(value) && !isFinite(value)) {
        return value.toString();
      }if (util.isFunction(value) || util.isRegExp(value)) {
        return value.toString();
      }return value;
    }function truncate(s, n) {
      if (util.isString(s)) {
        return s.length < n ? s : s.slice(0, n);
      } else {
        return s;
      }
    }function getMessage(self) {
      return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' + self.operator + ' ' + truncate(JSON.stringify(self.expected, replacer), 128);
    } // At present only the three keys mentioned above are used and
    // understood by the spec. Implementations or sub modules can pass
    // other keys to the AssertionError's constructor - they will be
    // ignored.
    // 3. All of the following functions must throw an AssertionError
    // when a corresponding condition is not met, with a message that
    // may be undefined if not provided.  All assertion methods provide
    // both the actual and expected values to the assertion error for
    // display purposes.
    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new assert.AssertionError({ message: message, actual: actual, expected: expected, operator: operator, stackStartFunction: stackStartFunction });
    } // EXTENSION! allows for well behaved errors defined elsewhere.
    assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
    // by !!guard.
    // assert.ok(guard, message_opt);
    // This statement is equivalent to assert.equal(true, !!guard,
    // message_opt);. To test strictly for the value true, use
    // assert.strictEqual(true, guard, message_opt);.
    function ok(value, message) {
      if (!value) fail(value, true, message, '==', assert.ok);
    }assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with
    // ==.
    // assert.equal(actual, expected, message_opt);
    assert.equal = function equal(actual, expected, message) {
      if (actual != expected) fail(actual, expected, message, '==', assert.equal);
    }; // 6. The non-equality assertion tests for whether two objects are not equal
    // with != assert.notEqual(actual, expected, message_opt);
    assert.notEqual = function notEqual(actual, expected, message) {
      if (actual == expected) {
        fail(actual, expected, message, '!=', assert.notEqual);
      }
    }; // 7. The equivalence assertion tests a deep equality relation.
    // assert.deepEqual(actual, expected, message_opt);
    assert.deepEqual = function deepEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected)) {
        fail(actual, expected, message, 'deepEqual', assert.deepEqual);
      }
    };function _deepEqual(actual, expected) {
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;
      } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
        if (actual.length != expected.length) return false;for (var i = 0; i < actual.length; i++) {
          if (actual[i] !== expected[i]) return false;
        }return true; // 7.2. If the expected value is a Date object, the actual value is
        // equivalent if it is also a Date object that refers to the same time.
      } else if (util.isDate(actual) && util.isDate(expected)) {
        return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
        // equivalent if it is also a RegExp object with the same source and
        // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
      } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
        return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
        // equivalence is determined by ==.
      } else if (!util.isObject(actual) && !util.isObject(expected)) {
        return actual == expected; // 7.5 For all other Object pairs, including Array objects, equivalence is
        // determined by having the same number of owned properties (as verified
        // with Object.prototype.hasOwnProperty.call), the same set of keys
        // (although not necessarily the same order), equivalent values for every
        // corresponding key, and an identical 'prototype' property. Note: this
        // accounts for both named and indexed properties on Arrays.
      } else {
        return objEquiv(actual, expected);
      }
    }function isArguments(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }function objEquiv(a, b) {
      if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b)) return false; // an identical 'prototype' property.
      if (a.prototype !== b.prototype) return false; // if one is a primitive, the other must be same
      if (util.isPrimitive(a) || util.isPrimitive(b)) {
        return a === b;
      }var aIsArgs = isArguments(a),
          bIsArgs = isArguments(b);if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;if (aIsArgs) {
        a = pSlice.call(a);b = pSlice.call(b);return _deepEqual(a, b);
      }var ka = objectKeys(a),
          kb = objectKeys(b),
          key,
          i; // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length != kb.length) return false; //the same set of keys (although not necessarily the same order),
      ka.sort();kb.sort(); //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i]) return false;
      } //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];if (!_deepEqual(a[key], b[key])) return false;
      }return true;
    } // 8. The non-equivalence assertion tests for any deep inequality.
    // assert.notDeepEqual(actual, expected, message_opt);
    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (_deepEqual(actual, expected)) {
        fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
      }
    }; // 9. The strict equality assertion tests strict equality, as determined by ===.
    // assert.strictEqual(actual, expected, message_opt);
    assert.strictEqual = function strictEqual(actual, expected, message) {
      if (actual !== expected) {
        fail(actual, expected, message, '===', assert.strictEqual);
      }
    }; // 10. The strict non-equality assertion tests for strict inequality, as
    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (actual === expected) {
        fail(actual, expected, message, '!==', assert.notStrictEqual);
      }
    };function expectedException(actual, expected) {
      if (!actual || !expected) {
        return false;
      }if (Object.prototype.toString.call(expected) == '[object RegExp]') {
        return expected.test(actual);
      } else if (actual instanceof expected) {
        return true;
      } else if (expected.call({}, actual) === true) {
        return true;
      }return false;
    }function _throws(shouldThrow, block, expected, message) {
      var actual;if (util.isString(expected)) {
        message = expected;expected = null;
      }try {
        block();
      } catch (e) {
        actual = e;
      }message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');if (shouldThrow && !actual) {
        fail(actual, expected, 'Missing expected exception' + message);
      }if (!shouldThrow && expectedException(actual, expected)) {
        fail(actual, expected, 'Got unwanted exception' + message);
      }if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
        throw actual;
      }
    } // 11. Expected to throw an error:
    // assert.throws(block, Error_opt, message_opt);
    assert.throws = function (block, /*optional*/error, /*optional*/message) {
      _throws.apply(this, [true].concat(pSlice.call(arguments)));
    }; // EXTENSION! This is annoying to write outside this module.
    assert.doesNotThrow = function (block, /*optional*/message) {
      _throws.apply(this, [false].concat(pSlice.call(arguments)));
    };assert.ifError = function (err) {
      if (err) {
        throw err;
      }
    };var objectKeys = Object.keys || function (obj) {
      var keys = [];for (var key in obj) {
        if (hasOwn.call(obj, key)) keys.push(key);
      }return keys;
    };
  }, { "util/": 103 }], 3: [function (require, module, exports) {
    'use strict';
    exports.toByteArray = toByteArray;exports.fromByteArray = fromByteArray;var lookup = [];var revLookup = [];var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;function init() {
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];revLookup[code.charCodeAt(i)] = i;
      }revLookup['-'.charCodeAt(0)] = 62;revLookup['_'.charCodeAt(0)] = 63;
    }init();function toByteArray(b64) {
      var i, j, l, tmp, placeHolders, arr;var len = b64.length;if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
      } // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;var L = 0;for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];arr[L++] = tmp >> 16 & 0xFF;arr[L++] = tmp >> 8 & 0xFF;arr[L++] = tmp & 0xFF;
      }if (placeHolders === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;arr[L++] = tmp >> 8 & 0xFF;arr[L++] = tmp & 0xFF;
      }return arr;
    }function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
    }function encodeChunk(uint8, start, end) {
      var tmp;var output = [];for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];output.push(tripletToBase64(tmp));
      }return output.join('');
    }function fromByteArray(uint8) {
      var tmp;var len = uint8.length;var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';var parts = [];var maxChunkLength = 16383; // must be multiple of 3
      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      } // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];output += lookup[tmp >> 2];output += lookup[tmp << 4 & 0x3F];output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];output += lookup[tmp >> 10];output += lookup[tmp >> 4 & 0x3F];output += lookup[tmp << 2 & 0x3F];output += '=';
      }parts.push(output);return parts.join('');
    }
  }, {}], 4: [function (require, module, exports) {
    /*! bignumber.js v2.4.0 https://github.com/MikeMcl/bignumber.js/LICENCE */;(function (globalObj) {
      'use strict'; /*
                    bignumber.js v2.4.0
                    A JavaScript library for arbitrary-precision arithmetic.
                    https://github.com/MikeMcl/bignumber.js
                    Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>
                    MIT Expat Licence
                    */
      var BigNumber,
          cryptoObj,
          parseNumeric,
          isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
          mathceil = Math.ceil,
          mathfloor = Math.floor,
          notBool = ' not a boolean or binary digit',
          roundingMode = 'rounding mode',
          tooManyDigits = 'number type has more than 15 significant digits',
          ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
          BASE = 1e14,
          LOG_BASE = 14,
          MAX_SAFE_INTEGER = 0x1fffffffffffff,
          // 2^53 - 1
      // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
      POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
          SQRT_BASE = 1e7,
          /*
          * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
          * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
          * exception is thrown (if ERRORS is true).
          */MAX = 1E9; // 0 to MAX_INT32
      if (typeof crypto != 'undefined') cryptoObj = crypto; /*
                                                            * Create and return a BigNumber constructor.
                                                            */function constructorFactory(configObj) {
        var div,
            // id tracks the caller function, so its name can be included in error messages.
        id = 0,
            P = BigNumber.prototype,
            ONE = new BigNumber(1),
            /********************************* EDITABLE DEFAULTS **********************************/ /*
                                                                                                     * The default values below must be integers within the inclusive ranges stated.
                                                                                                     * The values can also be changed at run-time using BigNumber.config.
                                                                                                     */ // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20,
            // 0 to MAX
        /*
                     * The rounding mode used when rounding to the above decimal places, and when using
                     * toExponential, toFixed, toFormat and toPrecision, and round (default value).
                     * UP         0 Away from zero.
                     * DOWN       1 Towards zero.
                     * CEIL       2 Towards +Infinity.
                     * FLOOR      3 Towards -Infinity.
                     * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
                     * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
                     * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
                     * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
                     * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
                     */ROUNDING_MODE = 4,
            // 0 to 8
        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7,
            // 0 to -MAX
        // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21,
            // 0 to MAX
        // RANGE : [MIN_EXP, MAX_EXP]
        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -1e7,
            // -1 to -MAX
        // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7,
            // 1 to MAX
        // Whether BigNumber Errors are ever thrown.
        ERRORS = true,
            // true or false
        // Change to intValidatorNoErrors if ERRORS is false.
        isValidInt = intValidatorWithErrors,
            // intValidatorWithErrors/intValidatorNoErrors
        // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false,
            // true or false
        /*
                     * The modulo mode used when calculating the modulus: a mod n.
                     * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
                     * The remainder (r) is calculated as: r = a - n * q.
                     *
                     * UP        0 The remainder is positive if the dividend is negative, else is negative.
                     * DOWN      1 The remainder has the same sign as the dividend.
                     *             This modulo mode is commonly known as 'truncated division' and is
                     *             equivalent to (a % n) in JavaScript.
                     * FLOOR     3 The remainder has the same sign as the divisor (Python %).
                     * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
                     * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
                     *             The remainder is always positive.
                     *
                     * The truncated division, floored division, Euclidian division and IEEE 754 remainder
                     * modes are commonly used for the modulus operation.
                     * Although the other rounding modes can also be used, they may not give useful results.
                     */MODULO_MODE = 1,
            // 0 to 9
        // The maximum number of significant digits of the result of the toPower operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 100,
            // 0 to MAX
        // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = { decimalSeparator: '.', groupSeparator: ',', groupSize: 3, secondaryGroupSize: 0, fractionGroupSeparator: '\xA0', // non-breaking space
          fractionGroupSize: 0 }; /******************************************************************************************/ // CONSTRUCTOR
        /*
                 * The BigNumber constructor and exported function.
                 * Create and return a new instance of a BigNumber object.
                 *
                 * n {number|string|BigNumber} A numeric value.
                 * [b] {number} The base of n. Integer, 2 to 64 inclusive.
                 */function BigNumber(n, b) {
          var c,
              e,
              i,
              num,
              len,
              str,
              x = this; // Enable constructor usage without new.
          if (!(x instanceof BigNumber)) {
            // 'BigNumber() constructor call without new: {n}'
            if (ERRORS) raise(26, 'constructor call without new', n);return new BigNumber(n, b);
          } // 'new BigNumber() base not an integer: {b}'
          // 'new BigNumber() base out of range: {b}'
          if (b == null || !isValidInt(b, 2, 64, id, 'base')) {
            // Duplicate.
            if (n instanceof BigNumber) {
              x.s = n.s;x.e = n.e;x.c = (n = n.c) ? n.slice() : n;id = 0;return;
            }if ((num = typeof n == 'number') && n * 0 == 0) {
              x.s = 1 / n < 0 ? (n = -n, -1) : 1; // Fast path for integers.
              if (n === ~~n) {
                for (e = 0, i = n; i >= 10; i /= 10, e++) {}x.e = e;x.c = [n];id = 0;return;
              }str = n + '';
            } else {
              if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
          } else {
            b = b | 0;str = n + ''; // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
            // Allow exponential notation to be used with base 10 argument.
            if (b == 10) {
              x = new BigNumber(n instanceof BigNumber ? n : str);return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            } // Avoid potential interpretation of Infinity and NaN as base 44+ values.
            // Any number in exponential form will fail due to the [Ee][+-].
            if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {
              return parseNumeric(x, str, num, b);
            }if (num) {
              x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;if (ERRORS && str.replace(/^0\.0*|\./, '').length > 15) {
                // 'new BigNumber() number type has more than 15 significant digits: {n}'
                raise(id, tooManyDigits, n);
              } // Prevent later check for length on converted number.
              num = false;
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }str = convertBase(str, 10, b, x.s);
          } // Decimal point?
          if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?
          if ((i = str.search(/e/i)) > 0) {
            // Determine exponent.
            if (e < 0) e = i;e += +str.slice(i + 1);str = str.substring(0, i);
          } else if (e < 0) {
            // Integer.
            e = str.length;
          } // Determine leading zeros.
          for (i = 0; str.charCodeAt(i) === 48; i++) {} // Determine trailing zeros.
          for (len = str.length; str.charCodeAt(--len) === 48;) {}str = str.slice(i, len + 1);if (str) {
            len = str.length; // Disallow numbers with over 15 significant digits if number type.
            // 'new BigNumber() number type has more than 15 significant digits: {n}'
            if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
              raise(id, tooManyDigits, x.s * n);
            }e = e - i - 1; // Overflow?
            if (e > MAX_EXP) {
              // Infinity.
              x.c = x.e = null; // Underflow?
            } else if (e < MIN_EXP) {
              // Zero.
              x.c = [x.e = 0];
            } else {
              x.e = e;x.c = []; // Transform base
              // e is the base 10 exponent.
              // i is where to slice str to get the first element of the coefficient array.
              i = (e + 1) % LOG_BASE;if (e < 0) i += LOG_BASE;if (i < len) {
                if (i) x.c.push(+str.slice(0, i));for (len -= LOG_BASE; i < len;) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }str = str.slice(i);i = LOG_BASE - str.length;
              } else {
                i -= len;
              }for (; i--; str += '0') {}x.c.push(+str);
            }
          } else {
            // Zero.
            x.c = [x.e = 0];
          }id = 0;
        } // CONSTRUCTOR PROPERTIES
        BigNumber.another = constructorFactory;BigNumber.ROUND_UP = 0;BigNumber.ROUND_DOWN = 1;BigNumber.ROUND_CEIL = 2;BigNumber.ROUND_FLOOR = 3;BigNumber.ROUND_HALF_UP = 4;BigNumber.ROUND_HALF_DOWN = 5;BigNumber.ROUND_HALF_EVEN = 6;BigNumber.ROUND_HALF_CEIL = 7;BigNumber.ROUND_HALF_FLOOR = 8;BigNumber.EUCLID = 9; /*
                                                                                                                                                                                                                                                                                                                             * Configure infrequently-changing library-wide settings.
                                                                                                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                                                                                                             * Accept an object or an argument list, with one or many of the following properties or
                                                                                                                                                                                                                                                                                                                             * parameters respectively:
                                                                                                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                                                                                                             *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
                                                                                                                                                                                                                                                                                                                             *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
                                                                                                                                                                                                                                                                                                                             *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
                                                                                                                                                                                                                                                                                                                             *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
                                                                                                                                                                                                                                                                                                                             *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
                                                                                                                                                                                                                                                                                                                             *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
                                                                                                                                                                                                                                                                                                                             *   ERRORS          {boolean|number}   true, false, 1 or 0
                                                                                                                                                                                                                                                                                                                             *   CRYPTO          {boolean|number}   true, false, 1 or 0
                                                                                                                                                                                                                                                                                                                             *   MODULO_MODE     {number}           0 to 9 inclusive
                                                                                                                                                                                                                                                                                                                             *   POW_PRECISION   {number}           0 to MAX inclusive
                                                                                                                                                                                                                                                                                                                             *   FORMAT          {object}           See BigNumber.prototype.toFormat
                                                                                                                                                                                                                                                                                                                             *      decimalSeparator       {string}
                                                                                                                                                                                                                                                                                                                             *      groupSeparator         {string}
                                                                                                                                                                                                                                                                                                                             *      groupSize              {number}
                                                                                                                                                                                                                                                                                                                             *      secondaryGroupSize     {number}
                                                                                                                                                                                                                                                                                                                             *      fractionGroupSeparator {string}
                                                                                                                                                                                                                                                                                                                             *      fractionGroupSize      {number}
                                                                                                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                                                                                                             * (The values assigned to the above FORMAT object properties are not checked for validity.)
                                                                                                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                                                                                                             * E.g.
                                                                                                                                                                                                                                                                                                                             * BigNumber.config(20, 4) is equivalent to
                                                                                                                                                                                                                                                                                                                             * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
                                                                                                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                                                                                                             * Ignore properties/parameters set to null or undefined.
                                                                                                                                                                                                                                                                                                                             * Return an object with the properties current values.
                                                                                                                                                                                                                                                                                                                             */BigNumber.config = function () {
          var v,
              p,
              i = 0,
              r = {},
              a = arguments,
              o = a[0],
              has = o && (typeof o === "undefined" ? "undefined" : _typeof(o)) == 'object' ? function () {
            if (o.hasOwnProperty(p)) return (v = o[p]) != null;
          } : function () {
            if (a.length > i) return (v = a[i++]) != null;
          }; // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // 'config() DECIMAL_PLACES not an integer: {v}'
          // 'config() DECIMAL_PLACES out of range: {v}'
          if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {
            DECIMAL_PLACES = v | 0;
          }r[p] = DECIMAL_PLACES; // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // 'config() ROUNDING_MODE not an integer: {v}'
          // 'config() ROUNDING_MODE out of range: {v}'
          if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {
            ROUNDING_MODE = v | 0;
          }r[p] = ROUNDING_MODE; // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // 'config() EXPONENTIAL_AT not an integer: {v}'
          // 'config() EXPONENTIAL_AT out of range: {v}'
          if (has(p = 'EXPONENTIAL_AT')) {
            if (isArray(v)) {
              if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {
                TO_EXP_NEG = v[0] | 0;TO_EXP_POS = v[1] | 0;
              }
            } else if (isValidInt(v, -MAX, MAX, 2, p)) {
              TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);
            }
          }r[p] = [TO_EXP_NEG, TO_EXP_POS]; // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // 'config() RANGE not an integer: {v}'
          // 'config() RANGE cannot be zero: {v}'
          // 'config() RANGE out of range: {v}'
          if (has(p = 'RANGE')) {
            if (isArray(v)) {
              if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {
                MIN_EXP = v[0] | 0;MAX_EXP = v[1] | 0;
              }
            } else if (isValidInt(v, -MAX, MAX, 2, p)) {
              if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);
            }
          }r[p] = [MIN_EXP, MAX_EXP]; // ERRORS {boolean|number} true, false, 1 or 0.
          // 'config() ERRORS not a boolean or binary digit: {v}'
          if (has(p = 'ERRORS')) {
            if (v === !!v || v === 1 || v === 0) {
              id = 0;isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;
            } else if (ERRORS) {
              raise(2, p + notBool, v);
            }
          }r[p] = ERRORS; // CRYPTO {boolean|number} true, false, 1 or 0.
          // 'config() CRYPTO not a boolean or binary digit: {v}'
          // 'config() crypto unavailable: {crypto}'
          if (has(p = 'CRYPTO')) {
            if (v === !!v || v === 1 || v === 0) {
              CRYPTO = !!(v && cryptoObj);if (v && !CRYPTO && ERRORS) raise(2, 'crypto unavailable', cryptoObj);
            } else if (ERRORS) {
              raise(2, p + notBool, v);
            }
          }r[p] = CRYPTO; // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // 'config() MODULO_MODE not an integer: {v}'
          // 'config() MODULO_MODE out of range: {v}'
          if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {
            MODULO_MODE = v | 0;
          }r[p] = MODULO_MODE; // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // 'config() POW_PRECISION not an integer: {v}'
          // 'config() POW_PRECISION out of range: {v}'
          if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {
            POW_PRECISION = v | 0;
          }r[p] = POW_PRECISION; // FORMAT {object}
          // 'config() FORMAT not an object: {v}'
          if (has(p = 'FORMAT')) {
            if ((typeof v === "undefined" ? "undefined" : _typeof(v)) == 'object') {
              FORMAT = v;
            } else if (ERRORS) {
              raise(2, p + ' not an object', v);
            }
          }r[p] = FORMAT;return r;
        }; /*
           * Return a new BigNumber whose value is the maximum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */BigNumber.max = function () {
          return maxOrMin(arguments, P.lt);
        }; /*
           * Return a new BigNumber whose value is the minimum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */BigNumber.min = function () {
          return maxOrMin(arguments, P.gt);
        }; /*
           * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
           * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
           * zeros are produced).
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           *
           * 'random() decimal places not an integer: {dp}'
           * 'random() decimal places out of range: {dp}'
           * 'random() crypto unavailable: {crypto}'
           */BigNumber.random = function () {
          var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
          // Check if Math.random() produces more than 32 bits of randomness.
          // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
          // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
          var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
            return mathfloor(Math.random() * pow2_53);
          } : function () {
            return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
          };return function (dp) {
            var a,
                b,
                e,
                k,
                v,
                i = 0,
                c = [],
                rand = new BigNumber(ONE);dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;k = mathceil(dp / LOG_BASE);if (CRYPTO) {
              // Browsers supporting crypto.getRandomValues.
              if (cryptoObj && cryptoObj.getRandomValues) {
                a = cryptoObj.getRandomValues(new Uint32Array(k *= 2));for (; i < k;) {
                  // 53 bits:
                  // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                  // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                  // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                  //                                     11111 11111111 11111111
                  // 0x20000 is 2^21.
                  v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:
                  // 0 <= v < 9007199254740992
                  // Probability that v >= 9e15, is
                  // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                  if (v >= 9e15) {
                    b = cryptoObj.getRandomValues(new Uint32Array(2));a[i] = b[0];a[i + 1] = b[1];
                  } else {
                    // 0 <= v <= 8999999999999999
                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);i += 2;
                  }
                }i = k / 2; // Node.js supporting crypto.randomBytes.
              } else if (cryptoObj && cryptoObj.randomBytes) {
                // buffer
                a = cryptoObj.randomBytes(k *= 7);for (; i < k;) {
                  // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                  // 0x100000000 is 2^32, 0x1000000 is 2^24
                  // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                  // 0 <= v < 9007199254740992
                  v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];if (v >= 9e15) {
                    cryptoObj.randomBytes(7).copy(a, i);
                  } else {
                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);i += 7;
                  }
                }i = k / 7;
              } else if (ERRORS) {
                raise(14, 'crypto unavailable', cryptoObj);
              }
            } // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
            if (!i) {
              for (; i < k;) {
                v = random53bitInt();if (v < 9e15) c[i++] = v % 1e14;
              }
            }k = c[--i];dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];c[i] = mathfloor(k / v) * v;
            } // Remove trailing elements which are zero.
            for (; c[i] === 0; c.pop(), i--) {} // Zero?
            if (i < 0) {
              c = [e = 0];
            } else {
              // Remove leading elements which are zero and adjust exponent accordingly.
              for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE) {} // Count the digits of the first element of c to determine leading zeros, and...
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {} // adjust the exponent accordingly.
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }rand.e = e;rand.c = c;return rand;
          };
        }(); // PRIVATE FUNCTIONS
        // Convert a numeric string of baseIn to a numeric string of baseOut.
        function convertBase(str, baseOut, baseIn, sign) {
          var d,
              e,
              k,
              r,
              x,
              xc,
              y,
              i = str.indexOf('.'),
              dp = DECIMAL_PLACES,
              rm = ROUNDING_MODE;if (baseIn < 37) str = str.toLowerCase(); // Non-integer.
          if (i >= 0) {
            k = POW_PRECISION; // Unlimited precision.
            POW_PRECISION = 0;str = str.replace('.', '');y = new BigNumber(baseIn);x = y.pow(str.length - i);POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the
            // result by its base raised to a power.
            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);y.e = y.c.length;
          } // Convert the number as integer.
          xc = toBaseOut(str, baseIn, baseOut);e = k = xc.length; // Remove trailing zeros.
          for (; xc[--k] == 0; xc.pop()) {}if (!xc[0]) return '0';if (i < 0) {
            --e;
          } else {
            x.c = xc;x.e = e; // sign is needed for correct rounding.
            x.s = sign;x = div(x, y, dp, rm, baseOut);xc = x.c;r = x.r;e = x.e;
          }d = e + dp + 1; // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
          i = xc[d];k = baseOut / 2;r = r || d < 0 || xc[d + 1] != null;r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));if (d < 1 || !xc[0]) {
            // 1^-dp or 0.
            str = r ? toFixedPoint('1', -dp) : '0';
          } else {
            xc.length = d;if (r) {
              // Rounding up may mean the previous digit has to be rounded up and so on.
              for (--baseOut; ++xc[--d] > baseOut;) {
                xc[d] = 0;if (!d) {
                  ++e;xc.unshift(1);
                }
              }
            } // Determine trailing zeros.
            for (k = xc.length; !xc[--k];) {} // E.g. [4, 11, 15] becomes 4bf.
            for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++])) {}str = toFixedPoint(str, e);
          } // The caller will add the sign.
          return str;
        } // Perform division in the specified base. Called by div and convertBase.
        div = function () {
          // Assume non-zero x and k.
          function multiply(x, k, base) {
            var m,
                temp,
                xlo,
                xhi,
                carry = 0,
                i = x.length,
                klo = k % SQRT_BASE,
                khi = k / SQRT_BASE | 0;for (x = x.slice(); i--;) {
              xlo = x[i] % SQRT_BASE;xhi = x[i] / SQRT_BASE | 0;m = khi * xlo + xhi * klo;temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;x[i] = temp % base;
            }if (carry) x.unshift(carry);return x;
          }function compare(a, b, aL, bL) {
            var i, cmp;if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;break;
                }
              }
            }return cmp;
          }function subtract(a, b, aL, base) {
            var i = 0; // Subtract b from a.
            for (; aL--;) {
              a[aL] -= i;i = a[aL] < b[aL] ? 1 : 0;a[aL] = i * base + a[aL] - b[aL];
            } // Remove leading zeros.
            for (; !a[0] && a.length > 1; a.shift()) {}
          } // x: dividend, y: divisor.
          return function (x, y, dp, rm, base) {
            var cmp,
                e,
                i,
                more,
                n,
                prod,
                prodL,
                q,
                qc,
                rem,
                remL,
                rem0,
                xi,
                xL,
                yc0,
                yL,
                yz,
                s = x.s == y.s ? 1 : -1,
                xc = x.c,
                yc = y.c; // Either NaN, Infinity or 0?
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.
              !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
              xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
            }q = new BigNumber(s);qc = q.c = [];e = x.e - y.e;s = dp + e + 1;if (!base) {
              base = BASE;e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);s = s / LOG_BASE | 0;
            } // Result exponent may be one less then the current value of e.
            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
            for (i = 0; yc[i] == (xc[i] || 0); i++) {}if (yc[i] > (xc[i] || 0)) e--;if (s < 0) {
              qc.push(1);more = true;
            } else {
              xL = xc.length;yL = yc.length;i = 0;s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.
              n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
              // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
              if (n > 1) {
                yc = multiply(yc, n, base);xc = multiply(xc, n, base);yL = yc.length;xL = xc.length;
              }xi = yL;rem = xc.slice(0, yL);remL = rem.length; // Add zeros to make remainder as long as divisor.
              for (; remL < yL; rem[remL++] = 0) {}yz = yc.slice();yz.unshift(0);yc0 = yc[0];if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.
              // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;
              do {
                n = 0; // Compare divisor and remainder.
                cmp = compare(yc, rem, yL, remL); // If divisor < remainder.
                if (cmp < 0) {
                  // Calculate trial digit, n.
                  rem0 = rem[0];if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.
                  n = mathfloor(rem0 / yc0); //  Algorithm:
                  //  1. product = divisor * trial digit (n)
                  //  2. if product > remainder: product -= divisor, n--
                  //  3. remainder -= product
                  //  4. if product was < remainder at 2:
                  //    5. compare new remainder and divisor
                  //    6. If remainder > divisor: remainder -= divisor, n++
                  if (n > 1) {
                    // n may be > base only when base is 3.
                    if (n >= base) n = base - 1; // product = divisor * trial digit.
                    prod = multiply(yc, n, base);prodL = prod.length;remL = rem.length; // Compare product and remainder.
                    // If product > remainder.
                    // Trial digit n too high.
                    // n is 1 too high about 5% of the time, and is not known to have
                    // ever been more than 1 too high.
                    while (compare(prod, rem, prodL, remL) == 1) {
                      n--; // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);prodL = prod.length;cmp = 1;
                    }
                  } else {
                    // n is 0 or 1, cmp is -1.
                    // If n is 0, there is no need to compare yc and rem again below,
                    // so change cmp to 1 to avoid it.
                    // If n is 1, leave cmp as -1, so yc and rem are compared again.
                    if (n == 0) {
                      // divisor < remainder, so n must be at least 1.
                      cmp = n = 1;
                    } // product = divisor
                    prod = yc.slice();prodL = prod.length;
                  }if (prodL < remL) prod.unshift(0); // Subtract product from remainder.
                  subtract(rem, prod, remL, base);remL = rem.length; // If product was < remainder.
                  if (cmp == -1) {
                    // Compare divisor and new remainder.
                    // If divisor < new remainder, subtract divisor from remainder.
                    // Trial digit n too low.
                    // n is 1 too low about 5% of the time, and very rarely 2 too low.
                    while (compare(yc, rem, yL, remL) < 1) {
                      n++; // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yc, remL, base);remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;rem = [0];
                } // else cmp === 1 and n will be 0
                // Add the next digit, n, to the result array.
                qc[i++] = n; // Update the remainder.
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);more = rem[0] != null; // Leading zero?
              if (!qc[0]) qc.shift();
            }if (base == BASE) {
              // To calculate q.e, first get the number of digits of qc[0].
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {}round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.
            } else {
              q.e = e;q.r = +more;
            }return q;
          };
        }(); /*
             * Return a string representing the value of BigNumber n in fixed-point or exponential
             * notation rounded to the specified decimal places or significant digits.
             *
             * n is a BigNumber.
             * i is the index of the last digit required (i.e. the digit that may be rounded up).
             * rm is the rounding mode.
             * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
             */function format(n, i, rm, caller) {
          var c0, e, ne, len, str;rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;if (!n.c) return n.toString();c0 = n.c[0];ne = n.e;if (i == null) {
            str = coeffToString(n.c);str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);
          } else {
            n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.
            e = n.e;str = coeffToString(n.c);len = str.length; // toPrecision returns exponential notation if the number of significant digits
            // specified is less than the number of digits necessary to represent the integer
            // part of the value in fixed-point notation.
            // Exponential notation.
            if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {
              // Append zeros?
              for (; len < i; str += '0', len++) {}str = toExponential(str, e); // Fixed-point notation.
            } else {
              i -= ne;str = toFixedPoint(str, e); // Append zeros?
              if (e + 1 > len) {
                if (--i > 0) for (str += '.'; i--; str += '0') {}
              } else {
                i += e - len;if (i > 0) {
                  if (e + 1 == len) str += '.';for (; i--; str += '0') {}
                }
              }
            }
          }return n.s < 0 && c0 ? '-' + str : str;
        } // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
          var m,
              n,
              i = 0;if (isArray(args[0])) args = args[0];m = new BigNumber(args[0]);for (; ++i < args.length;) {
            n = new BigNumber(args[i]); // If any number is NaN, return NaN.
            if (!n.s) {
              m = n;break;
            } else if (method.call(m, n)) {
              m = n;
            }
          }return m;
        } /*
          * Return true if n is an integer in range, otherwise throw.
          * Use for argument validation when ERRORS is true.
          */function intValidatorWithErrors(n, min, max, caller, name) {
          if (n < min || n > max || n != truncate(n)) {
            raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);
          }return true;
        } /*
          * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
          * Called by minus, plus and times.
          */function normalise(n, c, e) {
          var i = 1,
              j = c.length; // Remove trailing zeros.
          for (; !c[--j]; c.pop()) {} // Calculate the base 10 exponent. First get the number of digits of c[0].
          for (j = c[0]; j >= 10; j /= 10, i++) {} // Overflow?
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            // Infinity.
            n.c = n.e = null; // Underflow?
          } else if (e < MIN_EXP) {
            // Zero.
            n.c = [n.e = 0];
          } else {
            n.e = e;n.c = c;
          }return n;
        } // Handle values that fail the validity test in BigNumber.
        parseNumeric = function () {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
              dotAfter = /^([^.]+)\.$/,
              dotBefore = /^\.([^.]+)$/,
              isInfinityOrNaN = /^-?(Infinity|NaN)$/,
              whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;return function (x, str, num, b) {
            var base,
                s = num ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!num) {
                // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                s = s.replace(basePrefix, function (m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;return !b || b == base ? p1 : m;
                });if (b) {
                  base = b; // E.g. '1.' to '1', '.1' to '0.1'
                  s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                }if (str != s) return new BigNumber(s, base);
              } // 'new BigNumber() not a number: {n}'
              // 'new BigNumber() not a base {b} number: {n}'
              if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);x.s = null;
            }x.c = x.e = null;id = 0;
          };
        }(); // Throw a BigNumber Error.
        function raise(caller, msg, val) {
          var error = new Error(['new BigNumber', // 0
          'cmp', // 1
          'config', // 2
          'div', // 3
          'divToInt', // 4
          'eq', // 5
          'gt', // 6
          'gte', // 7
          'lt', // 8
          'lte', // 9
          'minus', // 10
          'mod', // 11
          'plus', // 12
          'precision', // 13
          'random', // 14
          'round', // 15
          'shift', // 16
          'times', // 17
          'toDigits', // 18
          'toExponential', // 19
          'toFixed', // 20
          'toFormat', // 21
          'toFraction', // 22
          'pow', // 23
          'toPrecision', // 24
          'toString', // 25
          'BigNumber' // 26
          ][caller] + '() ' + msg + ': ' + val);error.name = 'BigNumber Error';id = 0;throw error;
        } /*
          * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
          * If r is truthy, it is known that there are more digits after the rounding digit.
          */function round(x, sd, rm, r) {
          var d,
              i,
              j,
              k,
              n,
              ni,
              rd,
              xc = x.c,
              pows10 = POWS_TEN; // if x is not Infinity or NaN...
          if (xc) {
            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
            // n is a base 1e14 number, the value of the element of array x.c containing rd.
            // ni is the index of n within x.c.
            // d is the number of digits of n.
            // i is the index of rd within n including leading zeros.
            // j is the actual index of rd within n (if < 0, rd is a leading zero).
            out: {
              // Get the number of digits of the first element of xc.
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {}i = sd - d; // If the rounding digit is in the first element of xc...
              if (i < 0) {
                i += LOG_BASE;j = sd;n = xc[ni = 0]; // Get the rounding digit at index j of n.
                rd = n / pows10[d - j - 1] % 10 | 0;
              } else {
                ni = mathceil((i + 1) / LOG_BASE);if (ni >= xc.length) {
                  if (r) {
                    // Needed by sqrt.
                    for (; xc.length <= ni; xc.push(0)) {}n = rd = 0;d = 1;i %= LOG_BASE;j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni]; // Get the number of digits of n.
                  for (d = 1; k >= 10; k /= 10, d++) {} // Get the index of rd within n.
                  i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.
                  // The number of leading zeros of n is given by LOG_BASE - d.
                  j = i - LOG_BASE + d; // Get the rounding digit at index j of n.
                  rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                }
              }r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));if (sd < 1 || !xc[0]) {
                xc.length = 0;if (r) {
                  // Convert sd to decimal places.
                  sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];x.e = -sd || 0;
                } else {
                  // Zero.
                  xc[0] = x.e = 0;
                }return x;
              } // Remove excess digits.
              if (i == 0) {
                xc.length = ni;k = 1;ni--;
              } else {
                xc.length = ni + 1;k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                // j > 0 means i > number of leading zeros of n.
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              } // Round up?
              if (r) {
                for (;;) {
                  // If the digit to be rounded up is in the first element of xc...
                  if (ni == 0) {
                    // i will be the length of xc[0] before k is added.
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {}j = xc[0] += k;for (k = 1; j >= 10; j /= 10, k++) {} // if i != k the length has increased.
                    if (i != k) {
                      x.e++;if (xc[0] == BASE) xc[0] = 1;
                    }break;
                  } else {
                    xc[ni] += k;if (xc[ni] != BASE) break;xc[ni--] = 0;k = 1;
                  }
                }
              } // Remove trailing zeros.
              for (i = xc.length; xc[--i] === 0; xc.pop()) {}
            } // Overflow? Infinity.
            if (x.e > MAX_EXP) {
              x.c = x.e = null; // Underflow? Zero.
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }return x;
        } // PROTOTYPE/INSTANCE METHODS
        /*
                 * Return a new BigNumber whose value is the absolute value of this BigNumber.
                 */P.absoluteValue = P.abs = function () {
          var x = new BigNumber(this);if (x.s < 0) x.s = 1;return x;
        }; /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
           * number in the direction of Infinity.
           */P.ceil = function () {
          return round(new BigNumber(this), this.e + 1, 2);
        }; /*
           * Return
           * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
           * 0 if they have the same value,
           * or null if the value of either is NaN.
           */P.comparedTo = P.cmp = function (y, b) {
          id = 1;return compare(this, new BigNumber(y, b));
        }; /*
           * Return the number of decimal places of the value of this BigNumber, or null if the value
           * of this BigNumber is ±Infinity or NaN.
           */P.decimalPlaces = P.dp = function () {
          var n,
              v,
              c = this.c;if (!c) return null;n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {}if (n < 0) n = 0;return n;
        }; /*
           *  n / 0 = I
           *  n / N = N
           *  n / I = 0
           *  0 / n = 0
           *  0 / 0 = N
           *  0 / N = N
           *  0 / I = 0
           *  N / n = N
           *  N / 0 = N
           *  N / N = N
           *  N / I = N
           *  I / n = I
           *  I / 0 = I
           *  I / N = N
           *  I / I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
           * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */P.dividedBy = P.div = function (y, b) {
          id = 3;return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        }; /*
           * Return a new BigNumber whose value is the integer part of dividing the value of this
           * BigNumber by the value of BigNumber(y, b).
           */P.dividedToIntegerBy = P.divToInt = function (y, b) {
          id = 4;return div(this, new BigNumber(y, b), 0, 1);
        }; /*
           * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
           * otherwise returns false.
           */P.equals = P.eq = function (y, b) {
          id = 5;return compare(this, new BigNumber(y, b)) === 0;
        }; /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
           * number in the direction of -Infinity.
           */P.floor = function () {
          return round(new BigNumber(this), this.e + 1, 3);
        }; /*
           * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * otherwise returns false.
           */P.greaterThan = P.gt = function (y, b) {
          id = 6;return compare(this, new BigNumber(y, b)) > 0;
        }; /*
           * Return true if the value of this BigNumber is greater than or equal to the value of
           * BigNumber(y, b), otherwise returns false.
           */P.greaterThanOrEqualTo = P.gte = function (y, b) {
          id = 7;return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
        }; /*
           * Return true if the value of this BigNumber is a finite number, otherwise returns false.
           */P.isFinite = function () {
          return !!this.c;
        }; /*
           * Return true if the value of this BigNumber is an integer, otherwise return false.
           */P.isInteger = P.isInt = function () {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        }; /*
           * Return true if the value of this BigNumber is NaN, otherwise returns false.
           */P.isNaN = function () {
          return !this.s;
        }; /*
           * Return true if the value of this BigNumber is negative, otherwise returns false.
           */P.isNegative = P.isNeg = function () {
          return this.s < 0;
        }; /*
           * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
           */P.isZero = function () {
          return !!this.c && this.c[0] == 0;
        }; /*
           * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
           * otherwise returns false.
           */P.lessThan = P.lt = function (y, b) {
          id = 8;return compare(this, new BigNumber(y, b)) < 0;
        }; /*
           * Return true if the value of this BigNumber is less than or equal to the value of
           * BigNumber(y, b), otherwise returns false.
           */P.lessThanOrEqualTo = P.lte = function (y, b) {
          id = 9;return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        }; /*
           *  n - 0 = n
           *  n - N = N
           *  n - I = -I
           *  0 - n = -n
           *  0 - 0 = 0
           *  0 - N = N
           *  0 - I = -I
           *  N - n = N
           *  N - 0 = N
           *  N - N = N
           *  N - I = N
           *  I - n = I
           *  I - 0 = I
           *  I - N = N
           *  I - I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber minus the value of
           * BigNumber(y, b).
           */P.minus = P.sub = function (y, b) {
          var i,
              j,
              t,
              xLTy,
              x = this,
              a = x.s;id = 10;y = new BigNumber(y, b);b = y.s; // Either NaN?
          if (!a || !b) return new BigNumber(NaN); // Signs differ?
          if (a != b) {
            y.s = -b;return x.plus(y);
          }var xe = x.e / LOG_BASE,
              ye = y.e / LOG_BASE,
              xc = x.c,
              yc = y.c;if (!xe || !ye) {
            // Either Infinity?
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?
            if (!xc[0] || !yc[0]) {
              // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
              return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
              ROUNDING_MODE == 3 ? -0 : 0);
            }
          }xe = bitFloor(xe);ye = bitFloor(ye);xc = xc.slice(); // Determine which is the bigger number.
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;t = xc;
            } else {
              ye = xe;t = yc;
            }t.reverse(); // Prepend zeros to equalise exponents.
            for (b = a; b--; t.push(0)) {}t.reverse();
          } else {
            // Exponents equal. Check digit by digit.
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];break;
              }
            }
          } // x < y? Point xc to the array of the bigger number.
          if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.
          // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
          if (b > 0) for (; b--; xc[i++] = 0) {}b = BASE - 1; // Subtract yc from xc.
          for (; j > a;) {
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b) {}--xc[i];xc[j] += BASE;
            }xc[j] -= yc[j];
          } // Remove leading zeros and adjust exponent accordingly.
          for (; xc[0] == 0; xc.shift(), --ye) {} // Zero?
          if (!xc[0]) {
            // Following IEEE 754 (2008) 6.3,
            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
            y.s = ROUNDING_MODE == 3 ? -1 : 1;y.c = [y.e = 0];return y;
          } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
          // for finite x and y.
          return normalise(y, xc, ye);
        }; /*
           *   n % 0 =  N
           *   n % N =  N
           *   n % I =  n
           *   0 % n =  0
           *  -0 % n = -0
           *   0 % 0 =  N
           *   0 % N =  N
           *   0 % I =  0
           *   N % n =  N
           *   N % 0 =  N
           *   N % N =  N
           *   N % I =  N
           *   I % n =  N
           *   I % 0 =  N
           *   I % N =  N
           *   I % I =  N
           *
           * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
           * BigNumber(y, b). The result depends on the value of MODULO_MODE.
           */P.modulo = P.mod = function (y, b) {
          var q,
              s,
              x = this;id = 11;y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber(NaN); // Return x if y is Infinity or x is zero.
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber(x);
          }if (MODULO_MODE == 9) {
            // Euclidian division: q = sign(y) * floor(x / abs(y))
            // r = x - qy    where  0 <= r < abs(y)
            s = y.s;y.s = 1;q = div(x, y, 0, 3);y.s = s;q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }return x.minus(q.times(y));
        }; /*
           * Return a new BigNumber whose value is the value of this BigNumber negated,
           * i.e. multiplied by -1.
           */P.negated = P.neg = function () {
          var x = new BigNumber(this);x.s = -x.s || null;return x;
        }; /*
           *  n + 0 = n
           *  n + N = N
           *  n + I = I
           *  0 + n = n
           *  0 + 0 = 0
           *  0 + N = N
           *  0 + I = I
           *  N + n = N
           *  N + 0 = N
           *  N + N = N
           *  N + I = N
           *  I + n = I
           *  I + 0 = I
           *  I + N = N
           *  I + I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber plus the value of
           * BigNumber(y, b).
           */P.plus = P.add = function (y, b) {
          var t,
              x = this,
              a = x.s;id = 12;y = new BigNumber(y, b);b = y.s; // Either NaN?
          if (!a || !b) return new BigNumber(NaN); // Signs differ?
          if (a != b) {
            y.s = -b;return x.minus(y);
          }var xe = x.e / LOG_BASE,
              ye = y.e / LOG_BASE,
              xc = x.c,
              yc = y.c;if (!xe || !ye) {
            // Return ±Infinity if either ±Infinity.
            if (!xc || !yc) return new BigNumber(a / 0); // Either zero?
            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
          }xe = bitFloor(xe);ye = bitFloor(ye);xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;t = yc;
            } else {
              a = -a;t = xc;
            }t.reverse();for (; a--; t.push(0)) {}t.reverse();
          }a = xc.length;b = yc.length; // Point xc to the longer array, and b to the shorter length.
          if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
          for (a = 0; b;) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;xc[b] %= BASE;
          }if (a) {
            xc.unshift(a);++ye;
          } // No need to check for zero, as +x + +y != 0 && -x + -y != 0
          // ye = MAX_EXP + 1 possible
          return normalise(y, xc, ye);
        }; /*
           * Return the number of significant digits of the value of this BigNumber.
           *
           * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
           */P.precision = P.sd = function (z) {
          var n,
              v,
              x = this,
              c = x.c; // 'precision() argument not a boolean or binary digit: {z}'
          if (z != null && z !== !!z && z !== 1 && z !== 0) {
            if (ERRORS) raise(13, 'argument' + notBool, z);if (z != !!z) z = null;
          }if (!c) return null;v = c.length - 1;n = v * LOG_BASE + 1;if (v = c[v]) {
            // Subtract the number of trailing zeros of the last element.
            for (; v % 10 == 0; v /= 10, n--) {} // Add the number of digits of the first element.
            for (v = c[0]; v >= 10; v /= 10, n++) {}
          }if (z && x.e + 1 > n) n = x.e + 1;return n;
        }; /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
           * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
           * omitted.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'round() decimal places out of range: {dp}'
           * 'round() decimal places not an integer: {dp}'
           * 'round() rounding mode not an integer: {rm}'
           * 'round() rounding mode out of range: {rm}'
           */P.round = function (dp, rm) {
          var n = new BigNumber(this);if (dp == null || isValidInt(dp, 0, MAX, 15)) {
            round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);
          }return n;
        }; /*
           * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
           * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
           *
           * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           *
           * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
           * otherwise.
           *
           * 'shift() argument not an integer: {k}'
           * 'shift() argument out of range: {k}'
           */P.shift = function (k) {
          var n = this;return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument') // k < 1e+21, or truncate(k) will produce exponential notation.
          ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);
        }; /*
           *  sqrt(-n) =  N
           *  sqrt( N) =  N
           *  sqrt(-I) =  N
           *  sqrt( I) =  I
           *  sqrt( 0) =  0
           *  sqrt(-0) = -0
           *
           * Return a new BigNumber whose value is the square root of the value of this BigNumber,
           * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */P.squareRoot = P.sqrt = function () {
          var m,
              n,
              r,
              rep,
              t,
              x = this,
              c = x.c,
              s = x.s,
              e = x.e,
              dp = DECIMAL_PLACES + 4,
              half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          } // Initial estimate.
          s = Math.sqrt(+x); // Math.sqrt underflow/overflow?
          // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);if ((n.length + e) % 2 == 0) n += '0';s = Math.sqrt(n);e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);if (s == 1 / 0) {
              n = '1e' + e;
            } else {
              n = s.toExponential();n = n.slice(0, n.indexOf('e') + 1) + e;
            }r = new BigNumber(n);
          } else {
            r = new BigNumber(s + '');
          } // Check for zero.
          // r could be zero if MIN_EXP is changed after the this value was created.
          // This would cause a division by zero (x/t) and hence Infinity below, which would cause
          // coeffToString to throw.
          if (r.c[0]) {
            e = r.e;s = e + dp;if (s < 3) s = 0; // Newton-Raphson iteration.
            for (;;) {
              t = r;r = half.times(t.plus(div(x, t, dp, 1)));if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                // The exponent of r may here be one less than the final result exponent,
                // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                // are indexed correctly.
                if (r.e < e) --s;n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                // iteration.
                if (n == '9999' || !rep && n == '4999') {
                  // On the first iteration only, check to see if rounding up gives the
                  // exact result as the nines may infinitely repeat.
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);if (t.times(t).eq(x)) {
                      r = t;break;
                    }
                  }dp += 4;s += 4;rep = 1;
                } else {
                  // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                  // result. If not, then there are further digits and m will be truthy.
                  if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                    // Truncate to the first rounding digit.
                    round(r, r.e + DECIMAL_PLACES + 2, 1);m = !r.times(r).eq(x);
                  }break;
                }
              }
            }
          }return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        }; /*
           *  n * 0 = 0
           *  n * N = N
           *  n * I = I
           *  0 * n = 0
           *  0 * 0 = 0
           *  0 * N = N
           *  0 * I = N
           *  N * n = N
           *  N * 0 = N
           *  N * N = N
           *  N * I = N
           *  I * n = I
           *  I * 0 = N
           *  I * N = N
           *  I * I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber times the value of
           * BigNumber(y, b).
           */P.times = P.mul = function (y, b) {
          var c,
              e,
              i,
              j,
              k,
              m,
              xcL,
              xlo,
              xhi,
              ycL,
              ylo,
              yhi,
              zc,
              base,
              sqrtBase,
              x = this,
              xc = x.c,
              yc = (id = 17, y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?
          if (!xc || !yc || !xc[0] || !yc[0]) {
            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s; // Return ±Infinity if either is ±Infinity.
              if (!xc || !yc) {
                y.c = y.e = null; // Return ±0 if either is ±0.
              } else {
                y.c = [0];y.e = 0;
              }
            }return y;
          }e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);y.s *= x.s;xcL = xc.length;ycL = yc.length; // Ensure xc points to longer array and xcL to its length.
          if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.
          for (i = xcL + ycL, zc = []; i--; zc.push(0)) {}base = BASE;sqrtBase = SQRT_BASE;for (i = ycL; --i >= 0;) {
            c = 0;ylo = yc[i] % sqrtBase;yhi = yc[i] / sqrtBase | 0;for (k = xcL, j = i + k; j > i;) {
              xlo = xc[--k] % sqrtBase;xhi = xc[k] / sqrtBase | 0;m = yhi * xlo + xhi * ylo;xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;zc[j--] = xlo % base;
            }zc[j] = c;
          }if (c) {
            ++e;
          } else {
            zc.shift();
          }return normalise(y, zc, e);
        }; /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
           * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toDigits() precision out of range: {sd}'
           * 'toDigits() precision not an integer: {sd}'
           * 'toDigits() rounding mode not an integer: {rm}'
           * 'toDigits() rounding mode out of range: {rm}'
           */P.toDigits = function (sd, rm) {
          var n = new BigNumber(this);sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;return sd ? round(n, sd, rm) : n;
        }; /*
           * Return a string representing the value of this BigNumber in exponential notation and
           * rounded using ROUNDING_MODE to dp fixed decimal places.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toExponential() decimal places not an integer: {dp}'
           * 'toExponential() decimal places out of range: {dp}'
           * 'toExponential() rounding mode not an integer: {rm}'
           * 'toExponential() rounding mode out of range: {rm}'
           */P.toExponential = function (dp, rm) {
          return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);
        }; /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounding
           * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
           * but e.g. (-0.00001).toFixed(0) is '-0'.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toFixed() decimal places not an integer: {dp}'
           * 'toFixed() decimal places out of range: {dp}'
           * 'toFixed() rounding mode not an integer: {rm}'
           * 'toFixed() rounding mode out of range: {rm}'
           */P.toFixed = function (dp, rm) {
          return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);
        }; /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounded
           * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
           * of the FORMAT object (see BigNumber.config).
           *
           * FORMAT = {
           *      decimalSeparator : '.',
           *      groupSeparator : ',',
           *      groupSize : 3,
           *      secondaryGroupSize : 0,
           *      fractionGroupSeparator : '\xA0',    // non-breaking space
           *      fractionGroupSize : 0
           * };
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toFormat() decimal places not an integer: {dp}'
           * 'toFormat() decimal places out of range: {dp}'
           * 'toFormat() rounding mode not an integer: {rm}'
           * 'toFormat() rounding mode out of range: {rm}'
           */P.toFormat = function (dp, rm) {
          var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);if (this.c) {
            var i,
                arr = str.split('.'),
                g1 = +FORMAT.groupSize,
                g2 = +FORMAT.secondaryGroupSize,
                groupSeparator = FORMAT.groupSeparator,
                intPart = arr[0],
                fractionPart = arr[1],
                isNeg = this.s < 0,
                intDigits = isNeg ? intPart.slice(1) : intPart,
                len = intDigits.length;if (g2) i = g1, g1 = g2, g2 = i, len -= i;if (g1 > 0 && len > 0) {
              i = len % g1 || g1;intPart = intDigits.substr(0, i);for (; i < len; i += g1) {
                intPart += groupSeparator + intDigits.substr(i, g1);
              }if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);if (isNeg) intPart = '-' + intPart;
            }str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;
          }return str;
        }; /*
           * Return a string array representing the value of this BigNumber as a simple fraction with
           * an integer numerator and an integer denominator. The denominator will be a positive
           * non-zero value less than or equal to the specified maximum denominator. If a maximum
           * denominator is not specified, the denominator will be the lowest value necessary to
           * represent the number exactly.
           *
           * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
           *
           * 'toFraction() max denominator not an integer: {md}'
           * 'toFraction() max denominator out of range: {md}'
           */P.toFraction = function (md) {
          var arr,
              d0,
              d2,
              e,
              exp,
              n,
              n0,
              q,
              s,
              k = ERRORS,
              x = this,
              xc = x.c,
              d = new BigNumber(ONE),
              n1 = d0 = new BigNumber(ONE),
              d1 = n0 = new BigNumber(ONE);if (md != null) {
            ERRORS = false;n = new BigNumber(md);ERRORS = k;if (!(k = n.isInt()) || n.lt(ONE)) {
              if (ERRORS) {
                raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);
              } // ERRORS is false:
              // If md is a finite non-integer >= 1, round it to an integer and use it.
              md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;
            }
          }if (!xc) return x.toString();s = coeffToString(xc); // Determine initial denominator.
          // d is a power of 10 and the minimum max denominator that specifies the value exactly.
          e = d.e = s.length - x.e - 1;d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;exp = MAX_EXP;MAX_EXP = 1 / 0;n = new BigNumber(s); // n0 = d1 = 0
          n0.c[0] = 0;for (;;) {
            q = div(n, d, 0, 1);d2 = d0.plus(q.times(d1));if (d2.cmp(md) == 1) break;d0 = d1;d1 = d2;n1 = n0.plus(q.times(d2 = n1));n0 = d2;d = n.minus(q.times(d2 = d));n = d2;
          }d2 = div(md.minus(d0), d1, 0, 1);n0 = n0.plus(d2.times(n1));d0 = d0.plus(d2.times(d1));n0.s = n1.s = x.s;e *= 2; // Determine which fraction is closer to x, n0/d0 or n1/d1
          arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];MAX_EXP = exp;return arr;
        }; /*
           * Return the value of this BigNumber converted to a number primitive.
           */P.toNumber = function () {
          return +this;
        }; /*
           * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
           * If m is present, return the result modulo m.
           * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
           * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using
           * ROUNDING_MODE.
           *
           * The modular power operation works efficiently when x, n, and m are positive integers,
           * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).
           *
           * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           * [m] {number|string|BigNumber} The modulus.
           *
           * 'pow() exponent not an integer: {n}'
           * 'pow() exponent out of range: {n}'
           *
           * Performs 54 loop iterations for n of 9007199254740991.
           */P.toPower = P.pow = function (n, m) {
          var k,
              y,
              z,
              i = mathfloor(n < 0 ? -n : +n),
              x = this;if (m != null) {
            id = 23;m = new BigNumber(m);
          } // Pass ±Infinity to Math.pow if exponent is out of range.
          if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN)) || n == 0) {
            k = Math.pow(+x, n);return new BigNumber(m ? k % m : k);
          }if (m) {
            if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {
              x = x.mod(m);
            } else {
              z = m; // Nullify m so only a single mod operation is performed at the end.
              m = null;
            }
          } else if (POW_PRECISION) {
            // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            // (Using + 1.5 would give [9, 21] guard digits.)
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }y = new BigNumber(ONE);for (;;) {
            if (i % 2) {
              y = y.times(x);if (!y.c) break;if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (m) {
                y = y.mod(m);
              }
            }i = mathfloor(i / 2);if (!i) break;x = x.times(x);if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (m) {
              x = x.mod(m);
            }
          }if (m) return y;if (n < 0) y = ONE.div(y);return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;
        }; /*
           * Return a string representing the value of this BigNumber rounded to sd significant digits
           * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
           * necessary to represent the integer part of the value in fixed-point notation, then use
           * exponential notation.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toPrecision() precision not an integer: {sd}'
           * 'toPrecision() precision out of range: {sd}'
           * 'toPrecision() rounding mode not an integer: {rm}'
           * 'toPrecision() rounding mode out of range: {rm}'
           */P.toPrecision = function (sd, rm) {
          return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);
        }; /*
           * Return a string representing the value of this BigNumber in base b, or base 10 if b is
           * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
           * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
           * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
           * TO_EXP_NEG, return exponential notation.
           *
           * [b] {number} Integer, 2 to 64 inclusive.
           *
           * 'toString() base not an integer: {b}'
           * 'toString() base out of range: {b}'
           */P.toString = function (b) {
          var str,
              n = this,
              s = n.s,
              e = n.e; // Infinity or NaN?
          if (e === null) {
            if (s) {
              str = 'Infinity';if (s < 0) str = '-' + str;
            } else {
              str = 'NaN';
            }
          } else {
            str = coeffToString(n.c);if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);
            } else {
              str = convertBase(toFixedPoint(str, e), b | 0, 10, s);
            }if (s < 0 && n.c[0]) str = '-' + str;
          }return str;
        }; /*
           * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
           * number.
           */P.truncated = P.trunc = function () {
          return round(new BigNumber(this), this.e + 1, 1);
        }; /*
           * Return as toString, but do not accept a base argument, and include the minus sign for
           * negative zero.
           */P.valueOf = P.toJSON = function () {
          var str,
              n = this,
              e = n.e;if (e === null) return n.toString();str = coeffToString(n.c);str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);return n.s < 0 ? '-' + str : str;
        }; // Aliases for BigDecimal methods.
        //P.add = P.plus;         // P.add included above
        //P.subtract = P.minus;   // P.sub included above
        //P.multiply = P.times;   // P.mul included above
        //P.divide = P.div;
        //P.remainder = P.mod;
        //P.compareTo = P.cmp;
        //P.negate = P.neg;
        if (configObj != null) BigNumber.config(configObj);return BigNumber;
      } // PRIVATE HELPER FUNCTIONS
      function bitFloor(n) {
        var i = n | 0;return n > 0 || n === i ? i : i - 1;
      } // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
        var s,
            z,
            i = 1,
            j = a.length,
            r = a[0] + '';for (; i < j;) {
          s = a[i++] + '';z = LOG_BASE - s.length;for (; z--; s = '0' + s) {}r += s;
        } // Determine trailing zeros.
        for (j = r.length; r.charCodeAt(--j) === 48;) {}return r.slice(0, j + 1 || 1);
      } // Compare the value of BigNumbers x and y.
      function compare(x, y) {
        var a,
            b,
            xc = x.c,
            yc = y.c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e; // Either NaN?
        if (!i || !j) return null;a = xc && !xc[0];b = yc && !yc[0]; // Either zero?
        if (a || b) return a ? b ? 0 : -j : i; // Signs differ?
        if (i != j) return i;a = i < 0;b = k == l; // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.
        for (i = 0; i < j; i++) {
          if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        } // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      } /*
        * Return true if n is a valid number in range, otherwise false.
        * Use for argument validation when ERRORS is false.
        * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
        */function intValidatorNoErrors(n, min, max) {
        return (n = truncate(n)) >= min && n <= max;
      }function isArray(obj) {
        return Object.prototype.toString.call(obj) == '[object Array]';
      } /*
        * Convert string of baseIn to an array of numbers of baseOut.
        * Eg. convertBase('255', 10, 16) returns [15, 15].
        * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
        */function toBaseOut(str, baseIn, baseOut) {
        var j,
            arr = [0],
            arrL,
            i = 0,
            len = str.length;for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {}arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));for (; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;arr[j + 1] += arr[j] / baseOut | 0;arr[j] %= baseOut;
            }
          }
        }return arr.reverse();
      }function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
      }function toFixedPoint(str, e) {
        var len, z; // Negative exponent?
        if (e < 0) {
          // Prepend zeros.
          for (z = '0.'; ++e; z += '0') {}str = z + str; // Positive exponent
        } else {
          len = str.length; // Append zeros.
          if (++e > len) {
            for (z = '0', e -= len; --e; z += '0') {}str += z;
          } else if (e < len) {
            str = str.slice(0, e) + '.' + str.slice(e);
          }
        }return str;
      }function truncate(n) {
        n = parseFloat(n);return n < 0 ? mathceil(n) : mathfloor(n);
      } // EXPORT
      BigNumber = constructorFactory();BigNumber.default = BigNumber.BigNumber = BigNumber; // AMD.
      if (typeof define == 'function' && define.amd) {
        define(function () {
          return BigNumber;
        }); // Node.js and other environments that support module.exports.
      } else if (typeof module != 'undefined' && module.exports) {
        module.exports = BigNumber; // Split string stops browserify adding crypto shim.
        if (!cryptoObj) try {
          cryptoObj = require('cry' + 'pto');
        } catch (e) {} // Browser.
      } else {
        if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();globalObj.BigNumber = BigNumber;
      }
    })(this);
  }, {}], 5: [function (require, module, exports) {
    /**
    * @author shaozilee
    *
    * support 1bit 4bit 8bit 24bit decode
    * encode with 24bit
    * 
    */var encode = require('./lib/encoder'),
        decode = require('./lib/decoder');module.exports = { encode: encode, decode: decode };
  }, { "./lib/decoder": 6, "./lib/encoder": 7 }], 6: [function (require, module, exports) {
    (function (Buffer) {
      /**
      * @author shaozilee
      *
      * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp
      * 
      */function BmpDecoder(buffer) {
        this.pos = 0;this.buffer = buffer;this.flag = this.buffer.toString("utf-8", 0, this.pos += 2);if (this.flag != "BM") throw new Error("Invalid BMP File");this.parseHeader();this.parseBGR();
      }BmpDecoder.prototype.parseHeader = function () {
        this.fileSize = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.reserved = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.offset = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.headerSize = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.width = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.height = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.planes = this.buffer.readUInt16LE(this.pos);this.pos += 2;this.bitPP = this.buffer.readUInt16LE(this.pos);this.pos += 2;this.compress = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.rawSize = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.hr = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.vr = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.colors = this.buffer.readUInt32LE(this.pos);this.pos += 4;this.importantColors = this.buffer.readUInt32LE(this.pos);this.pos += 4;if (this.bitPP < 24) {
          var len = 1 << this.bitPP;this.palette = new Array(len);for (var i = 0; i < len; i++) {
            var blue = this.buffer.readUInt8(this.pos++);var green = this.buffer.readUInt8(this.pos++);var red = this.buffer.readUInt8(this.pos++);var quad = this.buffer.readUInt8(this.pos++);this.palette[i] = { red: red, green: green, blue: blue, quad: quad };
          }
        }
      };BmpDecoder.prototype.parseBGR = function () {
        this.pos = this.offset;try {
          var bitn = "bit" + this.bitPP;var len = this.width * this.height * 4;this.data = new Buffer(len);this[bitn]();
        } catch (e) {
          console.log("bit decode error:" + e);
        }
      };BmpDecoder.prototype.bit1 = function () {
        var xlen = Math.ceil(this.width / 8);var mode = xlen % 4;for (var y = this.height - 1; y >= 0; y--) {
          for (var x = 0; x < xlen; x++) {
            var b = this.buffer.readUInt8(this.pos++);var location = y * this.width * 4 + x * 8 * 4;for (var i = 0; i < 8; i++) {
              if (x * 8 + i < this.width) {
                var rgb = this.palette[b >> 7 - i & 0x1];this.data[location + i * 4] = rgb.blue;this.data[location + i * 4 + 1] = rgb.green;this.data[location + i * 4 + 2] = rgb.red;this.data[location + i * 4 + 3] = 0xFF;
              } else {
                break;
              }
            }
          }if (mode != 0) {
            this.pos += 4 - mode;
          }
        }
      };BmpDecoder.prototype.bit4 = function () {
        var xlen = Math.ceil(this.width / 2);var mode = xlen % 4;for (var y = this.height - 1; y >= 0; y--) {
          for (var x = 0; x < xlen; x++) {
            var b = this.buffer.readUInt8(this.pos++);var location = y * this.width * 4 + x * 2 * 4;var before = b >> 4;var after = b & 0x0F;var rgb = this.palette[before];this.data[location] = rgb.blue;this.data[location + 1] = rgb.green;this.data[location + 2] = rgb.red;this.data[location + 3] = 0xFF;if (x * 2 + 1 >= this.width) break;rgb = this.palette[after];this.data[location + 4] = rgb.blue;this.data[location + 4 + 1] = rgb.green;this.data[location + 4 + 2] = rgb.red;this.data[location + 4 + 3] = 0xFF;
          }if (mode != 0) {
            this.pos += 4 - mode;
          }
        }
      };BmpDecoder.prototype.bit8 = function () {
        var mode = this.width % 4;for (var y = this.height - 1; y >= 0; y--) {
          for (var x = 0; x < this.width; x++) {
            var b = this.buffer.readUInt8(this.pos++);var location = y * this.width * 4 + x * 4;var rgb = this.palette[b];this.data[location] = rgb.blue;this.data[location + 1] = rgb.green;this.data[location + 2] = rgb.red;this.data[location + 3] = 0xFF;
          }if (mode != 0) {
            this.pos += 4 - mode;
          }
        }
      };BmpDecoder.prototype.bit24 = function () {
        //when height > 0
        for (var y = this.height - 1; y >= 0; y--) {
          for (var x = 0; x < this.width; x++) {
            var blue = this.buffer.readUInt8(this.pos++);var green = this.buffer.readUInt8(this.pos++);var red = this.buffer.readUInt8(this.pos++);var location = y * this.width * 4 + x * 4;this.data[location] = red;this.data[location + 1] = green;this.data[location + 2] = blue;this.data[location + 3] = 0xFF;
          } //skip extra bytes
          this.pos += this.width % 4;
        }
      };BmpDecoder.prototype.getData = function () {
        return this.data;
      };module.exports = decode = function decode(bmpData) {
        var decoder = new BmpDecoder(bmpData);return { data: decoder.getData(), width: decoder.width, height: decoder.height };
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14 }], 7: [function (require, module, exports) {
    (function (Buffer) {
      /**
      * @author shaozilee
      *
      * BMP format encoder,encode 24bit BMP
      * Not support quality compression
      * 
      */function BmpEncoder(imgData) {
        this.buffer = imgData.data;this.width = imgData.width;this.height = imgData.height;this.extraBytes = this.width % 4;this.rgbSize = this.height * (3 * this.width + this.extraBytes);this.headerInfoSize = 40;this.data = []; /******************header***********************/this.flag = "BM";this.reserved = 0;this.offset = 54;this.fileSize = this.rgbSize + this.offset;this.planes = 1;this.bitPP = 24;this.compress = 0;this.hr = 0;this.vr = 0;this.colors = 0;this.importantColors = 0;
      }BmpEncoder.prototype.encode = function () {
        var tempBuffer = new Buffer(this.offset + this.rgbSize);this.pos = 0;tempBuffer.write(this.flag, this.pos, 2);this.pos += 2;tempBuffer.writeUInt32LE(this.fileSize, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.reserved, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.offset, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.headerInfoSize, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.width, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.height, this.pos);this.pos += 4;tempBuffer.writeUInt16LE(this.planes, this.pos);this.pos += 2;tempBuffer.writeUInt16LE(this.bitPP, this.pos);this.pos += 2;tempBuffer.writeUInt32LE(this.compress, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.rgbSize, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.hr, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.vr, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.colors, this.pos);this.pos += 4;tempBuffer.writeUInt32LE(this.importantColors, this.pos);this.pos += 4;var i = 0;var rowBytes = 3 * this.width + this.extraBytes;for (var y = this.height - 1; y >= 0; y--) {
          for (var x = 0; x < this.width; x++) {
            var p = this.pos + y * rowBytes + x * 3;tempBuffer[p + 2] = this.buffer[i++]; //r
            tempBuffer[p + 1] = this.buffer[i++]; //g
            tempBuffer[p] = this.buffer[i++]; //b
            i++;
          }if (this.extraBytes > 0) {
            var fillOffset = this.pos + y * rowBytes + this.width * 3;tempBuffer.fill(0, fillOffset, fillOffset + this.extraBytes);
          }
        }return tempBuffer;
      };module.exports = encode = function encode(imgData, quality) {
        if (typeof quality === 'undefined') quality = 100;var encoder = new BmpEncoder(imgData);var data = encoder.encode();return { data: data, width: imgData.width, height: imgData.height };
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14 }], 8: [function (require, module, exports) {}, {}], 9: [function (require, module, exports) {
    (function (process, Buffer) {
      var msg = require('pako/lib/zlib/messages');var zstream = require('pako/lib/zlib/zstream');var zlib_deflate = require('pako/lib/zlib/deflate.js');var zlib_inflate = require('pako/lib/zlib/inflate.js');var constants = require('pako/lib/zlib/constants');for (var key in constants) {
        exports[key] = constants[key];
      } // zlib modes
      exports.NONE = 0;exports.DEFLATE = 1;exports.INFLATE = 2;exports.GZIP = 3;exports.GUNZIP = 4;exports.DEFLATERAW = 5;exports.INFLATERAW = 6;exports.UNZIP = 7; /**
                                                                                                                                                                    * Emulate Node's zlib C++ layer for use by the JS layer in index.js
                                                                                                                                                                    */function Zlib(mode) {
        if (mode < exports.DEFLATE || mode > exports.UNZIP) throw new TypeError("Bad argument");this.mode = mode;this.init_done = false;this.write_in_progress = false;this.pending_close = false;this.windowBits = 0;this.level = 0;this.memLevel = 0;this.strategy = 0;this.dictionary = null;
      }Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
        this.windowBits = windowBits;this.level = level;this.memLevel = memLevel;this.strategy = strategy; // dictionary not supported.
        if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) this.windowBits += 16;if (this.mode === exports.UNZIP) this.windowBits += 32;if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) this.windowBits = -this.windowBits;this.strm = new zstream();switch (this.mode) {case exports.DEFLATE:case exports.GZIP:case exports.DEFLATERAW:
            var status = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);break;case exports.INFLATE:case exports.GUNZIP:case exports.INFLATERAW:case exports.UNZIP:
            var status = zlib_inflate.inflateInit2(this.strm, this.windowBits);break;default:
            throw new Error("Unknown mode " + this.mode);}if (status !== exports.Z_OK) {
          this._error(status);return;
        }this.write_in_progress = false;this.init_done = true;
      };Zlib.prototype.params = function () {
        throw new Error("deflateParams Not supported");
      };Zlib.prototype._writeCheck = function () {
        if (!this.init_done) throw new Error("write before init");if (this.mode === exports.NONE) throw new Error("already finalized");if (this.write_in_progress) throw new Error("write already in progress");if (this.pending_close) throw new Error("close is pending");
      };Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
        this._writeCheck();this.write_in_progress = true;var self = this;process.nextTick(function () {
          self.write_in_progress = false;var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);self.callback(res[0], res[1]);if (self.pending_close) self.close();
        });return this;
      }; // set method for Node buffers, used by pako
      function bufferSet(data, offset) {
        for (var i = 0; i < data.length; i++) {
          this[offset + i] = data[i];
        }
      }Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
        this._writeCheck();return this._write(flush, input, in_off, in_len, out, out_off, out_len);
      };Zlib.prototype._write = function (flush, input, in_off, in_len, out, out_off, out_len) {
        this.write_in_progress = true;if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
          throw new Error("Invalid flush value");
        }if (input == null) {
          input = new Buffer(0);in_len = 0;in_off = 0;
        }if (out._set) out.set = out._set;else out.set = bufferSet;var strm = this.strm;strm.avail_in = in_len;strm.input = input;strm.next_in = in_off;strm.avail_out = out_len;strm.output = out;strm.next_out = out_off;switch (this.mode) {case exports.DEFLATE:case exports.GZIP:case exports.DEFLATERAW:
            var status = zlib_deflate.deflate(strm, flush);break;case exports.UNZIP:case exports.INFLATE:case exports.GUNZIP:case exports.INFLATERAW:
            var status = zlib_inflate.inflate(strm, flush);break;default:
            throw new Error("Unknown mode " + this.mode);}if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
          this._error(status);
        }this.write_in_progress = false;return [strm.avail_in, strm.avail_out];
      };Zlib.prototype.close = function () {
        if (this.write_in_progress) {
          this.pending_close = true;return;
        }this.pending_close = false;if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
          zlib_deflate.deflateEnd(this.strm);
        } else {
          zlib_inflate.inflateEnd(this.strm);
        }this.mode = exports.NONE;
      };Zlib.prototype.reset = function () {
        switch (this.mode) {case exports.DEFLATE:case exports.DEFLATERAW:
            var status = zlib_deflate.deflateReset(this.strm);break;case exports.INFLATE:case exports.INFLATERAW:
            var status = zlib_inflate.inflateReset(this.strm);break;}if (status !== exports.Z_OK) {
          this._error(status);
        }
      };Zlib.prototype._error = function (status) {
        this.onerror(msg[status] + ': ' + this.strm.msg, status);this.write_in_progress = false;if (this.pending_close) this.close();
      };exports.Zlib = Zlib;
    }).call(this, require('_process'), require("buffer").Buffer);
  }, { "_process": 12, "buffer": 14, "pako/lib/zlib/constants": 45, "pako/lib/zlib/deflate.js": 47, "pako/lib/zlib/inflate.js": 49, "pako/lib/zlib/messages": 51, "pako/lib/zlib/zstream": 53 }], 10: [function (require, module, exports) {
    (function (process, Buffer) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      var Transform = require('_stream_transform');var binding = require('./binding');var util = require('util');var assert = require('assert').ok; // zlib doesn't provide these, so kludge them in following the same
      // const naming scheme zlib uses.
      binding.Z_MIN_WINDOWBITS = 8;binding.Z_MAX_WINDOWBITS = 15;binding.Z_DEFAULT_WINDOWBITS = 15; // fewer than 64 bytes per chunk is stupid.
      // technically it could work with as few as 8, but even 64 bytes
      // is absurdly low.  Usually a MB or more is best.
      binding.Z_MIN_CHUNK = 64;binding.Z_MAX_CHUNK = Infinity;binding.Z_DEFAULT_CHUNK = 16 * 1024;binding.Z_MIN_MEMLEVEL = 1;binding.Z_MAX_MEMLEVEL = 9;binding.Z_DEFAULT_MEMLEVEL = 8;binding.Z_MIN_LEVEL = -1;binding.Z_MAX_LEVEL = 9;binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION; // expose all the zlib constants
      Object.keys(binding).forEach(function (k) {
        if (k.match(/^Z/)) exports[k] = binding[k];
      }); // translation table for return codes.
      exports.codes = { Z_OK: binding.Z_OK, Z_STREAM_END: binding.Z_STREAM_END, Z_NEED_DICT: binding.Z_NEED_DICT, Z_ERRNO: binding.Z_ERRNO, Z_STREAM_ERROR: binding.Z_STREAM_ERROR, Z_DATA_ERROR: binding.Z_DATA_ERROR, Z_MEM_ERROR: binding.Z_MEM_ERROR, Z_BUF_ERROR: binding.Z_BUF_ERROR, Z_VERSION_ERROR: binding.Z_VERSION_ERROR };Object.keys(exports.codes).forEach(function (k) {
        exports.codes[exports.codes[k]] = k;
      });exports.Deflate = Deflate;exports.Inflate = Inflate;exports.Gzip = Gzip;exports.Gunzip = Gunzip;exports.DeflateRaw = DeflateRaw;exports.InflateRaw = InflateRaw;exports.Unzip = Unzip;exports.createDeflate = function (o) {
        return new Deflate(o);
      };exports.createInflate = function (o) {
        return new Inflate(o);
      };exports.createDeflateRaw = function (o) {
        return new DeflateRaw(o);
      };exports.createInflateRaw = function (o) {
        return new InflateRaw(o);
      };exports.createGzip = function (o) {
        return new Gzip(o);
      };exports.createGunzip = function (o) {
        return new Gunzip(o);
      };exports.createUnzip = function (o) {
        return new Unzip(o);
      }; // Convenience methods.
      // compress/decompress a string or buffer in one step.
      exports.deflate = function (buffer, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;opts = {};
        }return zlibBuffer(new Deflate(opts), buffer, callback);
      };exports.deflateSync = function (buffer, opts) {
        return zlibBufferSync(new Deflate(opts), buffer);
      };exports.gzip = function (buffer, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;opts = {};
        }return zlibBuffer(new Gzip(opts), buffer, callback);
      };exports.gzipSync = function (buffer, opts) {
        return zlibBufferSync(new Gzip(opts), buffer);
      };exports.deflateRaw = function (buffer, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;opts = {};
        }return zlibBuffer(new DeflateRaw(opts), buffer, callback);
      };exports.deflateRawSync = function (buffer, opts) {
        return zlibBufferSync(new DeflateRaw(opts), buffer);
      };exports.unzip = function (buffer, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;opts = {};
        }return zlibBuffer(new Unzip(opts), buffer, callback);
      };exports.unzipSync = function (buffer, opts) {
        return zlibBufferSync(new Unzip(opts), buffer);
      };exports.inflate = function (buffer, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;opts = {};
        }return zlibBuffer(new Inflate(opts), buffer, callback);
      };exports.inflateSync = function (buffer, opts) {
        return zlibBufferSync(new Inflate(opts), buffer);
      };exports.gunzip = function (buffer, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;opts = {};
        }return zlibBuffer(new Gunzip(opts), buffer, callback);
      };exports.gunzipSync = function (buffer, opts) {
        return zlibBufferSync(new Gunzip(opts), buffer);
      };exports.inflateRaw = function (buffer, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;opts = {};
        }return zlibBuffer(new InflateRaw(opts), buffer, callback);
      };exports.inflateRawSync = function (buffer, opts) {
        return zlibBufferSync(new InflateRaw(opts), buffer);
      };function zlibBuffer(engine, buffer, callback) {
        var buffers = [];var nread = 0;engine.on('error', onError);engine.on('end', onEnd);engine.end(buffer);flow();function flow() {
          var chunk;while (null !== (chunk = engine.read())) {
            buffers.push(chunk);nread += chunk.length;
          }engine.once('readable', flow);
        }function onError(err) {
          engine.removeListener('end', onEnd);engine.removeListener('readable', flow);callback(err);
        }function onEnd() {
          var buf = Buffer.concat(buffers, nread);buffers = [];callback(null, buf);engine.close();
        }
      }function zlibBufferSync(engine, buffer) {
        if (typeof buffer === 'string') buffer = new Buffer(buffer);if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');var flushFlag = binding.Z_FINISH;return engine._processChunk(buffer, flushFlag);
      } // generic zlib
      // minimal 2-byte header
      function Deflate(opts) {
        if (!(this instanceof Deflate)) return new Deflate(opts);Zlib.call(this, opts, binding.DEFLATE);
      }function Inflate(opts) {
        if (!(this instanceof Inflate)) return new Inflate(opts);Zlib.call(this, opts, binding.INFLATE);
      } // gzip - bigger header, same deflate compression
      function Gzip(opts) {
        if (!(this instanceof Gzip)) return new Gzip(opts);Zlib.call(this, opts, binding.GZIP);
      }function Gunzip(opts) {
        if (!(this instanceof Gunzip)) return new Gunzip(opts);Zlib.call(this, opts, binding.GUNZIP);
      } // raw - no header
      function DeflateRaw(opts) {
        if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);Zlib.call(this, opts, binding.DEFLATERAW);
      }function InflateRaw(opts) {
        if (!(this instanceof InflateRaw)) return new InflateRaw(opts);Zlib.call(this, opts, binding.INFLATERAW);
      } // auto-detect header.
      function Unzip(opts) {
        if (!(this instanceof Unzip)) return new Unzip(opts);Zlib.call(this, opts, binding.UNZIP);
      } // the Zlib class they all inherit from
      // This thing manages the queue of requests, and returns
      // true or false if there is anything in the queue when
      // you call the .write() method.
      function Zlib(opts, mode) {
        this._opts = opts = opts || {};this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;Transform.call(this, opts);if (opts.flush) {
          if (opts.flush !== binding.Z_NO_FLUSH && opts.flush !== binding.Z_PARTIAL_FLUSH && opts.flush !== binding.Z_SYNC_FLUSH && opts.flush !== binding.Z_FULL_FLUSH && opts.flush !== binding.Z_FINISH && opts.flush !== binding.Z_BLOCK) {
            throw new Error('Invalid flush flag: ' + opts.flush);
          }
        }this._flushFlag = opts.flush || binding.Z_NO_FLUSH;if (opts.chunkSize) {
          if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
            throw new Error('Invalid chunk size: ' + opts.chunkSize);
          }
        }if (opts.windowBits) {
          if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
            throw new Error('Invalid windowBits: ' + opts.windowBits);
          }
        }if (opts.level) {
          if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
            throw new Error('Invalid compression level: ' + opts.level);
          }
        }if (opts.memLevel) {
          if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
            throw new Error('Invalid memLevel: ' + opts.memLevel);
          }
        }if (opts.strategy) {
          if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
            throw new Error('Invalid strategy: ' + opts.strategy);
          }
        }if (opts.dictionary) {
          if (!Buffer.isBuffer(opts.dictionary)) {
            throw new Error('Invalid dictionary: it should be a Buffer instance');
          }
        }this._binding = new binding.Zlib(mode);var self = this;this._hadError = false;this._binding.onerror = function (message, errno) {
          // there is no way to cleanly recover.
          // continuing only obscures problems.
          self._binding = null;self._hadError = true;var error = new Error(message);error.errno = errno;error.code = exports.codes[errno];self.emit('error', error);
        };var level = exports.Z_DEFAULT_COMPRESSION;if (typeof opts.level === 'number') level = opts.level;var strategy = exports.Z_DEFAULT_STRATEGY;if (typeof opts.strategy === 'number') strategy = opts.strategy;this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);this._buffer = new Buffer(this._chunkSize);this._offset = 0;this._closed = false;this._level = level;this._strategy = strategy;this.once('end', this.close);
      }util.inherits(Zlib, Transform);Zlib.prototype.params = function (level, strategy, callback) {
        if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
          throw new RangeError('Invalid compression level: ' + level);
        }if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
          throw new TypeError('Invalid strategy: ' + strategy);
        }if (this._level !== level || this._strategy !== strategy) {
          var self = this;this.flush(binding.Z_SYNC_FLUSH, function () {
            self._binding.params(level, strategy);if (!self._hadError) {
              self._level = level;self._strategy = strategy;if (callback) callback();
            }
          });
        } else {
          process.nextTick(callback);
        }
      };Zlib.prototype.reset = function () {
        return this._binding.reset();
      }; // This is the _flush function called by the transform class,
      // internally, when the last chunk has been written.
      Zlib.prototype._flush = function (callback) {
        this._transform(new Buffer(0), '', callback);
      };Zlib.prototype.flush = function (kind, callback) {
        var ws = this._writableState;if (typeof kind === 'function' || kind === void 0 && !callback) {
          callback = kind;kind = binding.Z_FULL_FLUSH;
        }if (ws.ended) {
          if (callback) process.nextTick(callback);
        } else if (ws.ending) {
          if (callback) this.once('end', callback);
        } else if (ws.needDrain) {
          var self = this;this.once('drain', function () {
            self.flush(callback);
          });
        } else {
          this._flushFlag = kind;this.write(new Buffer(0), '', callback);
        }
      };Zlib.prototype.close = function (callback) {
        if (callback) process.nextTick(callback);if (this._closed) return;this._closed = true;this._binding.close();var self = this;process.nextTick(function () {
          self.emit('close');
        });
      };Zlib.prototype._transform = function (chunk, encoding, cb) {
        var flushFlag;var ws = this._writableState;var ending = ws.ending || ws.ended;var last = ending && (!chunk || ws.length === chunk.length);if (!chunk === null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input')); // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
        // If it's explicitly flushing at some other time, then we use
        // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
        // goodness.
        if (last) flushFlag = binding.Z_FINISH;else {
          flushFlag = this._flushFlag; // once we've flushed the last of the queue, stop flushing and
          // go back to the normal behavior.
          if (chunk.length >= ws.length) {
            this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
          }
        }var self = this;this._processChunk(chunk, flushFlag, cb);
      };Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
        var availInBefore = chunk && chunk.length;var availOutBefore = this._chunkSize - this._offset;var inOff = 0;var self = this;var async = typeof cb === 'function';if (!async) {
          var buffers = [];var nread = 0;var error;this.on('error', function (er) {
            error = er;
          });do {
            var res = this._binding.writeSync(flushFlag, chunk, // in
            inOff, // in_off
            availInBefore, // in_len
            this._buffer, // out
            this._offset, //out_off
            availOutBefore); // out_len
          } while (!this._hadError && callback(res[0], res[1]));if (this._hadError) {
            throw error;
          }var buf = Buffer.concat(buffers, nread);this.close();return buf;
        }var req = this._binding.write(flushFlag, chunk, // in
        inOff, // in_off
        availInBefore, // in_len
        this._buffer, // out
        this._offset, //out_off
        availOutBefore); // out_len
        req.buffer = chunk;req.callback = callback;function callback(availInAfter, availOutAfter) {
          if (self._hadError) return;var have = availOutBefore - availOutAfter;assert(have >= 0, 'have should not go down');if (have > 0) {
            var out = self._buffer.slice(self._offset, self._offset + have);self._offset += have; // serve some output to the consumer.
            if (async) {
              self.push(out);
            } else {
              buffers.push(out);nread += out.length;
            }
          } // exhausted the output buffer, or used all the input create a new one.
          if (availOutAfter === 0 || self._offset >= self._chunkSize) {
            availOutBefore = self._chunkSize;self._offset = 0;self._buffer = new Buffer(self._chunkSize);
          }if (availOutAfter === 0) {
            // Not actually done.  Need to reprocess.
            // Also, update the availInBefore to the availInAfter value,
            // so that if we have to hit it a third (fourth, etc.) time,
            // it'll have the correct byte counts.
            inOff += availInBefore - availInAfter;availInBefore = availInAfter;if (!async) return true;var newReq = self._binding.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);newReq.callback = callback; // this same function
            newReq.buffer = chunk;return;
          }if (!async) return false; // finished with the chunk.
          cb();
        }
      };util.inherits(Deflate, Zlib);util.inherits(Inflate, Zlib);util.inherits(Gzip, Zlib);util.inherits(Gunzip, Zlib);util.inherits(DeflateRaw, Zlib);util.inherits(InflateRaw, Zlib);util.inherits(Unzip, Zlib);
    }).call(this, require('_process'), require("buffer").Buffer);
  }, { "./binding": 9, "_process": 12, "_stream_transform": 92, "assert": 2, "buffer": 14, "util": 103 }], 11: [function (require, module, exports) {
    arguments[4][8][0].apply(exports, arguments);
  }, { "dup": 8 }], 12: [function (require, module, exports) {
    // shim for using process in browser
    var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.
    var cachedSetTimeout;var cachedClearTimeout;(function () {
      try {
        cachedSetTimeout = setTimeout;
      } catch (e) {
        cachedSetTimeout = function cachedSetTimeout() {
          throw new Error('setTimeout is not defined');
        };
      }try {
        cachedClearTimeout = clearTimeout;
      } catch (e) {
        cachedClearTimeout = function cachedClearTimeout() {
          throw new Error('clearTimeout is not defined');
        };
      }
    })();function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      }try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      }try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }
    }var queue = [];var draining = false;var currentQueue;var queueIndex = -1;function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }draining = false;if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }if (queue.length) {
        drainQueue();
      }
    }function drainQueue() {
      if (draining) {
        return;
      }var timeout = runTimeout(cleanUpNextTick);draining = true;var len = queue.length;while (len) {
        currentQueue = queue;queue = [];while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }queueIndex = -1;len = queue.length;
      }currentQueue = null;draining = false;runClearTimeout(timeout);
    }process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }queue.push(new Item(fun, args));if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    }; // v8 likes predictible objects
    function Item(fun, array) {
      this.fun = fun;this.array = array;
    }Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };process.title = 'browser';process.browser = true;process.env = {};process.argv = [];process.version = ''; // empty string to avoid regexp issues
    process.versions = {};function noop() {}process.on = noop;process.addListener = noop;process.once = noop;process.off = noop;process.removeListener = noop;process.removeAllListeners = noop;process.emit = noop;process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };process.cwd = function () {
      return '/';
    };process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };process.umask = function () {
      return 0;
    };
  }, {}], 13: [function (require, module, exports) {
    var Buffer = require('buffer').Buffer; // for use with browserify
    module.exports = function (a, b) {
      if (!Buffer.isBuffer(a)) return undefined;if (!Buffer.isBuffer(b)) return undefined;if (typeof a.equals === 'function') return a.equals(b);if (a.length !== b.length) return false;for (var i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }return true;
    };
  }, { "buffer": 14 }], 14: [function (require, module, exports) {
    (function (global) {
      /*!
      * The buffer module from node.js, for the browser.
      *
      * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
      * @license  MIT
      */ /* eslint-disable no-proto */'use strict';
      var base64 = require('base64-js');var ieee754 = require('ieee754');var isArray = require('isarray');exports.Buffer = Buffer;exports.SlowBuffer = SlowBuffer;exports.INSPECT_MAX_BYTES = 50; /**
                                                                                                                                                                                                  * If `Buffer.TYPED_ARRAY_SUPPORT`:
                                                                                                                                                                                                  *   === true    Use Uint8Array implementation (fastest)
                                                                                                                                                                                                  *   === false   Use Object implementation (most compatible, even IE6)
                                                                                                                                                                                                  *
                                                                                                                                                                                                  * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                                                                                                                                                                                                  * Opera 11.6+, iOS 4.2+.
                                                                                                                                                                                                  *
                                                                                                                                                                                                  * Due to various browser bugs, sometimes the Object implementation will be used even
                                                                                                                                                                                                  * when the browser supports typed arrays.
                                                                                                                                                                                                  *
                                                                                                                                                                                                  * Note:
                                                                                                                                                                                                  *
                                                                                                                                                                                                  *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
                                                                                                                                                                                                  *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
                                                                                                                                                                                                  *
                                                                                                                                                                                                  *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
                                                                                                                                                                                                  *
                                                                                                                                                                                                  *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
                                                                                                                                                                                                  *     incorrect length in some situations.
                                                                                                                                                                                                  * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
                                                                                                                                                                                                  * get the Object implementation, which is slower but behaves correctly.
                                                                                                                                                                                                  */Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport(); /*
                                                                                                                                                                                                                                                                                                                              * Export kMaxLength after typed array support is determined.
                                                                                                                                                                                                                                                                                                                              */exports.kMaxLength = kMaxLength();function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
              return 42;
            } };return arr.foo() === 42 && // typed array instances can be augmented
          typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
          arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
        } catch (e) {
          return false;
        }
      }function kMaxLength() {
        return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
      }function createBuffer(that, length) {
        if (kMaxLength() < length) {
          throw new RangeError('Invalid typed array length');
        }if (Buffer.TYPED_ARRAY_SUPPORT) {
          // Return an augmented `Uint8Array` instance, for best performance
          that = new Uint8Array(length);that.__proto__ = Buffer.prototype;
        } else {
          // Fallback: Return an object instance of the Buffer class
          if (that === null) {
            that = new Buffer(length);
          }that.length = length;
        }return that;
      } /**
        * The Buffer constructor returns instances of `Uint8Array` that have their
        * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
        * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
        * and the `Uint8Array` methods. Square bracket notation works as expected -- it
        * returns a single octet.
        *
        * The `Uint8Array` prototype remains unmodified.
        */function Buffer(arg, encodingOrOffset, length) {
        if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
          return new Buffer(arg, encodingOrOffset, length);
        } // Common case.
        if (typeof arg === 'number') {
          if (typeof encodingOrOffset === 'string') {
            throw new Error('If encoding is specified then the first argument must be a string');
          }return allocUnsafe(this, arg);
        }return from(this, arg, encodingOrOffset, length);
      }Buffer.poolSize = 8192; // not used by this implementation
      // TODO: Legacy, not needed anymore. Remove in next major version.
      Buffer._augment = function (arr) {
        arr.__proto__ = Buffer.prototype;return arr;
      };function from(that, value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('"value" argument must not be a number');
        }if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
          return fromArrayBuffer(that, value, encodingOrOffset, length);
        }if (typeof value === 'string') {
          return fromString(that, value, encodingOrOffset);
        }return fromObject(that, value);
      } /**
        * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
        * if value is a number.
        * Buffer.from(str[, encoding])
        * Buffer.from(array)
        * Buffer.from(buffer)
        * Buffer.from(arrayBuffer[, byteOffset[, length]])
        **/Buffer.from = function (value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };if (Buffer.TYPED_ARRAY_SUPPORT) {
        Buffer.prototype.__proto__ = Uint8Array.prototype;Buffer.__proto__ = Uint8Array;if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
          // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
          Object.defineProperty(Buffer, Symbol.species, { value: null, configurable: true });
        }
      }function assertSize(size) {
        if (typeof size !== 'number') {
          throw new TypeError('"size" argument must be a number');
        }
      }function alloc(that, size, fill, encoding) {
        assertSize(size);if (size <= 0) {
          return createBuffer(that, size);
        }if (fill !== undefined) {
          // Only pay attention to encoding if it's a string. This
          // prevents accidentally sending in a number that would
          // be interpretted as a start offset.
          return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
        }return createBuffer(that, size);
      } /**
        * Creates a new filled Buffer instance.
        * alloc(size[, fill[, encoding]])
        **/Buffer.alloc = function (size, fill, encoding) {
        return alloc(null, size, fill, encoding);
      };function allocUnsafe(that, size) {
        assertSize(size);that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);if (!Buffer.TYPED_ARRAY_SUPPORT) {
          for (var i = 0; i < size; ++i) {
            that[i] = 0;
          }
        }return that;
      } /**
        * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
        * */Buffer.allocUnsafe = function (size) {
        return allocUnsafe(null, size);
      }; /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */Buffer.allocUnsafeSlow = function (size) {
        return allocUnsafe(null, size);
      };function fromString(that, string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') {
          encoding = 'utf8';
        }if (!Buffer.isEncoding(encoding)) {
          throw new TypeError('"encoding" must be a valid string encoding');
        }var length = byteLength(string, encoding) | 0;that = createBuffer(that, length);var actual = that.write(string, encoding);if (actual !== length) {
          // Writing a hex string, for example, that contains invalid characters will
          // cause everything after the first invalid character to be ignored. (e.g.
          // 'abxxcd' will be treated as 'ab')
          that = that.slice(0, actual);
        }return that;
      }function fromArrayLike(that, array) {
        var length = checked(array.length) | 0;that = createBuffer(that, length);for (var i = 0; i < length; i += 1) {
          that[i] = array[i] & 255;
        }return that;
      }function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength; // this throws if `array` is not a valid ArrayBuffer
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('\'offset\' is out of bounds');
        }if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('\'length\' is out of bounds');
        }if (byteOffset === undefined && length === undefined) {
          array = new Uint8Array(array);
        } else if (length === undefined) {
          array = new Uint8Array(array, byteOffset);
        } else {
          array = new Uint8Array(array, byteOffset, length);
        }if (Buffer.TYPED_ARRAY_SUPPORT) {
          // Return an augmented `Uint8Array` instance, for best performance
          that = array;that.__proto__ = Buffer.prototype;
        } else {
          // Fallback: Return an object instance of the Buffer class
          that = fromArrayLike(that, array);
        }return that;
      }function fromObject(that, obj) {
        if (Buffer.isBuffer(obj)) {
          var len = checked(obj.length) | 0;that = createBuffer(that, len);if (that.length === 0) {
            return that;
          }obj.copy(that, 0, 0, len);return that;
        }if (obj) {
          if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
            if (typeof obj.length !== 'number' || isnan(obj.length)) {
              return createBuffer(that, 0);
            }return fromArrayLike(that, obj);
          }if (obj.type === 'Buffer' && isArray(obj.data)) {
            return fromArrayLike(that, obj.data);
          }
        }throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
      }function checked(length) {
        // Note: cannot use `length < kMaxLength` here because that fails when
        // length is NaN (which is otherwise coerced to zero.)
        if (length >= kMaxLength()) {
          throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
        }return length | 0;
      }function SlowBuffer(length) {
        if (+length != length) {
          // eslint-disable-line eqeqeq
          length = 0;
        }return Buffer.alloc(+length);
      }Buffer.isBuffer = function isBuffer(b) {
        return !!(b != null && b._isBuffer);
      };Buffer.compare = function compare(a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
          throw new TypeError('Arguments must be Buffers');
        }if (a === b) return 0;var x = a.length;var y = b.length;for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];y = b[i];break;
          }
        }if (x < y) return -1;if (y < x) return 1;return 0;
      };Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'latin1':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':
            return true;default:
            return false;}
      };Buffer.concat = function concat(list, length) {
        if (!isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }if (list.length === 0) {
          return Buffer.alloc(0);
        }var i;if (length === undefined) {
          length = 0;for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }var buffer = Buffer.allocUnsafe(length);var pos = 0;for (i = 0; i < list.length; ++i) {
          var buf = list[i];if (!Buffer.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }buf.copy(buffer, pos);pos += buf.length;
        }return buffer;
      };function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) {
          return string.length;
        }if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
          return string.byteLength;
        }if (typeof string !== 'string') {
          string = '' + string;
        }var len = string.length;if (len === 0) return 0; // Use a for loop to avoid recursion
        var loweredCase = false;for (;;) {
          switch (encoding) {case 'ascii':case 'latin1':case 'binary':
              return len;case 'utf8':case 'utf-8':case undefined:
              return utf8ToBytes(string).length;case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':
              return len * 2;case 'hex':
              return len >>> 1;case 'base64':
              return base64ToBytes(string).length;default:
              if (loweredCase) return utf8ToBytes(string).length; // assume utf8
              encoding = ('' + encoding).toLowerCase();loweredCase = true;}
        }
      }Buffer.byteLength = byteLength;function slowToString(encoding, start, end) {
        var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
        // property of a typed array.
        // This behaves neither like String nor Uint8Array in that we set start/end
        // to their upper/lower bounds if the value passed is out of range.
        // undefined is handled specially as per ECMA-262 6th Edition,
        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
        if (start === undefined || start < 0) {
          start = 0;
        } // Return early if start > this.length. Done here to prevent potential uint32
        // coercion fail below.
        if (start > this.length) {
          return '';
        }if (end === undefined || end > this.length) {
          end = this.length;
        }if (end <= 0) {
          return '';
        } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
        end >>>= 0;start >>>= 0;if (end <= start) {
          return '';
        }if (!encoding) encoding = 'utf8';while (true) {
          switch (encoding) {case 'hex':
              return hexSlice(this, start, end);case 'utf8':case 'utf-8':
              return utf8Slice(this, start, end);case 'ascii':
              return asciiSlice(this, start, end);case 'latin1':case 'binary':
              return latin1Slice(this, start, end);case 'base64':
              return base64Slice(this, start, end);case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':
              return utf16leSlice(this, start, end);default:
              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);encoding = (encoding + '').toLowerCase();loweredCase = true;}
        }
      } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
      // Buffer instances.
      Buffer.prototype._isBuffer = true;function swap(b, n, m) {
        var i = b[n];b[n] = b[m];b[m] = i;
      }Buffer.prototype.swap16 = function swap16() {
        var len = this.length;if (len % 2 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 16-bits');
        }for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }return this;
      };Buffer.prototype.swap32 = function swap32() {
        var len = this.length;if (len % 4 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 32-bits');
        }for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);swap(this, i + 1, i + 2);
        }return this;
      };Buffer.prototype.swap64 = function swap64() {
        var len = this.length;if (len % 8 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 64-bits');
        }for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);swap(this, i + 1, i + 6);swap(this, i + 2, i + 5);swap(this, i + 3, i + 4);
        }return this;
      };Buffer.prototype.toString = function toString() {
        var length = this.length | 0;if (length === 0) return '';if (arguments.length === 0) return utf8Slice(this, 0, length);return slowToString.apply(this, arguments);
      };Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');if (this === b) return true;return Buffer.compare(this, b) === 0;
      };Buffer.prototype.inspect = function inspect() {
        var str = '';var max = exports.INSPECT_MAX_BYTES;if (this.length > 0) {
          str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');if (this.length > max) str += ' ... ';
        }return '<Buffer ' + str + '>';
      };Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (!Buffer.isBuffer(target)) {
          throw new TypeError('Argument must be a Buffer');
        }if (start === undefined) {
          start = 0;
        }if (end === undefined) {
          end = target ? target.length : 0;
        }if (thisStart === undefined) {
          thisStart = 0;
        }if (thisEnd === undefined) {
          thisEnd = this.length;
        }if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError('out of range index');
        }if (thisStart >= thisEnd && start >= end) {
          return 0;
        }if (thisStart >= thisEnd) {
          return -1;
        }if (start >= end) {
          return 1;
        }start >>>= 0;end >>>= 0;thisStart >>>= 0;thisEnd >>>= 0;if (this === target) return 0;var x = thisEnd - thisStart;var y = end - start;var len = Math.min(x, y);var thisCopy = this.slice(thisStart, thisEnd);var targetCopy = target.slice(start, end);for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];y = targetCopy[i];break;
          }
        }if (x < y) return -1;if (y < x) return 1;return 0;
      }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
      // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
      //
      // Arguments:
      // - buffer - a Buffer to search
      // - val - a string, Buffer, or number
      // - byteOffset - an index into `buffer`; will be clamped to an int32
      // - encoding - an optional encoding, relevant is val is a string
      // - dir - true for indexOf, false for lastIndexOf
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        // Empty buffer means no match
        if (buffer.length === 0) return -1; // Normalize byteOffset
        if (typeof byteOffset === 'string') {
          encoding = byteOffset;byteOffset = 0;
        } else if (byteOffset > 0x7fffffff) {
          byteOffset = 0x7fffffff;
        } else if (byteOffset < -0x80000000) {
          byteOffset = -0x80000000;
        }byteOffset = +byteOffset; // Coerce to Number.
        if (isNaN(byteOffset)) {
          // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
          byteOffset = dir ? 0 : buffer.length - 1;
        } // Normalize byteOffset: negative offsets start from the end of the buffer
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;if (byteOffset >= buffer.length) {
          if (dir) return -1;else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;else return -1;
        } // Normalize val
        if (typeof val === 'string') {
          val = Buffer.from(val, encoding);
        } // Finally, search either indexOf (if dir is true) or lastIndexOf
        if (Buffer.isBuffer(val)) {
          // Special case: looking for empty string/buffer always fails
          if (val.length === 0) {
            return -1;
          }return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === 'number') {
          val = val & 0xFF; // Search for a byte value [0-255]
          if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }throw new TypeError('val must be string, number or Buffer');
      }function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;var arrLength = arr.length;var valLength = val.length;if (encoding !== undefined) {
          encoding = String(encoding).toLowerCase();if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }indexSize = 2;arrLength /= 2;valLength /= 2;byteOffset /= 2;
          }
        }function read(buf, i) {
          if (indexSize === 1) {
            return buf[i];
          } else {
            return buf.readUInt16BE(i * indexSize);
          }
        }var i;if (dir) {
          var foundIndex = -1;for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;for (i = byteOffset; i >= 0; i--) {
            var found = true;for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;break;
              }
            }if (found) return i;
          }
        }return -1;
      }Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;var remaining = buf.length - offset;if (!length) {
          length = remaining;
        } else {
          length = Number(length);if (length > remaining) {
            length = remaining;
          }
        } // must be an even number of digits
        var strLen = string.length;if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');if (length > strLen / 2) {
          length = strLen / 2;
        }for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16);if (isNaN(parsed)) return i;buf[offset + i] = parsed;
        }return i;
      }function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }Buffer.prototype.write = function write(string, offset, length, encoding) {
        // Buffer#write(string)
        if (offset === undefined) {
          encoding = 'utf8';length = this.length;offset = 0; // Buffer#write(string, encoding)
        } else if (length === undefined && typeof offset === 'string') {
          encoding = offset;length = this.length;offset = 0; // Buffer#write(string, offset[, length][, encoding])
        } else if (isFinite(offset)) {
          offset = offset | 0;if (isFinite(length)) {
            length = length | 0;if (encoding === undefined) encoding = 'utf8';
          } else {
            encoding = length;length = undefined;
          } // legacy write(string, encoding, offset, length) - remove in v0.13
        } else {
          throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
        }var remaining = this.length - offset;if (length === undefined || length > remaining) length = remaining;if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError('Attempt to write outside buffer bounds');
        }if (!encoding) encoding = 'utf8';var loweredCase = false;for (;;) {
          switch (encoding) {case 'hex':
              return hexWrite(this, string, offset, length);case 'utf8':case 'utf-8':
              return utf8Write(this, string, offset, length);case 'ascii':
              return asciiWrite(this, string, offset, length);case 'latin1':case 'binary':
              return latin1Write(this, string, offset, length);case 'base64':
              // Warning: maxLength not taken into account in base64Write
              return base64Write(this, string, offset, length);case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':
              return ucs2Write(this, string, offset, length);default:
              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);encoding = ('' + encoding).toLowerCase();loweredCase = true;}
        }
      };Buffer.prototype.toJSON = function toJSON() {
        return { type: 'Buffer', data: Array.prototype.slice.call(this._arr || this, 0) };
      };function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);var res = [];var i = start;while (i < end) {
          var firstByte = buf[i];var codePoint = null;var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;switch (bytesPerSequence) {case 1:
                if (firstByte < 0x80) {
                  codePoint = firstByte;
                }break;case 2:
                secondByte = buf[i + 1];if ((secondByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;if (tempCodePoint > 0x7F) {
                    codePoint = tempCodePoint;
                  }
                }break;case 3:
                secondByte = buf[i + 1];thirdByte = buf[i + 2];if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                    codePoint = tempCodePoint;
                  }
                }break;case 4:
                secondByte = buf[i + 1];thirdByte = buf[i + 2];fourthByte = buf[i + 3];if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                    codePoint = tempCodePoint;
                  }
                }}
          }if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;bytesPerSequence = 1;
          } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;res.push(codePoint >>> 10 & 0x3FF | 0xD800);codePoint = 0xDC00 | codePoint & 0x3FF;
          }res.push(codePoint);i += bytesPerSequence;
        }return decodeCodePointsArray(res);
      } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
      // the lowest limit is Chrome, with 0x10000 args.
      // We go 1 magnitude less, for safety
      var MAX_ARGUMENTS_LENGTH = 0x1000;function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
        } // Decode in chunks to avoid "call stack size exceeded".
        var res = '';var i = 0;while (i < len) {
          res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        }return res;
      }function asciiSlice(buf, start, end) {
        var ret = '';end = Math.min(buf.length, end);for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 0x7F);
        }return ret;
      }function latin1Slice(buf, start, end) {
        var ret = '';end = Math.min(buf.length, end);for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }return ret;
      }function hexSlice(buf, start, end) {
        var len = buf.length;if (!start || start < 0) start = 0;if (!end || end < 0 || end > len) end = len;var out = '';for (var i = start; i < end; ++i) {
          out += toHex(buf[i]);
        }return out;
      }function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);var res = '';for (var i = 0; i < bytes.length; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }return res;
      }Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;start = ~~start;end = end === undefined ? len : ~~end;if (start < 0) {
          start += len;if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }if (end < 0) {
          end += len;if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }if (end < start) end = start;var newBuf;if (Buffer.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);newBuf.__proto__ = Buffer.prototype;
        } else {
          var sliceLen = end - start;newBuf = new Buffer(sliceLen, undefined);for (var i = 0; i < sliceLen; ++i) {
            newBuf[i] = this[i + start];
          }
        }return newBuf;
      }; /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
      }Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset = offset | 0;byteLength = byteLength | 0;if (!noAssert) checkOffset(offset, byteLength, this.length);var val = this[offset];var mul = 1;var i = 0;while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }return val;
      };Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset = offset | 0;byteLength = byteLength | 0;if (!noAssert) {
          checkOffset(offset, byteLength, this.length);
        }var val = this[offset + --byteLength];var mul = 1;while (byteLength > 0 && (mul *= 0x100)) {
          val += this[offset + --byteLength] * mul;
        }return val;
      };Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);return this[offset];
      };Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);return this[offset] | this[offset + 1] << 8;
      };Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);return this[offset] << 8 | this[offset + 1];
      };Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
      };Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset = offset | 0;byteLength = byteLength | 0;if (!noAssert) checkOffset(offset, byteLength, this.length);var val = this[offset];var mul = 1;var i = 0;while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }mul *= 0x80;if (val >= mul) val -= Math.pow(2, 8 * byteLength);return val;
      };Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset = offset | 0;byteLength = byteLength | 0;if (!noAssert) checkOffset(offset, byteLength, this.length);var i = byteLength;var mul = 1;var val = this[offset + --i];while (i > 0 && (mul *= 0x100)) {
          val += this[offset + --i] * mul;
        }mul *= 0x80;if (val >= mul) val -= Math.pow(2, 8 * byteLength);return val;
      };Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);if (!(this[offset] & 0x80)) return this[offset];return (0xff - this[offset] + 1) * -1;
      };Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);var val = this[offset] | this[offset + 1] << 8;return val & 0x8000 ? val | 0xFFFF0000 : val;
      };Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);var val = this[offset + 1] | this[offset] << 8;return val & 0x8000 ? val | 0xFFFF0000 : val;
      };Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);return ieee754.read(this, offset, true, 23, 4);
      };Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);return ieee754.read(this, offset, false, 23, 4);
      };Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);return ieee754.read(this, offset, true, 52, 8);
      };Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);return ieee754.read(this, offset, false, 52, 8);
      };function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');if (offset + ext > buf.length) throw new RangeError('Index out of range');
      }Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;offset = offset | 0;byteLength = byteLength | 0;if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;checkInt(this, value, offset, byteLength, maxBytes, 0);
        }var mul = 1;var i = 0;this[offset] = value & 0xFF;while (++i < byteLength && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }return offset + byteLength;
      };Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;offset = offset | 0;byteLength = byteLength | 0;if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;checkInt(this, value, offset, byteLength, maxBytes, 0);
        }var i = byteLength - 1;var mul = 1;this[offset + i] = value & 0xFF;while (--i >= 0 && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }return offset + byteLength;
      };Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);this[offset] = value & 0xff;return offset + 1;
      };function objectWriteUInt16(buf, value, offset, littleEndian) {
        if (value < 0) value = 0xffff + value + 1;for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
          buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
        }
      }Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }return offset + 2;
      };Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;this[offset + 1] = value & 0xff;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }return offset + 2;
      };function objectWriteUInt32(buf, value, offset, littleEndian) {
        if (value < 0) value = 0xffffffff + value + 1;for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
          buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
        }
      }Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;this[offset + 2] = value >>> 16;this[offset + 1] = value >>> 8;this[offset] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }return offset + 4;
      };Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;this[offset + 1] = value >>> 16;this[offset + 2] = value >>> 8;this[offset + 3] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }return offset + 4;
      };Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }var i = 0;var mul = 1;var sub = 0;this[offset] = value & 0xFF;while (++i < byteLength && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }return offset + byteLength;
      };Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }var i = byteLength - 1;var mul = 1;var sub = 0;this[offset + i] = value & 0xFF;while (--i >= 0 && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }return offset + byteLength;
      };Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);if (value < 0) value = 0xff + value + 1;this[offset] = value & 0xff;return offset + 1;
      };Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }return offset + 2;
      };Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;this[offset + 1] = value & 0xff;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }return offset + 2;
      };Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;this[offset + 1] = value >>> 8;this[offset + 2] = value >>> 16;this[offset + 3] = value >>> 24;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }return offset + 4;
      };Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;offset = offset | 0;if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);if (value < 0) value = 0xffffffff + value + 1;if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;this[offset + 1] = value >>> 16;this[offset + 2] = value >>> 8;this[offset + 3] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }return offset + 4;
      };function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError('Index out of range');if (offset < 0) throw new RangeError('Index out of range');
      }function writeFloat(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
        }ieee754.write(buf, value, offset, littleEndian, 23, 4);return offset + 4;
      }Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };function writeDouble(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
        }ieee754.write(buf, value, offset, littleEndian, 52, 8);return offset + 8;
      }Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        if (!start) start = 0;if (!end && end !== 0) end = this.length;if (targetStart >= target.length) targetStart = target.length;if (!targetStart) targetStart = 0;if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done
        if (end === start) return 0;if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions
        if (targetStart < 0) {
          throw new RangeError('targetStart out of bounds');
        }if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?
        if (end > this.length) end = this.length;if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }var len = end - start;var i;if (this === target && start < targetStart && targetStart < end) {
          // descending copy from end
          for (i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start];
          }
        } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
          // ascending copy from start
          for (i = 0; i < len; ++i) {
            target[i + targetStart] = this[i + start];
          }
        } else {
          Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
        }return len;
      }; // Usage:
      //    buffer.fill(number[, offset[, end]])
      //    buffer.fill(buffer[, offset[, end]])
      //    buffer.fill(string[, offset[, end]][, encoding])
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        // Handle string cases:
        if (typeof val === 'string') {
          if (typeof start === 'string') {
            encoding = start;start = 0;end = this.length;
          } else if (typeof end === 'string') {
            encoding = end;end = this.length;
          }if (val.length === 1) {
            var code = val.charCodeAt(0);if (code < 256) {
              val = code;
            }
          }if (encoding !== undefined && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string');
          }if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
          }
        } else if (typeof val === 'number') {
          val = val & 255;
        } // Invalid ranges are not set to a default, so can range check early.
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError('Out of range index');
        }if (end <= start) {
          return this;
        }start = start >>> 0;end = end === undefined ? this.length : end >>> 0;if (!val) val = 0;var i;if (typeof val === 'number') {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());var len = bytes.length;for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }return this;
      }; // HELPER FUNCTIONS
      // ================
      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;function base64clean(str) {
        // Node strips out invalid characters like \n and \t from the string, base64-js does not
        str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''
        if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
        while (str.length % 4 !== 0) {
          str = str + '=';
        }return str;
      }function stringtrim(str) {
        if (str.trim) return str.trim();return str.replace(/^\s+|\s+$/g, '');
      }function toHex(n) {
        if (n < 16) return '0' + n.toString(16);return n.toString(16);
      }function utf8ToBytes(string, units) {
        units = units || Infinity;var codePoint;var length = string.length;var leadSurrogate = null;var bytes = [];for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i); // is surrogate component
          if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
              // no lead yet
              if (codePoint > 0xDBFF) {
                // unexpected trail
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);continue;
              } else if (i + 1 === length) {
                // unpaired lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);continue;
              } // valid lead
              leadSurrogate = codePoint;continue;
            } // 2 leads in a row
            if (codePoint < 0xDC00) {
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);leadSurrogate = codePoint;continue;
            } // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
          } else if (leadSurrogate) {
            // valid bmp char, but last char was a lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          }leadSurrogate = null; // encode utf8
          if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;bytes.push(codePoint);
          } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else {
            throw new Error('Invalid code point');
          }
        }return bytes;
      }function asciiToBytes(str) {
        var byteArray = [];for (var i = 0; i < str.length; ++i) {
          // Node's code seems to be doing this and not & 0x7F..
          byteArray.push(str.charCodeAt(i) & 0xFF);
        }return byteArray;
      }function utf16leToBytes(str, units) {
        var c, hi, lo;var byteArray = [];for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;c = str.charCodeAt(i);hi = c >> 8;lo = c % 256;byteArray.push(lo);byteArray.push(hi);
        }return byteArray;
      }function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;dst[i + offset] = src[i];
        }return i;
      }function isnan(val) {
        return val !== val; // eslint-disable-line no-self-compare
      }
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, { "base64-js": 3, "ieee754": 30, "isarray": 35 }], 15: [function (require, module, exports) {
    (function (Buffer) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // NOTE: These type checking functions intentionally don't use `instanceof`
      // because it is fragile and can be easily faked with `Object.create()`.
      function isArray(arg) {
        if (Array.isArray) {
          return Array.isArray(arg);
        }return objectToString(arg) === '[object Array]';
      }exports.isArray = isArray;function isBoolean(arg) {
        return typeof arg === 'boolean';
      }exports.isBoolean = isBoolean;function isNull(arg) {
        return arg === null;
      }exports.isNull = isNull;function isNullOrUndefined(arg) {
        return arg == null;
      }exports.isNullOrUndefined = isNullOrUndefined;function isNumber(arg) {
        return typeof arg === 'number';
      }exports.isNumber = isNumber;function isString(arg) {
        return typeof arg === 'string';
      }exports.isString = isString;function isSymbol(arg) {
        return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'symbol';
      }exports.isSymbol = isSymbol;function isUndefined(arg) {
        return arg === void 0;
      }exports.isUndefined = isUndefined;function isRegExp(re) {
        return objectToString(re) === '[object RegExp]';
      }exports.isRegExp = isRegExp;function isObject(arg) {
        return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'object' && arg !== null;
      }exports.isObject = isObject;function isDate(d) {
        return objectToString(d) === '[object Date]';
      }exports.isDate = isDate;function isError(e) {
        return objectToString(e) === '[object Error]' || e instanceof Error;
      }exports.isError = isError;function isFunction(arg) {
        return typeof arg === 'function';
      }exports.isFunction = isFunction;function isPrimitive(arg) {
        return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'symbol' || // ES6 symbol
        typeof arg === 'undefined';
      }exports.isPrimitive = isPrimitive;exports.isBuffer = Buffer.isBuffer;function objectToString(o) {
        return Object.prototype.toString.call(o);
      }
    }).call(this, { "isBuffer": require("../../is-buffer/index.js") });
  }, { "../../is-buffer/index.js": 33 }], 16: [function (require, module, exports) {
    (function (process, global) {
      /*!
      * @overview es6-promise - a tiny implementation of Promises/A+.
      * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
      * @license   Licensed under MIT license
      *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
      * @version   3.2.1
      */(function () {
        "use strict";
        function lib$es6$promise$utils$$objectOrFunction(x) {
          return typeof x === 'function' || (typeof x === "undefined" ? "undefined" : _typeof(x)) === 'object' && x !== null;
        }function lib$es6$promise$utils$$isFunction(x) {
          return typeof x === 'function';
        }function lib$es6$promise$utils$$isMaybeThenable(x) {
          return (typeof x === "undefined" ? "undefined" : _typeof(x)) === 'object' && x !== null;
        }var lib$es6$promise$utils$$_isArray;if (!Array.isArray) {
          lib$es6$promise$utils$$_isArray = function lib$es6$promise$utils$$_isArray(x) {
            return Object.prototype.toString.call(x) === '[object Array]';
          };
        } else {
          lib$es6$promise$utils$$_isArray = Array.isArray;
        }var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;var lib$es6$promise$asap$$len = 0;var lib$es6$promise$asap$$vertxNext;var lib$es6$promise$asap$$customSchedulerFn;var lib$es6$promise$asap$$asap = function asap(callback, arg) {
          lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;lib$es6$promise$asap$$len += 2;if (lib$es6$promise$asap$$len === 2) {
            // If len is 2, that means that we need to schedule an async flush.
            // If additional callbacks are queued before the queue is flushed, they
            // will be processed by this flush that we are scheduling.
            if (lib$es6$promise$asap$$customSchedulerFn) {
              lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
            } else {
              lib$es6$promise$asap$$scheduleFlush();
            }
          }
        };function lib$es6$promise$asap$$setScheduler(scheduleFn) {
          lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
        }function lib$es6$promise$asap$$setAsap(asapFn) {
          lib$es6$promise$asap$$asap = asapFn;
        }var lib$es6$promise$asap$$browserWindow = typeof window !== 'undefined' ? window : undefined;var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;var lib$es6$promise$asap$$isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]'; // test for web worker but not in IE10
        var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined'; // node
        function lib$es6$promise$asap$$useNextTick() {
          // node version 0.10.x displays a deprecation warning when nextTick is used recursively
          // see https://github.com/cujojs/when/issues/410 for details
          return function () {
            process.nextTick(lib$es6$promise$asap$$flush);
          };
        } // vertx
        function lib$es6$promise$asap$$useVertxTimer() {
          return function () {
            lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
          };
        }function lib$es6$promise$asap$$useMutationObserver() {
          var iterations = 0;var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);var node = document.createTextNode('');observer.observe(node, { characterData: true });return function () {
            node.data = iterations = ++iterations % 2;
          };
        } // web worker
        function lib$es6$promise$asap$$useMessageChannel() {
          var channel = new MessageChannel();channel.port1.onmessage = lib$es6$promise$asap$$flush;return function () {
            channel.port2.postMessage(0);
          };
        }function lib$es6$promise$asap$$useSetTimeout() {
          return function () {
            setTimeout(lib$es6$promise$asap$$flush, 1);
          };
        }var lib$es6$promise$asap$$queue = new Array(1000);function lib$es6$promise$asap$$flush() {
          for (var i = 0; i < lib$es6$promise$asap$$len; i += 2) {
            var callback = lib$es6$promise$asap$$queue[i];var arg = lib$es6$promise$asap$$queue[i + 1];callback(arg);lib$es6$promise$asap$$queue[i] = undefined;lib$es6$promise$asap$$queue[i + 1] = undefined;
          }lib$es6$promise$asap$$len = 0;
        }function lib$es6$promise$asap$$attemptVertx() {
          try {
            var r = require;var vertx = r('vertx');lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;return lib$es6$promise$asap$$useVertxTimer();
          } catch (e) {
            return lib$es6$promise$asap$$useSetTimeout();
          }
        }var lib$es6$promise$asap$$scheduleFlush; // Decide what async method to use to triggering processing of queued callbacks:
        if (lib$es6$promise$asap$$isNode) {
          lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
        } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
          lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
        } else if (lib$es6$promise$asap$$isWorker) {
          lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
        } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {
          lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
        } else {
          lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
        }function lib$es6$promise$then$$then(onFulfillment, onRejection) {
          var parent = this;var child = new this.constructor(lib$es6$promise$$internal$$noop);if (child[lib$es6$promise$$internal$$PROMISE_ID] === undefined) {
            lib$es6$promise$$internal$$makePromise(child);
          }var state = parent._state;if (state) {
            var callback = arguments[state - 1];lib$es6$promise$asap$$asap(function () {
              lib$es6$promise$$internal$$invokeCallback(state, child, callback, parent._result);
            });
          } else {
            lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
          }return child;
        }var lib$es6$promise$then$$default = lib$es6$promise$then$$then;function lib$es6$promise$promise$resolve$$resolve(object) {
          /*jshint validthis:true */var Constructor = this;if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) === 'object' && object.constructor === Constructor) {
            return object;
          }var promise = new Constructor(lib$es6$promise$$internal$$noop);lib$es6$promise$$internal$$resolve(promise, object);return promise;
        }var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;var lib$es6$promise$$internal$$PROMISE_ID = Math.random().toString(36).substring(16);function lib$es6$promise$$internal$$noop() {}var lib$es6$promise$$internal$$PENDING = void 0;var lib$es6$promise$$internal$$FULFILLED = 1;var lib$es6$promise$$internal$$REJECTED = 2;var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();function lib$es6$promise$$internal$$selfFulfillment() {
          return new TypeError("You cannot resolve a promise with itself");
        }function lib$es6$promise$$internal$$cannotReturnOwn() {
          return new TypeError('A promises callback cannot return that same promise.');
        }function lib$es6$promise$$internal$$getThen(promise) {
          try {
            return promise.then;
          } catch (error) {
            lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;return lib$es6$promise$$internal$$GET_THEN_ERROR;
          }
        }function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
          try {
            then.call(value, fulfillmentHandler, rejectionHandler);
          } catch (e) {
            return e;
          }
        }function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
          lib$es6$promise$asap$$asap(function (promise) {
            var sealed = false;var error = lib$es6$promise$$internal$$tryThen(then, thenable, function (value) {
              if (sealed) {
                return;
              }sealed = true;if (thenable !== value) {
                lib$es6$promise$$internal$$resolve(promise, value);
              } else {
                lib$es6$promise$$internal$$fulfill(promise, value);
              }
            }, function (reason) {
              if (sealed) {
                return;
              }sealed = true;lib$es6$promise$$internal$$reject(promise, reason);
            }, 'Settle: ' + (promise._label || ' unknown promise'));if (!sealed && error) {
              sealed = true;lib$es6$promise$$internal$$reject(promise, error);
            }
          }, promise);
        }function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
          if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
            lib$es6$promise$$internal$$fulfill(promise, thenable._result);
          } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
            lib$es6$promise$$internal$$reject(promise, thenable._result);
          } else {
            lib$es6$promise$$internal$$subscribe(thenable, undefined, function (value) {
              lib$es6$promise$$internal$$resolve(promise, value);
            }, function (reason) {
              lib$es6$promise$$internal$$reject(promise, reason);
            });
          }
        }function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable, then) {
          if (maybeThenable.constructor === promise.constructor && then === lib$es6$promise$then$$default && constructor.resolve === lib$es6$promise$promise$resolve$$default) {
            lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
          } else {
            if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
              lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
            } else if (then === undefined) {
              lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
            } else if (lib$es6$promise$utils$$isFunction(then)) {
              lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
            } else {
              lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
            }
          }
        }function lib$es6$promise$$internal$$resolve(promise, value) {
          if (promise === value) {
            lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
          } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
            lib$es6$promise$$internal$$handleMaybeThenable(promise, value, lib$es6$promise$$internal$$getThen(value));
          } else {
            lib$es6$promise$$internal$$fulfill(promise, value);
          }
        }function lib$es6$promise$$internal$$publishRejection(promise) {
          if (promise._onerror) {
            promise._onerror(promise._result);
          }lib$es6$promise$$internal$$publish(promise);
        }function lib$es6$promise$$internal$$fulfill(promise, value) {
          if (promise._state !== lib$es6$promise$$internal$$PENDING) {
            return;
          }promise._result = value;promise._state = lib$es6$promise$$internal$$FULFILLED;if (promise._subscribers.length !== 0) {
            lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
          }
        }function lib$es6$promise$$internal$$reject(promise, reason) {
          if (promise._state !== lib$es6$promise$$internal$$PENDING) {
            return;
          }promise._state = lib$es6$promise$$internal$$REJECTED;promise._result = reason;lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
        }function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
          var subscribers = parent._subscribers;var length = subscribers.length;parent._onerror = null;subscribers[length] = child;subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;subscribers[length + lib$es6$promise$$internal$$REJECTED] = onRejection;if (length === 0 && parent._state) {
            lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
          }
        }function lib$es6$promise$$internal$$publish(promise) {
          var subscribers = promise._subscribers;var settled = promise._state;if (subscribers.length === 0) {
            return;
          }var child,
              callback,
              detail = promise._result;for (var i = 0; i < subscribers.length; i += 3) {
            child = subscribers[i];callback = subscribers[i + settled];if (child) {
              lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
            } else {
              callback(detail);
            }
          }promise._subscribers.length = 0;
        }function lib$es6$promise$$internal$$ErrorObject() {
          this.error = null;
        }var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();function lib$es6$promise$$internal$$tryCatch(callback, detail) {
          try {
            return callback(detail);
          } catch (e) {
            lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
          }
        }function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
          var hasCallback = lib$es6$promise$utils$$isFunction(callback),
              value,
              error,
              succeeded,
              failed;if (hasCallback) {
            value = lib$es6$promise$$internal$$tryCatch(callback, detail);if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
              failed = true;error = value.error;value = null;
            } else {
              succeeded = true;
            }if (promise === value) {
              lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());return;
            }
          } else {
            value = detail;succeeded = true;
          }if (promise._state !== lib$es6$promise$$internal$$PENDING) {// noop
          } else if (hasCallback && succeeded) {
            lib$es6$promise$$internal$$resolve(promise, value);
          } else if (failed) {
            lib$es6$promise$$internal$$reject(promise, error);
          } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
            lib$es6$promise$$internal$$fulfill(promise, value);
          } else if (settled === lib$es6$promise$$internal$$REJECTED) {
            lib$es6$promise$$internal$$reject(promise, value);
          }
        }function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
          try {
            resolver(function resolvePromise(value) {
              lib$es6$promise$$internal$$resolve(promise, value);
            }, function rejectPromise(reason) {
              lib$es6$promise$$internal$$reject(promise, reason);
            });
          } catch (e) {
            lib$es6$promise$$internal$$reject(promise, e);
          }
        }var lib$es6$promise$$internal$$id = 0;function lib$es6$promise$$internal$$nextId() {
          return lib$es6$promise$$internal$$id++;
        }function lib$es6$promise$$internal$$makePromise(promise) {
          promise[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$id++;promise._state = undefined;promise._result = undefined;promise._subscribers = [];
        }function lib$es6$promise$promise$all$$all(entries) {
          return new lib$es6$promise$enumerator$$default(this, entries).promise;
        }var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;function lib$es6$promise$promise$race$$race(entries) {
          /*jshint validthis:true */var Constructor = this;if (!lib$es6$promise$utils$$isArray(entries)) {
            return new Constructor(function (resolve, reject) {
              reject(new TypeError('You must pass an array to race.'));
            });
          } else {
            return new Constructor(function (resolve, reject) {
              var length = entries.length;for (var i = 0; i < length; i++) {
                Constructor.resolve(entries[i]).then(resolve, reject);
              }
            });
          }
        }var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;function lib$es6$promise$promise$reject$$reject(reason) {
          /*jshint validthis:true */var Constructor = this;var promise = new Constructor(lib$es6$promise$$internal$$noop);lib$es6$promise$$internal$$reject(promise, reason);return promise;
        }var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;function lib$es6$promise$promise$$needsResolver() {
          throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
        }function lib$es6$promise$promise$$needsNew() {
          throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
        }var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise; /**
                                                                                  Promise objects represent the eventual result of an asynchronous operation. The
                                                                                  primary way of interacting with a promise is through its `then` method, which
                                                                                  registers callbacks to receive either a promise's eventual value or the reason
                                                                                  why the promise cannot be fulfilled.
                                                                                  Terminology
                                                                                  -----------
                                                                                  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
                                                                                  - `thenable` is an object or function that defines a `then` method.
                                                                                  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
                                                                                  - `exception` is a value that is thrown using the throw statement.
                                                                                  - `reason` is a value that indicates why a promise was rejected.
                                                                                  - `settled` the final resting state of a promise, fulfilled or rejected.
                                                                                  A promise can be in one of three states: pending, fulfilled, or rejected.
                                                                                  Promises that are fulfilled have a fulfillment value and are in the fulfilled
                                                                                  state.  Promises that are rejected have a rejection reason and are in the
                                                                                  rejected state.  A fulfillment value is never a thenable.
                                                                                  Promises can also be said to *resolve* a value.  If this value is also a
                                                                                  promise, then the original promise's settled state will match the value's
                                                                                  settled state.  So a promise that *resolves* a promise that rejects will
                                                                                  itself reject, and a promise that *resolves* a promise that fulfills will
                                                                                  itself fulfill.
                                                                                  Basic Usage:
                                                                                  ------------
                                                                                  ```js
                                                                                  var promise = new Promise(function(resolve, reject) {
                                                                                  // on success
                                                                                  resolve(value);
                                                                                  // on failure
                                                                                  reject(reason);
                                                                                  });
                                                                                  promise.then(function(value) {
                                                                                  // on fulfillment
                                                                                  }, function(reason) {
                                                                                  // on rejection
                                                                                  });
                                                                                  ```
                                                                                  Advanced Usage:
                                                                                  ---------------
                                                                                  Promises shine when abstracting away asynchronous interactions such as
                                                                                  `XMLHttpRequest`s.
                                                                                  ```js
                                                                                  function getJSON(url) {
                                                                                  return new Promise(function(resolve, reject){
                                                                                  var xhr = new XMLHttpRequest();
                                                                                  xhr.open('GET', url);
                                                                                  xhr.onreadystatechange = handler;
                                                                                  xhr.responseType = 'json';
                                                                                  xhr.setRequestHeader('Accept', 'application/json');
                                                                                  xhr.send();
                                                                                  function handler() {
                                                                                  if (this.readyState === this.DONE) {
                                                                                  if (this.status === 200) {
                                                                                  resolve(this.response);
                                                                                  } else {
                                                                                  reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
                                                                                  }
                                                                                  }
                                                                                  };
                                                                                  });
                                                                                  }
                                                                                  getJSON('/posts.json').then(function(json) {
                                                                                  // on fulfillment
                                                                                  }, function(reason) {
                                                                                  // on rejection
                                                                                  });
                                                                                  ```
                                                                                  Unlike callbacks, promises are great composable primitives.
                                                                                  ```js
                                                                                  Promise.all([
                                                                                  getJSON('/posts'),
                                                                                  getJSON('/comments')
                                                                                  ]).then(function(values){
                                                                                  values[0] // => postsJSON
                                                                                  values[1] // => commentsJSON
                                                                                  return values;
                                                                                  });
                                                                                  ```
                                                                                  @class Promise
                                                                                  @param {function} resolver
                                                                                  Useful for tooling.
                                                                                  @constructor
                                                                                  */function lib$es6$promise$promise$$Promise(resolver) {
          this[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$nextId();this._result = this._state = undefined;this._subscribers = [];if (lib$es6$promise$$internal$$noop !== resolver) {
            typeof resolver !== 'function' && lib$es6$promise$promise$$needsResolver();this instanceof lib$es6$promise$promise$$Promise ? lib$es6$promise$$internal$$initializePromise(this, resolver) : lib$es6$promise$promise$$needsNew();
          }
        }lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;lib$es6$promise$promise$$Promise.prototype = { constructor: lib$es6$promise$promise$$Promise, /**
he primary way of interacting with a promise is through its `then` method,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         which registers callbacks to receive either a promise's eventual value or the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         reason why the promise cannot be fulfilled.
```js
findUser().then(function(user){
user is available
}, function(reason){
user is unavailable, and you are given the reason why
});
```
haining

he return value of `then` is itself a promise.  This second, 'downstream'
promise is resolved with the return value of the first promise's fulfillment
or rejection handler, or rejected if the handler throws an exception.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ```js
findUser().then(function (user) {
return user.name;
}, function (reason) {
return 'default name';
}).then(function (userName) {
f `findUser` fulfilled, `userName` will be the user's name, otherwise it
will be `'default name'`
});
findUser().then(function (user) {
throw new Error('Found user, but still unhappy');
}, function (reason) {
throw new Error('`findUser` rejected and we're unhappy');
}).then(function (value) {
never reached
}, function (reason) {
if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
f `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
});
```
f the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
```js
findUser().then(function (user) {
throw new PedagogicalException('Upstream error');
}).then(function (value) {
never reached
}).then(function (value) {
never reached
}, function (reason) {
he `PedgagocialException` is propagated all the way down to here
});
```
ssimilation

ometimes the value you want to propagate to a downstream promise can only be
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         retrieved asynchronously. This can be achieved by returning a promise in the
fulfillment or rejection handler. The downstream promise will then be pending
until the returned promise is settled. This is called *assimilation*.
```js
findUser().then(function (user) {
return findCommentsByAuthor(user);
}).then(function (comments) {
he user's comments are now available
});
```
f the assimliated promise rejects, then the downstream promise will also reject.
```js
findUser().then(function (user) {
return findCommentsByAuthor(user);
}).then(function (comments) {
f `findCommentsByAuthor` fulfills, we'll have the value here
}, function (reason) {
f `findCommentsByAuthor` rejects, we'll have the reason here
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         });
```
imple Example

ynchronous Example
```javascript
var result;
try {
result = findResult();
success
} catch(reason) {
failure
}
```
rrback Example
```js
findResult(function(result, err){
if (err) {
failure
} else {
success
}
});
```
romise Example;
```javascript
findResult().then(function(result){
success
}, function(reason){
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         // failure
});
```
dvanced Example
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         --------------
ynchronous Example
```javascript
var author, books;
try {
author = findAuthor();
books  = findBooksByAuthor(author);
success
} catch(reason) {
failure
}
```
rrback Example
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ```js
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         function foundBooks(books) {
}
function failure(reason) {
}
findAuthor(function(author, err){
if (err) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         failure(err);
failure
} else {
try {
findBoooksByAuthor(author, function(books, err) {
if (err) {
failure(err);
} else {
try {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         foundBooks(books);
} catch(reason) {
failure(reason);
}
}
});
} catch(error) {
failure(err);
}
success
}
});
```
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Promise Example;
```javascript
findAuthor().
then(findBooksByAuthor).
then(function(books){
found books
}).catch(function(reason){
something went wrong
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         });
```
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         @method then
param {Function} onFulfilled
param {Function} onRejected
seful for tooling.
return {Promise}
then: lib$es6$promise$then$$default, /**
`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
as the catch block of a try/catch statement.
```js
function findAuthor(){
throw new Error('couldn't find that author');
}
synchronous
try {
findAuthor();
} catch(reason) {
something went wrong
}
async with promises
findAuthor().catch(function(reason){
something went wrong
});
```
method catch
param {Function} onRejection
seful for tooling.
return {Promise}
catch': function _catch(onRejection) {
            return this.then(null, onRejection);
          } };var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
          this._instanceConstructor = Constructor;this.promise = new Constructor(lib$es6$promise$$internal$$noop);if (!this.promise[lib$es6$promise$$internal$$PROMISE_ID]) {
            lib$es6$promise$$internal$$makePromise(this.promise);
          }if (lib$es6$promise$utils$$isArray(input)) {
            this._input = input;this.length = input.length;this._remaining = input.length;this._result = new Array(this.length);if (this.length === 0) {
              lib$es6$promise$$internal$$fulfill(this.promise, this._result);
            } else {
              this.length = this.length || 0;this._enumerate();if (this._remaining === 0) {
                lib$es6$promise$$internal$$fulfill(this.promise, this._result);
              }
            }
          } else {
            lib$es6$promise$$internal$$reject(this.promise, lib$es6$promise$enumerator$$validationError());
          }
        }function lib$es6$promise$enumerator$$validationError() {
          return new Error('Array Methods must be provided an Array');
        }lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function () {
          var length = this.length;var input = this._input;for (var i = 0; this._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
            this._eachEntry(input[i], i);
          }
        };lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function (entry, i) {
          var c = this._instanceConstructor;var resolve = c.resolve;if (resolve === lib$es6$promise$promise$resolve$$default) {
            var then = lib$es6$promise$$internal$$getThen(entry);if (then === lib$es6$promise$then$$default && entry._state !== lib$es6$promise$$internal$$PENDING) {
              this._settledAt(entry._state, i, entry._result);
            } else if (typeof then !== 'function') {
              this._remaining--;this._result[i] = entry;
            } else if (c === lib$es6$promise$promise$$default) {
              var promise = new c(lib$es6$promise$$internal$$noop);lib$es6$promise$$internal$$handleMaybeThenable(promise, entry, then);this._willSettleAt(promise, i);
            } else {
              this._willSettleAt(new c(function (resolve) {
                resolve(entry);
              }), i);
            }
          } else {
            this._willSettleAt(resolve(entry), i);
          }
        };lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function (state, i, value) {
          var promise = this.promise;if (promise._state === lib$es6$promise$$internal$$PENDING) {
            this._remaining--;if (state === lib$es6$promise$$internal$$REJECTED) {
              lib$es6$promise$$internal$$reject(promise, value);
            } else {
              this._result[i] = value;
            }
          }if (this._remaining === 0) {
            lib$es6$promise$$internal$$fulfill(promise, this._result);
          }
        };lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function (promise, i) {
          var enumerator = this;lib$es6$promise$$internal$$subscribe(promise, undefined, function (value) {
            enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
          }, function (reason) {
            enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
          });
        };function lib$es6$promise$polyfill$$polyfill() {
          var local;if (typeof global !== 'undefined') {
            local = global;
          } else if (typeof self !== 'undefined') {
            local = self;
          } else {
            try {
              local = Function('return this')();
            } catch (e) {
              throw new Error('polyfill failed because global object is unavailable in this environment');
            }
          }var P = local.Promise;if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
            return;
          }local.Promise = lib$es6$promise$promise$$default;
        }var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;var lib$es6$promise$umd$$ES6Promise = { 'Promise': lib$es6$promise$promise$$default, 'polyfill': lib$es6$promise$polyfill$$default }; /* global define:true module:true window: true */if (typeof define === 'function' && define['amd']) {
          define(function () {
            return lib$es6$promise$umd$$ES6Promise;
          });
        } else if (typeof module !== 'undefined' && module['exports']) {
          module['exports'] = lib$es6$promise$umd$$ES6Promise;
        } else if (typeof this !== 'undefined') {
          this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
        }lib$es6$promise$polyfill$$default();
      }).call(this);
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, { "_process": 12 }], 17: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    function EventEmitter() {
      this._events = this._events || {};this._maxListeners = this._maxListeners || undefined;
    }module.exports = EventEmitter; // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;EventEmitter.prototype._events = undefined;EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10; // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function (n) {
      if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');this._maxListeners = n;return this;
    };EventEmitter.prototype.emit = function (type) {
      var er, handler, len, args, i, listeners;if (!this._events) this._events = {}; // If there is no 'error' event listener then throw.
      if (type === 'error') {
        if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
          er = arguments[1];if (er instanceof Error) {
            throw er; // Unhandled 'error' event
          } else {
            // At least give some kind of context to the user
            var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');err.context = er;throw err;
          }
        }
      }handler = this._events[type];if (isUndefined(handler)) return false;if (isFunction(handler)) {
        switch (arguments.length) {// fast cases
          case 1:
            handler.call(this);break;case 2:
            handler.call(this, arguments[1]);break;case 3:
            handler.call(this, arguments[1], arguments[2]);break; // slower
          default:
            args = Array.prototype.slice.call(arguments, 1);handler.apply(this, args);}
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1);listeners = handler.slice();len = listeners.length;for (i = 0; i < len; i++) {
          listeners[i].apply(this, args);
        }
      }return true;
    };EventEmitter.prototype.addListener = function (type, listener) {
      var m;if (!isFunction(listener)) throw TypeError('listener must be a function');if (!this._events) this._events = {}; // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);if (!this._events[type]) // Optimize the case of one listener. Don't need the extra array object.
        this._events[type] = listener;else if (isObject(this._events[type])) // If we've already got an array, just append.
        this._events[type].push(listener);else // Adding the second element, need to change to array.
        this._events[type] = [this._events[type], listener]; // Check for listener leak
      if (isObject(this._events[type]) && !this._events[type].warned) {
        if (!isUndefined(this._maxListeners)) {
          m = this._maxListeners;
        } else {
          m = EventEmitter.defaultMaxListeners;
        }if (m && m > 0 && this._events[type].length > m) {
          this._events[type].warned = true;console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);if (typeof console.trace === 'function') {
            // not supported in IE 10
            console.trace();
          }
        }
      }return this;
    };EventEmitter.prototype.on = EventEmitter.prototype.addListener;EventEmitter.prototype.once = function (type, listener) {
      if (!isFunction(listener)) throw TypeError('listener must be a function');var fired = false;function g() {
        this.removeListener(type, g);if (!fired) {
          fired = true;listener.apply(this, arguments);
        }
      }g.listener = listener;this.on(type, g);return this;
    }; // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener = function (type, listener) {
      var list, position, length, i;if (!isFunction(listener)) throw TypeError('listener must be a function');if (!this._events || !this._events[type]) return this;list = this._events[type];length = list.length;position = -1;if (list === listener || isFunction(list.listener) && list.listener === listener) {
        delete this._events[type];if (this._events.removeListener) this.emit('removeListener', type, listener);
      } else if (isObject(list)) {
        for (i = length; i-- > 0;) {
          if (list[i] === listener || list[i].listener && list[i].listener === listener) {
            position = i;break;
          }
        }if (position < 0) return this;if (list.length === 1) {
          list.length = 0;delete this._events[type];
        } else {
          list.splice(position, 1);
        }if (this._events.removeListener) this.emit('removeListener', type, listener);
      }return this;
    };EventEmitter.prototype.removeAllListeners = function (type) {
      var key, listeners;if (!this._events) return this; // not listening for removeListener, no need to emit
      if (!this._events.removeListener) {
        if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];return this;
      } // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        for (key in this._events) {
          if (key === 'removeListener') continue;this.removeAllListeners(key);
        }this.removeAllListeners('removeListener');this._events = {};return this;
      }listeners = this._events[type];if (isFunction(listeners)) {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        while (listeners.length) {
          this.removeListener(type, listeners[listeners.length - 1]);
        }
      }delete this._events[type];return this;
    };EventEmitter.prototype.listeners = function (type) {
      var ret;if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();return ret;
    };EventEmitter.prototype.listenerCount = function (type) {
      if (this._events) {
        var evlistener = this._events[type];if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
      }return 0;
    };EventEmitter.listenerCount = function (emitter, type) {
      return emitter.listenerCount(type);
    };function isFunction(arg) {
      return typeof arg === 'function';
    }function isNumber(arg) {
      return typeof arg === 'number';
    }function isObject(arg) {
      return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'object' && arg !== null;
    }function isUndefined(arg) {
      return arg === void 0;
    }
  }, {}], 18: [function (require, module, exports) {
    var Parser = require('./lib/parser');function getGlobal() {
      return this;
    }module.exports = { create: function create(buffer, global) {
        global = global || getGlobal();if (buffer instanceof global.ArrayBuffer) {
          var DOMBufferStream = require('./lib/dom-bufferstream');return new Parser(new DOMBufferStream(buffer, 0, buffer.byteLength, true, global));
        } else {
          var NodeBufferStream = require('./lib/bufferstream');return new Parser(new NodeBufferStream(buffer, 0, buffer.length, true));
        }
      } };
  }, { "./lib/bufferstream": 19, "./lib/dom-bufferstream": 21, "./lib/parser": 25 }], 19: [function (require, module, exports) {
    function BufferStream(buffer, offset, length, bigEndian) {
      this.buffer = buffer;this.offset = offset || 0;length = typeof length === 'number' ? length : buffer.length;this.endPosition = this.offset + length;this.setBigEndian(bigEndian);
    }BufferStream.prototype = { setBigEndian: function setBigEndian(bigEndian) {
        this.bigEndian = !!bigEndian;
      }, nextUInt8: function nextUInt8() {
        var value = this.buffer.readUInt8(this.offset);this.offset += 1;return value;
      }, nextInt8: function nextInt8() {
        var value = this.buffer.readInt8(this.offset);this.offset += 1;return value;
      }, nextUInt16: function nextUInt16() {
        var value = this.bigEndian ? this.buffer.readUInt16BE(this.offset) : this.buffer.readUInt16LE(this.offset);this.offset += 2;return value;
      }, nextUInt32: function nextUInt32() {
        var value = this.bigEndian ? this.buffer.readUInt32BE(this.offset) : this.buffer.readUInt32LE(this.offset);this.offset += 4;return value;
      }, nextInt16: function nextInt16() {
        var value = this.bigEndian ? this.buffer.readInt16BE(this.offset) : this.buffer.readInt16LE(this.offset);this.offset += 2;return value;
      }, nextInt32: function nextInt32() {
        var value = this.bigEndian ? this.buffer.readInt32BE(this.offset) : this.buffer.readInt32LE(this.offset);this.offset += 4;return value;
      }, nextFloat: function nextFloat() {
        var value = this.bigEndian ? this.buffer.readFloatBE(this.offset) : this.buffer.readFloatLE(this.offset);this.offset += 4;return value;
      }, nextDouble: function nextDouble() {
        var value = this.bigEndian ? this.buffer.readDoubleBE(this.offset) : this.buffer.readDoubleLE(this.offset);this.offset += 8;return value;
      }, nextBuffer: function nextBuffer(length) {
        var value = this.buffer.slice(this.offset, this.offset + length);this.offset += length;return value;
      }, remainingLength: function remainingLength() {
        return this.endPosition - this.offset;
      }, nextString: function nextString(length) {
        var value = this.buffer.toString('ascii', this.offset, this.offset + length);this.offset += length;return value;
      }, mark: function mark() {
        var self = this;return { openWithOffset: function openWithOffset(offset) {
            offset = (offset || 0) + this.offset;return new BufferStream(self.buffer, offset, self.endPosition - offset, self.bigEndian);
          }, offset: this.offset };
      }, offsetFrom: function offsetFrom(marker) {
        return this.offset - marker.offset;
      }, skip: function skip(amount) {
        this.offset += amount;
      }, branch: function branch(offset, length) {
        length = typeof length === 'number' ? length : this.endPosition - (this.offset + offset);return new BufferStream(this.buffer, this.offset + offset, length, this.bigEndian);
      } };module.exports = BufferStream;
  }, {}], 20: [function (require, module, exports) {
    function parseNumber(s) {
      return parseInt(s, 10);
    } //in seconds
    var hours = 3600;var minutes = 60; //take date (year, month, day) and time (hour, minutes, seconds) digits in UTC
    //and return a timestamp in seconds
    function parseDateTimeParts(dateParts, timeParts) {
      dateParts = dateParts.map(parseNumber);timeParts = timeParts.map(parseNumber);var date = new Date();date.setUTCFullYear(dateParts[0]);date.setUTCMonth(dateParts[1] - 1);date.setUTCDate(dateParts[2]);date.setUTCHours(timeParts[0]);date.setUTCMinutes(timeParts[1]);date.setUTCSeconds(timeParts[2]);date.setUTCMilliseconds(0);var timestamp = date.getTime() / 1000;return timestamp;
    } //parse date with "2004-09-04T23:39:06-08:00" format,
    //one of the formats supported by ISO 8601, and
    //convert to utc timestamp in seconds
    function parseDateWithTimezoneFormat(dateTimeStr) {
      var dateParts = dateTimeStr.substr(0, 10).split('-');var timeParts = dateTimeStr.substr(11, 8).split(':');var timezoneStr = dateTimeStr.substr(19, 6);var timezoneParts = timezoneStr.split(':').map(parseNumber);var timezoneOffset = timezoneParts[0] * hours + timezoneParts[1] * minutes;var timestamp = parseDateTimeParts(dateParts, timeParts); //minus because the timezoneOffset describes
      //how much the described time is ahead of UTC
      timestamp -= timezoneOffset;if (typeof timestamp === 'number' && !isNaN(timestamp)) {
        return timestamp;
      }
    } //parse date with "YYYY:MM:DD hh:mm:ss" format, convert to utc timestamp in seconds
    function parseDateWithSpecFormat(dateTimeStr) {
      var parts = dateTimeStr.split(' '),
          dateParts = parts[0].split(':'),
          timeParts = parts[1].split(':');var timestamp = parseDateTimeParts(dateParts, timeParts);if (typeof timestamp === 'number' && !isNaN(timestamp)) {
        return timestamp;
      }
    }function parseExifDate(dateTimeStr) {
      //some easy checks to determine two common date formats
      //is the date in the standard "YYYY:MM:DD hh:mm:ss" format?
      var isSpecFormat = dateTimeStr.length === 19 && dateTimeStr.charAt(4) === ':'; //is the date in the non-standard format,
      //"2004-09-04T23:39:06-08:00" to include a timezone?
      var isTimezoneFormat = dateTimeStr.length === 25 && dateTimeStr.charAt(10) === 'T';var timestamp;if (isTimezoneFormat) {
        return parseDateWithTimezoneFormat(dateTimeStr);
      } else if (isSpecFormat) {
        return parseDateWithSpecFormat(dateTimeStr);
      }
    }module.exports = { parseDateWithSpecFormat: parseDateWithSpecFormat, parseDateWithTimezoneFormat: parseDateWithTimezoneFormat, parseExifDate: parseExifDate };
  }, {}], 21: [function (require, module, exports) {
    /*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */function DOMBufferStream(arrayBuffer, offset, length, bigEndian, global, parentOffset) {
      this.global = global;offset = offset || 0;length = length || arrayBuffer.byteLength - offset;this.arrayBuffer = arrayBuffer.slice(offset, offset + length);this.view = new global.DataView(this.arrayBuffer, 0, this.arrayBuffer.byteLength);this.setBigEndian(bigEndian);this.offset = 0;this.parentOffset = (parentOffset || 0) + offset;
    }DOMBufferStream.prototype = { setBigEndian: function setBigEndian(bigEndian) {
        this.littleEndian = !bigEndian;
      }, nextUInt8: function nextUInt8() {
        var value = this.view.getUint8(this.offset);this.offset += 1;return value;
      }, nextInt8: function nextInt8() {
        var value = this.view.getInt8(this.offset);this.offset += 1;return value;
      }, nextUInt16: function nextUInt16() {
        var value = this.view.getUint16(this.offset, this.littleEndian);this.offset += 2;return value;
      }, nextUInt32: function nextUInt32() {
        var value = this.view.getUint32(this.offset, this.littleEndian);this.offset += 4;return value;
      }, nextInt16: function nextInt16() {
        var value = this.view.getInt16(this.offset, this.littleEndian);this.offset += 2;return value;
      }, nextInt32: function nextInt32() {
        var value = this.view.getInt32(this.offset, this.littleEndian);this.offset += 4;return value;
      }, nextFloat: function nextFloat() {
        var value = this.view.getFloat32(this.offset, this.littleEndian);this.offset += 4;return value;
      }, nextDouble: function nextDouble() {
        var value = this.view.getFloat64(this.offset, this.littleEndian);this.offset += 8;return value;
      }, nextBuffer: function nextBuffer(length) {
        //this won't work in IE10
        var value = this.arrayBuffer.slice(this.offset, this.offset + length);this.offset += length;return value;
      }, remainingLength: function remainingLength() {
        return this.arrayBuffer.byteLength - this.offset;
      }, nextString: function nextString(length) {
        var value = this.arrayBuffer.slice(this.offset, this.offset + length);value = String.fromCharCode.apply(null, new this.global.Uint8Array(value));this.offset += length;return value;
      }, mark: function mark() {
        var self = this;return { openWithOffset: function openWithOffset(offset) {
            offset = (offset || 0) + this.offset;return new DOMBufferStream(self.arrayBuffer, offset, self.arrayBuffer.byteLength - offset, !self.littleEndian, self.global, self.parentOffset);
          }, offset: this.offset, getParentOffset: function getParentOffset() {
            return self.parentOffset;
          } };
      }, offsetFrom: function offsetFrom(marker) {
        return this.parentOffset + this.offset - (marker.offset + marker.getParentOffset());
      }, skip: function skip(amount) {
        this.offset += amount;
      }, branch: function branch(offset, length) {
        length = typeof length === 'number' ? length : this.arrayBuffer.byteLength - (this.offset + offset);return new DOMBufferStream(this.arrayBuffer, this.offset + offset, length, !this.littleEndian, this.global, this.parentOffset);
      } };module.exports = DOMBufferStream;
  }, {}], 22: [function (require, module, exports) {
    module.exports = { exif: { 0x0001: "InteropIndex", 0x0002: "InteropVersion", 0x000B: "ProcessingSoftware", 0x00FE: "SubfileType", 0x00FF: "OldSubfileType", 0x0100: "ImageWidth", 0x0101: "ImageHeight", 0x0102: "BitsPerSample", 0x0103: "Compression", 0x0106: "PhotometricInterpretation", 0x0107: "Thresholding", 0x0108: "CellWidth", 0x0109: "CellLength", 0x010A: "FillOrder", 0x010D: "DocumentName", 0x010E: "ImageDescription", 0x010F: "Make", 0x0110: "Model", 0x0111: "StripOffsets", 0x0112: "Orientation", 0x0115: "SamplesPerPixel", 0x0116: "RowsPerStrip", 0x0117: "StripByteCounts", 0x0118: "MinSampleValue", 0x0119: "MaxSampleValue", 0x011A: "XResolution", 0x011B: "YResolution", 0x011C: "PlanarConfiguration", 0x011D: "PageName", 0x011E: "XPosition", 0x011F: "YPosition", 0x0120: "FreeOffsets", 0x0121: "FreeByteCounts", 0x0122: "GrayResponseUnit", 0x0123: "GrayResponseCurve", 0x0124: "T4Options", 0x0125: "T6Options", 0x0128: "ResolutionUnit", 0x0129: "PageNumber", 0x012C: "ColorResponseUnit", 0x012D: "TransferFunction", 0x0131: "Software", 0x0132: "ModifyDate", 0x013B: "Artist", 0x013C: "HostComputer", 0x013D: "Predictor", 0x013E: "WhitePoint", 0x013F: "PrimaryChromaticities", 0x0140: "ColorMap", 0x0141: "HalftoneHints", 0x0142: "TileWidth", 0x0143: "TileLength", 0x0144: "TileOffsets", 0x0145: "TileByteCounts", 0x0146: "BadFaxLines", 0x0147: "CleanFaxData", 0x0148: "ConsecutiveBadFaxLines", 0x014A: "SubIFD", 0x014C: "InkSet", 0x014D: "InkNames", 0x014E: "NumberofInks", 0x0150: "DotRange", 0x0151: "TargetPrinter", 0x0152: "ExtraSamples", 0x0153: "SampleFormat", 0x0154: "SMinSampleValue", 0x0155: "SMaxSampleValue", 0x0156: "TransferRange", 0x0157: "ClipPath", 0x0158: "XClipPathUnits", 0x0159: "YClipPathUnits", 0x015A: "Indexed", 0x015B: "JPEGTables", 0x015F: "OPIProxy", 0x0190: "GlobalParametersIFD", 0x0191: "ProfileType", 0x0192: "FaxProfile", 0x0193: "CodingMethods", 0x0194: "VersionYear", 0x0195: "ModeNumber", 0x01B1: "Decode", 0x01B2: "DefaultImageColor", 0x01B3: "T82Options", 0x01B5: "JPEGTables", 0x0200: "JPEGProc", 0x0201: "ThumbnailOffset", 0x0202: "ThumbnailLength", 0x0203: "JPEGRestartInterval", 0x0205: "JPEGLosslessPredictors", 0x0206: "JPEGPointTransforms", 0x0207: "JPEGQTables", 0x0208: "JPEGDCTables", 0x0209: "JPEGACTables", 0x0211: "YCbCrCoefficients", 0x0212: "YCbCrSubSampling", 0x0213: "YCbCrPositioning", 0x0214: "ReferenceBlackWhite", 0x022F: "StripRowCounts", 0x02BC: "ApplicationNotes", 0x03E7: "USPTOMiscellaneous", 0x1000: "RelatedImageFileFormat", 0x1001: "RelatedImageWidth", 0x1002: "RelatedImageHeight", 0x4746: "Rating", 0x4747: "XP_DIP_XML", 0x4748: "StitchInfo", 0x4749: "RatingPercent", 0x800D: "ImageID", 0x80A3: "WangTag1", 0x80A4: "WangAnnotation", 0x80A5: "WangTag3", 0x80A6: "WangTag4", 0x80E3: "Matteing", 0x80E4: "DataType", 0x80E5: "ImageDepth", 0x80E6: "TileDepth", 0x827D: "Model2", 0x828D: "CFARepeatPatternDim", 0x828E: "CFAPattern2", 0x828F: "BatteryLevel", 0x8290: "KodakIFD", 0x8298: "Copyright", 0x829A: "ExposureTime", 0x829D: "FNumber", 0x82A5: "MDFileTag", 0x82A6: "MDScalePixel", 0x82A7: "MDColorTable", 0x82A8: "MDLabName", 0x82A9: "MDSampleInfo", 0x82AA: "MDPrepDate", 0x82AB: "MDPrepTime", 0x82AC: "MDFileUnits", 0x830E: "PixelScale", 0x8335: "AdventScale", 0x8336: "AdventRevision", 0x835C: "UIC1Tag", 0x835D: "UIC2Tag", 0x835E: "UIC3Tag", 0x835F: "UIC4Tag", 0x83BB: "IPTC-NAA", 0x847E: "IntergraphPacketData", 0x847F: "IntergraphFlagRegisters", 0x8480: "IntergraphMatrix", 0x8481: "INGRReserved", 0x8482: "ModelTiePoint", 0x84E0: "Site", 0x84E1: "ColorSequence", 0x84E2: "IT8Header", 0x84E3: "RasterPadding", 0x84E4: "BitsPerRunLength", 0x84E5: "BitsPerExtendedRunLength", 0x84E6: "ColorTable", 0x84E7: "ImageColorIndicator", 0x84E8: "BackgroundColorIndicator", 0x84E9: "ImageColorValue", 0x84EA: "BackgroundColorValue", 0x84EB: "PixelIntensityRange", 0x84EC: "TransparencyIndicator", 0x84ED: "ColorCharacterization", 0x84EE: "HCUsage", 0x84EF: "TrapIndicator", 0x84F0: "CMYKEquivalent", 0x8546: "SEMInfo", 0x8568: "AFCP_IPTC", 0x85B8: "PixelMagicJBIGOptions", 0x85D8: "ModelTransform", 0x8602: "WB_GRGBLevels", 0x8606: "LeafData", 0x8649: "PhotoshopSettings", 0x8769: "ExifOffset", 0x8773: "ICC_Profile", 0x877F: "TIFF_FXExtensions", 0x8780: "MultiProfiles", 0x8781: "SharedData", 0x8782: "T88Options", 0x87AC: "ImageLayer", 0x87AF: "GeoTiffDirectory", 0x87B0: "GeoTiffDoubleParams", 0x87B1: "GeoTiffAsciiParams", 0x8822: "ExposureProgram", 0x8824: "SpectralSensitivity", 0x8825: "GPSInfo", 0x8827: "ISO", 0x8828: "Opto-ElectricConvFactor", 0x8829: "Interlace", 0x882A: "TimeZoneOffset", 0x882B: "SelfTimerMode", 0x8830: "SensitivityType", 0x8831: "StandardOutputSensitivity", 0x8832: "RecommendedExposureIndex", 0x8833: "ISOSpeed", 0x8834: "ISOSpeedLatitudeyyy", 0x8835: "ISOSpeedLatitudezzz", 0x885C: "FaxRecvParams", 0x885D: "FaxSubAddress", 0x885E: "FaxRecvTime", 0x888A: "LeafSubIFD", 0x9000: "ExifVersion", 0x9003: "DateTimeOriginal", 0x9004: "CreateDate", 0x9101: "ComponentsConfiguration", 0x9102: "CompressedBitsPerPixel", 0x9201: "ShutterSpeedValue", 0x9202: "ApertureValue", 0x9203: "BrightnessValue", 0x9204: "ExposureCompensation", 0x9205: "MaxApertureValue", 0x9206: "SubjectDistance", 0x9207: "MeteringMode", 0x9208: "LightSource", 0x9209: "Flash", 0x920A: "FocalLength", 0x920B: "FlashEnergy", 0x920C: "SpatialFrequencyResponse", 0x920D: "Noise", 0x920E: "FocalPlaneXResolution", 0x920F: "FocalPlaneYResolution", 0x9210: "FocalPlaneResolutionUnit", 0x9211: "ImageNumber", 0x9212: "SecurityClassification", 0x9213: "ImageHistory", 0x9214: "SubjectArea", 0x9215: "ExposureIndex", 0x9216: "TIFF-EPStandardID", 0x9217: "SensingMethod", 0x923A: "CIP3DataFile", 0x923B: "CIP3Sheet", 0x923C: "CIP3Side", 0x923F: "StoNits", 0x927C: "MakerNote", 0x9286: "UserComment", 0x9290: "SubSecTime", 0x9291: "SubSecTimeOriginal", 0x9292: "SubSecTimeDigitized", 0x932F: "MSDocumentText", 0x9330: "MSPropertySetStorage", 0x9331: "MSDocumentTextPosition", 0x935C: "ImageSourceData", 0x9C9B: "XPTitle", 0x9C9C: "XPComment", 0x9C9D: "XPAuthor", 0x9C9E: "XPKeywords", 0x9C9F: "XPSubject", 0xA000: "FlashpixVersion", 0xA001: "ColorSpace", 0xA002: "ExifImageWidth", 0xA003: "ExifImageHeight", 0xA004: "RelatedSoundFile", 0xA005: "InteropOffset", 0xA20B: "FlashEnergy", 0xA20C: "SpatialFrequencyResponse", 0xA20D: "Noise", 0xA20E: "FocalPlaneXResolution", 0xA20F: "FocalPlaneYResolution", 0xA210: "FocalPlaneResolutionUnit", 0xA211: "ImageNumber", 0xA212: "SecurityClassification", 0xA213: "ImageHistory", 0xA214: "SubjectLocation", 0xA215: "ExposureIndex", 0xA216: "TIFF-EPStandardID", 0xA217: "SensingMethod", 0xA300: "FileSource", 0xA301: "SceneType", 0xA302: "CFAPattern", 0xA401: "CustomRendered", 0xA402: "ExposureMode", 0xA403: "WhiteBalance", 0xA404: "DigitalZoomRatio", 0xA405: "FocalLengthIn35mmFormat", 0xA406: "SceneCaptureType", 0xA407: "GainControl", 0xA408: "Contrast", 0xA409: "Saturation", 0xA40A: "Sharpness", 0xA40B: "DeviceSettingDescription", 0xA40C: "SubjectDistanceRange", 0xA420: "ImageUniqueID", 0xA430: "OwnerName", 0xA431: "SerialNumber", 0xA432: "LensInfo", 0xA433: "LensMake", 0xA434: "LensModel", 0xA435: "LensSerialNumber", 0xA480: "GDALMetadata", 0xA481: "GDALNoData", 0xA500: "Gamma", 0xAFC0: "ExpandSoftware", 0xAFC1: "ExpandLens", 0xAFC2: "ExpandFilm", 0xAFC3: "ExpandFilterLens", 0xAFC4: "ExpandScanner", 0xAFC5: "ExpandFlashLamp", 0xBC01: "PixelFormat", 0xBC02: "Transformation", 0xBC03: "Uncompressed", 0xBC04: "ImageType", 0xBC80: "ImageWidth", 0xBC81: "ImageHeight", 0xBC82: "WidthResolution", 0xBC83: "HeightResolution", 0xBCC0: "ImageOffset", 0xBCC1: "ImageByteCount", 0xBCC2: "AlphaOffset", 0xBCC3: "AlphaByteCount", 0xBCC4: "ImageDataDiscard", 0xBCC5: "AlphaDataDiscard", 0xC427: "OceScanjobDesc", 0xC428: "OceApplicationSelector", 0xC429: "OceIDNumber", 0xC42A: "OceImageLogic", 0xC44F: "Annotations", 0xC4A5: "PrintIM", 0xC580: "USPTOOriginalContentType", 0xC612: "DNGVersion", 0xC613: "DNGBackwardVersion", 0xC614: "UniqueCameraModel", 0xC615: "LocalizedCameraModel", 0xC616: "CFAPlaneColor", 0xC617: "CFALayout", 0xC618: "LinearizationTable", 0xC619: "BlackLevelRepeatDim", 0xC61A: "BlackLevel", 0xC61B: "BlackLevelDeltaH", 0xC61C: "BlackLevelDeltaV", 0xC61D: "WhiteLevel", 0xC61E: "DefaultScale", 0xC61F: "DefaultCropOrigin", 0xC620: "DefaultCropSize", 0xC621: "ColorMatrix1", 0xC622: "ColorMatrix2", 0xC623: "CameraCalibration1", 0xC624: "CameraCalibration2", 0xC625: "ReductionMatrix1", 0xC626: "ReductionMatrix2", 0xC627: "AnalogBalance", 0xC628: "AsShotNeutral", 0xC629: "AsShotWhiteXY", 0xC62A: "BaselineExposure", 0xC62B: "BaselineNoise", 0xC62C: "BaselineSharpness", 0xC62D: "BayerGreenSplit", 0xC62E: "LinearResponseLimit", 0xC62F: "CameraSerialNumber", 0xC630: "DNGLensInfo", 0xC631: "ChromaBlurRadius", 0xC632: "AntiAliasStrength", 0xC633: "ShadowScale", 0xC634: "DNGPrivateData", 0xC635: "MakerNoteSafety", 0xC640: "RawImageSegmentation", 0xC65A: "CalibrationIlluminant1", 0xC65B: "CalibrationIlluminant2", 0xC65C: "BestQualityScale", 0xC65D: "RawDataUniqueID", 0xC660: "AliasLayerMetadata", 0xC68B: "OriginalRawFileName", 0xC68C: "OriginalRawFileData", 0xC68D: "ActiveArea", 0xC68E: "MaskedAreas", 0xC68F: "AsShotICCProfile", 0xC690: "AsShotPreProfileMatrix", 0xC691: "CurrentICCProfile", 0xC692: "CurrentPreProfileMatrix", 0xC6BF: "ColorimetricReference", 0xC6D2: "PanasonicTitle", 0xC6D3: "PanasonicTitle2", 0xC6F3: "CameraCalibrationSig", 0xC6F4: "ProfileCalibrationSig", 0xC6F5: "ProfileIFD", 0xC6F6: "AsShotProfileName", 0xC6F7: "NoiseReductionApplied", 0xC6F8: "ProfileName", 0xC6F9: "ProfileHueSatMapDims", 0xC6FA: "ProfileHueSatMapData1", 0xC6FB: "ProfileHueSatMapData2", 0xC6FC: "ProfileToneCurve", 0xC6FD: "ProfileEmbedPolicy", 0xC6FE: "ProfileCopyright", 0xC714: "ForwardMatrix1", 0xC715: "ForwardMatrix2", 0xC716: "PreviewApplicationName", 0xC717: "PreviewApplicationVersion", 0xC718: "PreviewSettingsName", 0xC719: "PreviewSettingsDigest", 0xC71A: "PreviewColorSpace", 0xC71B: "PreviewDateTime", 0xC71C: "RawImageDigest", 0xC71D: "OriginalRawFileDigest", 0xC71E: "SubTileBlockSize", 0xC71F: "RowInterleaveFactor", 0xC725: "ProfileLookTableDims", 0xC726: "ProfileLookTableData", 0xC740: "OpcodeList1", 0xC741: "OpcodeList2", 0xC74E: "OpcodeList3", 0xC761: "NoiseProfile", 0xC763: "TimeCodes", 0xC764: "FrameRate", 0xC772: "TStop", 0xC789: "ReelName", 0xC791: "OriginalDefaultFinalSize", 0xC792: "OriginalBestQualitySize", 0xC793: "OriginalDefaultCropSize", 0xC7A1: "CameraLabel", 0xC7A3: "ProfileHueSatMapEncoding", 0xC7A4: "ProfileLookTableEncoding", 0xC7A5: "BaselineExposureOffset", 0xC7A6: "DefaultBlackRender", 0xC7A7: "NewRawImageDigest", 0xC7A8: "RawToPreviewGain", 0xC7B5: "DefaultUserCrop", 0xEA1C: "Padding", 0xEA1D: "OffsetSchema", 0xFDE8: "OwnerName", 0xFDE9: "SerialNumber", 0xFDEA: "Lens", 0xFE00: "KDC_IFD", 0xFE4C: "RawFile", 0xFE4D: "Converter", 0xFE4E: "WhiteBalance", 0xFE51: "Exposure", 0xFE52: "Shadows", 0xFE53: "Brightness", 0xFE54: "Contrast", 0xFE55: "Saturation", 0xFE56: "Sharpness", 0xFE57: "Smoothness", 0xFE58: "MoireFilter" }, gps: { 0x0000: 'GPSVersionID', 0x0001: 'GPSLatitudeRef', 0x0002: 'GPSLatitude', 0x0003: 'GPSLongitudeRef', 0x0004: 'GPSLongitude', 0x0005: 'GPSAltitudeRef', 0x0006: 'GPSAltitude', 0x0007: 'GPSTimeStamp', 0x0008: 'GPSSatellites', 0x0009: 'GPSStatus', 0x000A: 'GPSMeasureMode', 0x000B: 'GPSDOP', 0x000C: 'GPSSpeedRef', 0x000D: 'GPSSpeed', 0x000E: 'GPSTrackRef', 0x000F: 'GPSTrack', 0x0010: 'GPSImgDirectionRef', 0x0011: 'GPSImgDirection', 0x0012: 'GPSMapDatum', 0x0013: 'GPSDestLatitudeRef', 0x0014: 'GPSDestLatitude', 0x0015: 'GPSDestLongitudeRef', 0x0016: 'GPSDestLongitude', 0x0017: 'GPSDestBearingRef', 0x0018: 'GPSDestBearing', 0x0019: 'GPSDestDistanceRef', 0x001A: 'GPSDestDistance', 0x001B: 'GPSProcessingMethod', 0x001C: 'GPSAreaInformation', 0x001D: 'GPSDateStamp', 0x001E: 'GPSDifferential', 0x001F: 'GPSHPositioningError' } };
  }, {}], 23: [function (require, module, exports) {
    /*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */function readExifValue(format, stream) {
      switch (format) {case 1:
          return stream.nextUInt8();case 3:
          return stream.nextUInt16();case 4:
          return stream.nextUInt32();case 5:
          return [stream.nextUInt32(), stream.nextUInt32()];case 6:
          return stream.nextInt8();case 8:
          return stream.nextUInt16();case 9:
          return stream.nextUInt32();case 10:
          return [stream.nextInt32(), stream.nextInt32()];case 11:
          return stream.nextFloat();case 12:
          return stream.nextDouble();default:
          throw new Error('Invalid format while decoding: ' + format);}
    }function getBytesPerComponent(format) {
      switch (format) {case 1:case 2:case 6:case 7:
          return 1;case 3:case 8:
          return 2;case 4:case 9:case 11:
          return 4;case 5:case 10:case 12:
          return 8;default:
          throw new Error('Invalid format: ' + format);}
    }function readExifTag(tiffMarker, stream) {
      var tagType = stream.nextUInt16(),
          format = stream.nextUInt16(),
          bytesPerComponent = getBytesPerComponent(format),
          components = stream.nextUInt32(),
          valueBytes = bytesPerComponent * components,
          values,
          value,
          c; /* if the value is bigger then 4 bytes, the value is in the data section of the IFD
             and the value present in the tag is the offset starting from the tiff header. So we replace the stream
             with a stream that is located at the given offset in the data section. s*/if (valueBytes > 4) {
        stream = tiffMarker.openWithOffset(stream.nextUInt32());
      } //we don't want to read strings as arrays
      if (format === 2) {
        values = stream.nextString(components); //cut off \0 characters
        var lastNull = values.indexOf('\0');if (lastNull !== -1) {
          values = values.substr(0, lastNull);
        }
      } else if (format === 7) {
        values = stream.nextBuffer(components);
      } else {
        values = [];for (c = 0; c < components; ++c) {
          values.push(readExifValue(format, stream));
        }
      } //since our stream is a stateful object, we need to skip remaining bytes
      //so our offset stays correct
      if (valueBytes < 4) {
        stream.skip(4 - valueBytes);
      }return [tagType, values, format];
    }function readIFDSection(tiffMarker, stream, iterator) {
      var numberOfEntries = stream.nextUInt16(),
          tag,
          i;for (i = 0; i < numberOfEntries; ++i) {
        tag = readExifTag(tiffMarker, stream);iterator(tag[0], tag[1], tag[2]);
      }
    }function readHeader(stream) {
      var exifHeader = stream.nextString(6);if (exifHeader !== 'Exif\0\0') {
        throw new Error('Invalid EXIF header');
      }var tiffMarker = stream.mark();var tiffHeader = stream.nextUInt16();if (tiffHeader === 0x4949) {
        stream.setBigEndian(false);
      } else if (tiffHeader === 0x4D4D) {
        stream.setBigEndian(true);
      } else {
        throw new Error('Invalid TIFF header');
      }if (stream.nextUInt16() !== 0x002A) {
        throw new Error('Invalid TIFF data');
      }return tiffMarker;
    }module.exports = { IFD0: 1, IFD1: 2, GPSIFD: 3, SubIFD: 4, InteropIFD: 5, parseTags: function parseTags(stream, iterator) {
        var tiffMarker;try {
          tiffMarker = readHeader(stream);
        } catch (e) {
          return false; //ignore APP1 sections with invalid headers
        }var subIfdOffset, gpsOffset, interopOffset;var ifd0Stream = tiffMarker.openWithOffset(stream.nextUInt32()),
            IFD0 = this.IFD0;readIFDSection(tiffMarker, ifd0Stream, function (tagType, value, format) {
          switch (tagType) {case 0x8825:
              gpsOffset = value[0];break;case 0x8769:
              subIfdOffset = value[0];break;default:
              iterator(IFD0, tagType, value, format);break;}
        });var ifd1Offset = ifd0Stream.nextUInt32();if (ifd1Offset !== 0) {
          var ifd1Stream = tiffMarker.openWithOffset(ifd1Offset);readIFDSection(tiffMarker, ifd1Stream, iterator.bind(null, this.IFD1));
        }if (gpsOffset) {
          var gpsStream = tiffMarker.openWithOffset(gpsOffset);readIFDSection(tiffMarker, gpsStream, iterator.bind(null, this.GPSIFD));
        }if (subIfdOffset) {
          var subIfdStream = tiffMarker.openWithOffset(subIfdOffset),
              InteropIFD = this.InteropIFD;readIFDSection(tiffMarker, subIfdStream, function (tagType, value, format) {
            if (tagType === 0xA005) {
              interopOffset = value[0];
            } else {
              iterator(InteropIFD, tagType, value, format);
            }
          });
        }if (interopOffset) {
          var interopStream = tiffMarker.openWithOffset(interopOffset);readIFDSection(tiffMarker, interopStream, iterator.bind(null, this.InteropIFD));
        }return true;
      } };
  }, {}], 24: [function (require, module, exports) {
    /*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */module.exports = { parseSections: function parseSections(stream, iterator) {
        var len, markerType;stream.setBigEndian(true); //stop reading the stream at the SOS (Start of Stream) marker,
        //because its length is not stored in the header so we can't
        //know where to jump to. The only marker after that is just EOI (End Of Image) anyway
        while (stream.remainingLength() > 0 && markerType !== 0xDA) {
          if (stream.nextUInt8() !== 0xFF) {
            throw new Error('Invalid JPEG section offset');
          }markerType = stream.nextUInt8(); //don't read size from markers that have no datas
          if (markerType >= 0xD0 && markerType <= 0xD9 || markerType === 0xDA) {
            len = 0;
          } else {
            len = stream.nextUInt16() - 2;
          }iterator(markerType, stream.branch(0, len));stream.skip(len);
        }
      }, //stream should be located after SOF section size and in big endian mode, like passed to parseSections iterator
      getSizeFromSOFSection: function getSizeFromSOFSection(stream) {
        stream.skip(1);return { height: stream.nextUInt16(), width: stream.nextUInt16() };
      }, getSectionName: function getSectionName(markerType) {
        var name, index;switch (markerType) {case 0xD8:
            name = 'SOI';break;case 0xC4:
            name = 'DHT';break;case 0xDB:
            name = 'DQT';break;case 0xDD:
            name = 'DRI';break;case 0xDA:
            name = 'SOS';break;case 0xFE:
            name = 'COM';break;case 0xD9:
            name = 'EOI';break;default:
            if (markerType >= 0xE0 && markerType <= 0xEF) {
              name = 'APP';index = markerType - 0xE0;
            } else if (markerType >= 0xC0 && markerType <= 0xCF && markerType !== 0xC4 && markerType !== 0xC8 && markerType !== 0xCC) {
              name = 'SOF';index = markerType - 0xC0;
            } else if (markerType >= 0xD0 && markerType <= 0xD7) {
              name = 'RST';index = markerType - 0xD0;
            }break;}var nameStruct = { name: name };if (typeof index === 'number') {
          nameStruct.index = index;
        }return nameStruct;
      } };
  }, {}], 25: [function (require, module, exports) {
    /*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */var jpeg = require('./jpeg'),
        exif = require('./exif'),
        simplify = require('./simplify');function ExifResult(startMarker, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset) {
      this.startMarker = startMarker;this.tags = tags;this.imageSize = imageSize;this.thumbnailOffset = thumbnailOffset;this.thumbnailLength = thumbnailLength;this.thumbnailType = thumbnailType;this.app1Offset = app1Offset;
    }ExifResult.prototype = { hasThumbnail: function hasThumbnail(mime) {
        if (!this.thumbnailOffset || !this.thumbnailLength) {
          return false;
        }if (typeof mime !== 'string') {
          return true;
        }if (mime.toLowerCase().trim() === 'image/jpeg') {
          return this.thumbnailType === 6;
        }if (mime.toLowerCase().trim() === 'image/tiff') {
          return this.thumbnailType === 1;
        }return false;
      }, getThumbnailOffset: function getThumbnailOffset() {
        return this.app1Offset + 6 + this.thumbnailOffset;
      }, getThumbnailLength: function getThumbnailLength() {
        return this.thumbnailLength;
      }, getThumbnailBuffer: function getThumbnailBuffer() {
        return this._getThumbnailStream().nextBuffer(this.thumbnailLength);
      }, _getThumbnailStream: function _getThumbnailStream() {
        return this.startMarker.openWithOffset(this.getThumbnailOffset());
      }, getImageSize: function getImageSize() {
        return this.imageSize;
      }, getThumbnailSize: function getThumbnailSize() {
        var stream = this._getThumbnailStream(),
            size;jpeg.parseSections(stream, function (sectionType, sectionStream) {
          if (jpeg.getSectionName(sectionType).name === 'SOF') {
            size = jpeg.getSizeFromSOFSection(sectionStream);
          }
        });return size;
      } };function Parser(stream) {
      this.stream = stream;this.flags = { readBinaryTags: false, resolveTagNames: true, simplifyValues: true, imageSize: true, hidePointers: true, returnTags: true };
    }Parser.prototype = { enableBinaryFields: function enableBinaryFields(enable) {
        this.flags.readBinaryTags = !!enable;return this;
      }, enablePointers: function enablePointers(enable) {
        this.flags.hidePointers = !enable;return this;
      }, enableTagNames: function enableTagNames(enable) {
        this.flags.resolveTagNames = !!enable;return this;
      }, enableImageSize: function enableImageSize(enable) {
        this.flags.imageSize = !!enable;return this;
      }, enableReturnTags: function enableReturnTags(enable) {
        this.flags.returnTags = !!enable;return this;
      }, enableSimpleValues: function enableSimpleValues(enable) {
        this.flags.simplifyValues = !!enable;return this;
      }, parse: function parse() {
        var start = this.stream.mark(),
            stream = start.openWithOffset(0),
            flags = this.flags,
            tags,
            imageSize,
            thumbnailOffset,
            thumbnailLength,
            thumbnailType,
            app1Offset,
            tagNames,
            getTagValue,
            setTagValue;if (flags.resolveTagNames) {
          tagNames = require('./exif-tags');
        }if (flags.resolveTagNames) {
          tags = {};getTagValue = function getTagValue(t) {
            return tags[t.name];
          };setTagValue = function setTagValue(t, value) {
            tags[t.name] = value;
          };
        } else {
          tags = [];getTagValue = function getTagValue(t) {
            var i;for (i = 0; i < tags.length; ++i) {
              if (tags[i].type === t.type && tags[i].section === t.section) {
                return tags.value;
              }
            }
          };setTagValue = function setTagValue(t, value) {
            var i;for (i = 0; i < tags.length; ++i) {
              if (tags[i].type === t.type && tags[i].section === t.section) {
                tags.value = value;return;
              }
            }
          };
        }jpeg.parseSections(stream, function (sectionType, sectionStream) {
          var validExifHeaders,
              sectionOffset = sectionStream.offsetFrom(start);if (sectionType === 0xE1) {
            validExifHeaders = exif.parseTags(sectionStream, function (ifdSection, tagType, value, format) {
              //ignore binary fields if disabled
              if (!flags.readBinaryTags && format === 7) {
                return;
              }if (tagType === 0x0201) {
                thumbnailOffset = value[0];if (flags.hidePointers) {
                  return;
                }
              } else if (tagType === 0x0202) {
                thumbnailLength = value[0];if (flags.hidePointers) {
                  return;
                }
              } else if (tagType === 0x0103) {
                thumbnailType = value[0];if (flags.hidePointers) {
                  return;
                }
              } //if flag is set to not store tags, return here after storing pointers
              if (!flags.returnTags) {
                return;
              }if (flags.simplifyValues) {
                value = simplify.simplifyValue(value, format);
              }if (flags.resolveTagNames) {
                var sectionTagNames = ifdSection === exif.GPSIFD ? tagNames.gps : tagNames.exif;var name = sectionTagNames[tagType];if (!name) {
                  name = tagNames.exif[tagType];
                }tags[name] = value;
              } else {
                tags.push({ section: ifdSection, type: tagType, value: value });
              }
            });if (validExifHeaders) {
              app1Offset = sectionOffset;
            }
          } else if (flags.imageSize && jpeg.getSectionName(sectionType).name === 'SOF') {
            imageSize = jpeg.getSizeFromSOFSection(sectionStream);
          }
        });if (flags.simplifyValues) {
          simplify.castDegreeValues(getTagValue, setTagValue);simplify.castDateValues(getTagValue, setTagValue);
        }return new ExifResult(start, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset);
      } };module.exports = Parser;
  }, { "./exif": 23, "./exif-tags": 22, "./jpeg": 24, "./simplify": 26 }], 26: [function (require, module, exports) {
    var exif = require('./exif');var date = require('./date');var degreeTags = [{ section: exif.GPSIFD, type: 0x0002, name: 'GPSLatitude', refType: 0x0001, refName: 'GPSLatitudeRef', posVal: 'N' }, { section: exif.GPSIFD, type: 0x0004, name: 'GPSLongitude', refType: 0x0003, refName: 'GPSLongitudeRef', posVal: 'E' }];var dateTags = [{ section: exif.SubIFD, type: 0x9003, name: 'DateTimeOriginal' }, { section: exif.SubIFD, type: 0x9004, name: 'CreateDate' }];module.exports = { castDegreeValues: function castDegreeValues(getTagValue, setTagValue) {
        degreeTags.forEach(function (t) {
          var degreeVal = getTagValue(t);if (degreeVal) {
            var degreeRef = getTagValue({ section: t.section, type: t.refType, name: t.refName });var degreeNumRef = degreeRef === t.posVal ? 1 : -1;var degree = (degreeVal[0] + degreeVal[1] / 60 + degreeVal[2] / 3600) * degreeNumRef;setTagValue(t, degree);
          }
        });
      }, castDateValues: function castDateValues(getTagValue, setTagValue) {
        dateTags.forEach(function (t) {
          var dateStrVal = getTagValue(t);if (dateStrVal) {
            //some easy checks to determine two common date formats
            var timestamp = date.parseExifDate(dateStrVal);if (typeof timestamp !== 'undefined') {
              setTagValue(t, timestamp);
            }
          }
        });
      }, simplifyValue: function simplifyValue(values, format) {
        if (Array.isArray(values)) {
          values = values.map(function (value) {
            if (format === 10 || format === 5) {
              return value[0] / value[1];
            }return value;
          });if (values.length === 1) {
            values = values[0];
          }
        }return values;
      } };
  }, { "./date": 20, "./exif": 23 }], 27: [function (require, module, exports) {
    'use strict';
    module.exports = function (buf) {
      if (!(buf && buf.length > 1)) {
        return null;
      }if (buf[0] === 0xFF && buf[1] === 0xD8 && buf[2] === 0xFF) {
        return { ext: 'jpg', mime: 'image/jpeg' };
      }if (buf[0] === 0x89 && buf[1] === 0x50 && buf[2] === 0x4E && buf[3] === 0x47) {
        return { ext: 'png', mime: 'image/png' };
      }if (buf[0] === 0x47 && buf[1] === 0x49 && buf[2] === 0x46) {
        return { ext: 'gif', mime: 'image/gif' };
      }if (buf[8] === 0x57 && buf[9] === 0x45 && buf[10] === 0x42 && buf[11] === 0x50) {
        return { ext: 'webp', mime: 'image/webp' };
      } // needs to be before `tif` check
      if ((buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0x2A && buf[3] === 0x0 || buf[0] === 0x4D && buf[1] === 0x4D && buf[2] === 0x0 && buf[3] === 0x2A) && buf[8] === 0x43 && buf[9] === 0x52) {
        return { ext: 'cr2', mime: 'image/x-canon-cr2' };
      }if (buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0x2A && buf[3] === 0x0 || buf[0] === 0x4D && buf[1] === 0x4D && buf[2] === 0x0 && buf[3] === 0x2A) {
        return { ext: 'tif', mime: 'image/tiff' };
      }if (buf[0] === 0x42 && buf[1] === 0x4D) {
        return { ext: 'bmp', mime: 'image/bmp' };
      }if (buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0xBC) {
        return { ext: 'jxr', mime: 'image/vnd.ms-photo' };
      }if (buf[0] === 0x38 && buf[1] === 0x42 && buf[2] === 0x50 && buf[3] === 0x53) {
        return { ext: 'psd', mime: 'image/vnd.adobe.photoshop' };
      } // needs to be before `zip` check
      if (buf[0] === 0x50 && buf[1] === 0x4B && buf[2] === 0x3 && buf[3] === 0x4 && buf[30] === 0x6D && buf[31] === 0x69 && buf[32] === 0x6D && buf[33] === 0x65 && buf[34] === 0x74 && buf[35] === 0x79 && buf[36] === 0x70 && buf[37] === 0x65 && buf[38] === 0x61 && buf[39] === 0x70 && buf[40] === 0x70 && buf[41] === 0x6C && buf[42] === 0x69 && buf[43] === 0x63 && buf[44] === 0x61 && buf[45] === 0x74 && buf[46] === 0x69 && buf[47] === 0x6F && buf[48] === 0x6E && buf[49] === 0x2F && buf[50] === 0x65 && buf[51] === 0x70 && buf[52] === 0x75 && buf[53] === 0x62 && buf[54] === 0x2B && buf[55] === 0x7A && buf[56] === 0x69 && buf[57] === 0x70) {
        return { ext: 'epub', mime: 'application/epub+zip' };
      } // needs to be before `zip` check
      // assumes signed .xpi from addons.mozilla.org
      if (buf[0] === 0x50 && buf[1] === 0x4B && buf[2] === 0x3 && buf[3] === 0x4 && buf[30] === 0x4D && buf[31] === 0x45 && buf[32] === 0x54 && buf[33] === 0x41 && buf[34] === 0x2D && buf[35] === 0x49 && buf[36] === 0x4E && buf[37] === 0x46 && buf[38] === 0x2F && buf[39] === 0x6D && buf[40] === 0x6F && buf[41] === 0x7A && buf[42] === 0x69 && buf[43] === 0x6C && buf[44] === 0x6C && buf[45] === 0x61 && buf[46] === 0x2E && buf[47] === 0x72 && buf[48] === 0x73 && buf[49] === 0x61) {
        return { ext: 'xpi', mime: 'application/x-xpinstall' };
      }if (buf[0] === 0x50 && buf[1] === 0x4B && (buf[2] === 0x3 || buf[2] === 0x5 || buf[2] === 0x7) && (buf[3] === 0x4 || buf[3] === 0x6 || buf[3] === 0x8)) {
        return { ext: 'zip', mime: 'application/zip' };
      }if (buf[257] === 0x75 && buf[258] === 0x73 && buf[259] === 0x74 && buf[260] === 0x61 && buf[261] === 0x72) {
        return { ext: 'tar', mime: 'application/x-tar' };
      }if (buf[0] === 0x52 && buf[1] === 0x61 && buf[2] === 0x72 && buf[3] === 0x21 && buf[4] === 0x1A && buf[5] === 0x7 && (buf[6] === 0x0 || buf[6] === 0x1)) {
        return { ext: 'rar', mime: 'application/x-rar-compressed' };
      }if (buf[0] === 0x1F && buf[1] === 0x8B && buf[2] === 0x8) {
        return { ext: 'gz', mime: 'application/gzip' };
      }if (buf[0] === 0x42 && buf[1] === 0x5A && buf[2] === 0x68) {
        return { ext: 'bz2', mime: 'application/x-bzip2' };
      }if (buf[0] === 0x37 && buf[1] === 0x7A && buf[2] === 0xBC && buf[3] === 0xAF && buf[4] === 0x27 && buf[5] === 0x1C) {
        return { ext: '7z', mime: 'application/x-7z-compressed' };
      }if (buf[0] === 0x78 && buf[1] === 0x01) {
        return { ext: 'dmg', mime: 'application/x-apple-diskimage' };
      }if (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && (buf[3] === 0x18 || buf[3] === 0x20) && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 || buf[0] === 0x33 && buf[1] === 0x67 && buf[2] === 0x70 && buf[3] === 0x35 || buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x6D && buf[9] === 0x70 && buf[10] === 0x34 && buf[11] === 0x32 && buf[16] === 0x6D && buf[17] === 0x70 && buf[18] === 0x34 && buf[19] === 0x31 && buf[20] === 0x6D && buf[21] === 0x70 && buf[22] === 0x34 && buf[23] === 0x32 && buf[24] === 0x69 && buf[25] === 0x73 && buf[26] === 0x6F && buf[27] === 0x6D || buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x69 && buf[9] === 0x73 && buf[10] === 0x6F && buf[11] === 0x6D || buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1c && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x6D && buf[9] === 0x70 && buf[10] === 0x34 && buf[11] === 0x32 && buf[12] === 0x0 && buf[13] === 0x0 && buf[14] === 0x0 && buf[15] === 0x0) {
        return { ext: 'mp4', mime: 'video/mp4' };
      }if (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x4D && buf[9] === 0x34 && buf[10] === 0x56) {
        return { ext: 'm4v', mime: 'video/x-m4v' };
      }if (buf[0] === 0x4D && buf[1] === 0x54 && buf[2] === 0x68 && buf[3] === 0x64) {
        return { ext: 'mid', mime: 'audio/midi' };
      } // needs to be before the `webm` check
      if (buf[31] === 0x6D && buf[32] === 0x61 && buf[33] === 0x74 && buf[34] === 0x72 && buf[35] === 0x6f && buf[36] === 0x73 && buf[37] === 0x6B && buf[38] === 0x61) {
        return { ext: 'mkv', mime: 'video/x-matroska' };
      }if (buf[0] === 0x1A && buf[1] === 0x45 && buf[2] === 0xDF && buf[3] === 0xA3) {
        return { ext: 'webm', mime: 'video/webm' };
      }if (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x14 && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70) {
        return { ext: 'mov', mime: 'video/quicktime' };
      }if (buf[0] === 0x52 && buf[1] === 0x49 && buf[2] === 0x46 && buf[3] === 0x46 && buf[8] === 0x41 && buf[9] === 0x56 && buf[10] === 0x49) {
        return { ext: 'avi', mime: 'video/x-msvideo' };
      }if (buf[0] === 0x30 && buf[1] === 0x26 && buf[2] === 0xB2 && buf[3] === 0x75 && buf[4] === 0x8E && buf[5] === 0x66 && buf[6] === 0xCF && buf[7] === 0x11 && buf[8] === 0xA6 && buf[9] === 0xD9) {
        return { ext: 'wmv', mime: 'video/x-ms-wmv' };
      }if (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x1 && buf[3].toString(16)[0] === 'b') {
        return { ext: 'mpg', mime: 'video/mpeg' };
      }if (buf[0] === 0x49 && buf[1] === 0x44 && buf[2] === 0x33 || buf[0] === 0xFF && buf[1] === 0xfb) {
        return { ext: 'mp3', mime: 'audio/mpeg' };
      }if (buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x4D && buf[9] === 0x34 && buf[10] === 0x41 || buf[0] === 0x4D && buf[1] === 0x34 && buf[2] === 0x41 && buf[3] === 0x20) {
        return { ext: 'm4a', mime: 'audio/m4a' };
      } // needs to be before `ogg` check
      if (buf[28] === 0x4F && buf[29] === 0x70 && buf[30] === 0x75 && buf[31] === 0x73 && buf[32] === 0x48 && buf[33] === 0x65 && buf[34] === 0x61 && buf[35] === 0x64) {
        return { ext: 'opus', mime: 'audio/opus' };
      }if (buf[0] === 0x4F && buf[1] === 0x67 && buf[2] === 0x67 && buf[3] === 0x53) {
        return { ext: 'ogg', mime: 'audio/ogg' };
      }if (buf[0] === 0x66 && buf[1] === 0x4C && buf[2] === 0x61 && buf[3] === 0x43) {
        return { ext: 'flac', mime: 'audio/x-flac' };
      }if (buf[0] === 0x52 && buf[1] === 0x49 && buf[2] === 0x46 && buf[3] === 0x46 && buf[8] === 0x57 && buf[9] === 0x41 && buf[10] === 0x56 && buf[11] === 0x45) {
        return { ext: 'wav', mime: 'audio/x-wav' };
      }if (buf[0] === 0x23 && buf[1] === 0x21 && buf[2] === 0x41 && buf[3] === 0x4D && buf[4] === 0x52 && buf[5] === 0x0A) {
        return { ext: 'amr', mime: 'audio/amr' };
      }if (buf[0] === 0x25 && buf[1] === 0x50 && buf[2] === 0x44 && buf[3] === 0x46) {
        return { ext: 'pdf', mime: 'application/pdf' };
      }if (buf[0] === 0x4D && buf[1] === 0x5A) {
        return { ext: 'exe', mime: 'application/x-msdownload' };
      }if ((buf[0] === 0x43 || buf[0] === 0x46) && buf[1] === 0x57 && buf[2] === 0x53) {
        return { ext: 'swf', mime: 'application/x-shockwave-flash' };
      }if (buf[0] === 0x7B && buf[1] === 0x5C && buf[2] === 0x72 && buf[3] === 0x74 && buf[4] === 0x66) {
        return { ext: 'rtf', mime: 'application/rtf' };
      }if (buf[0] === 0x77 && buf[1] === 0x4F && buf[2] === 0x46 && buf[3] === 0x46 && (buf[4] === 0x00 && buf[5] === 0x01 && buf[6] === 0x00 && buf[7] === 0x00 || buf[4] === 0x4F && buf[5] === 0x54 && buf[6] === 0x54 && buf[7] === 0x4F)) {
        return { ext: 'woff', mime: 'application/font-woff' };
      }if (buf[0] === 0x77 && buf[1] === 0x4F && buf[2] === 0x46 && buf[3] === 0x32 && (buf[4] === 0x00 && buf[5] === 0x01 && buf[6] === 0x00 && buf[7] === 0x00 || buf[4] === 0x4F && buf[5] === 0x54 && buf[6] === 0x54 && buf[7] === 0x4F)) {
        return { ext: 'woff2', mime: 'application/font-woff' };
      }if (buf[34] === 0x4C && buf[35] === 0x50 && (buf[8] === 0x00 && buf[9] === 0x00 && buf[10] === 0x01 || buf[8] === 0x01 && buf[9] === 0x00 && buf[10] === 0x02 || buf[8] === 0x02 && buf[9] === 0x00 && buf[10] === 0x02)) {
        return { ext: 'eot', mime: 'application/octet-stream' };
      }if (buf[0] === 0x00 && buf[1] === 0x01 && buf[2] === 0x00 && buf[3] === 0x00 && buf[4] === 0x00) {
        return { ext: 'ttf', mime: 'application/font-sfnt' };
      }if (buf[0] === 0x4F && buf[1] === 0x54 && buf[2] === 0x54 && buf[3] === 0x4F && buf[4] === 0x00) {
        return { ext: 'otf', mime: 'application/font-sfnt' };
      }if (buf[0] === 0x00 && buf[1] === 0x00 && buf[2] === 0x01 && buf[3] === 0x00) {
        return { ext: 'ico', mime: 'image/x-icon' };
      }if (buf[0] === 0x46 && buf[1] === 0x4C && buf[2] === 0x56 && buf[3] === 0x01) {
        return { ext: 'flv', mime: 'video/x-flv' };
      }if (buf[0] === 0x25 && buf[1] === 0x21) {
        return { ext: 'ps', mime: 'application/postscript' };
      }if (buf[0] === 0xFD && buf[1] === 0x37 && buf[2] === 0x7A && buf[3] === 0x58 && buf[4] === 0x5A && buf[5] === 0x00) {
        return { ext: 'xz', mime: 'application/x-xz' };
      }if (buf[0] === 0x53 && buf[1] === 0x51 && buf[2] === 0x4C && buf[3] === 0x69) {
        return { ext: 'sqlite', mime: 'application/x-sqlite3' };
      }if (buf[0] === 0x4E && buf[1] === 0x45 && buf[2] === 0x53 && buf[3] === 0x1A) {
        return { ext: 'nes', mime: 'application/x-nintendo-nes-rom' };
      }if (buf[0] === 0x43 && buf[1] === 0x72 && buf[2] === 0x32 && buf[3] === 0x34) {
        return { ext: 'crx', mime: 'application/x-google-chrome-extension' };
      }if (buf[0] === 0x4D && buf[1] === 0x53 && buf[2] === 0x43 && buf[3] === 0x46 || buf[0] === 0x49 && buf[1] === 0x53 && buf[2] === 0x63 && buf[3] === 0x28) {
        return { ext: 'cab', mime: 'application/vnd.ms-cab-compressed' };
      } // needs to be before `ar` check
      if (buf[0] === 0x21 && buf[1] === 0x3C && buf[2] === 0x61 && buf[3] === 0x72 && buf[4] === 0x63 && buf[5] === 0x68 && buf[6] === 0x3E && buf[7] === 0x0A && buf[8] === 0x64 && buf[9] === 0x65 && buf[10] === 0x62 && buf[11] === 0x69 && buf[12] === 0x61 && buf[13] === 0x6E && buf[14] === 0x2D && buf[15] === 0x62 && buf[16] === 0x69 && buf[17] === 0x6E && buf[18] === 0x61 && buf[19] === 0x72 && buf[20] === 0x79) {
        return { ext: 'deb', mime: 'application/x-deb' };
      }if (buf[0] === 0x21 && buf[1] === 0x3C && buf[2] === 0x61 && buf[3] === 0x72 && buf[4] === 0x63 && buf[5] === 0x68 && buf[6] === 0x3E) {
        return { ext: 'ar', mime: 'application/x-unix-archive' };
      }if (buf[0] === 0xED && buf[1] === 0xAB && buf[2] === 0xEE && buf[3] === 0xDB) {
        return { ext: 'rpm', mime: 'application/x-rpm' };
      }if (buf[0] === 0x1F && buf[1] === 0xA0 || buf[0] === 0x1F && buf[1] === 0x9D) {
        return { ext: 'Z', mime: 'application/x-compress' };
      }if (buf[0] === 0x4C && buf[1] === 0x5A && buf[2] === 0x49 && buf[3] === 0x50) {
        return { ext: 'lz', mime: 'application/x-lzip' };
      }if (buf[0] === 0xD0 && buf[1] === 0xCF && buf[2] === 0x11 && buf[3] === 0xE0 && buf[4] === 0xA1 && buf[5] === 0xB1 && buf[6] === 0x1A && buf[7] === 0xE1) {
        return { ext: 'msi', mime: 'application/x-msi' };
      }return null;
    };
  }, {}], 28: [function (require, module, exports) {
    var isFunction = require('is-function');module.exports = forEach;var toString = Object.prototype.toString;var hasOwnProperty = Object.prototype.hasOwnProperty;function forEach(list, iterator, context) {
      if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function');
      }if (arguments.length < 3) {
        context = this;
      }if (toString.call(list) === '[object Array]') forEachArray(list, iterator, context);else if (typeof list === 'string') forEachString(list, iterator, context);else forEachObject(list, iterator, context);
    }function forEachArray(array, iterator, context) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          iterator.call(context, array[i], i, array);
        }
      }
    }function forEachString(string, iterator, context) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string);
      }
    }function forEachObject(object, iterator, context) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          iterator.call(context, object[k], k, object);
        }
      }
    }
  }, { "is-function": 34 }], 29: [function (require, module, exports) {
    (function (global) {
      if (typeof window !== "undefined") {
        module.exports = window;
      } else if (typeof global !== "undefined") {
        module.exports = global;
      } else if (typeof self !== "undefined") {
        module.exports = self;
      } else {
        module.exports = {};
      }
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}], 30: [function (require, module, exports) {
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;var eLen = nBytes * 8 - mLen - 1;var eMax = (1 << eLen) - 1;var eBias = eMax >> 1;var nBits = -7;var i = isLE ? nBytes - 1 : 0;var d = isLE ? -1 : 1;var s = buffer[offset + i];i += d;e = s & (1 << -nBits) - 1;s >>= -nBits;nBits += eLen;for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}m = e & (1 << -nBits) - 1;e >>= -nBits;nBits += mLen;for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);e = e - eBias;
      }return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;var eLen = nBytes * 8 - mLen - 1;var eMax = (1 << eLen) - 1;var eBias = eMax >> 1;var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;var i = isLE ? 0 : nBytes - 1;var d = isLE ? 1 : -1;var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;value = Math.abs(value);if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);if (value * (c = Math.pow(2, -e)) < 1) {
          e--;c *= 2;
        }if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }if (value * c >= 2) {
          e++;c /= 2;
        }if (e + eBias >= eMax) {
          m = 0;e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);e = 0;
        }
      }for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}e = e << mLen | m;eLen += mLen;for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}buffer[offset + i - d] |= s * 128;
    };
  }, {}], 31: [function (require, module, exports) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;ctor.prototype = Object.create(superCtor.prototype, { constructor: { value: ctor, enumerable: false, writable: true, configurable: true } });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;var TempCtor = function TempCtor() {};TempCtor.prototype = superCtor.prototype;ctor.prototype = new TempCtor();ctor.prototype.constructor = ctor;
      };
    }
  }, {}], 32: [function (require, module, exports) {
    'use strict';
    var v4 = '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){3}';var v6 = '(?:(?:[0-9a-fA-F:]){1,4}(?:(?::(?:[0-9a-fA-F]){1,4}|:)){2,7})+';var ip = module.exports = function (opts) {
      opts = opts || {};return opts.exact ? new RegExp('(?:^' + v4 + '$)|(?:^' + v6 + '$)') : new RegExp('(?:' + v4 + ')|(?:' + v6 + ')', 'g');
    };ip.v4 = function (opts) {
      opts = opts || {};return opts.exact ? new RegExp('^' + v4 + '$') : new RegExp(v4, 'g');
    };ip.v6 = function (opts) {
      opts = opts || {};return opts.exact ? new RegExp('^' + v6 + '$') : new RegExp(v6, 'g');
    };
  }, {}], 33: [function (require, module, exports) {
    /*!
    * Determine if an object is a Buffer
    *
    * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
    * @license  MIT
    */ // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
    } // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
    }
  }, {}], 34: [function (require, module, exports) {
    module.exports = isFunction;var toString = Object.prototype.toString;function isFunction(fn) {
      var string = toString.call(fn);return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && ( // IE8 and below
      fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
    };
  }, {}], 35: [function (require, module, exports) {
    var toString = {}.toString;module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
  }, {}], 36: [function (require, module, exports) {
    var encode = require('./lib/encoder'),
        decode = require('./lib/decoder');module.exports = { encode: encode, decode: decode };
  }, { "./lib/decoder": 37, "./lib/encoder": 38 }], 37: [function (require, module, exports) {
    (function (Buffer) {
      /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
      /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */ /*
                                                                          Copyright 2011 notmasteryet
                                                                          Licensed under the Apache License, Version 2.0 (the "License");
                                                                          you may not use this file except in compliance with the License.
                                                                          You may obtain a copy of the License at
                                                                          http://www.apache.org/licenses/LICENSE-2.0
                                                                          Unless required by applicable law or agreed to in writing, software
                                                                          distributed under the License is distributed on an "AS IS" BASIS,
                                                                          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                          See the License for the specific language governing permissions and
                                                                          limitations under the License.
                                                                          */ // - The JPEG specification can be found in the ITU CCITT Recommendation T.81
      //   (www.w3.org/Graphics/JPEG/itu-t81.pdf)
      // - The JFIF specification can be found in the JPEG File Interchange Format
      //   (www.w3.org/Graphics/JPEG/jfif3.pdf)
      // - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters
      //   in PostScript Level 2, Technical Note #5116
      //   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)
      var JpegImage = function jpegImage() {
        "use strict";
        var dctZigZag = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);var dctCos1 = 4017; // cos(pi/16)
        var dctSin1 = 799; // sin(pi/16)
        var dctCos3 = 3406; // cos(3*pi/16)
        var dctSin3 = 2276; // sin(3*pi/16)
        var dctCos6 = 1567; // cos(6*pi/16)
        var dctSin6 = 3784; // sin(6*pi/16)
        var dctSqrt2 = 5793; // sqrt(2)
        var dctSqrt1d2 = 2896; // sqrt(2) / 2
        function constructor() {}function buildHuffmanTable(codeLengths, values) {
          var k = 0,
              code = [],
              i,
              j,
              length = 16;while (length > 0 && !codeLengths[length - 1]) {
            length--;
          }code.push({ children: [], index: 0 });var p = code[0],
              q;for (i = 0; i < length; i++) {
            for (j = 0; j < codeLengths[i]; j++) {
              p = code.pop();p.children[p.index] = values[k];while (p.index > 0) {
                p = code.pop();
              }p.index++;code.push(p);while (code.length <= i) {
                code.push(q = { children: [], index: 0 });p.children[p.index] = q.children;p = q;
              }k++;
            }if (i + 1 < length) {
              // p here points to last code
              code.push(q = { children: [], index: 0 });p.children[p.index] = q.children;p = q;
            }
          }return code[0].children;
        }function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
          var precision = frame.precision;var samplesPerLine = frame.samplesPerLine;var scanLines = frame.scanLines;var mcusPerLine = frame.mcusPerLine;var progressive = frame.progressive;var maxH = frame.maxH,
              maxV = frame.maxV;var startOffset = offset,
              bitsData = 0,
              bitsCount = 0;function readBit() {
            if (bitsCount > 0) {
              bitsCount--;return bitsData >> bitsCount & 1;
            }bitsData = data[offset++];if (bitsData == 0xFF) {
              var nextByte = data[offset++];if (nextByte) {
                throw "unexpected marker: " + (bitsData << 8 | nextByte).toString(16);
              } // unstuff 0
            }bitsCount = 7;return bitsData >>> 7;
          }function decodeHuffman(tree) {
            var node = tree,
                bit;while ((bit = readBit()) !== null) {
              node = node[bit];if (typeof node === 'number') return node;if ((typeof node === "undefined" ? "undefined" : _typeof(node)) !== 'object') throw "invalid huffman sequence";
            }return null;
          }function receive(length) {
            var n = 0;while (length > 0) {
              var bit = readBit();if (bit === null) return;n = n << 1 | bit;length--;
            }return n;
          }function receiveAndExtend(length) {
            var n = receive(length);if (n >= 1 << length - 1) return n;return n + (-1 << length) + 1;
          }function decodeBaseline(component, zz) {
            var t = decodeHuffman(component.huffmanTableDC);var diff = t === 0 ? 0 : receiveAndExtend(t);zz[0] = component.pred += diff;var k = 1;while (k < 64) {
              var rs = decodeHuffman(component.huffmanTableAC);var s = rs & 15,
                  r = rs >> 4;if (s === 0) {
                if (r < 15) break;k += 16;continue;
              }k += r;var z = dctZigZag[k];zz[z] = receiveAndExtend(s);k++;
            }
          }function decodeDCFirst(component, zz) {
            var t = decodeHuffman(component.huffmanTableDC);var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;zz[0] = component.pred += diff;
          }function decodeDCSuccessive(component, zz) {
            zz[0] |= readBit() << successive;
          }var eobrun = 0;function decodeACFirst(component, zz) {
            if (eobrun > 0) {
              eobrun--;return;
            }var k = spectralStart,
                e = spectralEnd;while (k <= e) {
              var rs = decodeHuffman(component.huffmanTableAC);var s = rs & 15,
                  r = rs >> 4;if (s === 0) {
                if (r < 15) {
                  eobrun = receive(r) + (1 << r) - 1;break;
                }k += 16;continue;
              }k += r;var z = dctZigZag[k];zz[z] = receiveAndExtend(s) * (1 << successive);k++;
            }
          }var successiveACState = 0,
              successiveACNextValue;function decodeACSuccessive(component, zz) {
            var k = spectralStart,
                e = spectralEnd,
                r = 0;while (k <= e) {
              var z = dctZigZag[k];switch (successiveACState) {case 0:
                  // initial state
                  var rs = decodeHuffman(component.huffmanTableAC);var s = rs & 15,
                      r = rs >> 4;if (s === 0) {
                    if (r < 15) {
                      eobrun = receive(r) + (1 << r);successiveACState = 4;
                    } else {
                      r = 16;successiveACState = 1;
                    }
                  } else {
                    if (s !== 1) throw "invalid ACn encoding";successiveACNextValue = receiveAndExtend(s);successiveACState = r ? 2 : 3;
                  }continue;case 1: // skipping r zero items
                case 2:
                  if (zz[z]) zz[z] += readBit() << successive;else {
                    r--;if (r === 0) successiveACState = successiveACState == 2 ? 3 : 0;
                  }break;case 3:
                  // set value for a zero item
                  if (zz[z]) zz[z] += readBit() << successive;else {
                    zz[z] = successiveACNextValue << successive;successiveACState = 0;
                  }break;case 4:
                  // eob
                  if (zz[z]) zz[z] += readBit() << successive;break;}k++;
            }if (successiveACState === 4) {
              eobrun--;if (eobrun === 0) successiveACState = 0;
            }
          }function decodeMcu(component, decode, mcu, row, col) {
            var mcuRow = mcu / mcusPerLine | 0;var mcuCol = mcu % mcusPerLine;var blockRow = mcuRow * component.v + row;var blockCol = mcuCol * component.h + col;decode(component, component.blocks[blockRow][blockCol]);
          }function decodeBlock(component, decode, mcu) {
            var blockRow = mcu / component.blocksPerLine | 0;var blockCol = mcu % component.blocksPerLine;decode(component, component.blocks[blockRow][blockCol]);
          }var componentsLength = components.length;var component, i, j, k, n;var decodeFn;if (progressive) {
            if (spectralStart === 0) decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;else decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
          } else {
            decodeFn = decodeBaseline;
          }var mcu = 0,
              marker;var mcuExpected;if (componentsLength == 1) {
            mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
          } else {
            mcuExpected = mcusPerLine * frame.mcusPerColumn;
          }if (!resetInterval) resetInterval = mcuExpected;var h, v;while (mcu < mcuExpected) {
            // reset interval stuff
            for (i = 0; i < componentsLength; i++) {
              components[i].pred = 0;
            }eobrun = 0;if (componentsLength == 1) {
              component = components[0];for (n = 0; n < resetInterval; n++) {
                decodeBlock(component, decodeFn, mcu);mcu++;
              }
            } else {
              for (n = 0; n < resetInterval; n++) {
                for (i = 0; i < componentsLength; i++) {
                  component = components[i];h = component.h;v = component.v;for (j = 0; j < v; j++) {
                    for (k = 0; k < h; k++) {
                      decodeMcu(component, decodeFn, mcu, j, k);
                    }
                  }
                }mcu++; // If we've reached our expected MCU's, stop decoding
                if (mcu === mcuExpected) break;
              }
            } // find marker
            bitsCount = 0;marker = data[offset] << 8 | data[offset + 1];if (marker < 0xFF00) {
              throw "marker was not found";
            }if (marker >= 0xFFD0 && marker <= 0xFFD7) {
              // RSTx
              offset += 2;
            } else break;
          }return offset - startOffset;
        }function buildComponentData(frame, component) {
          var lines = [];var blocksPerLine = component.blocksPerLine;var blocksPerColumn = component.blocksPerColumn;var samplesPerLine = blocksPerLine << 3;var R = new Int32Array(64),
              r = new Uint8Array(64); // A port of poppler's IDCT method which in turn is taken from:
          //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
          //   "Practical Fast 1-D DCT Algorithms with 11 Multiplications",
          //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
          //   988-991.
          function quantizeAndInverse(zz, dataOut, dataIn) {
            var qt = component.quantizationTable;var v0, v1, v2, v3, v4, v5, v6, v7, t;var p = dataIn;var i; // dequant
            for (i = 0; i < 64; i++) {
              p[i] = zz[i] * qt[i];
            } // inverse DCT on rows
            for (i = 0; i < 8; ++i) {
              var row = 8 * i; // check for all-zero AC coefficients
              if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 && p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 && p[7 + row] == 0) {
                t = dctSqrt2 * p[0 + row] + 512 >> 10;p[0 + row] = t;p[1 + row] = t;p[2 + row] = t;p[3 + row] = t;p[4 + row] = t;p[5 + row] = t;p[6 + row] = t;p[7 + row] = t;continue;
              } // stage 4
              v0 = dctSqrt2 * p[0 + row] + 128 >> 8;v1 = dctSqrt2 * p[4 + row] + 128 >> 8;v2 = p[2 + row];v3 = p[6 + row];v4 = dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128 >> 8;v7 = dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128 >> 8;v5 = p[3 + row] << 4;v6 = p[5 + row] << 4; // stage 3
              t = v0 - v1 + 1 >> 1;v0 = v0 + v1 + 1 >> 1;v1 = t;t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;v3 = t;t = v4 - v6 + 1 >> 1;v4 = v4 + v6 + 1 >> 1;v6 = t;t = v7 + v5 + 1 >> 1;v5 = v7 - v5 + 1 >> 1;v7 = t; // stage 2
              t = v0 - v3 + 1 >> 1;v0 = v0 + v3 + 1 >> 1;v3 = t;t = v1 - v2 + 1 >> 1;v1 = v1 + v2 + 1 >> 1;v2 = t;t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;v7 = t;t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;v6 = t; // stage 1
              p[0 + row] = v0 + v7;p[7 + row] = v0 - v7;p[1 + row] = v1 + v6;p[6 + row] = v1 - v6;p[2 + row] = v2 + v5;p[5 + row] = v2 - v5;p[3 + row] = v3 + v4;p[4 + row] = v3 - v4;
            } // inverse DCT on columns
            for (i = 0; i < 8; ++i) {
              var col = i; // check for all-zero AC coefficients
              if (p[1 * 8 + col] == 0 && p[2 * 8 + col] == 0 && p[3 * 8 + col] == 0 && p[4 * 8 + col] == 0 && p[5 * 8 + col] == 0 && p[6 * 8 + col] == 0 && p[7 * 8 + col] == 0) {
                t = dctSqrt2 * dataIn[i + 0] + 8192 >> 14;p[0 * 8 + col] = t;p[1 * 8 + col] = t;p[2 * 8 + col] = t;p[3 * 8 + col] = t;p[4 * 8 + col] = t;p[5 * 8 + col] = t;p[6 * 8 + col] = t;p[7 * 8 + col] = t;continue;
              } // stage 4
              v0 = dctSqrt2 * p[0 * 8 + col] + 2048 >> 12;v1 = dctSqrt2 * p[4 * 8 + col] + 2048 >> 12;v2 = p[2 * 8 + col];v3 = p[6 * 8 + col];v4 = dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048 >> 12;v7 = dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048 >> 12;v5 = p[3 * 8 + col];v6 = p[5 * 8 + col]; // stage 3
              t = v0 - v1 + 1 >> 1;v0 = v0 + v1 + 1 >> 1;v1 = t;t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;v3 = t;t = v4 - v6 + 1 >> 1;v4 = v4 + v6 + 1 >> 1;v6 = t;t = v7 + v5 + 1 >> 1;v5 = v7 - v5 + 1 >> 1;v7 = t; // stage 2
              t = v0 - v3 + 1 >> 1;v0 = v0 + v3 + 1 >> 1;v3 = t;t = v1 - v2 + 1 >> 1;v1 = v1 + v2 + 1 >> 1;v2 = t;t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;v7 = t;t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;v6 = t; // stage 1
              p[0 * 8 + col] = v0 + v7;p[7 * 8 + col] = v0 - v7;p[1 * 8 + col] = v1 + v6;p[6 * 8 + col] = v1 - v6;p[2 * 8 + col] = v2 + v5;p[5 * 8 + col] = v2 - v5;p[3 * 8 + col] = v3 + v4;p[4 * 8 + col] = v3 - v4;
            } // convert to 8-bit integers
            for (i = 0; i < 64; ++i) {
              var sample = 128 + (p[i] + 8 >> 4);dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;
            }
          }var i, j;for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
            var scanLine = blockRow << 3;for (i = 0; i < 8; i++) {
              lines.push(new Uint8Array(samplesPerLine));
            }for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
              quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);var offset = 0,
                  sample = blockCol << 3;for (j = 0; j < 8; j++) {
                var line = lines[scanLine + j];for (i = 0; i < 8; i++) {
                  line[sample + i] = r[offset++];
                }
              }
            }
          }return lines;
        }function clampTo8bit(a) {
          return a < 0 ? 0 : a > 255 ? 255 : a;
        }constructor.prototype = { load: function load(path) {
            var xhr = new XMLHttpRequest();xhr.open("GET", path, true);xhr.responseType = "arraybuffer";xhr.onload = function () {
              // TODO catch parse error
              var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);this.parse(data);if (this.onload) this.onload();
            }.bind(this);xhr.send(null);
          }, parse: function parse(data) {
            var offset = 0,
                length = data.length;function readUint16() {
              var value = data[offset] << 8 | data[offset + 1];offset += 2;return value;
            }function readDataBlock() {
              var length = readUint16();var array = data.subarray(offset, offset + length - 2);offset += array.length;return array;
            }function prepareComponents(frame) {
              var maxH = 0,
                  maxV = 0;var component, componentId;for (componentId in frame.components) {
                if (frame.components.hasOwnProperty(componentId)) {
                  component = frame.components[componentId];if (maxH < component.h) maxH = component.h;if (maxV < component.v) maxV = component.v;
                }
              }var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);for (componentId in frame.components) {
                if (frame.components.hasOwnProperty(componentId)) {
                  component = frame.components[componentId];var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / maxV);var blocksPerLineForMcu = mcusPerLine * component.h;var blocksPerColumnForMcu = mcusPerColumn * component.v;var blocks = [];for (var i = 0; i < blocksPerColumnForMcu; i++) {
                    var row = [];for (var j = 0; j < blocksPerLineForMcu; j++) {
                      row.push(new Int32Array(64));
                    }blocks.push(row);
                  }component.blocksPerLine = blocksPerLine;component.blocksPerColumn = blocksPerColumn;component.blocks = blocks;
                }
              }frame.maxH = maxH;frame.maxV = maxV;frame.mcusPerLine = mcusPerLine;frame.mcusPerColumn = mcusPerColumn;
            }var jfif = null;var adobe = null;var pixels = null;var frame, resetInterval;var quantizationTables = [],
                frames = [];var huffmanTablesAC = [],
                huffmanTablesDC = [];var fileMarker = readUint16();if (fileMarker != 0xFFD8) {
              // SOI (Start of Image)
              throw "SOI not found";
            }fileMarker = readUint16();while (fileMarker != 0xFFD9) {
              // EOI (End of image)
              var i, j, l;switch (fileMarker) {case 0xFF00:
                  break;case 0xFFE0: // APP0 (Application Specific)
                case 0xFFE1: // APP1
                case 0xFFE2: // APP2
                case 0xFFE3: // APP3
                case 0xFFE4: // APP4
                case 0xFFE5: // APP5
                case 0xFFE6: // APP6
                case 0xFFE7: // APP7
                case 0xFFE8: // APP8
                case 0xFFE9: // APP9
                case 0xFFEA: // APP10
                case 0xFFEB: // APP11
                case 0xFFEC: // APP12
                case 0xFFED: // APP13
                case 0xFFEE: // APP14
                case 0xFFEF: // APP15
                case 0xFFFE:
                  // COM (Comment)
                  var appData = readDataBlock();if (fileMarker === 0xFFE0) {
                    if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {
                      // 'JFIF\x00'
                      jfif = { version: { major: appData[5], minor: appData[6] }, densityUnits: appData[7], xDensity: appData[8] << 8 | appData[9], yDensity: appData[10] << 8 | appData[11], thumbWidth: appData[12], thumbHeight: appData[13], thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13]) };
                    }
                  } // TODO APP1 - Exif
                  if (fileMarker === 0xFFEE) {
                    if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) {
                      // 'Adobe\x00'
                      adobe = { version: appData[6], flags0: appData[7] << 8 | appData[8], flags1: appData[9] << 8 | appData[10], transformCode: appData[11] };
                    }
                  }break;case 0xFFDB:
                  // DQT (Define Quantization Tables)
                  var quantizationTablesLength = readUint16();var quantizationTablesEnd = quantizationTablesLength + offset - 2;while (offset < quantizationTablesEnd) {
                    var quantizationTableSpec = data[offset++];var tableData = new Int32Array(64);if (quantizationTableSpec >> 4 === 0) {
                      // 8 bit values
                      for (j = 0; j < 64; j++) {
                        var z = dctZigZag[j];tableData[z] = data[offset++];
                      }
                    } else if (quantizationTableSpec >> 4 === 1) {
                      //16 bit
                      for (j = 0; j < 64; j++) {
                        var z = dctZigZag[j];tableData[z] = readUint16();
                      }
                    } else throw "DQT: invalid table spec";quantizationTables[quantizationTableSpec & 15] = tableData;
                  }break;case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)
                case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)
                case 0xFFC2:
                  // SOF2 (Start of Frame, Progressive DCT)
                  readUint16(); // skip data length
                  frame = {};frame.extended = fileMarker === 0xFFC1;frame.progressive = fileMarker === 0xFFC2;frame.precision = data[offset++];frame.scanLines = readUint16();frame.samplesPerLine = readUint16();frame.components = {};frame.componentsOrder = [];var componentsCount = data[offset++],
                      componentId;var maxH = 0,
                      maxV = 0;for (i = 0; i < componentsCount; i++) {
                    componentId = data[offset];var h = data[offset + 1] >> 4;var v = data[offset + 1] & 15;var qId = data[offset + 2];frame.componentsOrder.push(componentId);frame.components[componentId] = { h: h, v: v, quantizationIdx: qId };offset += 3;
                  }prepareComponents(frame);frames.push(frame);break;case 0xFFC4:
                  // DHT (Define Huffman Tables)
                  var huffmanLength = readUint16();for (i = 2; i < huffmanLength;) {
                    var huffmanTableSpec = data[offset++];var codeLengths = new Uint8Array(16);var codeLengthSum = 0;for (j = 0; j < 16; j++, offset++) {
                      codeLengthSum += codeLengths[j] = data[offset];
                    }var huffmanValues = new Uint8Array(codeLengthSum);for (j = 0; j < codeLengthSum; j++, offset++) {
                      huffmanValues[j] = data[offset];
                    }i += 17 + codeLengthSum;(huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
                  }break;case 0xFFDD:
                  // DRI (Define Restart Interval)
                  readUint16(); // skip data length
                  resetInterval = readUint16();break;case 0xFFDA:
                  // SOS (Start of Scan)
                  var scanLength = readUint16();var selectorsCount = data[offset++];var components = [],
                      component;for (i = 0; i < selectorsCount; i++) {
                    component = frame.components[data[offset++]];var tableSpec = data[offset++];component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];components.push(component);
                  }var spectralStart = data[offset++];var spectralEnd = data[offset++];var successiveApproximation = data[offset++];var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);offset += processed;break;default:
                  if (data[offset - 3] == 0xFF && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
                    // could be incorrect encoding -- last 0xFF byte of the previous
                    // block was eaten by the encoder
                    offset -= 3;break;
                  }throw "unknown JPEG marker " + fileMarker.toString(16);}fileMarker = readUint16();
            }if (frames.length != 1) throw "only single frame JPEGs supported"; // set each frame's components quantization table
            for (var i = 0; i < frames.length; i++) {
              var cp = frames[i].components;for (var j in cp) {
                cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];delete cp[j].quantizationIdx;
              }
            }this.width = frame.samplesPerLine;this.height = frame.scanLines;this.jfif = jfif;this.adobe = adobe;this.components = [];for (var i = 0; i < frame.componentsOrder.length; i++) {
              var component = frame.components[frame.componentsOrder[i]];this.components.push({ lines: buildComponentData(frame, component), scaleX: component.h / frame.maxH, scaleY: component.v / frame.maxV });
            }
          }, getData: function getData(width, height) {
            var scaleX = this.width / width,
                scaleY = this.height / height;var component1, component2, component3, component4;var component1Line, component2Line, component3Line, component4Line;var x, y;var offset = 0;var Y, Cb, Cr, K, C, M, Ye, R, G, B;var colorTransform;var dataLength = width * height * this.components.length;var data = new Uint8Array(dataLength);switch (this.components.length) {case 1:
                component1 = this.components[0];for (y = 0; y < height; y++) {
                  component1Line = component1.lines[0 | y * component1.scaleY * scaleY];for (x = 0; x < width; x++) {
                    Y = component1Line[0 | x * component1.scaleX * scaleX];data[offset++] = Y;
                  }
                }break;case 2:
                // PDF might compress two component data in custom colorspace
                component1 = this.components[0];component2 = this.components[1];for (y = 0; y < height; y++) {
                  component1Line = component1.lines[0 | y * component1.scaleY * scaleY];component2Line = component2.lines[0 | y * component2.scaleY * scaleY];for (x = 0; x < width; x++) {
                    Y = component1Line[0 | x * component1.scaleX * scaleX];data[offset++] = Y;Y = component2Line[0 | x * component2.scaleX * scaleX];data[offset++] = Y;
                  }
                }break;case 3:
                // The default transform for three components is true
                colorTransform = true; // The adobe transform marker overrides any previous setting
                if (this.adobe && this.adobe.transformCode) colorTransform = true;else if (typeof this.colorTransform !== 'undefined') colorTransform = !!this.colorTransform;component1 = this.components[0];component2 = this.components[1];component3 = this.components[2];for (y = 0; y < height; y++) {
                  component1Line = component1.lines[0 | y * component1.scaleY * scaleY];component2Line = component2.lines[0 | y * component2.scaleY * scaleY];component3Line = component3.lines[0 | y * component3.scaleY * scaleY];for (x = 0; x < width; x++) {
                    if (!colorTransform) {
                      R = component1Line[0 | x * component1.scaleX * scaleX];G = component2Line[0 | x * component2.scaleX * scaleX];B = component3Line[0 | x * component3.scaleX * scaleX];
                    } else {
                      Y = component1Line[0 | x * component1.scaleX * scaleX];Cb = component2Line[0 | x * component2.scaleX * scaleX];Cr = component3Line[0 | x * component3.scaleX * scaleX];R = clampTo8bit(Y + 1.402 * (Cr - 128));G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));B = clampTo8bit(Y + 1.772 * (Cb - 128));
                    }data[offset++] = R;data[offset++] = G;data[offset++] = B;
                  }
                }break;case 4:
                if (!this.adobe) throw 'Unsupported color mode (4 components)'; // The default transform for four components is false
                colorTransform = false; // The adobe transform marker overrides any previous setting
                if (this.adobe && this.adobe.transformCode) colorTransform = true;else if (typeof this.colorTransform !== 'undefined') colorTransform = !!this.colorTransform;component1 = this.components[0];component2 = this.components[1];component3 = this.components[2];component4 = this.components[3];for (y = 0; y < height; y++) {
                  component1Line = component1.lines[0 | y * component1.scaleY * scaleY];component2Line = component2.lines[0 | y * component2.scaleY * scaleY];component3Line = component3.lines[0 | y * component3.scaleY * scaleY];component4Line = component4.lines[0 | y * component4.scaleY * scaleY];for (x = 0; x < width; x++) {
                    if (!colorTransform) {
                      C = component1Line[0 | x * component1.scaleX * scaleX];M = component2Line[0 | x * component2.scaleX * scaleX];Ye = component3Line[0 | x * component3.scaleX * scaleX];K = component4Line[0 | x * component4.scaleX * scaleX];
                    } else {
                      Y = component1Line[0 | x * component1.scaleX * scaleX];Cb = component2Line[0 | x * component2.scaleX * scaleX];Cr = component3Line[0 | x * component3.scaleX * scaleX];K = component4Line[0 | x * component4.scaleX * scaleX];C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));
                    }data[offset++] = 255 - C;data[offset++] = 255 - M;data[offset++] = 255 - Ye;data[offset++] = 255 - K;
                  }
                }break;default:
                throw 'Unsupported color mode';}return data;
          }, copyToImageData: function copyToImageData(imageData) {
            var width = imageData.width,
                height = imageData.height;var imageDataArray = imageData.data;var data = this.getData(width, height);var i = 0,
                j = 0,
                x,
                y;var Y, K, C, M, R, G, B;switch (this.components.length) {case 1:
                for (y = 0; y < height; y++) {
                  for (x = 0; x < width; x++) {
                    Y = data[i++];imageDataArray[j++] = Y;imageDataArray[j++] = Y;imageDataArray[j++] = Y;imageDataArray[j++] = 255;
                  }
                }break;case 3:
                for (y = 0; y < height; y++) {
                  for (x = 0; x < width; x++) {
                    R = data[i++];G = data[i++];B = data[i++];imageDataArray[j++] = R;imageDataArray[j++] = G;imageDataArray[j++] = B;imageDataArray[j++] = 255;
                  }
                }break;case 4:
                for (y = 0; y < height; y++) {
                  for (x = 0; x < width; x++) {
                    C = data[i++];M = data[i++];Y = data[i++];K = data[i++];R = 255 - clampTo8bit(C * (1 - K / 255) + K);G = 255 - clampTo8bit(M * (1 - K / 255) + K);B = 255 - clampTo8bit(Y * (1 - K / 255) + K);imageDataArray[j++] = R;imageDataArray[j++] = G;imageDataArray[j++] = B;imageDataArray[j++] = 255;
                  }
                }break;default:
                throw 'Unsupported color mode';}
          } };return constructor;
      }();module.exports = decode;function decode(jpegData, useTArray) {
        var arr = new Uint8Array(jpegData);var decoder = new JpegImage();decoder.parse(arr);var image = { width: decoder.width, height: decoder.height, data: useTArray ? new Uint8Array(decoder.width * decoder.height * 4) : new Buffer(decoder.width * decoder.height * 4) };decoder.copyToImageData(image);return image;
      }
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14 }], 38: [function (require, module, exports) {
    (function (Buffer) {
      /*
      Copyright (c) 2008, Adobe Systems Incorporated
      All rights reserved.
      Redistribution and use in source and binary forms, with or without 
      modification, are permitted provided that the following conditions are
      met:
      * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
      * Neither the name of Adobe Systems Incorporated nor the names of its 
      contributors may be used to endorse or promote products derived from 
      this software without specific prior written permission.
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
      IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
      THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
      PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
      CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
      PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
      LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      */ /*
         JPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009
         Basic GUI blocking jpeg encoder
         */var btoa = btoa || function (buf) {
        return new Buffer(buf).toString('base64');
      };function JPEGEncoder(quality) {
        var self = this;var fround = Math.round;var ffloor = Math.floor;var YTable = new Array(64);var UVTable = new Array(64);var fdtbl_Y = new Array(64);var fdtbl_UV = new Array(64);var YDC_HT;var UVDC_HT;var YAC_HT;var UVAC_HT;var bitcode = new Array(65535);var category = new Array(65535);var outputfDCTQuant = new Array(64);var DU = new Array(64);var byteout = [];var bytenew = 0;var bytepos = 7;var YDU = new Array(64);var UDU = new Array(64);var VDU = new Array(64);var clt = new Array(256);var RGB_YUV_TABLE = new Array(2048);var currentQuality;var ZigZag = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];var std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];var std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];var std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d];var std_ac_luminance_values = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];var std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];var std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];var std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77];var std_ac_chrominance_values = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];function initQuantTables(sf) {
          var YQT = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];for (var i = 0; i < 64; i++) {
            var t = ffloor((YQT[i] * sf + 50) / 100);if (t < 1) {
              t = 1;
            } else if (t > 255) {
              t = 255;
            }YTable[ZigZag[i]] = t;
          }var UVQT = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];for (var j = 0; j < 64; j++) {
            var u = ffloor((UVQT[j] * sf + 50) / 100);if (u < 1) {
              u = 1;
            } else if (u > 255) {
              u = 255;
            }UVTable[ZigZag[j]] = u;
          }var aasf = [1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.541196100, 0.275899379];var k = 0;for (var row = 0; row < 8; row++) {
            for (var col = 0; col < 8; col++) {
              fdtbl_Y[k] = 1.0 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);fdtbl_UV[k] = 1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);k++;
            }
          }
        }function computeHuffmanTbl(nrcodes, std_table) {
          var codevalue = 0;var pos_in_table = 0;var HT = new Array();for (var k = 1; k <= 16; k++) {
            for (var j = 1; j <= nrcodes[k]; j++) {
              HT[std_table[pos_in_table]] = [];HT[std_table[pos_in_table]][0] = codevalue;HT[std_table[pos_in_table]][1] = k;pos_in_table++;codevalue++;
            }codevalue *= 2;
          }return HT;
        }function initHuffmanTbl() {
          YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);
        }function initCategoryNumber() {
          var nrlower = 1;var nrupper = 2;for (var cat = 1; cat <= 15; cat++) {
            //Positive numbers
            for (var nr = nrlower; nr < nrupper; nr++) {
              category[32767 + nr] = cat;bitcode[32767 + nr] = [];bitcode[32767 + nr][1] = cat;bitcode[32767 + nr][0] = nr;
            } //Negative numbers
            for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {
              category[32767 + nrneg] = cat;bitcode[32767 + nrneg] = [];bitcode[32767 + nrneg][1] = cat;bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;
            }nrlower <<= 1;nrupper <<= 1;
          }
        }function initRGBYUVTable() {
          for (var i = 0; i < 256; i++) {
            RGB_YUV_TABLE[i] = 19595 * i;RGB_YUV_TABLE[i + 256 >> 0] = 38470 * i;RGB_YUV_TABLE[i + 512 >> 0] = 7471 * i + 0x8000;RGB_YUV_TABLE[i + 768 >> 0] = -11059 * i;RGB_YUV_TABLE[i + 1024 >> 0] = -21709 * i;RGB_YUV_TABLE[i + 1280 >> 0] = 32768 * i + 0x807FFF;RGB_YUV_TABLE[i + 1536 >> 0] = -27439 * i;RGB_YUV_TABLE[i + 1792 >> 0] = -5329 * i;
          }
        } // IO functions
        function writeBits(bs) {
          var value = bs[0];var posval = bs[1] - 1;while (posval >= 0) {
            if (value & 1 << posval) {
              bytenew |= 1 << bytepos;
            }posval--;bytepos--;if (bytepos < 0) {
              if (bytenew == 0xFF) {
                writeByte(0xFF);writeByte(0);
              } else {
                writeByte(bytenew);
              }bytepos = 7;bytenew = 0;
            }
          }
        }function writeByte(value) {
          //byteout.push(clt[value]); // write char directly instead of converting later
          byteout.push(value);
        }function writeWord(value) {
          writeByte(value >> 8 & 0xFF);writeByte(value & 0xFF);
        } // DCT & quantization core
        function fDCTQuant(data, fdtbl) {
          var d0, d1, d2, d3, d4, d5, d6, d7; /* Pass 1: process rows. */var dataOff = 0;var i;var I8 = 8;var I64 = 64;for (i = 0; i < I8; ++i) {
            d0 = data[dataOff];d1 = data[dataOff + 1];d2 = data[dataOff + 2];d3 = data[dataOff + 3];d4 = data[dataOff + 4];d5 = data[dataOff + 5];d6 = data[dataOff + 6];d7 = data[dataOff + 7];var tmp0 = d0 + d7;var tmp7 = d0 - d7;var tmp1 = d1 + d6;var tmp6 = d1 - d6;var tmp2 = d2 + d5;var tmp5 = d2 - d5;var tmp3 = d3 + d4;var tmp4 = d3 - d4; /* Even part */var tmp10 = tmp0 + tmp3; /* phase 2 */var tmp13 = tmp0 - tmp3;var tmp11 = tmp1 + tmp2;var tmp12 = tmp1 - tmp2;data[dataOff] = tmp10 + tmp11; /* phase 3 */data[dataOff + 4] = tmp10 - tmp11;var z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */data[dataOff + 2] = tmp13 + z1; /* phase 5 */data[dataOff + 6] = tmp13 - z1; /* Odd part */tmp10 = tmp4 + tmp5; /* phase 2 */tmp11 = tmp5 + tmp6;tmp12 = tmp6 + tmp7; /* The rotator is modified from fig 4-8 to avoid extra negations. */var z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */var z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */var z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */var z3 = tmp11 * 0.707106781; /* c4 */var z11 = tmp7 + z3; /* phase 5 */var z13 = tmp7 - z3;data[dataOff + 5] = z13 + z2; /* phase 6 */data[dataOff + 3] = z13 - z2;data[dataOff + 1] = z11 + z4;data[dataOff + 7] = z11 - z4;dataOff += 8; /* advance pointer to next row */
          } /* Pass 2: process columns. */dataOff = 0;for (i = 0; i < I8; ++i) {
            d0 = data[dataOff];d1 = data[dataOff + 8];d2 = data[dataOff + 16];d3 = data[dataOff + 24];d4 = data[dataOff + 32];d5 = data[dataOff + 40];d6 = data[dataOff + 48];d7 = data[dataOff + 56];var tmp0p2 = d0 + d7;var tmp7p2 = d0 - d7;var tmp1p2 = d1 + d6;var tmp6p2 = d1 - d6;var tmp2p2 = d2 + d5;var tmp5p2 = d2 - d5;var tmp3p2 = d3 + d4;var tmp4p2 = d3 - d4; /* Even part */var tmp10p2 = tmp0p2 + tmp3p2; /* phase 2 */var tmp13p2 = tmp0p2 - tmp3p2;var tmp11p2 = tmp1p2 + tmp2p2;var tmp12p2 = tmp1p2 - tmp2p2;data[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */data[dataOff + 32] = tmp10p2 - tmp11p2;var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */data[dataOff + 16] = tmp13p2 + z1p2; /* phase 5 */data[dataOff + 48] = tmp13p2 - z1p2; /* Odd part */tmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */tmp11p2 = tmp5p2 + tmp6p2;tmp12p2 = tmp6p2 + tmp7p2; /* The rotator is modified from fig 4-8 to avoid extra negations. */var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */var z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */var z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */var z3p2 = tmp11p2 * 0.707106781; /* c4 */var z11p2 = tmp7p2 + z3p2; /* phase 5 */var z13p2 = tmp7p2 - z3p2;data[dataOff + 40] = z13p2 + z2p2; /* phase 6 */data[dataOff + 24] = z13p2 - z2p2;data[dataOff + 8] = z11p2 + z4p2;data[dataOff + 56] = z11p2 - z4p2;dataOff++; /* advance pointer to next column */
          } // Quantize/descale the coefficients
          var fDCTQuant;for (i = 0; i < I64; ++i) {
            // Apply the quantization and scaling factor & Round to nearest integer
            fDCTQuant = data[i] * fdtbl[i];outputfDCTQuant[i] = fDCTQuant > 0.0 ? fDCTQuant + 0.5 | 0 : fDCTQuant - 0.5 | 0; //outputfDCTQuant[i] = fround(fDCTQuant);
          }return outputfDCTQuant;
        }function writeAPP0() {
          writeWord(0xFFE0); // marker
          writeWord(16); // length
          writeByte(0x4A); // J
          writeByte(0x46); // F
          writeByte(0x49); // I
          writeByte(0x46); // F
          writeByte(0); // = "JFIF",'\0'
          writeByte(1); // versionhi
          writeByte(1); // versionlo
          writeByte(0); // xyunits
          writeWord(1); // xdensity
          writeWord(1); // ydensity
          writeByte(0); // thumbnwidth
          writeByte(0); // thumbnheight
        }function writeSOF0(width, height) {
          writeWord(0xFFC0); // marker
          writeWord(17); // length, truecolor YUV JPG
          writeByte(8); // precision
          writeWord(height);writeWord(width);writeByte(3); // nrofcomponents
          writeByte(1); // IdY
          writeByte(0x11); // HVY
          writeByte(0); // QTY
          writeByte(2); // IdU
          writeByte(0x11); // HVU
          writeByte(1); // QTU
          writeByte(3); // IdV
          writeByte(0x11); // HVV
          writeByte(1); // QTV
        }function writeDQT() {
          writeWord(0xFFDB); // marker
          writeWord(132); // length
          writeByte(0);for (var i = 0; i < 64; i++) {
            writeByte(YTable[i]);
          }writeByte(1);for (var j = 0; j < 64; j++) {
            writeByte(UVTable[j]);
          }
        }function writeDHT() {
          writeWord(0xFFC4); // marker
          writeWord(0x01A2); // length
          writeByte(0); // HTYDCinfo
          for (var i = 0; i < 16; i++) {
            writeByte(std_dc_luminance_nrcodes[i + 1]);
          }for (var j = 0; j <= 11; j++) {
            writeByte(std_dc_luminance_values[j]);
          }writeByte(0x10); // HTYACinfo
          for (var k = 0; k < 16; k++) {
            writeByte(std_ac_luminance_nrcodes[k + 1]);
          }for (var l = 0; l <= 161; l++) {
            writeByte(std_ac_luminance_values[l]);
          }writeByte(1); // HTUDCinfo
          for (var m = 0; m < 16; m++) {
            writeByte(std_dc_chrominance_nrcodes[m + 1]);
          }for (var n = 0; n <= 11; n++) {
            writeByte(std_dc_chrominance_values[n]);
          }writeByte(0x11); // HTUACinfo
          for (var o = 0; o < 16; o++) {
            writeByte(std_ac_chrominance_nrcodes[o + 1]);
          }for (var p = 0; p <= 161; p++) {
            writeByte(std_ac_chrominance_values[p]);
          }
        }function writeSOS() {
          writeWord(0xFFDA); // marker
          writeWord(12); // length
          writeByte(3); // nrofcomponents
          writeByte(1); // IdY
          writeByte(0); // HTY
          writeByte(2); // IdU
          writeByte(0x11); // HTU
          writeByte(3); // IdV
          writeByte(0x11); // HTV
          writeByte(0); // Ss
          writeByte(0x3f); // Se
          writeByte(0); // Bf
        }function processDU(CDU, fdtbl, DC, HTDC, HTAC) {
          var EOB = HTAC[0x00];var M16zeroes = HTAC[0xF0];var pos;var I16 = 16;var I63 = 63;var I64 = 64;var DU_DCT = fDCTQuant(CDU, fdtbl); //ZigZag reorder
          for (var j = 0; j < I64; ++j) {
            DU[ZigZag[j]] = DU_DCT[j];
          }var Diff = DU[0] - DC;DC = DU[0]; //Encode DC
          if (Diff == 0) {
            writeBits(HTDC[0]); // Diff might be 0
          } else {
            pos = 32767 + Diff;writeBits(HTDC[category[pos]]);writeBits(bitcode[pos]);
          } //Encode ACs
          var end0pos = 63; // was const... which is crazy
          for (; end0pos > 0 && DU[end0pos] == 0; end0pos--) {}; //end0pos = first element in reverse order !=0
          if (end0pos == 0) {
            writeBits(EOB);return DC;
          }var i = 1;var lng;while (i <= end0pos) {
            var startpos = i;for (; DU[i] == 0 && i <= end0pos; ++i) {}var nrzeroes = i - startpos;if (nrzeroes >= I16) {
              lng = nrzeroes >> 4;for (var nrmarker = 1; nrmarker <= lng; ++nrmarker) {
                writeBits(M16zeroes);
              }nrzeroes = nrzeroes & 0xF;
            }pos = 32767 + DU[i];writeBits(HTAC[(nrzeroes << 4) + category[pos]]);writeBits(bitcode[pos]);i++;
          }if (end0pos != I63) {
            writeBits(EOB);
          }return DC;
        }function initCharLookupTable() {
          var sfcc = String.fromCharCode;for (var i = 0; i < 256; i++) {
            ///// ACHTUNG // 255
            clt[i] = sfcc(i);
          }
        }this.encode = function (image, quality) // image data object
        {
          var time_start = new Date().getTime();if (quality) setQuality(quality); // Initialize bit writer
          byteout = new Array();bytenew = 0;bytepos = 7; // Add JPEG headers
          writeWord(0xFFD8); // SOI
          writeAPP0();writeDQT();writeSOF0(image.width, image.height);writeDHT();writeSOS(); // Encode 8x8 macroblocks
          var DCY = 0;var DCU = 0;var DCV = 0;bytenew = 0;bytepos = 7;this.encode.displayName = "_encode_";var imageData = image.data;var width = image.width;var height = image.height;var quadWidth = width * 4;var tripleWidth = width * 3;var x,
              y = 0;var r, g, b;var start, p, col, row, pos;while (y < height) {
            x = 0;while (x < quadWidth) {
              start = quadWidth * y + x;p = start;col = -1;row = 0;for (pos = 0; pos < 64; pos++) {
                row = pos >> 3; // /8
                col = (pos & 7) * 4; // %8
                p = start + row * quadWidth + col;if (y + row >= height) {
                  // padding bottom
                  p -= quadWidth * (y + 1 + row - height);
                }if (x + col >= quadWidth) {
                  // padding right	
                  p -= x + col - quadWidth + 4;
                }r = imageData[p++];g = imageData[p++];b = imageData[p++]; /* // calculate YUV values dynamically
                                                                           YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80
                                                                           UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));
                                                                           VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));
                                                                           */ // use lookup table (slightly faster)
                YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;
              }DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);x += 32;
            }y += 8;
          } ////////////////////////////////////////////////////////////////
          // Do the bit alignment of the EOI marker
          if (bytepos >= 0) {
            var fillbits = [];fillbits[1] = bytepos + 1;fillbits[0] = (1 << bytepos + 1) - 1;writeBits(fillbits);
          }writeWord(0xFFD9); //EOI
          //return new Uint8Array(byteout);
          return new Buffer(byteout);var jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));byteout = []; // benchmarking
          var duration = new Date().getTime() - time_start; //console.log('Encoding time: '+ duration + 'ms');
          //
          return jpegDataUri;
        };function setQuality(quality) {
          if (quality <= 0) {
            quality = 1;
          }if (quality > 100) {
            quality = 100;
          }if (currentQuality == quality) return; // don't recalc if unchanged
          var sf = 0;if (quality < 50) {
            sf = Math.floor(5000 / quality);
          } else {
            sf = Math.floor(200 - quality * 2);
          }initQuantTables(sf);currentQuality = quality; //console.log('Quality set to: '+quality +'%');
        }function init() {
          var time_start = new Date().getTime();if (!quality) quality = 50; // Create tables
          initCharLookupTable();initHuffmanTbl();initCategoryNumber();initRGBYUVTable();setQuality(quality);var duration = new Date().getTime() - time_start; //console.log('Initialization '+ duration + 'ms');
        }init();
      };module.exports = encode;function encode(imgData, qu) {
        if (typeof qu === 'undefined') qu = 50;var encoder = new JPEGEncoder(qu);var data = encoder.encode(imgData, qu);return { data: data, width: imgData.width, height: imgData.height };
      } // helper function to get the imageData of an existing image on the current page.
      function getImageDataFromImage(idOrElement) {
        var theImg = typeof idOrElement == 'string' ? document.getElementById(idOrElement) : idOrElement;var cvs = document.createElement('canvas');cvs.width = theImg.width;cvs.height = theImg.height;var ctx = cvs.getContext("2d");ctx.drawImage(theImg, 0, 0);return ctx.getImageData(0, 0, cvs.width, cvs.height);
      }
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14 }], 39: [function (require, module, exports) {
    (function (Buffer) {
      var xhr = require('xhr');var noop = function noop() {};var parseASCII = require('parse-bmfont-ascii');var parseXML = require('parse-bmfont-xml');var readBinary = require('parse-bmfont-binary');var isBinaryFormat = require('./lib/is-binary');var xtend = require('xtend');var xml2 = function hasXML2() {
        return window.XMLHttpRequest && "withCredentials" in new XMLHttpRequest();
      }();module.exports = function (opt, cb) {
        cb = typeof cb === 'function' ? cb : noop;if (typeof opt === 'string') opt = { uri: opt };else if (!opt) opt = {};var expectBinary = opt.binary;if (expectBinary) opt = getBinaryOpts(opt);xhr(opt, function (err, res, body) {
          if (err) return cb(err);if (!/^2/.test(res.statusCode)) return cb(new Error('http status code: ' + res.statusCode));if (!body) return cb(new Error('no body result'));var binary = false; //if the response type is an array buffer,
          //we need to convert it into a regular Buffer object
          if (isArrayBuffer(body)) {
            var array = new Uint8Array(body);body = new Buffer(array, 'binary');
          } //now check the string/Buffer response
          //and see if it has a binary BMF header
          if (isBinaryFormat(body)) {
            binary = true; //if we have a string, turn it into a Buffer
            if (typeof body === 'string') body = new Buffer(body, 'binary');
          } //we are not parsing a binary format, just ASCII/XML/etc
          if (!binary) {
            //might still be a buffer if responseType is 'arraybuffer'
            if (Buffer.isBuffer(body)) body = body.toString(opt.encoding);body = body.trim();
          }var result;try {
            var type = res.headers['content-type'];if (binary) result = readBinary(body);else if (/json/.test(type) || body.charAt(0) === '{') result = JSON.parse(body);else if (/xml/.test(type) || body.charAt(0) === '<') result = parseXML(body);else result = parseASCII(body);
          } catch (e) {
            cb(new Error('error parsing font ' + e.message));cb = noop;
          }cb(null, result);
        });
      };function isArrayBuffer(arr) {
        var str = Object.prototype.toString;return str.call(arr) === '[object ArrayBuffer]';
      }function getBinaryOpts(opt) {
        //IE10+ and other modern browsers support array buffers
        if (xml2) return xtend(opt, { responseType: 'arraybuffer' });if (typeof window.XMLHttpRequest === 'undefined') throw new Error('your browser does not support XHR loading'); //IE9 and XML1 browsers could still use an override
        var req = new window.XMLHttpRequest();req.overrideMimeType('text/plain; charset=x-user-defined');return xtend({ xhr: req }, opt);
      }
    }).call(this, require("buffer").Buffer);
  }, { "./lib/is-binary": 40, "buffer": 14, "parse-bmfont-ascii": 54, "parse-bmfont-binary": 55, "parse-bmfont-xml": 56, "xhr": 104, "xtend": 106 }], 40: [function (require, module, exports) {
    (function (Buffer) {
      var equal = require('buffer-equal');var HEADER = new Buffer([66, 77, 70, 3]);module.exports = function (buf) {
        if (typeof buf === 'string') return buf.substring(0, 3) === 'BMF';return buf.length > 4 && equal(buf.slice(0, 4), HEADER);
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14, "buffer-equal": 13 }], 41: [function (require, module, exports) {
    (function (process) {
      var path = require('path');var fs = require('fs');function Mime() {
        // Map of extension -> mime type
        this.types = Object.create(null); // Map of mime type -> extension
        this.extensions = Object.create(null);
      } /**
        * Define mimetype -> extension mappings.  Each key is a mime-type that maps
        * to an array of extensions associated with the type.  The first extension is
        * used as the default extension for the type.
        *
        * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
        *
        * @param map (Object) type definitions
        */Mime.prototype.define = function (map) {
        for (var type in map) {
          var exts = map[type];for (var i = 0; i < exts.length; i++) {
            if (undefined && this.types[exts]) {
              console.warn(this._loading.replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' + this.types[exts] + ' to ' + type);
            }this.types[exts[i]] = type;
          } // Default extension is the first one we encounter
          if (!this.extensions[type]) {
            this.extensions[type] = exts[0];
          }
        }
      }; /**
         * Load an Apache2-style ".types" file
         *
         * This may be called multiple times (it's expected).  Where files declare
         * overlapping types/extensions, the last file wins.
         *
         * @param file (String) path of file to load.
         */Mime.prototype.load = function (file) {
        this._loading = file; // Read file and split into lines
        var map = {},
            content = fs.readFileSync(file, 'ascii'),
            lines = content.split(/[\r\n]+/);lines.forEach(function (line) {
          // Clean up whitespace/comments, and split into fields
          var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);map[fields.shift()] = fields;
        });this.define(map);this._loading = null;
      }; /**
         * Lookup a mime type based on extension
         */Mime.prototype.lookup = function (path, fallback) {
        var ext = path.replace(/.*[\.\/\\]/, '').toLowerCase();return this.types[ext] || fallback || this.default_type;
      }; /**
         * Return file extension associated with a mime type
         */Mime.prototype.extension = function (mimeType) {
        var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();return this.extensions[type];
      }; // Default instance
      var mime = new Mime(); // Define built-in types
      mime.define(require('./types.json')); // Default type
      mime.default_type = mime.lookup('bin'); //
      // Additional API specific to the default instance
      //
      mime.Mime = Mime; /**
                        * Lookup a charset based on mime type.
                        */mime.charsets = { lookup: function lookup(mimeType, fallback) {
          // Assume text types are utf8
          return (/^text\//.test(mimeType) ? 'UTF-8' : fallback
          );
        } };module.exports = mime;
    }).call(this, require('_process'));
  }, { "./types.json": 42, "_process": 12, "fs": 11, "path": 59 }], 42: [function (require, module, exports) {
    module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomsvc+xml": ["atomsvc"], "application/ccxml+xml": ["ccxml"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mdp"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma"], "application/emma+xml": ["emma"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/font-tdpfr": ["pfr"], "application/font-woff": ["woff"], "application/font-woff2": ["woff2"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/java-archive": ["jar"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/prs.cww": ["cww"], "application/pskc+xml": ["pskcxml"], "application/rdf+xml": ["rdf"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/voicexml+xml": ["vxml"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["dmg"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-otf": ["otf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-ttf": ["ttf", "ttc"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["iso"], "application/x-java-jnlp-file": ["jnlp"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdownload": ["exe", "dll", "com", "bat", "msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["wmf", "wmz", "emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-nzb": ["nzb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["rar"], "application/x-research-info-systems": ["ris"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["obj"], "application/x-ustar": ["ustar"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "application/xaml+xml": ["xaml"], "application/xcap-diff+xml": ["xdf"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xml": ["xml", "xsl", "xsd"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/adpcm": ["adp"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mp4": ["mp4a", "m4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/webm": ["weba"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-wav": ["wav"], "audio/xm": ["xm"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "font/opentype": ["otf"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/ief": ["ief"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/ktx": ["ktx"], "image/png": ["png"], "image/prs.btif": ["btif"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/tiff": ["tiff", "tif"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/webp": ["webp"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["ico"], "image/x-mrsid-image": ["sid"], "image/x-pcx": ["pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/rfc822": ["eml", "mime"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.vtu": ["vtu"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["x3db", "x3dbz"], "model/x3d+vrml": ["x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee"], "text/css": ["css"], "text/csv": ["csv"], "text/hjson": ["hjson"], "text/html": ["html", "htm"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/prs.lines.tag": ["dsc"], "text/richtext": ["rtx"], "text/sgml": ["sgml", "sgm"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/vtt": ["vtt"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["markdown", "md", "mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-pascal": ["p", "pas"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/jpeg": ["jpgv"], "video/jpm": ["jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/webm": ["webm"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  }, {}], 43: [function (require, module, exports) {
    'use strict';
    var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';exports.assign = function (obj /*from1, from2, from3, ...*/) {
      var sources = Array.prototype.slice.call(arguments, 1);while (sources.length) {
        var source = sources.shift();if (!source) {
          continue;
        }if ((typeof source === "undefined" ? "undefined" : _typeof(source)) !== 'object') {
          throw new TypeError(source + 'must be non-object');
        }for (var p in source) {
          if (source.hasOwnProperty(p)) {
            obj[p] = source[p];
          }
        }
      }return obj;
    }; // reduce buffer size, avoiding mem copy
    exports.shrinkBuf = function (buf, size) {
      if (buf.length === size) {
        return buf;
      }if (buf.subarray) {
        return buf.subarray(0, size);
      }buf.length = size;return buf;
    };var fnTyped = { arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
        if (src.subarray && dest.subarray) {
          dest.set(src.subarray(src_offs, src_offs + len), dest_offs);return;
        } // Fallback to ordinary array
        for (var i = 0; i < len; i++) {
          dest[dest_offs + i] = src[src_offs + i];
        }
      }, // Join array of chunks to single array.
      flattenChunks: function flattenChunks(chunks) {
        var i, l, len, pos, chunk, result; // calculate data length
        len = 0;for (i = 0, l = chunks.length; i < l; i++) {
          len += chunks[i].length;
        } // join chunks
        result = new Uint8Array(len);pos = 0;for (i = 0, l = chunks.length; i < l; i++) {
          chunk = chunks[i];result.set(chunk, pos);pos += chunk.length;
        }return result;
      } };var fnUntyped = { arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
        for (var i = 0; i < len; i++) {
          dest[dest_offs + i] = src[src_offs + i];
        }
      }, // Join array of chunks to single array.
      flattenChunks: function flattenChunks(chunks) {
        return [].concat.apply([], chunks);
      } }; // Enable/Disable typed arrays use, for testing
    //
    exports.setTyped = function (on) {
      if (on) {
        exports.Buf8 = Uint8Array;exports.Buf16 = Uint16Array;exports.Buf32 = Int32Array;exports.assign(exports, fnTyped);
      } else {
        exports.Buf8 = Array;exports.Buf16 = Array;exports.Buf32 = Array;exports.assign(exports, fnUntyped);
      }
    };exports.setTyped(TYPED_OK);
  }, {}], 44: [function (require, module, exports) {
    'use strict'; // Note: adler32 takes 12% for level 0 and 2% for level 6.
    // It doesn't worth to make additional optimizationa as in original.
    // Small size is preferable.

    function adler32(adler, buf, len, pos) {
      var s1 = adler & 0xffff | 0,
          s2 = adler >>> 16 & 0xffff | 0,
          n = 0;while (len !== 0) {
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;len -= n;do {
          s1 = s1 + buf[pos++] | 0;s2 = s2 + s1 | 0;
        } while (--n);s1 %= 65521;s2 %= 65521;
      }return s1 | s2 << 16 | 0;
    }module.exports = adler32;
  }, {}], 45: [function (require, module, exports) {
    'use strict';
    module.exports = { /* Allowed flush values; see deflate() and inflate() below for details */Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, /* Return codes for the compression/decompression functions. Negative values
                                                                                                                                                                                                          * are errors, positive values are used for special but normal events.
                                                                                                                                                                                                          */Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, //Z_MEM_ERROR:     -4,
      Z_BUF_ERROR: -5, //Z_VERSION_ERROR: -6,
      /* compression levels */Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, /* Possible values of the data_type field (though see inflate()) */Z_BINARY: 0, Z_TEXT: 1, //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN: 2, /* The deflate compression method */Z_DEFLATED: 8 //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };
  }, {}], 46: [function (require, module, exports) {
    'use strict'; // Note: we can't get significant speed boost here.
    // So write code to minimize size - no pregenerated tables
    // and array tools dependencies.
    // Use ordinary array, since untyped makes no boost here

    function makeTable() {
      var c,
          table = [];for (var n = 0; n < 256; n++) {
        c = n;for (var k = 0; k < 8; k++) {
          c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
        }table[n] = c;
      }return table;
    } // Create table on load. Just 255 signed longs. Not a problem.
    var crcTable = makeTable();function crc32(crc, buf, len, pos) {
      var t = crcTable,
          end = pos + len;crc ^= -1;for (var i = pos; i < end; i++) {
        crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
      }return crc ^ -1; // >>> 0;
    }module.exports = crc32;
  }, {}], 47: [function (require, module, exports) {
    'use strict';
    var utils = require('../utils/common');var trees = require('./trees');var adler32 = require('./adler32');var crc32 = require('./crc32');var msg = require('./messages'); /* Public constants ==========================================================*/ /* ===========================================================================*/ /* Allowed flush values; see deflate() and inflate() below for details */var Z_NO_FLUSH = 0;var Z_PARTIAL_FLUSH = 1; //var Z_SYNC_FLUSH    = 2;
    var Z_FULL_FLUSH = 3;var Z_FINISH = 4;var Z_BLOCK = 5; //var Z_TREES         = 6;
    /* Return codes for the compression/decompression functions. Negative values
     * are errors, positive values are used for special but normal events.
     */var Z_OK = 0;var Z_STREAM_END = 1; //var Z_NEED_DICT     = 2;
    //var Z_ERRNO         = -1;
    var Z_STREAM_ERROR = -2;var Z_DATA_ERROR = -3; //var Z_MEM_ERROR     = -4;
    var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;
    /* compression levels */ //var Z_NO_COMPRESSION      = 0;
    //var Z_BEST_SPEED          = 1;
    //var Z_BEST_COMPRESSION    = 9;
    var Z_DEFAULT_COMPRESSION = -1;var Z_FILTERED = 1;var Z_HUFFMAN_ONLY = 2;var Z_RLE = 3;var Z_FIXED = 4;var Z_DEFAULT_STRATEGY = 0; /* Possible values of the data_type field (though see inflate()) */ //var Z_BINARY              = 0;
    //var Z_TEXT                = 1;
    //var Z_ASCII               = 1; // = Z_TEXT
    var Z_UNKNOWN = 2; /* The deflate compression method */var Z_DEFLATED = 8; /*============================================================================*/var MAX_MEM_LEVEL = 9; /* Maximum value for memLevel in deflateInit2 */var MAX_WBITS = 15; /* 32K LZ77 window */var DEF_MEM_LEVEL = 8;var LENGTH_CODES = 29; /* number of length codes, not counting the special END_BLOCK code */var LITERALS = 256; /* number of literal bytes 0..255 */var L_CODES = LITERALS + 1 + LENGTH_CODES; /* number of Literal or Length codes, including the END_BLOCK code */var D_CODES = 30; /* number of distance codes */var BL_CODES = 19; /* number of codes used to transfer the bit lengths */var HEAP_SIZE = 2 * L_CODES + 1; /* maximum heap size */var MAX_BITS = 15; /* All codes must not exceed MAX_BITS bits */var MIN_MATCH = 3;var MAX_MATCH = 258;var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;var PRESET_DICT = 0x20;var INIT_STATE = 42;var EXTRA_STATE = 69;var NAME_STATE = 73;var COMMENT_STATE = 91;var HCRC_STATE = 103;var BUSY_STATE = 113;var FINISH_STATE = 666;var BS_NEED_MORE = 1; /* block not completed, need more input or more output */var BS_BLOCK_DONE = 2; /* block flush performed */var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
    function err(strm, errorCode) {
      strm.msg = msg[errorCode];return errorCode;
    }function rank(f) {
      return (f << 1) - (f > 4 ? 9 : 0);
    }function zero(buf) {
      var len = buf.length;while (--len >= 0) {
        buf[len] = 0;
      }
    } /* =========================================================================
      * Flush as much pending output as possible. All deflate() output goes
      * through this function so some applications may wish to modify it
      * to avoid allocating a large strm->output buffer and copying into it.
      * (See also read_buf()).
      */function flush_pending(strm) {
      var s = strm.state; //_tr_flush_bits(s);
      var len = s.pending;if (len > strm.avail_out) {
        len = strm.avail_out;
      }if (len === 0) {
        return;
      }utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);strm.next_out += len;s.pending_out += len;strm.total_out += len;strm.avail_out -= len;s.pending -= len;if (s.pending === 0) {
        s.pending_out = 0;
      }
    }function flush_block_only(s, last) {
      trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);s.block_start = s.strstart;flush_pending(s.strm);
    }function put_byte(s, b) {
      s.pending_buf[s.pending++] = b;
    } /* =========================================================================
      * Put a short in the pending buffer. The 16-bit value is put in MSB order.
      * IN assertion: the stream state is correct and there is enough room in
      * pending_buf.
      */function putShortMSB(s, b) {
      //  put_byte(s, (Byte)(b >> 8));
      //  put_byte(s, (Byte)(b & 0xff));
      s.pending_buf[s.pending++] = b >>> 8 & 0xff;s.pending_buf[s.pending++] = b & 0xff;
    } /* ===========================================================================
      * Read a new buffer from the current input stream, update the adler32
      * and total number of bytes read.  All deflate() input goes through
      * this function so some applications may wish to modify it to avoid
      * allocating a large strm->input buffer and copying from it.
      * (See also flush_pending()).
      */function read_buf(strm, buf, start, size) {
      var len = strm.avail_in;if (len > size) {
        len = size;
      }if (len === 0) {
        return 0;
      }strm.avail_in -= len; // zmemcpy(buf, strm->next_in, len);
      utils.arraySet(buf, strm.input, strm.next_in, len, start);if (strm.state.wrap === 1) {
        strm.adler = adler32(strm.adler, buf, len, start);
      } else if (strm.state.wrap === 2) {
        strm.adler = crc32(strm.adler, buf, len, start);
      }strm.next_in += len;strm.total_in += len;return len;
    } /* ===========================================================================
      * Set match_start to the longest match starting at the given string and
      * return its length. Matches shorter or equal to prev_length are discarded,
      * in which case the result is equal to prev_length and match_start is
      * garbage.
      * IN assertions: cur_match is the head of the hash chain for the current
      *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
      * OUT assertion: the match length is not greater than s->lookahead.
      */function longest_match(s, cur_match) {
      var chain_length = s.max_chain_length; /* max hash chain length */var scan = s.strstart; /* current string */var match; /* matched string */var len; /* length of current match */var best_len = s.prev_length; /* best match length so far */var nice_match = s.nice_match; /* stop if match long enough */var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/;var _win = s.window; // shortcut
      var wmask = s.w_mask;var prev = s.prev; /* Stop when cur_match becomes <= limit. To simplify the code,
                                              * we prevent matches with the string of window index 0.
                                              */var strend = s.strstart + MAX_MATCH;var scan_end1 = _win[scan + best_len - 1];var scan_end = _win[scan + best_len]; /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
                                                                                                                                                                    * It is easy to get rid of this optimization if necessary.
                                                                                                                                                                    */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
      /* Do not waste too much time if we already have a good match: */if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      } /* Do not look for matches beyond the end of the input. This is necessary
        * to make deflate deterministic.
        */if (nice_match > s.lookahead) {
        nice_match = s.lookahead;
      } // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
      do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match; /* Skip to next match if the match length cannot increase
                           * or if the match length is less than 2.  Note that the checks below
                           * for insufficient lookahead only occur occasionally for performance
                           * reasons.  Therefore uninitialized memory will be accessed, and
                           * conditional jumps will be made that depend on those values.
                           * However the length of the match is limited to the lookahead, so
                           * the output of deflate is not affected by the uninitialized values.
                           */if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
          continue;
        } /* The check at best_len-1 can be removed because it will be made
          * again later. (This heuristic is not always a win.)
          * It is not necessary to compare scan[2] and match[2] since they
          * are always equal when the other bytes match, given that
          * the hash keys are equal and that HASH_BITS >= 8.
          */scan += 2;match++; // Assert(*scan == *match, "match[2]?");
        /* We check for insufficient lookahead only every 8th comparison;
             * the 256th check will be made at strstart+258.
             */do {/*jshint noempty:false*/} while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend); // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
        len = MAX_MATCH - (strend - scan);scan = strend - MAX_MATCH;if (len > best_len) {
          s.match_start = cur_match;best_len = len;if (len >= nice_match) {
            break;
          }scan_end1 = _win[scan + best_len - 1];scan_end = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);if (best_len <= s.lookahead) {
        return best_len;
      }return s.lookahead;
    } /* ===========================================================================
      * Fill the window when the lookahead becomes insufficient.
      * Updates strstart and lookahead.
      *
      * IN assertion: lookahead < MIN_LOOKAHEAD
      * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
      *    At least one byte has been read, or avail_in == 0; reads are
      *    performed for at least two bytes (required for the zip translate_eol
      *    option -- not supported here).
      */function fill_window(s) {
      var _w_size = s.w_size;var p, n, m, more, str; //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
      do {
        more = s.window_size - s.lookahead - s.strstart; // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}
        /* If the window is almost full and there is insufficient lookahead,
             * move the upper half to the lower one to make room in the upper half.
             */if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
          utils.arraySet(s.window, s.window, _w_size, _w_size, 0);s.match_start -= _w_size;s.strstart -= _w_size; /* we now have strstart >= MAX_DIST */s.block_start -= _w_size; /* Slide the hash table (could be avoided with 32 bit values
                                                                                                                                                                                  at the expense of memory usage). We slide even when level == 0
                                                                                                                                                                                  to keep the hash table consistent if we switch back to level > 0
                                                                                                                                                                                  later. (Using level 0 permanently is not an optimal usage of
                                                                                                                                                                                  zlib, so we don't care about this pathological case.)
                                                                                                                                                                                  */n = s.hash_size;p = n;do {
            m = s.head[--p];s.head[p] = m >= _w_size ? m - _w_size : 0;
          } while (--n);n = _w_size;p = n;do {
            m = s.prev[--p];s.prev[p] = m >= _w_size ? m - _w_size : 0; /* If n is not on any hash chain, prev[n] is garbage but
                                                                        * its value will never be used.
                                                                        */
          } while (--n);more += _w_size;
        }if (s.strm.avail_in === 0) {
          break;
        } /* If there was no sliding:
          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
          *    more == window_size - lookahead - strstart
          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
          * => more >= window_size - 2*WSIZE + 2
          * In the BIG_MEM or MMAP case (not yet supported),
          *   window_size == input_size + MIN_LOOKAHEAD  &&
          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
          * Otherwise, window_size == 2*WSIZE so more >= 2.
          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
          */ //Assert(more >= 2, "more < 2");
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);s.lookahead += n; /* Initialize the hash value now that we have some input: */if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;s.ins_h = s.window[str]; /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask; //#if MIN_MATCH != 3
          //        Call update_hash() MIN_MATCH-3 more times
          //#endif
          while (s.insert) {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;s.prev[str & s.w_mask] = s.head[s.ins_h];s.head[s.ins_h] = str;str++;s.insert--;if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        } /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
          * but this is not important since only literal bytes will be emitted.
          */
      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0); /* If the WIN_INIT bytes after the end of the current data have never been
                                                                      * written, then zero those bytes in order to avoid memory check reports of
                                                                      * the use of uninitialized (or uninitialised as Julian writes) bytes by
                                                                      * the longest match routines.  Update the high water mark for the next
                                                                      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
                                                                      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
                                                                      */ //  if (s.high_water < s.window_size) {
      //    var curr = s.strstart + s.lookahead;
      //    var init = 0;
      //
      //    if (s.high_water < curr) {
      //      /* Previous high water mark below current data -- zero WIN_INIT
      //       * bytes or up to end of window, whichever is less.
      //       */
      //      init = s.window_size - curr;
      //      if (init > WIN_INIT)
      //        init = WIN_INIT;
      //      zmemzero(s->window + curr, (unsigned)init);
      //      s->high_water = curr + init;
      //    }
      //    else if (s->high_water < (ulg)curr + WIN_INIT) {
      //      /* High water mark at or above current data, but below current data
      //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
      //       * to end of window, whichever is less.
      //       */
      //      init = (ulg)curr + WIN_INIT - s->high_water;
      //      if (init > s->window_size - s->high_water)
      //        init = s->window_size - s->high_water;
      //      zmemzero(s->window + s->high_water, (unsigned)init);
      //      s->high_water += init;
      //    }
      //  }
      //
      //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
      //    "not enough room for search");
    } /* ===========================================================================
      * Copy without compression as much as possible from the input stream, return
      * the current block state.
      * This function does not insert new strings in the dictionary since
      * uncompressible data is probably not useful. This function is used
      * only for the level=0 compression option.
      * NOTE: this function should be optimized to avoid extra copying from
      * window to pending_buf.
      */function deflate_stored(s, flush) {
      /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
      * to pending_buf_size, and each stored block has a 5 byte header:
      */var max_block_size = 0xffff;if (max_block_size > s.pending_buf_size - 5) {
        max_block_size = s.pending_buf_size - 5;
      } /* Copy as much as possible from input to output: */for (;;) {
        /* Fill the window as much as possible: */if (s.lookahead <= 1) {
          //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
          //  s->block_start >= (long)s->w_size, "slide too late");
          //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
          //        s.block_start >= s.w_size)) {
          //        throw  new Error("slide too late");
          //      }
          fill_window(s);if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }if (s.lookahead === 0) {
            break;
          } /* flush the current block */
        } //Assert(s->block_start >= 0L, "block gone");
        //    if (s.block_start < 0) throw new Error("block gone");
        s.strstart += s.lookahead;s.lookahead = 0; /* Emit a stored block if pending_buf will be full: */var max_start = s.block_start + max_block_size;if (s.strstart === 0 || s.strstart >= max_start) {
          /* strstart == 0 is possible when wraparound on 16-bit machine */s.lookahead = s.strstart - max_start;s.strstart = max_start; /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          } /***/
        } /* Flush if we may have to slide, otherwise block_start may become
          * negative and the data will be gone:
          */if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
          /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          } /***/
        }
      }s.insert = 0;if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s, true);if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        } /***/return BS_FINISH_DONE;
      }if (s.strstart > s.block_start) {
        /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        } /***/
      }return BS_NEED_MORE;
    } /* ===========================================================================
      * Compress as much as possible from the input stream, return the current
      * block state.
      * This function does not perform lazy evaluation of matches and inserts
      * new strings in the dictionary only for unmatched strings or for short
      * matches. It is used only for the fast compression options.
      */function deflate_fast(s, flush) {
      var hash_head; /* head of the hash chain */var bflush; /* set if current block must be flushed */for (;;) {
        /* Make sure that we always have enough lookahead, except
        * at the end of the input file. We need MAX_MATCH bytes
        * for the next match, plus MIN_MATCH bytes to insert the
        * string following the next match.
        */if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }if (s.lookahead === 0) {
            break; /* flush the current block */
          }
        } /* Insert the string window[strstart .. strstart+2] in the
          * dictionary, and set hash_head to the head of the hash chain:
          */hash_head = 0 /*NIL*/;if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];s.head[s.ins_h] = s.strstart; /***/
        } /* Find the longest match, discarding those <= prev_length.
          * At this point we have always match_length < MIN_MATCH
          */if (hash_head !== 0 /*NIL*/ && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
          /* To simplify the code, we prevent matches with the string
          * of window index 0 (in particular we have to avoid a match
          * of the string with itself at the start of the input file).
          */s.match_length = longest_match(s, hash_head); /* longest_match() sets match_start */
        }if (s.match_length >= MIN_MATCH) {
          // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
          /*** _tr_tally_dist(s, s.strstart - s.match_start,
                               s.match_length - MIN_MATCH, bflush); ***/bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);s.lookahead -= s.match_length; /* Insert new strings in the hash table only if the match length
                                                                                                                                                                                           * is not too large. This saves time but degrades compression.
                                                                                                                                                                                           */if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
            s.match_length--; /* string at strstart already in table */do {
              s.strstart++; /*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];s.head[s.ins_h] = s.strstart; /***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                                                                                                                                                                                                                                                                       * always MIN_MATCH bytes ahead.
                                                                                                                                                                                                                                                                       */
            } while (--s.match_length !== 0);s.strstart++;
          } else {
            s.strstart += s.match_length;s.match_length = 0;s.ins_h = s.window[s.strstart]; /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask; //#if MIN_MATCH != 3
            //                Call UPDATE_HASH() MIN_MATCH-3 more times
            //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
                     * matter since it will be recomputed at next deflate call.
                     */
          }
        } else {
          /* No match, output a literal byte */ //Tracevv((stderr,"%c", s.window[s.strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush = trees._tr_tally(s, 0, s.window[s.strstart]);s.lookahead--;s.strstart++;
        }if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          } /***/
        }
      }s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s, true);if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        } /***/return BS_FINISH_DONE;
      }if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        } /***/
      }return BS_BLOCK_DONE;
    } /* ===========================================================================
      * Same as above, but achieves better compression. We use a lazy
      * evaluation for matches: a match is finally adopted only if there is
      * no better match at the next window position.
      */function deflate_slow(s, flush) {
      var hash_head; /* head of hash chain */var bflush; /* set if current block must be flushed */var max_insert; /* Process the input block. */for (;;) {
        /* Make sure that we always have enough lookahead, except
        * at the end of the input file. We need MAX_MATCH bytes
        * for the next match, plus MIN_MATCH bytes to insert the
        * string following the next match.
        */if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }if (s.lookahead === 0) {
            break;
          } /* flush the current block */
        } /* Insert the string window[strstart .. strstart+2] in the
          * dictionary, and set hash_head to the head of the hash chain:
          */hash_head = 0 /*NIL*/;if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];s.head[s.ins_h] = s.strstart; /***/
        } /* Find the longest match, discarding those <= prev_length.
          */s.prev_length = s.match_length;s.prev_match = s.match_start;s.match_length = MIN_MATCH - 1;if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD /*MAX_DIST(s)*/) {
            /* To simplify the code, we prevent matches with the string
            * of window index 0 (in particular we have to avoid a match
            * of the string with itself at the start of the input file).
            */s.match_length = longest_match(s, hash_head); /* longest_match() sets match_start */if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/)) {
              /* If prev_match is also MIN_MATCH, match_start is garbage
              * but we will ignore the current match anyway.
              */s.match_length = MIN_MATCH - 1;
            }
          } /* If there was a match at the previous step and the current
            * match is not better, output the previous match:
            */if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH; /* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
          /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                               s.prev_length - MIN_MATCH, bflush);***/bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH); /* Insert in hash table all strings up to the end of the match.
                                                                                                                                                             * strstart-1 and strstart are already inserted. If there is not
                                                                                                                                                             * enough lookahead, the last two strings are not inserted in
                                                                                                                                                             * the hash table.
                                                                                                                                                             */s.lookahead -= s.prev_length - 1;s.prev_length -= 2;do {
            if (++s.strstart <= max_insert) {
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];s.head[s.ins_h] = s.strstart; /***/
            }
          } while (--s.prev_length !== 0);s.match_available = 0;s.match_length = MIN_MATCH - 1;s.strstart++;if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            } /***/
          }
        } else if (s.match_available) {
          /* If there was no match at the previous position, output a
          * single literal. If there was a match but the current match
          * is longer, truncate the previous match to a single literal.
          */ //Tracevv((stderr,"%c", s->window[s->strstart-1]));
          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);if (bflush) {
            /*** FLUSH_BLOCK_ONLY(s, 0) ***/flush_block_only(s, false); /***/
          }s.strstart++;s.lookahead--;if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          /* There is no previous match to compare with, wait for
          * the next step to decide.
          */s.match_available = 1;s.strstart++;s.lookahead--;
        }
      } //Assert (flush != Z_NO_FLUSH, "no flush?");
      if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);s.match_available = 0;
      }s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s, true);if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        } /***/return BS_FINISH_DONE;
      }if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        } /***/
      }return BS_BLOCK_DONE;
    } /* ===========================================================================
      * For Z_RLE, simply look for runs of bytes, generate matches only of distance
      * one.  Do not maintain a hash table.  (It will be regenerated if this run of
      * deflate switches away from Z_RLE.)
      */function deflate_rle(s, flush) {
      var bflush; /* set if current block must be flushed */var prev; /* byte at distance one to match */var scan, strend; /* scan goes up to strend for length of run */var _win = s.window;for (;;) {
        /* Make sure that we always have enough lookahead, except
        * at the end of the input file. We need MAX_MATCH bytes
        * for the longest run, plus one for the unrolled loop.
        */if (s.lookahead <= MAX_MATCH) {
          fill_window(s);if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }if (s.lookahead === 0) {
            break;
          } /* flush the current block */
        } /* See how many times the previous byte repeats */s.match_length = 0;if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;prev = _win[scan];if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;do {/*jshint noempty:false*/} while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);s.match_length = MAX_MATCH - (strend - scan);if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          } //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        } /* Emit match if have run of MIN_MATCH or longer, else emit literal */if (s.match_length >= MIN_MATCH) {
          //check_match(s, s.strstart, s.strstart - 1, s.match_length);
          /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);s.lookahead -= s.match_length;s.strstart += s.match_length;s.match_length = 0;
        } else {
          /* No match, output a literal byte */ //Tracevv((stderr,"%c", s->window[s->strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush = trees._tr_tally(s, 0, s.window[s.strstart]);s.lookahead--;s.strstart++;
        }if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          } /***/
        }
      }s.insert = 0;if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s, true);if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        } /***/return BS_FINISH_DONE;
      }if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        } /***/
      }return BS_BLOCK_DONE;
    } /* ===========================================================================
      * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
      * (It will be regenerated if this run of deflate switches away from Huffman.)
      */function deflate_huff(s, flush) {
      var bflush; /* set if current block must be flushed */for (;;) {
        /* Make sure that we have a literal to write. */if (s.lookahead === 0) {
          fill_window(s);if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }break; /* flush the current block */
          }
        } /* Output a literal byte */s.match_length = 0; //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush = trees._tr_tally(s, 0, s.window[s.strstart]);s.lookahead--;s.strstart++;if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          } /***/
        }
      }s.insert = 0;if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s, true);if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        } /***/return BS_FINISH_DONE;
      }if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s, false);if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        } /***/
      }return BS_BLOCK_DONE;
    } /* Values for max_lazy_match, good_match and max_chain_length, depending on
      * the desired pack level (0..9). The values given below have been tuned to
      * exclude worst case performance for pathological files. Better values may be
      * found for specific files.
      */function Config(good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;this.max_lazy = max_lazy;this.nice_length = nice_length;this.max_chain = max_chain;this.func = func;
    }var configuration_table;configuration_table = [/*      good lazy nice chain */new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */new Config(4, 5, 16, 8, deflate_fast), /* 2 */new Config(4, 6, 32, 32, deflate_fast), /* 3 */new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */new Config(8, 16, 32, 32, deflate_slow), /* 5 */new Config(8, 16, 128, 128, deflate_slow), /* 6 */new Config(8, 32, 128, 256, deflate_slow), /* 7 */new Config(32, 128, 258, 1024, deflate_slow), /* 8 */new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */]; /* ===========================================================================
nitialize the "longest match" routines for a new zlib stream
function lm_init(s) {
      s.window_size = 2 * s.w_size; /*** CLEAR_HASH(s); ***/zero(s.head); // Fill with NIL (= 0);
      /* Set the default configuration parameters:
         */s.max_lazy_match = configuration_table[s.level].max_lazy;s.good_match = configuration_table[s.level].good_length;s.nice_match = configuration_table[s.level].nice_length;s.max_chain_length = configuration_table[s.level].max_chain;s.strstart = 0;s.block_start = 0;s.lookahead = 0;s.insert = 0;s.match_length = s.prev_length = MIN_MATCH - 1;s.match_available = 0;s.ins_h = 0;
    }function DeflateState() {
      this.strm = null; /* pointer back to this zlib stream */this.status = 0; /* as the name implies */this.pending_buf = null; /* output still pending */this.pending_buf_size = 0; /* size of pending_buf */this.pending_out = 0; /* next pending byte to output to the stream */this.pending = 0; /* nb of bytes in the pending buffer */this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */this.gzhead = null; /* gzip header information to write */this.gzindex = 0; /* where in extra, name, or comment */this.method = Z_DEFLATED; /* can only be DEFLATED */this.last_flush = -1; /* value of flush param for previous deflate call */this.w_size = 0; /* LZ77 window size (32K by default) */this.w_bits = 0; /* log2(w_size)  (8..16) */this.w_mask = 0; /* w_size - 1 */this.window = null; /* Sliding window. Input bytes are read into the second half of the window,
and move to the first half later to keep a dictionary of at least wSize
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * bytes. With this organization, matches are limited to a distance of
wSize-MAX_MATCH bytes, but this ensures that IO is always
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * performed with a length multiple of the block size.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   */this.window_size = 0; /* Actual size of window: 2*wSize, except when the user input buffer
is directly used as sliding window.
this.prev = null; /* Link to older string with same hash index. To limit the size of this
array to 64K, this link is maintained only for the last 32K strings.
n index in this array is thus a window index modulo 32K.
this.head = null; /* Heads of the hash chains or NIL. */this.ins_h = 0; /* hash index of string to be inserted */this.hash_size = 0; /* number of elements in hash table */this.hash_bits = 0; /* log2(hash_size) */this.hash_mask = 0; /* hash_size-1 */this.hash_shift = 0; /* Number of bits by which ins_h must be shifted at each input
step. It must be such that after MIN_MATCH steps, the oldest
byte no longer takes part in the hash key, that is:
hash_shift * MIN_MATCH >= hash_bits
this.block_start = 0; /* Window position at the beginning of the current output block. Gets
negative when the window is moved backwards.
this.match_length = 0; /* length of best match */this.prev_match = 0; /* previous match */this.match_available = 0; /* set if previous match exists */this.strstart = 0; /* start of string to insert */this.match_start = 0; /* start of matching string */this.lookahead = 0; /* number of valid bytes ahead in window */this.prev_length = 0; /* Length of the best match at previous step. Matches not greater than this
are discarded. This is used in the lazy match evaluation.
this.max_chain_length = 0; /* To speed up deflation, hash chains are never searched beyond this
length.  A higher limit improves compression ratio but degrades the
speed.
this.max_lazy_match = 0; /* Attempt to find a better match only when the current match is strictly
smaller than this value. This mechanism is used only for compression
levels >= 4.
hat's alias to max_lazy_match, don't use directly
      //this.max_insert_length = 0;
      /* Insert new strings in the hash table only if the match length is not
         * greater than this length. This saves time but degrades compression.
         * max_insert_length is used only for compression levels <= 3.
         */this.level = 0; /* compression level (1..9) */this.strategy = 0; /* favor or force Huffman coding*/this.good_match = 0; /* Use a faster search when the previous match is longer than this */this.nice_match = 0; /* Stop searching when current match exceeds this */ /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
      // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
      // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
      // Use flat array of DOUBLE size, with interleaved fata,
      // because JS does not support effective
      this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);zero(this.dyn_ltree);zero(this.dyn_dtree);zero(this.bl_tree);this.l_desc = null; /* desc. for literal tree */this.d_desc = null; /* desc. for distance tree */this.bl_desc = null; /* desc. for bit length tree */ //ush bl_count[MAX_BITS+1];
      this.bl_count = new utils.Buf16(MAX_BITS + 1); /* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
      this.heap = new utils.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */zero(this.heap);this.heap_len = 0; /* number of elements in the heap */this.heap_max = 0; /* element of largest frequency */ /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
                                                                                                                                                                                                                           * The same heap array is used to build all trees.
                                                                                                                                                                                                                           */this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
      zero(this.depth); /* Depth of each subtree used as tie breaker for trees of equal frequency
                        */this.l_buf = 0; /* buffer index for literals or lengths */this.lit_bufsize = 0; /* Size of match buffer for literals/lengths.  There are 4 reasons for
                                                                                                          * limiting lit_bufsize to 64K:
                                                                                                          *   - frequencies can be kept in 16 bit counters
                                                                                                          *   - if compression is not successful for the first block, all input
                                                                                                          *     data is still in the window so we can still emit a stored block even
                                                                                                          *     when input comes from standard input.  (This can also be done for
                                                                                                          *     all blocks if lit_bufsize is not greater than 32K.)
                                                                                                          *   - if compression is not successful for a file smaller than 64K, we can
                                                                                                          *     even emit a stored file instead of a stored block (saving 5 bytes).
                                                                                                          *     This is applicable only for zip (not gzip or zlib).
                                                                                                          *   - creating new Huffman trees less frequently may not provide fast
                                                                                                          *     adaptation to changes in the input data statistics. (Take for
                                                                                                          *     example a binary file with poorly compressible code followed by
                                                                                                          *     a highly compressible string table.) Smaller buffer sizes give
                                                                                                          *     fast adaptation but have of course the overhead of transmitting
                                                                                                          *     trees more frequently.
                                                                                                          *   - I can't count above 4
                                                                                                          */this.last_lit = 0; /* running index in l_buf */this.d_buf = 0; /* Buffer index for distances. To simplify the code, d_buf and l_buf have
                                                                                                                                                                           * the same number of elements. To use different lengths, an extra flag
                                                                                                                                                                           * array would be necessary.
                                                                                                                                                                           */this.opt_len = 0; /* bit length of current block with optimal trees */this.static_len = 0; /* bit length of current block with static trees */this.matches = 0; /* number of string matches in current block */this.insert = 0; /* bytes at end of window left to insert */this.bi_buf = 0; /* Output buffer. bits are inserted starting at the bottom (least
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * significant bits).
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         */this.bi_valid = 0; /* Number of valid bits in bi_buf.  All bits above the last valid bit
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * are always zero.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              */ // Used for window memory init. We safely ignore it for JS. That makes
      // sense only for pointers and memory check tools.
      //this.high_water = 0;
      /* High water mark offset in window for initialized bytes -- bytes above
         * this are set to zero in order to avoid memory check warnings when
         * longest match routines access bytes past the input.  This is then
         * updated to the new high water mark.
         */
    }function deflateResetKeep(strm) {
      var s;if (!strm || !strm.state) {
        return err(strm, Z_STREAM_ERROR);
      }strm.total_in = strm.total_out = 0;strm.data_type = Z_UNKNOWN;s = strm.state;s.pending = 0;s.pending_out = 0;if (s.wrap < 0) {
        s.wrap = -s.wrap; /* was made negative by deflate(..., Z_FINISH); */
      }s.status = s.wrap ? INIT_STATE : BUSY_STATE;strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
      : 1; // adler32(0, Z_NULL, 0)
      s.last_flush = Z_NO_FLUSH;trees._tr_init(s);return Z_OK;
    }function deflateReset(strm) {
      var ret = deflateResetKeep(strm);if (ret === Z_OK) {
        lm_init(strm.state);
      }return ret;
    }function deflateSetHeader(strm, head) {
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }if (strm.state.wrap !== 2) {
        return Z_STREAM_ERROR;
      }strm.state.gzhead = head;return Z_OK;
    }function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
      if (!strm) {
        // === Z_NULL
        return Z_STREAM_ERROR;
      }var wrap = 1;if (level === Z_DEFAULT_COMPRESSION) {
        level = 6;
      }if (windowBits < 0) {
        /* suppress zlib wrapper */wrap = 0;windowBits = -windowBits;
      } else if (windowBits > 15) {
        wrap = 2; /* write gzip wrapper instead */windowBits -= 16;
      }if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
        return err(strm, Z_STREAM_ERROR);
      }if (windowBits === 8) {
        windowBits = 9;
      } /* until 256-byte window bug fixed */var s = new DeflateState();strm.state = s;s.strm = strm;s.wrap = wrap;s.gzhead = null;s.w_bits = windowBits;s.w_size = 1 << s.w_bits;s.w_mask = s.w_size - 1;s.hash_bits = memLevel + 7;s.hash_size = 1 << s.hash_bits;s.hash_mask = s.hash_size - 1;s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);s.window = new utils.Buf8(s.w_size * 2);s.head = new utils.Buf16(s.hash_size);s.prev = new utils.Buf16(s.w_size); // Don't need mem init magic for JS.
      //s.high_water = 0;  /* nothing written to s->window yet */
      s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */s.pending_buf_size = s.lit_bufsize * 4; //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
      //s->pending_buf = (uchf *) overlay;
      s.pending_buf = new utils.Buf8(s.pending_buf_size); // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
      //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
      s.d_buf = 1 * s.lit_bufsize; //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
      s.l_buf = (1 + 2) * s.lit_bufsize;s.level = level;s.strategy = strategy;s.method = method;return deflateReset(strm);
    }function deflateInit(strm, level) {
      return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
    }function deflate(strm, flush) {
      var old_flush, s;var beg, val; // for gzip header write only
      if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
      }s = strm.state;if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
        return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
      }s.strm = strm; /* just in case */old_flush = s.last_flush;s.last_flush = flush; /* Write the header */if (s.status === INIT_STATE) {
        if (s.wrap === 2) {
          // GZIP header
          strm.adler = 0; //crc32(0L, Z_NULL, 0);
          put_byte(s, 31);put_byte(s, 139);put_byte(s, 8);if (!s.gzhead) {
            // s->gzhead == Z_NULL
            put_byte(s, 0);put_byte(s, 0);put_byte(s, 0);put_byte(s, 0);put_byte(s, 0);put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);put_byte(s, OS_CODE);s.status = BUSY_STATE;
          } else {
            put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));put_byte(s, s.gzhead.time & 0xff);put_byte(s, s.gzhead.time >> 8 & 0xff);put_byte(s, s.gzhead.time >> 16 & 0xff);put_byte(s, s.gzhead.time >> 24 & 0xff);put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);put_byte(s, s.gzhead.os & 0xff);if (s.gzhead.extra && s.gzhead.extra.length) {
              put_byte(s, s.gzhead.extra.length & 0xff);put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
            }if (s.gzhead.hcrc) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
            }s.gzindex = 0;s.status = EXTRA_STATE;
          }
        } else // DEFLATE header
          {
            var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;var level_flags = -1;if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
              level_flags = 0;
            } else if (s.level < 6) {
              level_flags = 1;
            } else if (s.level === 6) {
              level_flags = 2;
            } else {
              level_flags = 3;
            }header |= level_flags << 6;if (s.strstart !== 0) {
              header |= PRESET_DICT;
            }header += 31 - header % 31;s.status = BUSY_STATE;putShortMSB(s, header); /* Save the adler32 of the preset dictionary: */if (s.strstart !== 0) {
              putShortMSB(s, strm.adler >>> 16);putShortMSB(s, strm.adler & 0xffff);
            }strm.adler = 1; // adler32(0L, Z_NULL, 0);
          }
      } //#ifdef GZIP
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra /* != Z_NULL*/) {
            beg = s.pending; /* start of bytes to update crc */while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
              if (s.pending === s.pending_buf_size) {
                if (s.gzhead.hcrc && s.pending > beg) {
                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                }flush_pending(strm);beg = s.pending;if (s.pending === s.pending_buf_size) {
                  break;
                }
              }put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);s.gzindex++;
            }if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }if (s.gzindex === s.gzhead.extra.length) {
              s.gzindex = 0;s.status = NAME_STATE;
            }
          } else {
          s.status = NAME_STATE;
        }
      }if (s.status === NAME_STATE) {
        if (s.gzhead.name /* != Z_NULL*/) {
            beg = s.pending; /* start of bytes to update crc */ //int val;
            do {
              if (s.pending === s.pending_buf_size) {
                if (s.gzhead.hcrc && s.pending > beg) {
                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                }flush_pending(strm);beg = s.pending;if (s.pending === s.pending_buf_size) {
                  val = 1;break;
                }
              } // JS specific: little magic to add zero terminator to end of string
              if (s.gzindex < s.gzhead.name.length) {
                val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
              } else {
                val = 0;
              }put_byte(s, val);
            } while (val !== 0);if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }if (val === 0) {
              s.gzindex = 0;s.status = COMMENT_STATE;
            }
          } else {
          s.status = COMMENT_STATE;
        }
      }if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment /* != Z_NULL*/) {
            beg = s.pending; /* start of bytes to update crc */ //int val;
            do {
              if (s.pending === s.pending_buf_size) {
                if (s.gzhead.hcrc && s.pending > beg) {
                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                }flush_pending(strm);beg = s.pending;if (s.pending === s.pending_buf_size) {
                  val = 1;break;
                }
              } // JS specific: little magic to add zero terminator to end of string
              if (s.gzindex < s.gzhead.comment.length) {
                val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
              } else {
                val = 0;
              }put_byte(s, val);
            } while (val !== 0);if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }if (val === 0) {
              s.status = HCRC_STATE;
            }
          } else {
          s.status = HCRC_STATE;
        }
      }if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
          }if (s.pending + 2 <= s.pending_buf_size) {
            put_byte(s, strm.adler & 0xff);put_byte(s, strm.adler >> 8 & 0xff);strm.adler = 0; //crc32(0L, Z_NULL, 0);
            s.status = BUSY_STATE;
          }
        } else {
          s.status = BUSY_STATE;
        }
      } //#endif
      /* Flush as much pending output as possible */if (s.pending !== 0) {
        flush_pending(strm);if (strm.avail_out === 0) {
          /* Since avail_out is 0, deflate will be called again with
          * more output space, but possibly with both pending and
          * avail_in equal to zero. There won't be anything to do,
          * but this is not an error situation so make sure we
          * return OK instead of BUF_ERROR at next call of deflate:
          */s.last_flush = -1;return Z_OK;
        } /* Make sure there is something to do and avoid duplicate consecutive
          * flushes. For repeated and useless calls with Z_FINISH, we keep
          * returning Z_STREAM_END instead of Z_BUF_ERROR.
          */
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
        return err(strm, Z_BUF_ERROR);
      } /* User must not provide more input after the first FINISH: */if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR);
      } /* Start a new block or continue the current one.
        */if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
        var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1; /* avoid BUF_ERROR next call, see above */
          }return Z_OK; /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
                        * of deflate should use the same flush parameter to make sure
                        * that the flush is complete. So we don't have to output an
                        * empty block here, this will be done at next call. This also
                        * ensures that for a very small output buffer, we emit at most
                        * one empty block.
                        */
        }if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            trees._tr_align(s);
          } else if (flush !== Z_BLOCK) {
            /* FULL_FLUSH or SYNC_FLUSH */trees._tr_stored_block(s, 0, 0, false); /* For a full flush, this empty block will be recognized
                                                                                  * as a special marker by inflate_sync().
                                                                                  */if (flush === Z_FULL_FLUSH) {
              /*** CLEAR_HASH(s); ***/ /* forget history */zero(s.head); // Fill with NIL (= 0);
              if (s.lookahead === 0) {
                s.strstart = 0;s.block_start = 0;s.insert = 0;
              }
            }
          }flush_pending(strm);if (strm.avail_out === 0) {
            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */return Z_OK;
          }
        }
      } //Assert(strm->avail_out > 0, "bug2");
      //if (strm.avail_out <= 0) { throw new Error("bug2");}
      if (flush !== Z_FINISH) {
        return Z_OK;
      }if (s.wrap <= 0) {
        return Z_STREAM_END;
      } /* Write the trailer */if (s.wrap === 2) {
        put_byte(s, strm.adler & 0xff);put_byte(s, strm.adler >> 8 & 0xff);put_byte(s, strm.adler >> 16 & 0xff);put_byte(s, strm.adler >> 24 & 0xff);put_byte(s, strm.total_in & 0xff);put_byte(s, strm.total_in >> 8 & 0xff);put_byte(s, strm.total_in >> 16 & 0xff);put_byte(s, strm.total_in >> 24 & 0xff);
      } else {
        putShortMSB(s, strm.adler >>> 16);putShortMSB(s, strm.adler & 0xffff);
      }flush_pending(strm); /* If avail_out is zero, the application will call deflate again
                            * to flush the rest.
                            */if (s.wrap > 0) {
        s.wrap = -s.wrap;
      } /* write the trailer only once! */return s.pending !== 0 ? Z_OK : Z_STREAM_END;
    }function deflateEnd(strm) {
      var status;if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
          return Z_STREAM_ERROR;
        }status = strm.state.status;if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
        return err(strm, Z_STREAM_ERROR);
      }strm.state = null;return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
    } /* =========================================================================
      * Initializes the compression dictionary from the given byte
      * sequence without producing any compressed output.
      */function deflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;var s;var str, n;var wrap;var avail;var next;var input;var tmpDict;if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
          return Z_STREAM_ERROR;
        }s = strm.state;wrap = s.wrap;if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
        return Z_STREAM_ERROR;
      } /* when using zlib wrappers, compute Adler-32 for provided dictionary */if (wrap === 1) {
        /* adler32(strm->adler, dictionary, dictLength); */strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
      }s.wrap = 0; /* avoid computing Adler-32 in read_buf */ /* if dictionary would fill window, just replace the history */if (dictLength >= s.w_size) {
        if (wrap === 0) {
          /* already empty otherwise */ /*** CLEAR_HASH(s); ***/zero(s.head); // Fill with NIL (= 0);
          s.strstart = 0;s.block_start = 0;s.insert = 0;
        } /* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);
        tmpDict = new utils.Buf8(s.w_size);utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);dictionary = tmpDict;dictLength = s.w_size;
      } /* insert dictionary into window and hash */avail = strm.avail_in;next = strm.next_in;input = strm.input;strm.avail_in = dictLength;strm.next_in = 0;strm.input = dictionary;fill_window(s);while (s.lookahead >= MIN_MATCH) {
        str = s.strstart;n = s.lookahead - (MIN_MATCH - 1);do {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;s.prev[str & s.w_mask] = s.head[s.ins_h];s.head[s.ins_h] = str;str++;
        } while (--n);s.strstart = str;s.lookahead = MIN_MATCH - 1;fill_window(s);
      }s.strstart += s.lookahead;s.block_start = s.strstart;s.insert = s.lookahead;s.lookahead = 0;s.match_length = s.prev_length = MIN_MATCH - 1;s.match_available = 0;strm.next_in = next;strm.input = input;strm.avail_in = avail;s.wrap = wrap;return Z_OK;
    }exports.deflateInit = deflateInit;exports.deflateInit2 = deflateInit2;exports.deflateReset = deflateReset;exports.deflateResetKeep = deflateResetKeep;exports.deflateSetHeader = deflateSetHeader;exports.deflate = deflate;exports.deflateEnd = deflateEnd;exports.deflateSetDictionary = deflateSetDictionary;exports.deflateInfo = 'pako deflate (from Nodeca project)'; /* Not implemented
                                                                                                                                                                                                                                                                                                                                                                                 exports.deflateBound = deflateBound;
                                                                                                                                                                                                                                                                                                                                                                                 exports.deflateCopy = deflateCopy;
                                                                                                                                                                                                                                                                                                                                                                                 exports.deflateParams = deflateParams;
                                                                                                                                                                                                                                                                                                                                                                                 exports.deflatePending = deflatePending;
                                                                                                                                                                                                                                                                                                                                                                                 exports.deflatePrime = deflatePrime;
                                                                                                                                                                                                                                                                                                                                                                                 exports.deflateTune = deflateTune;
                                                                                                                                                                                                                                                                                                                                                                                 */
  }, { "../utils/common": 43, "./adler32": 44, "./crc32": 46, "./messages": 51, "./trees": 52 }], 48: [function (require, module, exports) {
    'use strict'; // See state defs from inflate.js

    var BAD = 30; /* got a data error -- remain here until reset */var TYPE = 12; /* i: waiting for type bits, including last-flag bit */ /*
                                                                                                                                          Decode literal, length, and distance codes and write out the resulting
                                                                                                                                          literal and match bytes until either not enough input or output is
                                                                                                                                          available, an end-of-block is encountered, or a data error is encountered.
                                                                                                                                          When large enough input and output buffers are supplied to inflate(), for
                                                                                                                                          example, a 16K input buffer and a 64K output buffer, more than 95% of the
                                                                                                                                          inflate execution time is spent in this routine.
                                                                                                                                          Entry assumptions:
                                                                                                                                          state.mode === LEN
                                                                                                                                          strm.avail_in >= 6
                                                                                                                                          strm.avail_out >= 258
                                                                                                                                          start >= strm.avail_out
                                                                                                                                          state.bits < 8
                                                                                                                                          On return, state.mode is one of:
                                                                                                                                          LEN -- ran out of enough output space or enough available input
                                                                                                                                          TYPE -- reached end of block code, inflate() to interpret next block
                                                                                                                                          BAD -- error in block data
                                                                                                                                          Notes:
                                                                                                                                          - The maximum input bits used by a length/distance pair is 15 bits for the
                                                                                                                                          length code, 5 bits for the length extra, 15 bits for the distance code,
                                                                                                                                          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
                                                                                                                                          Therefore if strm.avail_in >= 6, then there is enough input to avoid
                                                                                                                                          checking for available input while decoding.
                                                                                                                                          - The maximum bytes that a single length/distance pair can output is 258
                                                                                                                                          bytes, which is the maximum length that can be coded.  inflate_fast()
                                                                                                                                          requires strm.avail_out >= 258 for each loop to avoid checking for
                                                                                                                                          output space.
                                                                                                                                          */module.exports = function inflate_fast(strm, start) {
      var state;var _in; /* local strm.input */var last; /* have enough input while in < last */var _out; /* local strm.output */var beg; /* inflate()'s initial strm.output */var end; /* while out < end, enough space available */ //#ifdef INFLATE_STRICT
      var dmax; /* maximum distance from zlib header */ //#endif
      var wsize; /* window size or zero if not using window */var whave; /* valid bytes in the window */var wnext; /* window write index */ // Use `s_window` instead `window`, avoid conflict with instrumentation tools
      var s_window; /* allocated sliding window, if wsize != 0 */var hold; /* local strm.hold */var bits; /* local strm.bits */var lcode; /* local strm.lencode */var dcode; /* local strm.distcode */var lmask; /* mask for first level of length codes */var dmask; /* mask for first level of distance codes */var here; /* retrieved table entry */var op; /* code bits, operation, extra bits, or */ /*  window position, window bytes to copy */var len; /* match length, unused bytes */var dist; /* match distance */var from; /* where to copy match from */var from_source;var input, output; // JS specific, because we have no pointers
      /* copy state to local variables */state = strm.state; //here = state.here;
      _in = strm.next_in;input = strm.input;last = _in + (strm.avail_in - 5);_out = strm.next_out;output = strm.output;beg = _out - (start - strm.avail_out);end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT
      dmax = state.dmax; //#endif
      wsize = state.wsize;whave = state.whave;wnext = state.wnext;s_window = state.window;hold = state.hold;bits = state.bits;lcode = state.lencode;dcode = state.distcode;lmask = (1 << state.lenbits) - 1;dmask = (1 << state.distbits) - 1; /* decode literals and length/distances until end-of-block or not enough
                                                                                                                                                                                                                                               input data or output space */top: do {
        if (bits < 15) {
          hold += input[_in++] << bits;bits += 8;hold += input[_in++] << bits;bits += 8;
        }here = lcode[hold & lmask];dolen: for (;;) {
          // Goto emulation
          op = here >>> 24 /*here.bits*/;hold >>>= op;bits -= op;op = here >>> 16 & 0xff /*here.op*/;if (op === 0) {
            /* literal */ //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff /*here.val*/;
          } else if (op & 16) {
            /* length base */len = here & 0xffff /*here.val*/;op &= 15; /* number of extra bits */if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;bits += 8;
              }len += hold & (1 << op) - 1;hold >>>= op;bits -= op;
            } //Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
              hold += input[_in++] << bits;bits += 8;hold += input[_in++] << bits;bits += 8;
            }here = dcode[hold & dmask];dodist: for (;;) {
              // goto emulation
              op = here >>> 24 /*here.bits*/;hold >>>= op;bits -= op;op = here >>> 16 & 0xff /*here.op*/;if (op & 16) {
                /* distance base */dist = here & 0xffff /*here.val*/;op &= 15; /* number of extra bits */if (bits < op) {
                  hold += input[_in++] << bits;bits += 8;if (bits < op) {
                    hold += input[_in++] << bits;bits += 8;
                  }
                }dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT
                if (dist > dmax) {
                  strm.msg = 'invalid distance too far back';state.mode = BAD;break top;
                } //#endif
                hold >>>= op;bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = _out - beg; /* max distance in output */if (dist > op) {
                  /* see if copy from window */op = dist - op; /* distance back in window */if (op > whave) {
                    if (state.sane) {
                      strm.msg = 'invalid distance too far back';state.mode = BAD;break top;
                    } // (!) This block is disabled in zlib defailts,
                    // don't enable it for binary compatibility
                    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                    //                if (len <= op - whave) {
                    //                  do {
                    //                    output[_out++] = 0;
                    //                  } while (--len);
                    //                  continue top;
                    //                }
                    //                len -= op - whave;
                    //                do {
                    //                  output[_out++] = 0;
                    //                } while (--op > whave);
                    //                if (op === 0) {
                    //                  from = _out - dist;
                    //                  do {
                    //                    output[_out++] = output[from++];
                    //                  } while (--len);
                    //                  continue top;
                    //                }
                    //#endif
                  }from = 0; // window index
                  from_source = s_window;if (wnext === 0) {
                    /* very common case */from += wsize - op;if (op < len) {
                      /* some from window */len -= op;do {
                        output[_out++] = s_window[from++];
                      } while (--op);from = _out - dist; /* rest from output */from_source = output;
                    }
                  } else if (wnext < op) {
                    /* wrap around window */from += wsize + wnext - op;op -= wnext;if (op < len) {
                      /* some from end of window */len -= op;do {
                        output[_out++] = s_window[from++];
                      } while (--op);from = 0;if (wnext < len) {
                        /* some from start of window */op = wnext;len -= op;do {
                          output[_out++] = s_window[from++];
                        } while (--op);from = _out - dist; /* rest from output */from_source = output;
                      }
                    }
                  } else {
                    /* contiguous in window */from += wnext - op;if (op < len) {
                      /* some from window */len -= op;do {
                        output[_out++] = s_window[from++];
                      } while (--op);from = _out - dist; /* rest from output */from_source = output;
                    }
                  }while (len > 2) {
                    output[_out++] = from_source[from++];output[_out++] = from_source[from++];output[_out++] = from_source[from++];len -= 3;
                  }if (len) {
                    output[_out++] = from_source[from++];if (len > 1) {
                      output[_out++] = from_source[from++];
                    }
                  }
                } else {
                  from = _out - dist; /* copy direct from output */do {
                    /* minimum length is three */output[_out++] = output[from++];output[_out++] = output[from++];output[_out++] = output[from++];len -= 3;
                  } while (len > 2);if (len) {
                    output[_out++] = output[from++];if (len > 1) {
                      output[_out++] = output[from++];
                    }
                  }
                }
              } else if ((op & 64) === 0) {
                /* 2nd level distance code */here = dcode[(here & 0xffff) + ( /*here.val*/hold & (1 << op) - 1)];continue dodist;
              } else {
                strm.msg = 'invalid distance code';state.mode = BAD;break top;
              }break; // need to emulate goto via "continue"
            }
          } else if ((op & 64) === 0) {
            /* 2nd level length code */here = lcode[(here & 0xffff) + ( /*here.val*/hold & (1 << op) - 1)];continue dolen;
          } else if (op & 32) {
            /* end-of-block */ //Tracevv((stderr, "inflate:         end of block\n"));
            state.mode = TYPE;break top;
          } else {
            strm.msg = 'invalid literal/length code';state.mode = BAD;break top;
          }break; // need to emulate goto via "continue"
        }
      } while (_in < last && _out < end); /* return unused bytes (on entry, bits < 8, so in won't go too far back) */len = bits >> 3;_in -= len;bits -= len << 3;hold &= (1 << bits) - 1; /* update state and return */strm.next_in = _in;strm.next_out = _out;strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);state.hold = hold;state.bits = bits;return;
    };
  }, {}], 49: [function (require, module, exports) {
    'use strict';
    var utils = require('../utils/common');var adler32 = require('./adler32');var crc32 = require('./crc32');var inflate_fast = require('./inffast');var inflate_table = require('./inftrees');var CODES = 0;var LENS = 1;var DISTS = 2; /* Public constants ==========================================================*/ /* ===========================================================================*/ /* Allowed flush values; see deflate() and inflate() below for details */ //var Z_NO_FLUSH      = 0;
    //var Z_PARTIAL_FLUSH = 1;
    //var Z_SYNC_FLUSH    = 2;
    //var Z_FULL_FLUSH    = 3;
    var Z_FINISH = 4;var Z_BLOCK = 5;var Z_TREES = 6; /* Return codes for the compression/decompression functions. Negative values
                                                      * are errors, positive values are used for special but normal events.
                                                      */var Z_OK = 0;var Z_STREAM_END = 1;var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;
    var Z_STREAM_ERROR = -2;var Z_DATA_ERROR = -3;var Z_MEM_ERROR = -4;var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;
    /* The deflate compression method */var Z_DEFLATED = 8; /* STATES ====================================================================*/ /* ===========================================================================*/var HEAD = 1; /* i: waiting for magic header */var FLAGS = 2; /* i: waiting for method and flags (gzip) */var TIME = 3; /* i: waiting for modification time (gzip) */var OS = 4; /* i: waiting for extra flags and operating system (gzip) */var EXLEN = 5; /* i: waiting for extra length (gzip) */var EXTRA = 6; /* i: waiting for extra bytes (gzip) */var NAME = 7; /* i: waiting for end of file name (gzip) */var COMMENT = 8; /* i: waiting for end of comment (gzip) */var HCRC = 9; /* i: waiting for header crc (gzip) */var DICTID = 10; /* i: waiting for dictionary check value */var DICT = 11; /* waiting for inflateSetDictionary() call */var TYPE = 12; /* i: waiting for type bits, including last-flag bit */var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */var STORED = 14; /* i: waiting for stored size (length and complement) */var COPY_ = 15; /* i/o: same as COPY below, but only first time in */var COPY = 16; /* i/o: waiting for input or output to copy stored block */var TABLE = 17; /* i: waiting for dynamic block table lengths */var LENLENS = 18; /* i: waiting for code length code lengths */var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */var LEN_ = 20; /* i: same as LEN below, but only first time in */var LEN = 21; /* i: waiting for length/lit/eob code */var LENEXT = 22; /* i: waiting for length extra bits */var DIST = 23; /* i: waiting for distance code */var DISTEXT = 24; /* i: waiting for distance extra bits */var MATCH = 25; /* o: waiting for output space to copy string */var LIT = 26; /* o: waiting for output space to write literal */var CHECK = 27; /* i: waiting for 32-bit check value */var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */var DONE = 29; /* finished check, done -- remain here until reset */var BAD = 30; /* got a data error -- remain here until reset */var MEM = 31; /* got an inflate() memory error -- remain here until reset */var SYNC = 32; /* looking for synchronization bytes to restart inflate() */ /* ===========================================================================*/var ENOUGH_LENS = 852;var ENOUGH_DISTS = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
    var MAX_WBITS = 15; /* 32K LZ77 window */var DEF_WBITS = MAX_WBITS;function zswap32(q) {
      return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
    }function InflateState() {
      this.mode = 0; /* current inflate mode */this.last = false; /* true if processing last block */this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */this.havedict = false; /* true if dictionary provided */this.flags = 0; /* gzip header method and flags (0 if zlib) */this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */this.check = 0; /* protected copy of check value */this.total = 0; /* protected copy of output count */ // TODO: may be {}
      this.head = null; /* where to save gzip header information */ /* sliding window */this.wbits = 0; /* log base 2 of requested window size */this.wsize = 0; /* window size or zero if not using window */this.whave = 0; /* valid bytes in the window */this.wnext = 0; /* window write index */this.window = null; /* allocated sliding window, if needed */ /* bit accumulator */this.hold = 0; /* input bit accumulator */this.bits = 0; /* number of bits in "in" */ /* for string and stored block copying */this.length = 0; /* literal or length of data to copy */this.offset = 0; /* distance back to copy string from */ /* for table and code decoding */this.extra = 0; /* extra bits needed */ /* fixed and dynamic code tables */this.lencode = null; /* starting table for length/literal codes */this.distcode = null; /* starting table for distance codes */this.lenbits = 0; /* index bits for lencode */this.distbits = 0; /* index bits for distcode */ /* dynamic table building */this.ncode = 0; /* number of code length code lengths */this.nlen = 0; /* number of length code lengths */this.ndist = 0; /* number of distance code lengths */this.have = 0; /* number of code lengths in lens[] */this.next = null; /* next available space in codes[] */this.lens = new utils.Buf16(320); /* temporary storage for code lengths */this.work = new utils.Buf16(288); /* work area for code table building */ /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             because we don't have pointers in js, we use lencode and distcode directly
as buffers so we don't need codes
this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
      this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */this.distdyn = null; /* dynamic table for distance codes (JS specific) */this.sane = 0; /* if false, allow invalid distance too far */this.back = 0; /* bits back of last unprocessed length/lit */this.was = 0; /* initial length of match */
    }function inflateResetKeep(strm) {
      var state;if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }state = strm.state;strm.total_in = strm.total_out = state.total = 0;strm.msg = ''; /*Z_NULL*/if (state.wrap) {
        /* to support ill-conceived Java test suite */strm.adler = state.wrap & 1;
      }state.mode = HEAD;state.last = 0;state.havedict = 0;state.dmax = 32768;state.head = null /*Z_NULL*/;state.hold = 0;state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;
      state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);state.sane = 1;state.back = -1; //Tracev((stderr, "inflate: reset\n"));
      return Z_OK;
    }function inflateReset(strm) {
      var state;if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }state = strm.state;state.wsize = 0;state.whave = 0;state.wnext = 0;return inflateResetKeep(strm);
    }function inflateReset2(strm, windowBits) {
      var wrap;var state; /* get the state */if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }state = strm.state; /* extract wrap request from windowBits parameter */if (windowBits < 0) {
        wrap = 0;windowBits = -windowBits;
      } else {
        wrap = (windowBits >> 4) + 1;if (windowBits < 48) {
          windowBits &= 15;
        }
      } /* set number of window bits, free window if different */if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR;
      }if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      } /* update state and reset the rest of it */state.wrap = wrap;state.wbits = windowBits;return inflateReset(strm);
    }function inflateInit2(strm, windowBits) {
      var ret;var state;if (!strm) {
        return Z_STREAM_ERROR;
      } //strm.msg = Z_NULL;                 /* in case we return an error */
      state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
      //Tracev((stderr, "inflate: allocated\n"));
      strm.state = state;state.window = null /*Z_NULL*/;ret = inflateReset2(strm, windowBits);if (ret !== Z_OK) {
        strm.state = null /*Z_NULL*/;
      }return ret;
    }function inflateInit(strm) {
      return inflateInit2(strm, DEF_WBITS);
    } /*
      Return state with length and distance decoding tables and index sizes set to
      fixed code decoding.  Normally this returns fixed tables from inffixed.h.
      If BUILDFIXED is defined, then instead this routine builds the tables the
      first time it's called, and returns those tables the first time and
      thereafter.  This reduces the size of the code by about 2K bytes, in
      exchange for a little execution time.  However, BUILDFIXED should not be
      used for threaded applications, since the rewriting of the tables and virgin
      may not be thread-safe.
      */var virgin = true;var lenfix, distfix; // We have no pointers in JS, so keep tables separate
    function fixedtables(state) {
      /* build fixed huffman tables if first call (may not be thread safe) */if (virgin) {
        var sym;lenfix = new utils.Buf32(512);distfix = new utils.Buf32(32); /* literal/length table */sym = 0;while (sym < 144) {
          state.lens[sym++] = 8;
        }while (sym < 256) {
          state.lens[sym++] = 9;
        }while (sym < 280) {
          state.lens[sym++] = 7;
        }while (sym < 288) {
          state.lens[sym++] = 8;
        }inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 }); /* distance table */sym = 0;while (sym < 32) {
          state.lens[sym++] = 5;
        }inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 }); /* do this just once */virgin = false;
      }state.lencode = lenfix;state.lenbits = 9;state.distcode = distfix;state.distbits = 5;
    } /*
      Update the window with the last wsize (normally 32K) bytes written before
      returning.  If window does not exist yet, create it.  This is only called
      when a window is already in use, or when output has been written during this
      inflate call, but the end of the deflate stream has not been reached yet.
      It is also called to create a window for dictionary data when a dictionary
      is loaded.
      Providing output buffers larger than 32K to inflate() should provide a speed
      advantage, since only the last 32K of output is copied to the sliding window
      upon return from inflate(), and since all distances after the first 32K of
      output will fall in the output data, making match copies simpler and faster.
      The advantage may be dependent on the size of the processor's data caches.
      */function updatewindow(strm, src, end, copy) {
      var dist;var state = strm.state; /* if it hasn't been done already, allocate space for the window */if (state.window === null) {
        state.wsize = 1 << state.wbits;state.wnext = 0;state.whave = 0;state.window = new utils.Buf8(state.wsize);
      } /* copy state->wsize or less output bytes into the circular window */if (copy >= state.wsize) {
        utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);state.wnext = 0;state.whave = state.wsize;
      } else {
        dist = state.wsize - state.wnext;if (dist > copy) {
          dist = copy;
        } //zmemcpy(state->window + state->wnext, end - copy, dist);
        utils.arraySet(state.window, src, end - copy, dist, state.wnext);copy -= dist;if (copy) {
          //zmemcpy(state->window, end - copy, copy);
          utils.arraySet(state.window, src, end - copy, copy, 0);state.wnext = copy;state.whave = state.wsize;
        } else {
          state.wnext += dist;if (state.wnext === state.wsize) {
            state.wnext = 0;
          }if (state.whave < state.wsize) {
            state.whave += dist;
          }
        }
      }return 0;
    }function inflate(strm, flush) {
      var state;var input, output; // input/output buffers
      var next; /* next input INDEX */var put; /* next output INDEX */var have, left; /* available input and output */var hold; /* bit buffer */var bits; /* bits in bit buffer */var _in, _out; /* save starting available input and output */var copy; /* number of stored or match bytes to copy */var from; /* where to copy match bytes from */var from_source;var here = 0; /* current decoding table entry */var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
      //var last;                   /* parent table entry */
      var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
      var len; /* length to copy for repeats, bits to drop */var ret; /* return code */var hbuf = new utils.Buf8(4); /* buffer for gzip header crc calculation */var opts;var n; // temporary var for NEED_BITS
      var order = /* permutation of code lengths */[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
        return Z_STREAM_ERROR;
      }state = strm.state;if (state.mode === TYPE) {
        state.mode = TYPEDO;
      } /* skip check */ //--- LOAD() ---
      put = strm.next_out;output = strm.output;left = strm.avail_out;next = strm.next_in;input = strm.input;have = strm.avail_in;hold = state.hold;bits = state.bits; //---
      _in = have;_out = left;ret = Z_OK;inf_leave: // goto emulation
      for (;;) {
        switch (state.mode) {case HEAD:
            if (state.wrap === 0) {
              state.mode = TYPEDO;break;
            } //=== NEEDBITS(16);
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8;
            } //===//
            if (state.wrap & 2 && hold === 0x8b1f) {
              /* gzip header */state.check = 0 /*crc32(0L, Z_NULL, 0)*/; //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;hbuf[1] = hold >>> 8 & 0xff;state.check = crc32(state.check, hbuf, 2, 0); //===//
              //=== INITBITS();
              hold = 0;bits = 0; //===//
              state.mode = FLAGS;break;
            }state.flags = 0; /* expect zlib header */if (state.head) {
              state.head.done = false;
            }if (!(state.wrap & 1) || /* check if zlib header allowed */(((hold & 0xff) << /*BITS(8)*/8) + (hold >> 8)) % 31) {
              strm.msg = 'incorrect header check';state.mode = BAD;break;
            }if ((hold & 0x0f) !== /*BITS(4)*/Z_DEFLATED) {
              strm.msg = 'unknown compression method';state.mode = BAD;break;
            } //--- DROPBITS(4) ---//
            hold >>>= 4;bits -= 4; //---//
            len = (hold & 0x0f) + /*BITS(4)*/8;if (state.wbits === 0) {
              state.wbits = len;
            } else if (len > state.wbits) {
              strm.msg = 'invalid window size';state.mode = BAD;break;
            }state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;state.mode = hold & 0x200 ? DICTID : TYPE; //=== INITBITS();
            hold = 0;bits = 0; //===//
            break;case FLAGS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8;
            } //===//
            state.flags = hold;if ((state.flags & 0xff) !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';state.mode = BAD;break;
            }if (state.flags & 0xe000) {
              strm.msg = 'unknown header flags set';state.mode = BAD;break;
            }if (state.head) {
              state.head.text = hold >> 8 & 1;
            }if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;hbuf[1] = hold >>> 8 & 0xff;state.check = crc32(state.check, hbuf, 2, 0); //===//
            } //=== INITBITS();
            hold = 0;bits = 0; //===//
            state.mode = TIME; /* falls through */case TIME:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8;
            } //===//
            if (state.head) {
              state.head.time = hold;
            }if (state.flags & 0x0200) {
              //=== CRC4(state.check, hold)
              hbuf[0] = hold & 0xff;hbuf[1] = hold >>> 8 & 0xff;hbuf[2] = hold >>> 16 & 0xff;hbuf[3] = hold >>> 24 & 0xff;state.check = crc32(state.check, hbuf, 4, 0); //===
            } //=== INITBITS();
            hold = 0;bits = 0; //===//
            state.mode = OS; /* falls through */case OS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8;
            } //===//
            if (state.head) {
              state.head.xflags = hold & 0xff;state.head.os = hold >> 8;
            }if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;hbuf[1] = hold >>> 8 & 0xff;state.check = crc32(state.check, hbuf, 2, 0); //===//
            } //=== INITBITS();
            hold = 0;bits = 0; //===//
            state.mode = EXLEN; /* falls through */case EXLEN:
            if (state.flags & 0x0400) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8;
              } //===//
              state.length = hold;if (state.head) {
                state.head.extra_len = hold;
              }if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;hbuf[1] = hold >>> 8 & 0xff;state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();
              hold = 0;bits = 0; //===//
            } else if (state.head) {
              state.head.extra = null /*Z_NULL*/;
            }state.mode = EXTRA; /* falls through */case EXTRA:
            if (state.flags & 0x0400) {
              copy = state.length;if (copy > have) {
                copy = have;
              }if (copy) {
                if (state.head) {
                  len = state.head.extra_len - state.length;if (!state.head.extra) {
                    // Use untyped array for more conveniend processing later
                    state.head.extra = new Array(state.head.extra_len);
                  }utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  copy, /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/len); //zmemcpy(state.head.extra + len, next,
                  //        len + copy > state.head.extra_max ?
                  //        state.head.extra_max - len : copy);
                }if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }have -= copy;next += copy;state.length -= copy;
              }if (state.length) {
                break inf_leave;
              }
            }state.length = 0;state.mode = NAME; /* falls through */case NAME:
            if (state.flags & 0x0800) {
              if (have === 0) {
                break inf_leave;
              }copy = 0;do {
                // TODO: 2 or 1 bytes?
                len = input[next + copy++]; /* use constant limit because in js we should not preallocate memory */if (state.head && len && state.length < 65536 /*state.head.name_max*/) {
                    state.head.name += String.fromCharCode(len);
                  }
              } while (len && copy < have);if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }have -= copy;next += copy;if (len) {
                break inf_leave;
              }
            } else if (state.head) {
              state.head.name = null;
            }state.length = 0;state.mode = COMMENT; /* falls through */case COMMENT:
            if (state.flags & 0x1000) {
              if (have === 0) {
                break inf_leave;
              }copy = 0;do {
                len = input[next + copy++]; /* use constant limit because in js we should not preallocate memory */if (state.head && len && state.length < 65536 /*state.head.comm_max*/) {
                    state.head.comment += String.fromCharCode(len);
                  }
              } while (len && copy < have);if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }have -= copy;next += copy;if (len) {
                break inf_leave;
              }
            } else if (state.head) {
              state.head.comment = null;
            }state.mode = HCRC; /* falls through */case HCRC:
            if (state.flags & 0x0200) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8;
              } //===//
              if (hold !== (state.check & 0xffff)) {
                strm.msg = 'header crc mismatch';state.mode = BAD;break;
              } //=== INITBITS();
              hold = 0;bits = 0; //===//
            }if (state.head) {
              state.head.hcrc = state.flags >> 9 & 1;state.head.done = true;
            }strm.adler = state.check = 0;state.mode = TYPE;break;case DICTID:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8;
            } //===//
            strm.adler = state.check = zswap32(hold); //=== INITBITS();
            hold = 0;bits = 0; //===//
            state.mode = DICT; /* falls through */case DICT:
            if (state.havedict === 0) {
              //--- RESTORE() ---
              strm.next_out = put;strm.avail_out = left;strm.next_in = next;strm.avail_in = have;state.hold = hold;state.bits = bits; //---
              return Z_NEED_DICT;
            }strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;state.mode = TYPE; /* falls through */case TYPE:
            if (flush === Z_BLOCK || flush === Z_TREES) {
              break inf_leave;
            } /* falls through */case TYPEDO:
            if (state.last) {
              //--- BYTEBITS() ---//
              hold >>>= bits & 7;bits -= bits & 7; //---//
              state.mode = CHECK;break;
            } //=== NEEDBITS(3); */
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8;
            } //===//
            state.last = hold & 0x01 /*BITS(1)*/; //--- DROPBITS(1) ---//
            hold >>>= 1;bits -= 1; //---//
            switch (hold & 0x03) {/*BITS(2)*/case 0:
                /* stored block */ //Tracev((stderr, "inflate:     stored block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = STORED;break;case 1:
                /* fixed block */fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = LEN_; /* decode codes */if (flush === Z_TREES) {
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;bits -= 2; //---//
                  break inf_leave;
                }break;case 2:
                /* dynamic block */ //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = TABLE;break;case 3:
                strm.msg = 'invalid block type';state.mode = BAD;} //--- DROPBITS(2) ---//
            hold >>>= 2;bits -= 2; //---//
            break;case STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;bits -= bits & 7; //---//
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8;
            } //===//
            if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
              strm.msg = 'invalid stored block lengths';state.mode = BAD;break;
            }state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;bits = 0; //===//
            state.mode = COPY_;if (flush === Z_TREES) {
              break inf_leave;
            } /* falls through */case COPY_:
            state.mode = COPY; /* falls through */case COPY:
            copy = state.length;if (copy) {
              if (copy > have) {
                copy = have;
              }if (copy > left) {
                copy = left;
              }if (copy === 0) {
                break inf_leave;
              } //--- zmemcpy(put, next, copy); ---
              utils.arraySet(output, input, next, copy, put); //---//
              have -= copy;next += copy;left -= copy;put += copy;state.length -= copy;break;
            } //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = TYPE;break;case TABLE:
            //=== NEEDBITS(14); */
            while (bits < 14) {
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8;
            } //===//
            state.nlen = (hold & 0x1f) + /*BITS(5)*/257; //--- DROPBITS(5) ---//
            hold >>>= 5;bits -= 5; //---//
            state.ndist = (hold & 0x1f) + /*BITS(5)*/1; //--- DROPBITS(5) ---//
            hold >>>= 5;bits -= 5; //---//
            state.ncode = (hold & 0x0f) + /*BITS(4)*/4; //--- DROPBITS(4) ---//
            hold >>>= 4;bits -= 4; //---//
            //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
              strm.msg = 'too many length or distance symbols';state.mode = BAD;break;
            } //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;state.mode = LENLENS; /* falls through */case LENLENS:
            while (state.have < state.ncode) {
              //=== NEEDBITS(3);
              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8;
              } //===//
              state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;bits -= 3; //---//
            }while (state.have < 19) {
              state.lens[order[state.have++]] = 0;
            } // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;state.lenbits = 7;opts = { bits: state.lenbits };ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);state.lenbits = opts.bits;if (ret) {
              strm.msg = 'invalid code lengths set';state.mode = BAD;break;
            } //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;state.mode = CODELENS; /* falls through */case CODELENS:
            while (state.have < state.nlen + state.ndist) {
              for (;;) {
                here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/here_bits = here >>> 24;here_op = here >>> 16 & 0xff;here_val = here & 0xffff;if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8; //---//
              }if (here_val < 16) {
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;bits -= here_bits; //---//
                state.lens[state.have++] = here_val;
              } else {
                if (here_val === 16) {
                  //=== NEEDBITS(here.bits + 2);
                  n = here_bits + 2;while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }have--;hold += input[next++] << bits;bits += 8;
                  } //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;bits -= here_bits; //---//
                  if (state.have === 0) {
                    strm.msg = 'invalid bit length repeat';state.mode = BAD;break;
                  }len = state.lens[state.have - 1];copy = 3 + (hold & 0x03); //BITS(2);
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;bits -= 2; //---//
                } else if (here_val === 17) {
                  //=== NEEDBITS(here.bits + 3);
                  n = here_bits + 3;while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }have--;hold += input[next++] << bits;bits += 8;
                  } //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;bits -= here_bits; //---//
                  len = 0;copy = 3 + (hold & 0x07); //BITS(3);
                  //--- DROPBITS(3) ---//
                  hold >>>= 3;bits -= 3; //---//
                } else {
                  //=== NEEDBITS(here.bits + 7);
                  n = here_bits + 7;while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }have--;hold += input[next++] << bits;bits += 8;
                  } //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;bits -= here_bits; //---//
                  len = 0;copy = 11 + (hold & 0x7f); //BITS(7);
                  //--- DROPBITS(7) ---//
                  hold >>>= 7;bits -= 7; //---//
                }if (state.have + copy > state.nlen + state.ndist) {
                  strm.msg = 'invalid bit length repeat';state.mode = BAD;break;
                }while (copy--) {
                  state.lens[state.have++] = len;
                }
              }
            } /* handle error breaks in while */if (state.mode === BAD) {
              break;
            } /* check for end-of-block code (better have one) */if (state.lens[256] === 0) {
              strm.msg = 'invalid code -- missing end-of-block';state.mode = BAD;break;
            } /* build code tables -- note: do not change the lenbits or distbits
              values here (9 and 6) without reading the comments in inftrees.h
              concerning the ENOUGH constants, which depend on those values */state.lenbits = 9;opts = { bits: state.lenbits };ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits; // state.lencode = state.next;
            if (ret) {
              strm.msg = 'invalid literal/lengths set';state.mode = BAD;break;
            }state.distbits = 6; //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;opts = { bits: state.distbits };ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits; // state.distcode = state.next;
            if (ret) {
              strm.msg = 'invalid distances set';state.mode = BAD;break;
            } //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = LEN_;if (flush === Z_TREES) {
              break inf_leave;
            } /* falls through */case LEN_:
            state.mode = LEN; /* falls through */case LEN:
            if (have >= 6 && left >= 258) {
              //--- RESTORE() ---
              strm.next_out = put;strm.avail_out = left;strm.next_in = next;strm.avail_in = have;state.hold = hold;state.bits = bits; //---
              inflate_fast(strm, _out); //--- LOAD() ---
              put = strm.next_out;output = strm.output;left = strm.avail_out;next = strm.next_in;input = strm.input;have = strm.avail_in;hold = state.hold;bits = state.bits; //---
              if (state.mode === TYPE) {
                state.back = -1;
              }break;
            }state.back = 0;for (;;) {
              here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/here_bits = here >>> 24;here_op = here >>> 16 & 0xff;here_val = here & 0xffff;if (here_bits <= bits) {
                break;
              } //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8; //---//
            }if (here_op && (here_op & 0xf0) === 0) {
              last_bits = here_bits;last_op = here_op;last_val = here_val;for (;;) {
                here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> /*BITS(last.bits + last.op)*/last_bits)];here_bits = here >>> 24;here_op = here >>> 16 & 0xff;here_val = here & 0xffff;if (last_bits + here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8; //---//
              } //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;bits -= last_bits; //---//
              state.back += last_bits;
            } //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;bits -= here_bits; //---//
            state.back += here_bits;state.length = here_val;if (here_op === 0) {
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              state.mode = LIT;break;
            }if (here_op & 32) {
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.back = -1;state.mode = TYPE;break;
            }if (here_op & 64) {
              strm.msg = 'invalid literal/length code';state.mode = BAD;break;
            }state.extra = here_op & 15;state.mode = LENEXT; /* falls through */case LENEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8;
              } //===//
              state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/; //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;bits -= state.extra; //---//
              state.back += state.extra;
            } //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;state.mode = DIST; /* falls through */case DIST:
            for (;;) {
              here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/here_bits = here >>> 24;here_op = here >>> 16 & 0xff;here_val = here & 0xffff;if (here_bits <= bits) {
                break;
              } //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }have--;hold += input[next++] << bits;bits += 8; //---//
            }if ((here_op & 0xf0) === 0) {
              last_bits = here_bits;last_op = here_op;last_val = here_val;for (;;) {
                here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> /*BITS(last.bits + last.op)*/last_bits)];here_bits = here >>> 24;here_op = here >>> 16 & 0xff;here_val = here & 0xffff;if (last_bits + here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8; //---//
              } //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;bits -= last_bits; //---//
              state.back += last_bits;
            } //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;bits -= here_bits; //---//
            state.back += here_bits;if (here_op & 64) {
              strm.msg = 'invalid distance code';state.mode = BAD;break;
            }state.offset = here_val;state.extra = here_op & 15;state.mode = DISTEXT; /* falls through */case DISTEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8;
              } //===//
              state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/; //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;bits -= state.extra; //---//
              state.back += state.extra;
            } //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
              strm.msg = 'invalid distance too far back';state.mode = BAD;break;
            } //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = MATCH; /* falls through */case MATCH:
            if (left === 0) {
              break inf_leave;
            }copy = _out - left;if (state.offset > copy) {
              /* copy from window */copy = state.offset - copy;if (copy > state.whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';state.mode = BAD;break;
                } // (!) This block is disabled in zlib defailts,
                // don't enable it for binary compatibility
                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                //          Trace((stderr, "inflate.c too far\n"));
                //          copy -= state.whave;
                //          if (copy > state.length) { copy = state.length; }
                //          if (copy > left) { copy = left; }
                //          left -= copy;
                //          state.length -= copy;
                //          do {
                //            output[put++] = 0;
                //          } while (--copy);
                //          if (state.length === 0) { state.mode = LEN; }
                //          break;
                //#endif
              }if (copy > state.wnext) {
                copy -= state.wnext;from = state.wsize - copy;
              } else {
                from = state.wnext - copy;
              }if (copy > state.length) {
                copy = state.length;
              }from_source = state.window;
            } else {
              /* copy from output */from_source = output;from = put - state.offset;copy = state.length;
            }if (copy > left) {
              copy = left;
            }left -= copy;state.length -= copy;do {
              output[put++] = from_source[from++];
            } while (--copy);if (state.length === 0) {
              state.mode = LEN;
            }break;case LIT:
            if (left === 0) {
              break inf_leave;
            }output[put++] = state.length;left--;state.mode = LEN;break;case CHECK:
            if (state.wrap) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }have--; // Use '|' insdead of '+' to make sure that result is signed
                hold |= input[next++] << bits;bits += 8;
              } //===//
              _out -= left;strm.total_out += _out;state.total += _out;if (_out) {
                strm.adler = state.check = /*UPDATE(state.check, put - _out, _out);*/state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
              }_out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
              if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                strm.msg = 'incorrect data check';state.mode = BAD;break;
              } //=== INITBITS();
              hold = 0;bits = 0; //===//
              //Tracev((stderr, "inflate:   check matches trailer\n"));
            }state.mode = LENGTH; /* falls through */case LENGTH:
            if (state.wrap && state.flags) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }have--;hold += input[next++] << bits;bits += 8;
              } //===//
              if (hold !== (state.total & 0xffffffff)) {
                strm.msg = 'incorrect length check';state.mode = BAD;break;
              } //=== INITBITS();
              hold = 0;bits = 0; //===//
              //Tracev((stderr, "inflate:   length matches trailer\n"));
            }state.mode = DONE; /* falls through */case DONE:
            ret = Z_STREAM_END;break inf_leave;case BAD:
            ret = Z_DATA_ERROR;break inf_leave;case MEM:
            return Z_MEM_ERROR;case SYNC: /* falls through */default:
            return Z_STREAM_ERROR;}
      } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
      /*
           Return from inflate(), updating the total counts and the check value.
           If there was no progress during the inflate() call, return a buffer
           error.  Call updatewindow() to create and/or update the window state.
           Note: a memory error from inflate() is non-recoverable.
         */ //--- RESTORE() ---
      strm.next_out = put;strm.avail_out = left;strm.next_in = next;strm.avail_in = have;state.hold = hold;state.bits = bits; //---
      if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
          state.mode = MEM;return Z_MEM_ERROR;
        }
      }_in -= strm.avail_in;_out -= strm.avail_out;strm.total_in += _in;strm.total_out += _out;state.total += _out;if (state.wrap && _out) {
        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
      }strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {}return ret;
    }function inflateEnd(strm) {
      if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
          return Z_STREAM_ERROR;
        }var state = strm.state;if (state.window) {
        state.window = null;
      }strm.state = null;return Z_OK;
    }function inflateGetHeader(strm, head) {
      var state; /* check state */if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }state = strm.state;if ((state.wrap & 2) === 0) {
        return Z_STREAM_ERROR;
      } /* save header structure */state.head = head;head.done = false;return Z_OK;
    }function inflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;var state;var dictid;var ret; /* check state */if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) {
          return Z_STREAM_ERROR;
        }state = strm.state;if (state.wrap !== 0 && state.mode !== DICT) {
        return Z_STREAM_ERROR;
      } /* check for correct dictionary identifier */if (state.mode === DICT) {
        dictid = 1; /* adler32(0, null, 0)*/ /* dictid = adler32(dictid, dictionary, dictLength); */dictid = adler32(dictid, dictionary, dictLength, 0);if (dictid !== state.check) {
          return Z_DATA_ERROR;
        }
      } /* copy dictionary to window using updatewindow(), which will amend the
        existing dictionary if appropriate */ret = updatewindow(strm, dictionary, dictLength, dictLength);if (ret) {
        state.mode = MEM;return Z_MEM_ERROR;
      }state.havedict = 1; // Tracev((stderr, "inflate:   dictionary set\n"));
      return Z_OK;
    }exports.inflateReset = inflateReset;exports.inflateReset2 = inflateReset2;exports.inflateResetKeep = inflateResetKeep;exports.inflateInit = inflateInit;exports.inflateInit2 = inflateInit2;exports.inflate = inflate;exports.inflateEnd = inflateEnd;exports.inflateGetHeader = inflateGetHeader;exports.inflateSetDictionary = inflateSetDictionary;exports.inflateInfo = 'pako inflate (from Nodeca project)'; /* Not implemented
                                                                                                                                                                                                                                                                                                                                                                                                                       exports.inflateCopy = inflateCopy;
                                                                                                                                                                                                                                                                                                                                                                                                                       exports.inflateGetDictionary = inflateGetDictionary;
                                                                                                                                                                                                                                                                                                                                                                                                                       exports.inflateMark = inflateMark;
                                                                                                                                                                                                                                                                                                                                                                                                                       exports.inflatePrime = inflatePrime;
                                                                                                                                                                                                                                                                                                                                                                                                                       exports.inflateSync = inflateSync;
                                                                                                                                                                                                                                                                                                                                                                                                                       exports.inflateSyncPoint = inflateSyncPoint;
                                                                                                                                                                                                                                                                                                                                                                                                                       exports.inflateUndermine = inflateUndermine;
                                                                                                                                                                                                                                                                                                                                                                                                                       */
  }, { "../utils/common": 43, "./adler32": 44, "./crc32": 46, "./inffast": 48, "./inftrees": 50 }], 50: [function (require, module, exports) {
    'use strict';
    var utils = require('../utils/common');var MAXBITS = 15;var ENOUGH_LENS = 852;var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
    var CODES = 0;var LENS = 1;var DISTS = 2;var lbase = [/* Length codes 257..285 base */3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];var lext = [/* Length codes 257..285 extra */16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];var dbase = [/* Distance codes 0..29 base */1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];var dext = [/* Distance codes 0..29 extra */16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
      var bits = opts.bits; //here = opts.here; /* table entry for duplication */
      var len = 0; /* a code's length in bits */var sym = 0; /* index of code symbols */var min = 0,
          max = 0; /* minimum and maximum code lengths */var root = 0; /* number of index bits for root table */var curr = 0; /* number of index bits for current table */var drop = 0; /* code bits to drop for sub-table */var left = 0; /* number of prefix codes available */var used = 0; /* code entries in table used */var huff = 0; /* Huffman code */var incr; /* for incrementing code, index */var fill; /* index for replicating entries */var low; /* low bits for current root entry */var mask; /* mask for low root bits */var next; /* next available space in table */var base = null; /* base value table to use */var base_index = 0; //  var shoextra;    /* extra bits table to use */
      var end; /* use base and extra for symbol > end */var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
      var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
      var extra = null;var extra_index = 0;var here_bits, here_op, here_val; /*
                                                                             Process a set of code lengths to create a canonical Huffman code.  The
                                                                             code lengths are lens[0..codes-1].  Each length corresponds to the
                                                                             symbols 0..codes-1.  The Huffman code is generated by first sorting the
                                                                             symbols by length from short to long, and retaining the symbol order
                                                                             for codes with equal lengths.  Then the code starts with all zero bits
                                                                             for the first code of the shortest length, and the codes are integer
                                                                             increments for the same length, and zeros are appended as the length
                                                                             increases.  For the deflate format, these bits are stored backwards
                                                                             from their more natural integer increment ordering, and so when the
                                                                             decoding tables are built in the large loop below, the integer codes
                                                                             are incremented backwards.
                                                                             This routine assumes, but does not check, that all of the entries in
                                                                             lens[] are in the range 0..MAXBITS.  The caller must assure this.
                                                                             1..MAXBITS is interpreted as that code length.  zero means that that
                                                                             symbol does not occur in this code.
                                                                             The codes are sorted by computing a count of codes for each length,
                                                                             creating from that a table of starting indices for each length in the
                                                                             sorted table, and then entering the symbols in order in the sorted
                                                                             table.  The sorted table is work[], with that space being provided by
                                                                             the caller.
                                                                             The length counts are used for other purposes as well, i.e. finding
                                                                             the minimum and maximum length codes, determining if there are any
                                                                             codes at all, checking for a valid set of lengths, and looking ahead
                                                                             at length counts to determine sub-table sizes when building the
                                                                             decoding tables.
                                                                             */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      } /* bound code lengths, force root to be within code lengths */root = bits;for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) {
          break;
        }
      }if (root > max) {
        root = max;
      }if (max === 0) {
        /* no symbols to code at all */ //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = 1 << 24 | 64 << 16 | 0;opts.bits = 1;return 0; /* no symbols, but wait for decoding to report error */
      }for (min = 1; min < max; min++) {
        if (count[min] !== 0) {
          break;
        }
      }if (root < min) {
        root = min;
      } /* check for an over-subscribed or incomplete set of lengths */left = 1;for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;left -= count[len];if (left < 0) {
          return -1;
        } /* over-subscribed */
      }if (left > 0 && (type === CODES || max !== 1)) {
        return -1; /* incomplete set */
      } /* generate offsets into symbol table for each length for sorting */offs[1] = 0;for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      } /* sort symbols by length, by symbol order within each length */for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      } /*
        Create and fill in decoding tables.  In this loop, the table being
        filled is at next and has curr index bits.  The code being used is huff
        with length len.  That code is converted to an index by dropping drop
        bits off of the bottom.  For codes where len is less than drop + curr,
        those top drop + curr - len bits are incremented through all values to
        fill the table with replicated entries.
        root is the number of index bits for the root table.  When len exceeds
        root, sub-tables are created pointed to by the root entry with an index
        of the low root bits of huff.  This is saved in low to check for when a
        new sub-table should be started.  drop is zero when the root table is
        being filled, and drop is root when sub-tables are being filled.
        When a new sub-table is needed, it is necessary to look ahead in the
        code lengths to determine what size sub-table is needed.  The length
        counts are used for this, and so count[] is decremented as codes are
        entered in the tables.
        used keeps track of how many table entries have been allocated from the
        provided *table space.  It is checked for LENS and DIST tables against
        the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
        the initial root table size constants.  See the comments in inftrees.h
        for more information.
        sym increments through all symbols, and the loop terminates when
        all codes of length max, i.e. all codes, have been processed.  This
        routine permits incomplete codes, so another loop after this one fills
        in the rest of the decoding tables with invalid code markers.
        */ /* set up for code type */ // poor man optimization - use if-else instead of switch,
      // to avoid deopts in old v8
      if (type === CODES) {
        base = extra = work; /* dummy value--not used */end = 19;
      } else if (type === LENS) {
        base = lbase;base_index -= 257;extra = lext;extra_index -= 257;end = 256;
      } else {
        /* DISTS */base = dbase;extra = dext;end = -1;
      } /* initialize opts for loop */huff = 0; /* starting code */sym = 0; /* starting code symbol */len = min; /* starting code length */next = table_index; /* current table to fill in */curr = root; /* current table index bits */drop = 0; /* current bits to drop from code for index */low = -1; /* trigger new sub-table when len > root */used = 1 << root; /* use root table entries */mask = used - 1; /* mask for comparing low */ /* check available table space */if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
        return 1;
      }var i = 0; /* process all codes and make table entries */for (;;) {
        i++; /* create table entry */here_bits = len - drop;if (work[sym] < end) {
          here_op = 0;here_val = work[sym];
        } else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];here_val = base[base_index + work[sym]];
        } else {
          here_op = 32 + 64; /* end of block */here_val = 0;
        } /* replicate for those indices with low len bits equal to huff */incr = 1 << len - drop;fill = 1 << curr;min = fill; /* save offset to next table */do {
          fill -= incr;table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        } while (fill !== 0); /* backwards increment the len-bit code huff */incr = 1 << len - 1;while (huff & incr) {
          incr >>= 1;
        }if (incr !== 0) {
          huff &= incr - 1;huff += incr;
        } else {
          huff = 0;
        } /* go to next symbol, update count, len */sym++;if (--count[len] === 0) {
          if (len === max) {
            break;
          }len = lens[lens_index + work[sym]];
        } /* create new sub-table if needed */if (len > root && (huff & mask) !== low) {
          /* if first time, transition to sub-tables */if (drop === 0) {
            drop = root;
          } /* increment past last table */next += min; /* here min is 1 << curr */ /* determine length of next table */curr = len - drop;left = 1 << curr;while (curr + drop < max) {
            left -= count[curr + drop];if (left <= 0) {
              break;
            }curr++;left <<= 1;
          } /* check for enough space */used += 1 << curr;if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
            return 1;
          } /* point entry in root table to sub-table */low = huff & mask; /*table.op[low] = curr;
                                                                           table.bits[low] = root;
                                                                           table.val[low] = next - opts.table_index;*/table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
      } /* fill in remaining table entry if code is incomplete (guaranteed to have
        at most one remaining entry, since if the code is incomplete, the
        maximum code length that was allowed to get this far is one bit) */if (huff !== 0) {
        //table.op[next + huff] = 64;            /* invalid code marker */
        //table.bits[next + huff] = len - drop;
        //table.val[next + huff] = 0;
        table[next + huff] = len - drop << 24 | 64 << 16 | 0;
      } /* set return parameters */ //opts.table_index += used;
      opts.bits = root;return 0;
    };
  }, { "../utils/common": 43 }], 51: [function (require, module, exports) {
    'use strict';
    module.exports = { 2: 'need dictionary', /* Z_NEED_DICT       2  */1: 'stream end', /* Z_STREAM_END      1  */0: '', /* Z_OK              0  */'-1': 'file error', /* Z_ERRNO         (-1) */'-2': 'stream error', /* Z_STREAM_ERROR  (-2) */'-3': 'data error', /* Z_DATA_ERROR    (-3) */'-4': 'insufficient memory', /* Z_MEM_ERROR     (-4) */'-5': 'buffer error', /* Z_BUF_ERROR     (-5) */'-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */ };
  }, {}], 52: [function (require, module, exports) {
    'use strict';
    var utils = require('../utils/common'); /* Public constants ==========================================================*/ /* ===========================================================================*/ //var Z_FILTERED          = 1;
    //var Z_HUFFMAN_ONLY      = 2;
    //var Z_RLE               = 3;
    var Z_FIXED = 4; //var Z_DEFAULT_STRATEGY  = 0;
    /* Possible values of the data_type field (though see inflate()) */var Z_BINARY = 0;var Z_TEXT = 1; //var Z_ASCII             = 1; // = Z_TEXT
    var Z_UNKNOWN = 2; /*============================================================================*/function zero(buf) {
      var len = buf.length;while (--len >= 0) {
        buf[len] = 0;
      }
    } // From zutil.h
    var STORED_BLOCK = 0;var STATIC_TREES = 1;var DYN_TREES = 2; /* The three kinds of block type */var MIN_MATCH = 3;var MAX_MATCH = 258; /* The minimum and maximum match lengths */ // From deflate.h
    /* ===========================================================================
     * Internal compression state.
     */var LENGTH_CODES = 29; /* number of length codes, not counting the special END_BLOCK code */var LITERALS = 256; /* number of literal bytes 0..255 */var L_CODES = LITERALS + 1 + LENGTH_CODES; /* number of Literal or Length codes, including the END_BLOCK code */var D_CODES = 30; /* number of distance codes */var BL_CODES = 19; /* number of codes used to transfer the bit lengths */var HEAP_SIZE = 2 * L_CODES + 1; /* maximum heap size */var MAX_BITS = 15; /* All codes must not exceed MAX_BITS bits */var Buf_size = 16; /* size of bit buffer in bi_buf */ /* ===========================================================================
onstants
var MAX_BL_BITS = 7; /* Bit length codes must not exceed MAX_BL_BITS bits */var END_BLOCK = 256; /* end of block literal code */var REP_3_6 = 16; /* repeat previous bit length 3-6 times (2 bits of repeat count) */var REPZ_3_10 = 17; /* repeat a zero length 3-10 times  (3 bits of repeat count) */var REPZ_11_138 = 18; /* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */var extra_lbits = /* extra bits for each length code */[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];var extra_dbits = /* extra bits for each distance code */[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];var extra_blbits = /* extra bits for each bit length code */[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]; /* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing
probability, to avoid transmitting the lengths for unused bit length codes.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * Local data. These are initialized only once.
e pre-fill arrays with 0 to avoid uninitialized gaps
    var DIST_CODE_LEN = 512; /* see definition of array dist_code below */ // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
    var static_ltree = new Array((L_CODES + 2) * 2);zero(static_ltree); /* The static literal tree. Since the bit lengths are imposed, there is no
                                                                        * need for the L_CODES extra codes used during heap construction. However
                                                                        * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
                                                                        * below).
                                                                        */var static_dtree = new Array(D_CODES * 2);zero(static_dtree); /* The static distance tree. (Actually a trivial tree since all codes use
                                                                                                                                        * 5 bits.)
                                                                                                                                        */var _dist_code = new Array(DIST_CODE_LEN);zero(_dist_code); /* Distance codes. The first 256 values correspond to the distances
                                                                                                                                                                                                      * 3 .. 258, the last 256 values correspond to the top 8 bits of
                                                                                                                                                                                                      * the 15 bit distances.
                                                                                                                                                                                                      */var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);zero(_length_code); /* length code for each normalized match length (0 == MIN_MATCH) */var base_length = new Array(LENGTH_CODES);zero(base_length); /* First normalized length for each code (0 = MIN_MATCH) */var base_dist = new Array(D_CODES);zero(base_dist); /* First normalized distance for each code (0 = distance of 1) */function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
      this.static_tree = static_tree; /* static tree or NULL */this.extra_bits = extra_bits; /* extra bits for each code or NULL */this.extra_base = extra_base; /* base index for extra_bits */this.elems = elems; /* max number of elements in the tree */this.max_length = max_length; /* max bit length for the codes */ // show if `static_tree` has data or dummy - needed for monomorphic objects
      this.has_stree = static_tree && static_tree.length;
    }var static_l_desc;var static_d_desc;var static_bl_desc;function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree; /* the dynamic tree */this.max_code = 0; /* largest code with non zero frequency */this.stat_desc = stat_desc; /* the corresponding static tree */
    }function d_code(dist) {
      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    } /* ===========================================================================
      * Output a short LSB first on the stream.
      * IN assertion: there is enough room in pendingBuf.
      */function put_short(s, w) {
      //    put_byte(s, (uch)((w) & 0xff));
      //    put_byte(s, (uch)((ush)(w) >> 8));
      s.pending_buf[s.pending++] = w & 0xff;s.pending_buf[s.pending++] = w >>> 8 & 0xff;
    } /* ===========================================================================
      * Send a value on a given number of bits.
      * IN assertion: length <= 16 and value fits in length bits.
      */function send_bits(s, value, length) {
      if (s.bi_valid > Buf_size - length) {
        s.bi_buf |= value << s.bi_valid & 0xffff;put_short(s, s.bi_buf);s.bi_buf = value >> Buf_size - s.bi_valid;s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= value << s.bi_valid & 0xffff;s.bi_valid += length;
      }
    }function send_code(s, c, tree) {
      send_bits(s, tree[c * 2] /*.Code*/, tree[c * 2 + 1] /*.Len*/);
    } /* ===========================================================================
      * Reverse the first len bits of a code, using straightforward code (a faster
      * method would use a table)
      * IN assertion: 1 <= len <= 15
      */function bi_reverse(code, len) {
      var res = 0;do {
        res |= code & 1;code >>>= 1;res <<= 1;
      } while (--len > 0);return res >>> 1;
    } /* ===========================================================================
      * Flush the bit buffer, keeping at most 7 bits in it.
      */function bi_flush(s) {
      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);s.bi_buf = 0;s.bi_valid = 0;
      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;s.bi_buf >>= 8;s.bi_valid -= 8;
      }
    } /* ===========================================================================
      * Compute the optimal bit lengths for a tree and update the total bit length
      * for the current block.
      * IN assertion: the fields freq and dad are set, heap[heap_max] and
      *    above are the tree nodes sorted by increasing frequency.
      * OUT assertions: the field len is set to the optimal bit length, the
      *     array bl_count contains the frequencies for each bit length.
      *     The length opt_len is updated; static_len is also updated if stree is
      *     not null.
      */function gen_bitlen(s, desc) //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    {
      var tree = desc.dyn_tree;var max_code = desc.max_code;var stree = desc.stat_desc.static_tree;var has_stree = desc.stat_desc.has_stree;var extra = desc.stat_desc.extra_bits;var base = desc.stat_desc.extra_base;var max_length = desc.stat_desc.max_length;var h; /* heap index */var n, m; /* iterate over the tree elements */var bits; /* bit length */var xbits; /* extra bits */var f; /* frequency */var overflow = 0; /* number of elements with bit length too large */for (bits = 0; bits <= MAX_BITS; bits++) {
        s.bl_count[bits] = 0;
      } /* In a first pass, compute the optimal bit lengths (which may
        * overflow in the case of the bit length tree).
        */tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
        n = s.heap[h];bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;if (bits > max_length) {
          bits = max_length;overflow++;
        }tree[n * 2 + 1] /*.Len*/ = bits; /* We overwrite tree[n].Dad which is no longer needed */if (n > max_code) {
          continue;
        } /* not a leaf node */s.bl_count[bits]++;xbits = 0;if (n >= base) {
          xbits = extra[n - base];
        }f = tree[n * 2] /*.Freq*/;s.opt_len += f * (bits + xbits);if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
        }
      }if (overflow === 0) {
        return;
      } // Trace((stderr,"\nbit length overflow\n"));
      /* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */do {
        bits = max_length - 1;while (s.bl_count[bits] === 0) {
          bits--;
        }s.bl_count[bits]--; /* move one leaf down the tree */s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */s.bl_count[max_length]--; /* The brother of the overflow item also moves one step up,
                                                                                                                                                              * but this does not affect bl_count[max_length]
                                                                                                                                                              */overflow -= 2;
      } while (overflow > 0); /* Now recompute all bit lengths, scanning in increasing frequency.
                              * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
                              * lengths instead of fixing only the wrong ones. This idea is taken
                              * from 'ar' written by Haruhiko Okumura.)
                              */for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];while (n !== 0) {
          m = s.heap[--h];if (m > max_code) {
            continue;
          }if (tree[m * 2 + 1] /*.Len*/ !== bits) {
            // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
            s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/) * tree[m * 2] /*.Freq*/;tree[m * 2 + 1] /*.Len*/ = bits;
          }n--;
        }
      }
    } /* ===========================================================================
      * Generate the codes for a given tree and bit counts (which need not be
      * optimal).
      * IN assertion: the array bl_count contains the bit length statistics for
      * the given tree and the field len is set for all tree elements.
      * OUT assertion: the field code is set for all tree elements of non
      *     zero code length.
      */function gen_codes(tree, max_code, bl_count) //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    {
      var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */var code = 0; /* running code value */var bits; /* bit index */var n; /* code index */ /* The distribution counts are first used to generate the code values
                                                                                                                                                                               * without bit reversal.
                                                                                                                                                                               */for (bits = 1; bits <= MAX_BITS; bits++) {
        next_code[bits] = code = code + bl_count[bits - 1] << 1;
      } /* Check that the bit counts in bl_count are consistent. The last code
        * must be all ones.
        */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
      //        "inconsistent bit counts");
      //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
      for (n = 0; n <= max_code; n++) {
        var len = tree[n * 2 + 1] /*.Len*/;if (len === 0) {
          continue;
        } /* Now reverse the bits */tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len); //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
      }
    } /* ===========================================================================
      * Initialize the various 'constant' tables.
      */function tr_static_init() {
      var n; /* iterates over tree elements */var bits; /* bit counter */var length; /* length value */var code; /* code value */var dist; /* distance index */var bl_count = new Array(MAX_BITS + 1); /* number of codes at each bit length for an optimal tree */ // do check in _tr_init()
      //if (static_init_done) return;
      /* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS
                                                                             static_l_desc.static_tree = static_ltree;
                                                                             static_l_desc.extra_bits = extra_lbits;
                                                                             static_d_desc.static_tree = static_dtree;
                                                                             static_d_desc.extra_bits = extra_dbits;
                                                                             static_bl_desc.extra_bits = extra_blbits;
                                                                             #endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */length = 0;for (code = 0; code < LENGTH_CODES - 1; code++) {
        base_length[code] = length;for (n = 0; n < 1 << extra_lbits[code]; n++) {
          _length_code[length++] = code;
        }
      } //Assert (length == 256, "tr_static_init: length != 256");
      /* Note that the length 255 (match length 258) can be represented
         * in two different ways: code 284 + 5 bits or code 285, so we
         * overwrite length_code[255] to use the best encoding:
         */_length_code[length - 1] = code; /* Initialize the mapping dist (0..32K) -> dist code (0..29) */dist = 0;for (code = 0; code < 16; code++) {
        base_dist[code] = dist;for (n = 0; n < 1 << extra_dbits[code]; n++) {
          _dist_code[dist++] = code;
        }
      } //Assert (dist == 256, "tr_static_init: dist != 256");
      dist >>= 7; /* from now on, all distances are divided by 128 */for (; code < D_CODES; code++) {
        base_dist[code] = dist << 7;for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
          _dist_code[256 + dist++] = code;
        }
      } //Assert (dist == 256, "tr_static_init: 256+dist != 512");
      /* Construct the codes of the static literal tree */for (bits = 0; bits <= MAX_BITS; bits++) {
        bl_count[bits] = 0;
      }n = 0;while (n <= 143) {
        static_ltree[n * 2 + 1] /*.Len*/ = 8;n++;bl_count[8]++;
      }while (n <= 255) {
        static_ltree[n * 2 + 1] /*.Len*/ = 9;n++;bl_count[9]++;
      }while (n <= 279) {
        static_ltree[n * 2 + 1] /*.Len*/ = 7;n++;bl_count[7]++;
      }while (n <= 287) {
        static_ltree[n * 2 + 1] /*.Len*/ = 8;n++;bl_count[8]++;
      } /* Codes 286 and 287 do not exist, but we must include them in the
        * tree construction to get a canonical Huffman tree (longest code
        * all ones)
        */gen_codes(static_ltree, L_CODES + 1, bl_count); /* The static distance tree is trivial: */for (n = 0; n < D_CODES; n++) {
        static_dtree[n * 2 + 1] /*.Len*/ = 5;static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
      } // Now data ready and we can init static trees
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS); //static_init_done = true;
    } /* ===========================================================================
      * Initialize a new block.
      */function init_block(s) {
      var n; /* iterates over tree elements */ /* Initialize the trees. */for (n = 0; n < L_CODES; n++) {
        s.dyn_ltree[n * 2] /*.Freq*/ = 0;
      }for (n = 0; n < D_CODES; n++) {
        s.dyn_dtree[n * 2] /*.Freq*/ = 0;
      }for (n = 0; n < BL_CODES; n++) {
        s.bl_tree[n * 2] /*.Freq*/ = 0;
      }s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;s.opt_len = s.static_len = 0;s.last_lit = s.matches = 0;
    } /* ===========================================================================
      * Flush the bit buffer and align the output on a byte boundary
      */function bi_windup(s) {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        //put_byte(s, (Byte)s->bi_buf);
        s.pending_buf[s.pending++] = s.bi_buf;
      }s.bi_buf = 0;s.bi_valid = 0;
    } /* ===========================================================================
      * Copy a stored block, storing first the length and its
      * one's complement if requested.
      */function copy_block(s, buf, len, header) //DeflateState *s;
    //charf    *buf;    /* the input data */
    //unsigned len;     /* its length */
    //int      header;  /* true if block header must be written */
    {
      bi_windup(s); /* align on byte boundary */if (header) {
        put_short(s, len);put_short(s, ~len);
      } //  while (len--) {
      //    put_byte(s, *buf++);
      //  }
      utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);s.pending += len;
    } /* ===========================================================================
      * Compares to subtrees, using the tree depth as tie breaker when
      * the subtrees have equal frequency. This minimizes the worst case length.
      */function smaller(tree, n, m, depth) {
      var _n2 = n * 2;var _m2 = m * 2;return tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ || tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m];
    } /* ===========================================================================
      * Restore the heap property by moving down the tree starting at node k,
      * exchanging a node with the smallest of its two sons if necessary, stopping
      * when the heap property is re-established (each father smaller than its
      * two sons).
      */function pqdownheap(s, tree, k) //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    {
      var v = s.heap[k];var j = k << 1; /* left son of k */while (j <= s.heap_len) {
        /* Set j to the smallest of the two sons: */if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        } /* Exit if v is smaller than both sons */if (smaller(tree, v, s.heap[j], s.depth)) {
          break;
        } /* Exchange v with the smallest son */s.heap[k] = s.heap[j];k = j; /* And continue down the tree, setting j to the left son of k */j <<= 1;
      }s.heap[k] = v;
    } // inlined manually
    // var SMALLEST = 1;
    /* ===========================================================================
     * Send the block data compressed using the given Huffman trees
     */function compress_block(s, ltree, dtree) //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    {
      var dist; /* distance of matched string */var lc; /* match length or unmatched char (if dist == 0) */var lx = 0; /* running index in l_buf */var code; /* the code to send */var extra; /* number of extra bits to send */if (s.last_lit !== 0) {
        do {
          dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];lc = s.pending_buf[s.l_buf + lx];lx++;if (dist === 0) {
            send_code(s, lc, ltree); /* send a literal byte */ //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
          } else {
            /* Here, lc is the match length - MIN_MATCH */code = _length_code[lc];send_code(s, code + LITERALS + 1, ltree); /* send the length code */extra = extra_lbits[code];if (extra !== 0) {
              lc -= base_length[code];send_bits(s, lc, extra); /* send the extra length bits */
            }dist--; /* dist is now the match distance - 1 */code = d_code(dist); //Assert (code < D_CODES, "bad d_code");
            send_code(s, code, dtree); /* send the distance code */extra = extra_dbits[code];if (extra !== 0) {
              dist -= base_dist[code];send_bits(s, dist, extra); /* send the extra distance bits */
            }
          } /* literal or match pair ? */ /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */ //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
          //       "pendingBuf overflow");
        } while (lx < s.last_lit);
      }send_code(s, END_BLOCK, ltree);
    } /* ===========================================================================
      * Construct one Huffman tree and assigns the code bit strings and lengths.
      * Update the total bit length for the current block.
      * IN assertion: the field freq is set for all tree elements.
      * OUT assertions: the fields len and code are set to the optimal bit length
      *     and corresponding code. The length opt_len is updated; static_len is
      *     also updated if stree is not null. The field max_code is set.
      */function build_tree(s, desc) //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    {
      var tree = desc.dyn_tree;var stree = desc.stat_desc.static_tree;var has_stree = desc.stat_desc.has_stree;var elems = desc.stat_desc.elems;var n, m; /* iterate over heap elements */var max_code = -1; /* largest code with non zero frequency */var node; /* new node being created */ /* Construct the initial heap, with least frequent element in
                                                                                                                                                                                                                                                                                              * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
                                                                                                                                                                                                                                                                                              * heap[0] is not used.
                                                                                                                                                                                                                                                                                              */s.heap_len = 0;s.heap_max = HEAP_SIZE;for (n = 0; n < elems; n++) {
        if (tree[n * 2] /*.Freq*/ !== 0) {
          s.heap[++s.heap_len] = max_code = n;s.depth[n] = 0;
        } else {
          tree[n * 2 + 1] /*.Len*/ = 0;
        }
      } /* The pkzip format requires that at least one distance code exists,
        * and that at least one bit should be sent even if there is only one
        * possible code. So to avoid special checks later on we force at least
        * two codes of non zero frequency.
        */while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;tree[node * 2] /*.Freq*/ = 1;s.depth[node] = 0;s.opt_len--;if (has_stree) {
          s.static_len -= stree[node * 2 + 1] /*.Len*/;
        } /* node is 0 or 1 so it does not have extra bits */
      }desc.max_code = max_code; /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
                                 * establish sub-heaps of increasing lengths:
                                 */for (n = s.heap_len >> 1 /*int /2*/; n >= 1; n--) {
        pqdownheap(s, tree, n);
      } /* Construct the Huffman tree by repeatedly combining the least two
        * frequent nodes.
        */node = elems; /* next internal node of the tree */do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/n = s.heap[1 /*SMALLEST*/];s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];pqdownheap(s, tree, 1 /*SMALLEST*/); /***/m = s.heap[1 /*SMALLEST*/]; /* m = node of next least frequency */s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */s.heap[--s.heap_max] = m; /* Create a new node father of n and m */tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node; /* and insert the new node in the heap */s.heap[1 /*SMALLEST*/] = node++;pqdownheap(s, tree, 1 /*SMALLEST*/);
      } while (s.heap_len >= 2);s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/]; /* At this point, the fields freq and dad are set. We can now
                                                                               * generate the bit lengths.
                                                                               */gen_bitlen(s, desc); /* The field len is now set, we can generate the bit codes */gen_codes(tree, max_code, s.bl_count);
    } /* ===========================================================================
      * Scan a literal or distance tree to determine the frequencies of the codes
      * in the bit length tree.
      */function scan_tree(s, tree, max_code) //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    {
      var n; /* iterates over all tree elements */var prevlen = -1; /* last emitted length */var curlen; /* length of current code */var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */var count = 0; /* repeat count of the current code */var max_count = 7; /* max repeat count */var min_count = 4; /* min repeat count */if (nextlen === 0) {
        max_count = 138;min_count = 3;
      }tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */for (n = 0; n <= max_code; n++) {
        curlen = nextlen;nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          s.bl_tree[curlen * 2] /*.Freq*/ += count;
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            s.bl_tree[curlen * 2] /*.Freq*/++;
          }s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
        } else {
          s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
        }count = 0;prevlen = curlen;if (nextlen === 0) {
          max_count = 138;min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;min_count = 3;
        } else {
          max_count = 7;min_count = 4;
        }
      }
    } /* ===========================================================================
      * Send a literal or distance tree in compressed form, using the codes in
      * bl_tree.
      */function send_tree(s, tree, max_code) //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    {
      var n; /* iterates over all tree elements */var prevlen = -1; /* last emitted length */var curlen; /* length of current code */var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */var count = 0; /* repeat count of the current code */var max_count = 7; /* max repeat count */var min_count = 4; /* min repeat count */ /* tree[max_code+1].Len = -1; */ /* guard already set */if (nextlen === 0) {
        max_count = 138;min_count = 3;
      }for (n = 0; n <= max_code; n++) {
        curlen = nextlen;nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          do {
            send_code(s, curlen, s.bl_tree);
          } while (--count !== 0);
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);count--;
          } //Assert(count >= 3 && count <= 6, " 3_6?");
          send_code(s, REP_3_6, s.bl_tree);send_bits(s, count - 3, 2);
        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);send_bits(s, count - 3, 3);
        } else {
          send_code(s, REPZ_11_138, s.bl_tree);send_bits(s, count - 11, 7);
        }count = 0;prevlen = curlen;if (nextlen === 0) {
          max_count = 138;min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;min_count = 3;
        } else {
          max_count = 7;min_count = 4;
        }
      }
    } /* ===========================================================================
      * Construct the Huffman tree for the bit lengths and return the index in
      * bl_order of the last bit length code to send.
      */function build_bl_tree(s) {
      var max_blindex; /* index of last bit length code of non zero freq */ /* Determine the bit length frequencies for literal and distance trees */scan_tree(s, s.dyn_ltree, s.l_desc.max_code);scan_tree(s, s.dyn_dtree, s.d_desc.max_code); /* Build the bit length tree: */build_tree(s, s.bl_desc); /* opt_len now includes the length of the tree representations, except
                                                                                                                                                                                                                                                                                                          * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
                                                                                                                                                                                                                                                                                                          */ /* Determine the number of bit length codes to send. The pkzip format
                                                                                                                                                                                                                                                                                                             * requires that at least 4 bit length codes be sent. (appnote.txt says
                                                                                                                                                                                                                                                                                                             * 3 but the actual value used is 4.)
                                                                                                                                                                                                                                                                                                             */for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
          break;
        }
      } /* Update opt_len to include the bit length tree and counts */s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4; //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
      //        s->opt_len, s->static_len));
      return max_blindex;
    } /* ===========================================================================
      * Send the header for a block using dynamic Huffman trees: the counts, the
      * lengths of the bit length codes, the literal tree and the distance tree.
      * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
      */function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    {
      var rank; /* index in bl_order */ //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
      //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
      //        "too many codes");
      //Tracev((stderr, "\nbl counts: "));
      send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */send_bits(s, dcodes - 1, 5);send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */for (rank = 0; rank < blcodes; rank++) {
        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/, 3);
      } //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
      send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */ //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
      send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */ //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
    } /* ===========================================================================
      * Check if the data type is TEXT or BINARY, using the following algorithm:
      * - TEXT if the two conditions below are satisfied:
      *    a) There are no non-portable control characters belonging to the
      *       "black list" (0..6, 14..25, 28..31).
      *    b) There is at least one printable character belonging to the
      *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
      * - BINARY otherwise.
      * - The following partially-portable control characters form a
      *   "gray list" that is ignored in this detection algorithm:
      *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
      * IN assertion: the fields Freq of dyn_ltree are set.
      */function detect_data_type(s) {
      /* black_mask is the bit mask of black-listed bytes
      * set bits 0..6, 14..25, and 28..31
      * 0xf3ffc07f = binary 11110011111111111100000001111111
      */var black_mask = 0xf3ffc07f;var n; /* Check for non-textual ("black-listed") bytes. */for (n = 0; n <= 31; n++, black_mask >>>= 1) {
        if (black_mask & 1 && s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
          return Z_BINARY;
        }
      } /* Check for textual ("white-listed") bytes. */if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
        return Z_TEXT;
      }for (n = 32; n < LITERALS; n++) {
        if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
          return Z_TEXT;
        }
      } /* There are no "black-listed" or "white-listed" bytes:
        * this stream either is empty or has tolerated ("gray-listed") bytes only.
        */return Z_BINARY;
    }var static_init_done = false; /* ===========================================================================
                                   * Initialize the tree data structures for a new zlib stream.
                                   */function _tr_init(s) {
      if (!static_init_done) {
        tr_static_init();static_init_done = true;
      }s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);s.bi_buf = 0;s.bi_valid = 0; /* Initialize the first block of the first file: */init_block(s);
    } /* ===========================================================================
      * Send a stored block
      */function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */copy_block(s, buf, stored_len, true); /* with header */
    } /* ===========================================================================
      * Send one empty static block to give enough lookahead for inflate.
      * This takes 10 bits, of which 7 may remain in the bit buffer.
      */function _tr_align(s) {
      send_bits(s, STATIC_TREES << 1, 3);send_code(s, END_BLOCK, static_ltree);bi_flush(s);
    } /* ===========================================================================
      * Determine the best encoding for the current block: dynamic trees, static
      * trees or store, and output the encoded block to the zip file.
      */function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      var opt_lenb, static_lenb; /* opt_len and static_len in bytes */var max_blindex = 0; /* index of last bit length code of non zero freq */ /* Build the Huffman trees unless a stored block is forced */if (s.level > 0) {
        /* Check if the file is binary or text */if (s.strm.data_type === Z_UNKNOWN) {
          s.strm.data_type = detect_data_type(s);
        } /* Construct the literal and distance trees */build_tree(s, s.l_desc); // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        build_tree(s, s.d_desc); // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
             * the compressed block data, excluding the tree representations.
             */ /* Build the bit length tree for the above two trees, and get the index
                * in bl_order of the last bit length code to send.
                */max_blindex = build_bl_tree(s); /* Determine the best encoding. Compute the block lengths in bytes. */opt_lenb = s.opt_len + 3 + 7 >>> 3;static_lenb = s.static_len + 3 + 7 >>> 3; // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->last_lit));
        if (static_lenb <= opt_lenb) {
          opt_lenb = static_lenb;
        }
      } else {
        // Assert(buf != (char*)0, "lost buf");
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
      }if (stored_len + 4 <= opt_lenb && buf !== -1) {
        /* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
                                           * Otherwise we can't have processed more than WSIZE input bytes since
                                           * the last block flush, because compression would have been
                                           * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
                                           * transform a block into a stored block.
                                           */_tr_stored_block(s, buf, stored_len, last);
      } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);compress_block(s, static_ltree, static_dtree);
      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);compress_block(s, s.dyn_ltree, s.dyn_dtree);
      } // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
      /* The above check is made mod 2^32, for files larger than 512 MB
         * and uLong implemented on 32 bits.
         */init_block(s);if (last) {
        bi_windup(s);
      } // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
      //       s->compressed_len-7*last));
    } /* ===========================================================================
      * Save the match info and tally the frequency counts. Return true if
      * the current block must be flushed.
      */function _tr_tally(s, dist, lc) //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    {
      //var out_length, in_length, dcode;
      s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;s.last_lit++;if (dist === 0) {
        /* lc is the unmatched char */s.dyn_ltree[lc * 2] /*.Freq*/++;
      } else {
        s.matches++; /* Here, lc is the match length - MIN_MATCH */dist--; /* dist = match distance - 1 */ //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
      } // (!) This block is disabled in zlib defailts,
      // don't enable it for binary compatibility
      //#ifdef TRUNCATE_BLOCK
      //  /* Try to guess if it is profitable to stop the current block here */
      //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
      //    /* Compute an upper bound for the compressed length */
      //    out_length = s.last_lit*8;
      //    in_length = s.strstart - s.block_start;
      //
      //    for (dcode = 0; dcode < D_CODES; dcode++) {
      //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
      //    }
      //    out_length >>>= 3;
      //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
      //    //       s->last_lit, in_length, out_length,
      //    //       100L - out_length*100L/in_length));
      //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
      //      return true;
      //    }
      //  }
      //#endif
      return s.last_lit === s.lit_bufsize - 1; /* We avoid equality with lit_bufsize because of wraparound at 64K
                                               * on 16 bit machines and because stored blocks are restricted to
                                               * 64K-1 bytes.
                                               */
    }exports._tr_init = _tr_init;exports._tr_stored_block = _tr_stored_block;exports._tr_flush_block = _tr_flush_block;exports._tr_tally = _tr_tally;exports._tr_align = _tr_align;
  }, { "../utils/common": 43 }], 53: [function (require, module, exports) {
    'use strict';
    function ZStream() {
      /* next input byte */this.input = null; // JS specific, because we have no pointers
      this.next_in = 0; /* number of bytes available at input */this.avail_in = 0; /* total number of input bytes read so far */this.total_in = 0; /* next output byte should be put there */this.output = null; // JS specific, because we have no pointers
      this.next_out = 0; /* remaining free space at output */this.avail_out = 0; /* total number of bytes output so far */this.total_out = 0; /* last error message, NULL if no error */this.msg = '' /*Z_NULL*/; /* not visible by applications */this.state = null; /* best guess about the data type: binary or text */this.data_type = 2 /*Z_UNKNOWN*/; /* adler32 value of the uncompressed data */this.adler = 0;
    }module.exports = ZStream;
  }, {}], 54: [function (require, module, exports) {
    module.exports = function parseBMFontAscii(data) {
      if (!data) throw new Error('no data provided');data = data.toString().trim();var output = { pages: [], chars: [], kernings: [] };var lines = data.split(/\r\n?|\n/g);if (lines.length === 0) throw new Error('no data in BMFont file');for (var i = 0; i < lines.length; i++) {
        var lineData = splitLine(lines[i], i);if (!lineData) //skip empty lines
          continue;if (lineData.key === 'page') {
          if (typeof lineData.data.id !== 'number') throw new Error('malformed file at line ' + i + ' -- needs page id=N');if (typeof lineData.data.file !== 'string') throw new Error('malformed file at line ' + i + ' -- needs page file="path"');output.pages[lineData.data.id] = lineData.data.file;
        } else if (lineData.key === 'chars' || lineData.key === 'kernings') {//... do nothing for these two ...
        } else if (lineData.key === 'char') {
          output.chars.push(lineData.data);
        } else if (lineData.key === 'kerning') {
          output.kernings.push(lineData.data);
        } else {
          output[lineData.key] = lineData.data;
        }
      }return output;
    };function splitLine(line, idx) {
      line = line.replace(/\t+/g, ' ').trim();if (!line) return null;var space = line.indexOf(' ');if (space === -1) throw new Error("no named row at line " + idx);var key = line.substring(0, space);line = line.substring(space + 1); //clear "letter" field as it is non-standard and
      //requires additional complexity to parse " / = symbols
      line = line.replace(/letter=[\'\"]\S+[\'\"]/gi, '');line = line.split("=");line = line.map(function (str) {
        return str.trim().match(/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g);
      });var data = [];for (var i = 0; i < line.length; i++) {
        var dt = line[i];if (i === 0) {
          data.push({ key: dt[0], data: "" });
        } else if (i === line.length - 1) {
          data[data.length - 1].data = parseData(dt[0]);
        } else {
          data[data.length - 1].data = parseData(dt[0]);data.push({ key: dt[1], data: "" });
        }
      }var out = { key: key, data: {} };data.forEach(function (v) {
        out.data[v.key] = v.data;
      });return out;
    }function parseData(data) {
      if (!data || data.length === 0) return "";if (data.indexOf('"') === 0 || data.indexOf("'") === 0) return data.substring(1, data.length - 1);if (data.indexOf(',') !== -1) return parseIntList(data);return parseInt(data, 10);
    }function parseIntList(data) {
      return data.split(',').map(function (val) {
        return parseInt(val, 10);
      });
    }
  }, {}], 55: [function (require, module, exports) {
    var HEADER = [66, 77, 70];module.exports = function readBMFontBinary(buf) {
      if (buf.length < 6) throw new Error('invalid buffer length for BMFont');var header = HEADER.every(function (byte, i) {
        return buf.readUInt8(i) === byte;
      });if (!header) throw new Error('BMFont missing BMF byte header');var i = 3;var vers = buf.readUInt8(i++);if (vers > 3) throw new Error('Only supports BMFont Binary v3 (BMFont App v1.10)');var target = { kernings: [], chars: [] };for (var b = 0; b < 5; b++) {
        i += readBlock(target, buf, i);
      }return target;
    };function readBlock(target, buf, i) {
      if (i > buf.length - 1) return 0;var blockID = buf.readUInt8(i++);var blockSize = buf.readInt32LE(i);i += 4;switch (blockID) {case 1:
          target.info = readInfo(buf, i);break;case 2:
          target.common = readCommon(buf, i);break;case 3:
          target.pages = readPages(buf, i, blockSize);break;case 4:
          target.chars = readChars(buf, i, blockSize);break;case 5:
          target.kernings = readKernings(buf, i, blockSize);break;}return 5 + blockSize;
    }function readInfo(buf, i) {
      var info = {};info.size = buf.readInt16LE(i);var bitField = buf.readUInt8(i + 2);info.smooth = bitField >> 7 & 1;info.unicode = bitField >> 6 & 1;info.italic = bitField >> 5 & 1;info.bold = bitField >> 4 & 1; //fixedHeight is only mentioned in binary spec 
      if (bitField >> 3 & 1) info.fixedHeight = 1;info.charset = buf.readUInt8(i + 3) || '';info.stretchH = buf.readUInt16LE(i + 4);info.aa = buf.readUInt8(i + 6);info.padding = [buf.readInt8(i + 7), buf.readInt8(i + 8), buf.readInt8(i + 9), buf.readInt8(i + 10)];info.spacing = [buf.readInt8(i + 11), buf.readInt8(i + 12)];info.outline = buf.readUInt8(i + 13);info.face = readStringNT(buf, i + 14);return info;
    }function readCommon(buf, i) {
      var common = {};common.lineHeight = buf.readUInt16LE(i);common.base = buf.readUInt16LE(i + 2);common.scaleW = buf.readUInt16LE(i + 4);common.scaleH = buf.readUInt16LE(i + 6);common.pages = buf.readUInt16LE(i + 8);var bitField = buf.readUInt8(i + 10);common.packed = 0;common.alphaChnl = buf.readUInt8(i + 11);common.redChnl = buf.readUInt8(i + 12);common.greenChnl = buf.readUInt8(i + 13);common.blueChnl = buf.readUInt8(i + 14);return common;
    }function readPages(buf, i, size) {
      var pages = [];var text = readNameNT(buf, i);var len = text.length + 1;var count = size / len;for (var c = 0; c < count; c++) {
        pages[c] = buf.slice(i, i + text.length).toString('utf8');i += len;
      }return pages;
    }function readChars(buf, i, blockSize) {
      var chars = [];var count = blockSize / 20;for (var c = 0; c < count; c++) {
        var char = {};var off = c * 20;char.id = buf.readUInt32LE(i + 0 + off);char.x = buf.readUInt16LE(i + 4 + off);char.y = buf.readUInt16LE(i + 6 + off);char.width = buf.readUInt16LE(i + 8 + off);char.height = buf.readUInt16LE(i + 10 + off);char.xoffset = buf.readInt16LE(i + 12 + off);char.yoffset = buf.readInt16LE(i + 14 + off);char.xadvance = buf.readInt16LE(i + 16 + off);char.page = buf.readUInt8(i + 18 + off);char.chnl = buf.readUInt8(i + 19 + off);chars[c] = char;
      }return chars;
    }function readKernings(buf, i, blockSize) {
      var kernings = [];var count = blockSize / 10;for (var c = 0; c < count; c++) {
        var kern = {};var off = c * 10;kern.first = buf.readUInt32LE(i + 0 + off);kern.second = buf.readUInt32LE(i + 4 + off);kern.amount = buf.readInt16LE(i + 8 + off);kernings[c] = kern;
      }return kernings;
    }function readNameNT(buf, offset) {
      var pos = offset;for (; pos < buf.length; pos++) {
        if (buf[pos] === 0x00) break;
      }return buf.slice(offset, pos);
    }function readStringNT(buf, offset) {
      return readNameNT(buf, offset).toString('utf8');
    }
  }, {}], 56: [function (require, module, exports) {
    var parseAttributes = require('./parse-attribs');var parseFromString = require('xml-parse-from-string'); //In some cases element.attribute.nodeName can return
    //all lowercase values.. so we need to map them to the correct 
    //case
    var NAME_MAP = { scaleh: 'scaleH', scalew: 'scaleW', stretchh: 'stretchH', lineheight: 'lineHeight', alphachnl: 'alphaChnl', redchnl: 'redChnl', greenchnl: 'greenChnl', bluechnl: 'blueChnl' };module.exports = function parse(data) {
      data = data.toString();var xmlRoot = parseFromString(data);var output = { pages: [], chars: [], kernings: [] //get config settings
      };['info', 'common'].forEach(function (key) {
        var element = xmlRoot.getElementsByTagName(key)[0];if (element) output[key] = parseAttributes(getAttribs(element));
      }); //get page info
      var pageRoot = xmlRoot.getElementsByTagName('pages')[0];if (!pageRoot) throw new Error('malformed file -- no <pages> element');var pages = pageRoot.getElementsByTagName('page');for (var i = 0; i < pages.length; i++) {
        var p = pages[i];var id = parseInt(p.getAttribute('id'), 10);var file = p.getAttribute('file');if (isNaN(id)) throw new Error('malformed file -- page "id" attribute is NaN');if (!file) throw new Error('malformed file -- needs page "file" attribute');output.pages[parseInt(id, 10)] = file;
      } //get kernings / chars
      ;['chars', 'kernings'].forEach(function (key) {
        var element = xmlRoot.getElementsByTagName(key)[0];if (!element) return;var childTag = key.substring(0, key.length - 1);var children = element.getElementsByTagName(childTag);for (var i = 0; i < children.length; i++) {
          var child = children[i];output[key].push(parseAttributes(getAttribs(child)));
        }
      });return output;
    };function getAttribs(element) {
      var attribs = getAttribList(element);return attribs.reduce(function (dict, attrib) {
        var key = mapName(attrib.nodeName);dict[key] = attrib.nodeValue;return dict;
      }, {});
    }function getAttribList(element) {
      //IE8+ and modern browsers
      var attribs = [];for (var i = 0; i < element.attributes.length; i++) {
        attribs.push(element.attributes[i]);
      }return attribs;
    }function mapName(nodeName) {
      return NAME_MAP[nodeName.toLowerCase()] || nodeName;
    }
  }, { "./parse-attribs": 57, "xml-parse-from-string": 105 }], 57: [function (require, module, exports) {
    //Some versions of GlyphDesigner have a typo
    //that causes some bugs with parsing. 
    //Need to confirm with recent version of the software
    //to see whether this is still an issue or not.
    var GLYPH_DESIGNER_ERROR = 'chasrset';module.exports = function parseAttributes(obj) {
      if (GLYPH_DESIGNER_ERROR in obj) {
        obj['charset'] = obj[GLYPH_DESIGNER_ERROR];delete obj[GLYPH_DESIGNER_ERROR];
      }for (var k in obj) {
        if (k === 'face' || k === 'charset') continue;else if (k === 'padding' || k === 'spacing') obj[k] = parseIntList(obj[k]);else obj[k] = parseInt(obj[k], 10);
      }return obj;
    };function parseIntList(data) {
      return data.split(',').map(function (val) {
        return parseInt(val, 10);
      });
    }
  }, {}], 58: [function (require, module, exports) {
    var trim = require('trim'),
        forEach = require('for-each'),
        isArray = function isArray(arg) {
      return Object.prototype.toString.call(arg) === '[object Array]';
    };module.exports = function (headers) {
      if (!headers) return {};var result = {};forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'),
            key = trim(row.slice(0, index)).toLowerCase(),
            value = trim(row.slice(index + 1));if (typeof result[key] === 'undefined') {
          result[key] = value;
        } else if (isArray(result[key])) {
          result[key].push(value);
        } else {
          result[key] = [result[key], value];
        }
      });return result;
    };
  }, { "for-each": 28, "trim": 99 }], 59: [function (require, module, exports) {
    (function (process) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // resolves . and .. elements in a path array with directory names there
      // must be no slashes, empty elements, or device names (c:\) in the array
      // (so also no leading and trailing slashes - it does not distinguish
      // relative and absolute paths)
      function normalizeArray(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);up++;
          } else if (up) {
            parts.splice(i, 1);up--;
          }
        } // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }return parts;
      } // Split a filename into [root, dir, basename, ext], unix version
      // 'root' is just a slash, or nothing.
      var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;var splitPath = function splitPath(filename) {
        return splitPathRe.exec(filename).slice(1);
      }; // path.resolve([from ...], to)
      // posix version
      exports.resolve = function () {
        var resolvedPath = '',
            resolvedAbsolute = false;for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }resolvedPath = path + '/' + resolvedPath;resolvedAbsolute = path.charAt(0) === '/';
        } // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
          return !!p;
        }), !resolvedAbsolute).join('/');return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
      }; // path.normalize(path)
      // posix version
      exports.normalize = function (path) {
        var isAbsolute = exports.isAbsolute(path),
            trailingSlash = substr(path, -1) === '/'; // Normalize the path
        path = normalizeArray(filter(path.split('/'), function (p) {
          return !!p;
        }), !isAbsolute).join('/');if (!path && !isAbsolute) {
          path = '.';
        }if (path && trailingSlash) {
          path += '/';
        }return (isAbsolute ? '/' : '') + path;
      }; // posix version
      exports.isAbsolute = function (path) {
        return path.charAt(0) === '/';
      }; // posix version
      exports.join = function () {
        var paths = Array.prototype.slice.call(arguments, 0);return exports.normalize(filter(paths, function (p, index) {
          if (typeof p !== 'string') {
            throw new TypeError('Arguments to path.join must be strings');
          }return p;
        }).join('/'));
      }; // path.relative(from, to)
      // posix version
      exports.relative = function (from, to) {
        from = exports.resolve(from).substr(1);to = exports.resolve(to).substr(1);function trim(arr) {
          var start = 0;for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }var end = arr.length - 1;for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }if (start > end) return [];return arr.slice(start, end - start + 1);
        }var fromParts = trim(from.split('/'));var toParts = trim(to.split('/'));var length = Math.min(fromParts.length, toParts.length);var samePartsLength = length;for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;break;
          }
        }var outputParts = [];for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }outputParts = outputParts.concat(toParts.slice(samePartsLength));return outputParts.join('/');
      };exports.sep = '/';exports.delimiter = ':';exports.dirname = function (path) {
        var result = splitPath(path),
            root = result[0],
            dir = result[1];if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }return root + dir;
      };exports.basename = function (path, ext) {
        var f = splitPath(path)[2]; // TODO: make this comparison case-insensitive on windows?
        if (ext && f.substr(-1 * ext.length) === ext) {
          f = f.substr(0, f.length - ext.length);
        }return f;
      };exports.extname = function (path) {
        return splitPath(path)[3];
      };function filter(xs, f) {
        if (xs.filter) return xs.filter(f);var res = [];for (var i = 0; i < xs.length; i++) {
          if (f(xs[i], i, xs)) res.push(xs[i]);
        }return res;
      } // String.prototype.substr - negative index don't work in IE8
      var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
        return str.substr(start, len);
      } : function (str, start, len) {
        if (start < 0) start = str.length + start;return str.substr(start, len);
      };
    }).call(this, require('_process'));
  }, { "_process": 12 }], 60: [function (require, module, exports) {
    'use strict';
    module.exports = pixelmatch;function pixelmatch(img1, img2, output, width, height, options) {
      if (!options) options = {};var threshold = options.threshold === undefined ? 0.1 : options.threshold; // maximum acceptable square distance between two colors;
      // 35215 is the maximum possible value for the YIQ difference metric
      var maxDelta = 35215 * threshold * threshold,
          diff = 0; // compare each pixel of one image against the other one
      for (var y = 0; y < height; y++) {
        for (var x = 0; x < width; x++) {
          var pos = (y * width + x) * 4; // squared YUV distance between colors at this pixel position
          var delta = colorDelta(img1, img2, pos, pos); // the color difference is above the threshold
          if (delta > maxDelta) {
            // check it's a real rendering difference or just anti-aliasing
            if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) || antialiased(img2, x, y, width, height, img1))) {
              // one of the pixels is anti-aliasing; draw as yellow and do not count as difference
              if (output) drawPixel(output, pos, 255, 255, 0);
            } else {
              // found substantial difference not caused by anti-aliasing; draw it as red
              if (output) drawPixel(output, pos, 255, 0, 0);diff++;
            }
          } else if (output) {
            // pixels are similar; draw background as grayscale image blended with white
            var val = blend(grayPixel(img1, pos), 0.1);drawPixel(output, pos, val, val, val);
          }
        }
      } // return the number of different pixels
      return diff;
    } // check if a pixel is likely a part of anti-aliasing;
    // based on "Anti-aliased Pixel and Intensity Slope Detector" paper by V. Vysniauskas, 2009
    function antialiased(img, x1, y1, width, height, img2) {
      var x0 = Math.max(x1 - 1, 0),
          y0 = Math.max(y1 - 1, 0),
          x2 = Math.min(x1 + 1, width - 1),
          y2 = Math.min(y1 + 1, height - 1),
          pos = (y1 * width + x1) * 4,
          zeroes = 0,
          positives = 0,
          negatives = 0,
          min = 0,
          max = 0,
          minX,
          minY,
          maxX,
          maxY; // go through 8 adjacent pixels
      for (var x = x0; x <= x2; x++) {
        for (var y = y0; y <= y2; y++) {
          if (x === x1 && y === y1) continue; // brightness delta between the center pixel and adjacent one
          var delta = colorDelta(img, img, pos, (y * width + x) * 4, true); // count the number of equal, darker and brighter adjacent pixels
          if (delta === 0) zeroes++;else if (delta < 0) negatives++;else if (delta > 0) positives++; // if found more than 2 equal siblings, it's definitely not anti-aliasing
          if (zeroes > 2) return false;if (!img2) continue; // remember the darkest pixel
          if (delta < min) {
            min = delta;minX = x;minY = y;
          } // remember the brightest pixel
          if (delta > max) {
            max = delta;maxX = x;maxY = y;
          }
        }
      }if (!img2) return true; // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing
      if (negatives === 0 || positives === 0) return false; // if either the darkest or the brightest pixel has more than 2 equal siblings in both images
      // (definitely not anti-aliased), this pixel is anti-aliased
      return !antialiased(img, minX, minY, width, height) && !antialiased(img2, minX, minY, width, height) || !antialiased(img, maxX, maxY, width, height) && !antialiased(img2, maxX, maxY, width, height);
    } // calculate color difference according to the paper "Measuring perceived color difference
    // using YIQ NTSC transmission color space in mobile applications" by Y. Kotsarenko and F. Ramos
    function colorDelta(img1, img2, k, m, yOnly) {
      var a1 = img1[k + 3] / 255,
          a2 = img2[m + 3] / 255,
          r1 = blend(img1[k + 0], a1),
          g1 = blend(img1[k + 1], a1),
          b1 = blend(img1[k + 2], a1),
          r2 = blend(img2[m + 0], a2),
          g2 = blend(img2[m + 1], a2),
          b2 = blend(img2[m + 2], a2),
          y = rgb2y(r1, g1, b1) - rgb2y(r2, g2, b2);if (yOnly) return y; // brightness difference only
      var i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2),
          q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);return 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;
    }function rgb2y(r, g, b) {
      return r * 0.29889531 + g * 0.58662247 + b * 0.11448223;
    }function rgb2i(r, g, b) {
      return r * 0.59597799 - g * 0.27417610 - b * 0.32180189;
    }function rgb2q(r, g, b) {
      return r * 0.21147017 - g * 0.52261711 + b * 0.31114694;
    } // blend semi-transparent color with white
    function blend(c, a) {
      return 255 + (c - 255) * a;
    }function drawPixel(output, pos, r, g, b) {
      output[pos + 0] = r;output[pos + 1] = g;output[pos + 2] = b;output[pos + 3] = 255;
    }function grayPixel(img, i) {
      var a = img[i + 3] / 255,
          r = blend(img[i + 0], a),
          g = blend(img[i + 1], a),
          b = blend(img[i + 2], a);return rgb2y(r, g, b);
    }
  }, {}], 61: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var interlaceUtils = require('./interlace');var pixelBppMap = { 1: { // L
          0: 0, 1: 0, 2: 0, 3: 0xff }, 2: { // LA
          0: 0, 1: 0, 2: 0, 3: 1 }, 3: { // RGB
          0: 0, 1: 1, 2: 2, 3: 0xff }, 4: { // RGBA
          0: 0, 1: 1, 2: 2, 3: 3 } };function bitRetriever(data, depth) {
        var leftOver = [];var i = 0;function split() {
          if (i === data.length) {
            throw new Error('Ran out of data');
          }var byte = data[i];i++;var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;switch (depth) {default:
              throw new Error('unrecognised depth');case 16:
              byte2 = data[i];i++;leftOver.push((byte << 8) + byte2);break;case 4:
              byte2 = byte & 0x0f;byte1 = byte >> 4;leftOver.push(byte1, byte2);break;case 2:
              byte4 = byte & 3;byte3 = byte >> 2 & 3;byte2 = byte >> 4 & 3;byte1 = byte >> 6 & 3;leftOver.push(byte1, byte2, byte3, byte4);break;case 1:
              byte8 = byte & 1;byte7 = byte >> 1 & 1;byte6 = byte >> 2 & 1;byte5 = byte >> 3 & 1;byte4 = byte >> 4 & 1;byte3 = byte >> 5 & 1;byte2 = byte >> 6 & 1;byte1 = byte >> 7 & 1;leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);break;}
        }return { get: function get(count) {
            while (leftOver.length < count) {
              split();
            }var returner = leftOver.slice(0, count);leftOver = leftOver.slice(count);return returner;
          }, resetAfterLine: function resetAfterLine() {
            leftOver.length = 0;
          }, end: function end() {
            if (i !== data.length) {
              throw new Error('extra data found');
            }
          } };
      }function mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {
        // eslint-disable-line max-params
        var imageWidth = image.width;var imageHeight = image.height;var imagePass = image.index;for (var y = 0; y < imageHeight; y++) {
          for (var x = 0; x < imageWidth; x++) {
            var pxPos = getPxPos(x, y, imagePass);for (var i = 0; i < 4; i++) {
              var idx = pixelBppMap[bpp][i];if (i === data.length) {
                throw new Error('Ran out of data');
              }pxData[pxPos + i] = idx !== 0xff ? data[idx + rawPos] : 0xff;
            }rawPos += bpp; //eslint-disable-line no-param-reassign
          }
        }return rawPos;
      }function mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {
        // eslint-disable-line max-params
        var imageWidth = image.width;var imageHeight = image.height;var imagePass = image.index;for (var y = 0; y < imageHeight; y++) {
          for (var x = 0; x < imageWidth; x++) {
            var pixelData = bits.get(bpp);var pxPos = getPxPos(x, y, imagePass);for (var i = 0; i < 4; i++) {
              var idx = pixelBppMap[bpp][i];pxData[pxPos + i] = idx !== 0xff ? pixelData[idx] : maxBit;
            }
          }bits.resetAfterLine();
        }
      }exports.dataToBitMap = function (data, bitmapInfo) {
        var width = bitmapInfo.width;var height = bitmapInfo.height;var depth = bitmapInfo.depth;var bpp = bitmapInfo.bpp;var interlace = bitmapInfo.interlace;if (depth !== 8) {
          var bits = bitRetriever(data, depth);
        }var pxData;if (depth <= 8) {
          pxData = new Buffer(width * height * 4);
        } else {
          pxData = new Uint16Array(width * height * 4);
        }var maxBit = Math.pow(2, depth) - 1;var rawPos = 0;var images;var getPxPos;if (interlace) {
          images = interlaceUtils.getImagePasses(width, height);getPxPos = interlaceUtils.getInterlaceIterator(width, height);
        } else {
          var nonInterlacedPxPos = 0;getPxPos = function getPxPos() {
            var returner = nonInterlacedPxPos;nonInterlacedPxPos += 4;return returner;
          };images = [{ width: width, height: height }];
        }for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {
          if (depth === 8) {
            rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);
          } else {
            mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);
          }
        }if (depth === 8) {
          if (rawPos !== data.length) {
            throw new Error('extra data found');
          }
        } else {
          bits.end();
        }return pxData;
      };
    }).call(this, require("buffer").Buffer);
  }, { "./interlace": 71, "buffer": 14 }], 62: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var constants = require('./constants');module.exports = function (data, width, height, options) {
        var outHasAlpha = options.colorType === constants.COLORTYPE_COLOR_ALPHA;if (options.inputHasAlpha && outHasAlpha) {
          return data;
        }if (!options.inputHasAlpha && !outHasAlpha) {
          return data;
        }var outBpp = outHasAlpha ? 4 : 3;var outData = new Buffer(width * height * outBpp);var inBpp = options.inputHasAlpha ? 4 : 3;var inIndex = 0;var outIndex = 0;var bgColor = options.bgColor || {};if (bgColor.red === undefined) {
          bgColor.red = 255;
        }if (bgColor.green === undefined) {
          bgColor.green = 255;
        }if (bgColor.blue === undefined) {
          bgColor.blue = 255;
        }for (var y = 0; y < height; y++) {
          for (var x = 0; x < width; x++) {
            var red = data[inIndex];var green = data[inIndex + 1];var blue = data[inIndex + 2];var alpha;if (options.inputHasAlpha) {
              alpha = data[inIndex + 3];if (!outHasAlpha) {
                alpha /= 255;red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), 255);green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), 255);blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), 255);
              }
            } else {
              alpha = 255;
            }outData[outIndex] = red;outData[outIndex + 1] = green;outData[outIndex + 2] = blue;if (outHasAlpha) {
              outData[outIndex + 3] = alpha;
            }inIndex += inBpp;outIndex += outBpp;
          }
        }return outData;
      };
    }).call(this, require("buffer").Buffer);
  }, { "./constants": 64, "buffer": 14 }], 63: [function (require, module, exports) {
    (function (process, Buffer) {
      'use strict';
      var util = require('util');var Stream = require('stream');var ChunkStream = module.exports = function () {
        Stream.call(this);this._buffers = [];this._buffered = 0;this._reads = [];this._paused = false;this._encoding = 'utf8';this.writable = true;
      };util.inherits(ChunkStream, Stream);ChunkStream.prototype.read = function (length, callback) {
        this._reads.push({ length: Math.abs(length), // if length < 0 then at most this length
          allowLess: length < 0, func: callback });process.nextTick(function () {
          this._process(); // its paused and there is not enought data then ask for more
          if (this._paused && this._reads.length > 0) {
            this._paused = false;this.emit('drain');
          }
        }.bind(this));
      };ChunkStream.prototype.write = function (data, encoding) {
        if (!this.writable) {
          this.emit('error', new Error('Stream not writable'));return false;
        }var dataBuffer;if (Buffer.isBuffer(data)) {
          dataBuffer = data;
        } else {
          dataBuffer = new Buffer(data, encoding || this._encoding);
        }this._buffers.push(dataBuffer);this._buffered += dataBuffer.length;this._process(); // ok if there are no more read requests
        if (this._reads && this._reads.length === 0) {
          this._paused = true;
        }return this.writable && !this._paused;
      };ChunkStream.prototype.end = function (data, encoding) {
        if (data) {
          this.write(data, encoding);
        }this.writable = false; // already destroyed
        if (!this._buffers) {
          return;
        } // enqueue or handle end
        if (this._buffers.length === 0) {
          this._end();
        } else {
          this._buffers.push(null);this._process();
        }
      };ChunkStream.prototype.destroySoon = ChunkStream.prototype.end;ChunkStream.prototype._end = function () {
        if (this._reads.length > 0) {
          this.emit('error', new Error('There are some read requests waiting on finished stream'));
        }this.destroy();
      };ChunkStream.prototype.destroy = function () {
        if (!this._buffers) {
          return;
        }this.writable = false;this._reads = null;this._buffers = null;this.emit('close');
      };ChunkStream.prototype._processReadAllowingLess = function (read) {
        // ok there is any data so that we can satisfy this request
        this._reads.shift(); // == read
        // first we need to peek into first buffer
        var smallerBuf = this._buffers[0]; // ok there is more data than we need
        if (smallerBuf.length > read.length) {
          this._buffered -= read.length;this._buffers[0] = smallerBuf.slice(read.length);read.func.call(this, smallerBuf.slice(0, read.length));
        } else {
          // ok this is less than maximum length so use it all
          this._buffered -= smallerBuf.length;this._buffers.shift(); // == smallerBuf
          read.func.call(this, smallerBuf);
        }
      };ChunkStream.prototype._processRead = function (read) {
        this._reads.shift(); // == read
        var pos = 0;var count = 0;var data = new Buffer(read.length); // create buffer for all data
        while (pos < read.length) {
          var buf = this._buffers[count++];var len = Math.min(buf.length, read.length - pos);buf.copy(data, pos, 0, len);pos += len; // last buffer wasn't used all so just slice it and leave
          if (len !== buf.length) {
            this._buffers[--count] = buf.slice(len);
          }
        } // remove all used buffers
        if (count > 0) {
          this._buffers.splice(0, count);
        }this._buffered -= read.length;read.func.call(this, data);
      };ChunkStream.prototype._process = function () {
        try {
          // as long as there is any data and read requests
          while (this._buffered > 0 && this._reads && this._reads.length > 0) {
            var read = this._reads[0]; // read any data (but no more than length)
            if (read.allowLess) {
              this._processReadAllowingLess(read);
            } else if (this._buffered >= read.length) {
              // ok we can meet some expectations
              this._processRead(read);
            } else {
              // not enought data to satisfy first request in queue
              // so we need to wait for more
              break;
            }
          }if (this._buffers && this._buffers.length > 0 && this._buffers[0] === null) {
            this._end();
          }
        } catch (ex) {
          this.emit('error', ex);
        }
      };
    }).call(this, require('_process'), require("buffer").Buffer);
  }, { "_process": 12, "buffer": 14, "stream": 94, "util": 103 }], 64: [function (require, module, exports) {
    'use strict';
    module.exports = { PNG_SIGNATURE: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a], TYPE_IHDR: 0x49484452, TYPE_IEND: 0x49454e44, TYPE_IDAT: 0x49444154, TYPE_PLTE: 0x504c5445, TYPE_tRNS: 0x74524e53, // eslint-disable-line camelcase
      TYPE_gAMA: 0x67414d41, // eslint-disable-line camelcase
      // color-type bits
      COLORTYPE_GRAYSCALE: 0, COLORTYPE_PALETTE: 1, COLORTYPE_COLOR: 2, COLORTYPE_ALPHA: 4, // e.g. grayscale and alpha
      // color-type combinations
      COLORTYPE_PALETTE_COLOR: 3, COLORTYPE_COLOR_ALPHA: 6, COLORTYPE_TO_BPP_MAP: { 0: 1, 2: 3, 3: 1, 4: 2, 6: 4 }, GAMMA_DIVISION: 100000 };
  }, {}], 65: [function (require, module, exports) {
    'use strict';
    var crcTable = [];(function () {
      for (var i = 0; i < 256; i++) {
        var currentCrc = i;for (var j = 0; j < 8; j++) {
          if (currentCrc & 1) {
            currentCrc = 0xedb88320 ^ currentCrc >>> 1;
          } else {
            currentCrc = currentCrc >>> 1;
          }
        }crcTable[i] = currentCrc;
      }
    })();var CrcCalculator = module.exports = function () {
      this._crc = -1;
    };CrcCalculator.prototype.write = function (data) {
      for (var i = 0; i < data.length; i++) {
        this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;
      }return true;
    };CrcCalculator.prototype.crc32 = function () {
      return this._crc ^ -1;
    };CrcCalculator.crc32 = function (buf) {
      var crc = -1;for (var i = 0; i < buf.length; i++) {
        crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;
      }return crc ^ -1;
    };
  }, {}], 66: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var paethPredictor = require('./paeth-predictor');function filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {
        pxData.copy(rawData, rawPos, pxPos, pxPos + byteWidth);
      }function filterSumNone(pxData, pxPos, byteWidth) {
        var sum = 0;var length = pxPos + byteWidth;for (var i = pxPos; i < length; i++) {
          sum += Math.abs(pxData[i]);
        }return sum;
      }function filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
        for (var x = 0; x < byteWidth; x++) {
          var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;var val = pxData[pxPos + x] - left;rawData[rawPos + x] = val;
        }
      }function filterSumSub(pxData, pxPos, byteWidth, bpp) {
        var sum = 0;for (var x = 0; x < byteWidth; x++) {
          var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;var val = pxData[pxPos + x] - left;sum += Math.abs(val);
        }return sum;
      }function filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {
        for (var x = 0; x < byteWidth; x++) {
          var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;var val = pxData[pxPos + x] - up;rawData[rawPos + x] = val;
        }
      }function filterSumUp(pxData, pxPos, byteWidth) {
        var sum = 0;var length = pxPos + byteWidth;for (var x = pxPos; x < length; x++) {
          var up = pxPos > 0 ? pxData[x - byteWidth] : 0;var val = pxData[x] - up;sum += Math.abs(val);
        }return sum;
      }function filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
        for (var x = 0; x < byteWidth; x++) {
          var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;var val = pxData[pxPos + x] - (left + up >> 1);rawData[rawPos + x] = val;
        }
      }function filterSumAvg(pxData, pxPos, byteWidth, bpp) {
        var sum = 0;for (var x = 0; x < byteWidth; x++) {
          var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;var val = pxData[pxPos + x] - (left + up >> 1);sum += Math.abs(val);
        }return sum;
      }function filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
        for (var x = 0; x < byteWidth; x++) {
          var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);rawData[rawPos + x] = val;
        }
      }function filterSumPaeth(pxData, pxPos, byteWidth, bpp) {
        var sum = 0;for (var x = 0; x < byteWidth; x++) {
          var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);sum += Math.abs(val);
        }return sum;
      }var filters = { 0: filterNone, 1: filterSub, 2: filterUp, 3: filterAvg, 4: filterPaeth };var filterSums = { 0: filterSumNone, 1: filterSumSub, 2: filterSumUp, 3: filterSumAvg, 4: filterSumPaeth };module.exports = function (pxData, width, height, options, bpp) {
        var filterTypes;if (!('filterType' in options) || options.filterType === -1) {
          filterTypes = [0, 1, 2, 3, 4];
        } else if (typeof options.filterType === 'number') {
          filterTypes = [options.filterType];
        } else {
          throw new Error('unrecognised filter types');
        }var byteWidth = width * bpp;var rawPos = 0;var pxPos = 0;var rawData = new Buffer((byteWidth + 1) * height);var sel = filterTypes[0];for (var y = 0; y < height; y++) {
          if (filterTypes.length > 1) {
            // find best filter for this line (with lowest sum of values)
            var min = Infinity;for (var i = 0; i < filterTypes.length; i++) {
              var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);if (sum < min) {
                sel = filterTypes[i];min = sum;
              }
            }
          }rawData[rawPos] = sel;rawPos++;filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);rawPos += byteWidth;pxPos += byteWidth;
        }return rawData;
      };
    }).call(this, require("buffer").Buffer);
  }, { "./paeth-predictor": 75, "buffer": 14 }], 67: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var util = require('util');var ChunkStream = require('./chunkstream');var Filter = require('./filter-parse');var FilterAsync = module.exports = function (bitmapInfo) {
        ChunkStream.call(this);var buffers = [];var that = this;this._filter = new Filter(bitmapInfo, { read: this.read.bind(this), write: function write(buffer) {
            buffers.push(buffer);
          }, complete: function complete() {
            that.emit('complete', Buffer.concat(buffers));
          } });this._filter.start();
      };util.inherits(FilterAsync, ChunkStream);
    }).call(this, require("buffer").Buffer);
  }, { "./chunkstream": 63, "./filter-parse": 69, "buffer": 14, "util": 103 }], 68: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var SyncReader = require('./sync-reader');var Filter = require('./filter-parse');exports.process = function (inBuffer, bitmapInfo) {
        var outBuffers = [];var reader = new SyncReader(inBuffer);var filter = new Filter(bitmapInfo, { read: reader.read.bind(reader), write: function write(bufferPart) {
            outBuffers.push(bufferPart);
          }, complete: function complete() {} });filter.start();reader.process();return Buffer.concat(outBuffers);
      };
    }).call(this, require("buffer").Buffer);
  }, { "./filter-parse": 69, "./sync-reader": 81, "buffer": 14 }], 69: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var interlaceUtils = require('./interlace');var paethPredictor = require('./paeth-predictor');function getByteWidth(width, bpp, depth) {
        var byteWidth = width * bpp;if (depth !== 8) {
          byteWidth = Math.ceil(byteWidth / (8 / depth));
        }return byteWidth;
      }var Filter = module.exports = function (bitmapInfo, dependencies) {
        var width = bitmapInfo.width;var height = bitmapInfo.height;var interlace = bitmapInfo.interlace;var bpp = bitmapInfo.bpp;var depth = bitmapInfo.depth;this.read = dependencies.read;this.write = dependencies.write;this.complete = dependencies.complete;this._imageIndex = 0;this._images = [];if (interlace) {
          var passes = interlaceUtils.getImagePasses(width, height);for (var i = 0; i < passes.length; i++) {
            this._images.push({ byteWidth: getByteWidth(passes[i].width, bpp, depth), height: passes[i].height, lineIndex: 0 });
          }
        } else {
          this._images.push({ byteWidth: getByteWidth(width, bpp, depth), height: height, lineIndex: 0 });
        } // when filtering the line we look at the pixel to the left
        // the spec also says it is done on a byte level regardless of the number of pixels
        // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back
        // a pixel rather than just a different byte part. However if we are sub byte, we ignore.
        if (depth === 8) {
          this._xComparison = bpp;
        } else if (depth === 16) {
          this._xComparison = bpp * 2;
        } else {
          this._xComparison = 1;
        }
      };Filter.prototype.start = function () {
        this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
      };Filter.prototype._unFilterType1 = function (rawData, unfilteredLine, byteWidth) {
        var xComparison = this._xComparison;var xBiggerThan = xComparison - 1;for (var x = 0; x < byteWidth; x++) {
          var rawByte = rawData[1 + x];var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;unfilteredLine[x] = rawByte + f1Left;
        }
      };Filter.prototype._unFilterType2 = function (rawData, unfilteredLine, byteWidth) {
        var lastLine = this._lastLine;for (var x = 0; x < byteWidth; x++) {
          var rawByte = rawData[1 + x];var f2Up = lastLine ? lastLine[x] : 0;unfilteredLine[x] = rawByte + f2Up;
        }
      };Filter.prototype._unFilterType3 = function (rawData, unfilteredLine, byteWidth) {
        var xComparison = this._xComparison;var xBiggerThan = xComparison - 1;var lastLine = this._lastLine;for (var x = 0; x < byteWidth; x++) {
          var rawByte = rawData[1 + x];var f3Up = lastLine ? lastLine[x] : 0;var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;var f3Add = Math.floor((f3Left + f3Up) / 2);unfilteredLine[x] = rawByte + f3Add;
        }
      };Filter.prototype._unFilterType4 = function (rawData, unfilteredLine, byteWidth) {
        var xComparison = this._xComparison;var xBiggerThan = xComparison - 1;var lastLine = this._lastLine;for (var x = 0; x < byteWidth; x++) {
          var rawByte = rawData[1 + x];var f4Up = lastLine ? lastLine[x] : 0;var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;var f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);unfilteredLine[x] = rawByte + f4Add;
        }
      };Filter.prototype._reverseFilterLine = function (rawData) {
        var filter = rawData[0];var unfilteredLine;var currentImage = this._images[this._imageIndex];var byteWidth = currentImage.byteWidth;if (filter === 0) {
          unfilteredLine = rawData.slice(1, byteWidth + 1);
        } else {
          unfilteredLine = new Buffer(byteWidth);switch (filter) {case 1:
              this._unFilterType1(rawData, unfilteredLine, byteWidth);break;case 2:
              this._unFilterType2(rawData, unfilteredLine, byteWidth);break;case 3:
              this._unFilterType3(rawData, unfilteredLine, byteWidth);break;case 4:
              this._unFilterType4(rawData, unfilteredLine, byteWidth);break;default:
              throw new Error('Unrecognised filter type - ' + filter);}
        }this.write(unfilteredLine);currentImage.lineIndex++;if (currentImage.lineIndex >= currentImage.height) {
          this._lastLine = null;this._imageIndex++;currentImage = this._images[this._imageIndex];
        } else {
          this._lastLine = unfilteredLine;
        }if (currentImage) {
          // read, using the byte width that may be from the new current image
          this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));
        } else {
          this._lastLine = null;this.complete();
        }
      };
    }).call(this, require("buffer").Buffer);
  }, { "./interlace": 71, "./paeth-predictor": 75, "buffer": 14 }], 70: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      function dePalette(indata, outdata, width, height, palette) {
        var pxPos = 0; // use values from palette
        for (var y = 0; y < height; y++) {
          for (var x = 0; x < width; x++) {
            var color = palette[indata[pxPos]];if (!color) {
              throw new Error('index ' + indata[pxPos] + ' not in palette');
            }for (var i = 0; i < 4; i++) {
              outdata[pxPos + i] = color[i];
            }pxPos += 4;
          }
        }
      }function replaceTransparentColor(indata, outdata, width, height, transColor) {
        var pxPos = 0;for (var y = 0; y < height; y++) {
          for (var x = 0; x < width; x++) {
            var makeTrans = false;if (transColor.length === 1) {
              if (transColor[0] === indata[pxPos]) {
                makeTrans = true;
              }
            } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {
              makeTrans = true;
            }if (makeTrans) {
              for (var i = 0; i < 4; i++) {
                outdata[pxPos + i] = 0;
              }
            }pxPos += 4;
          }
        }
      }function scaleDepth(indata, outdata, width, height, depth) {
        var maxOutSample = 255;var maxInSample = Math.pow(2, depth) - 1;var pxPos = 0;for (var y = 0; y < height; y++) {
          for (var x = 0; x < width; x++) {
            for (var i = 0; i < 4; i++) {
              outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);
            }pxPos += 4;
          }
        }
      }module.exports = function (indata, imageData) {
        var depth = imageData.depth;var width = imageData.width;var height = imageData.height;var colorType = imageData.colorType;var transColor = imageData.transColor;var palette = imageData.palette;var outdata = indata; // only different for 16 bits
        if (colorType === 3) {
          // paletted
          dePalette(indata, outdata, width, height, palette);
        } else {
          if (transColor) {
            replaceTransparentColor(indata, outdata, width, height, transColor);
          } // if it needs scaling
          if (depth !== 8) {
            // if we need to change the buffer size
            if (depth === 16) {
              outdata = new Buffer(width * height * 4);
            }scaleDepth(indata, outdata, width, height, depth);
          }
        }return outdata;
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14 }], 71: [function (require, module, exports) {
    'use strict'; // Adam 7
    //   0 1 2 3 4 5 6 7
    // 0 x 6 4 6 x 6 4 6
    // 1 7 7 7 7 7 7 7 7
    // 2 5 6 5 6 5 6 5 6
    // 3 7 7 7 7 7 7 7 7
    // 4 3 6 4 6 3 6 4 6
    // 5 7 7 7 7 7 7 7 7
    // 6 5 6 5 6 5 6 5 6
    // 7 7 7 7 7 7 7 7 7

    var imagePasses = [{ // pass 1 - 1px
      x: [0], y: [0] }, { // pass 2 - 1px
      x: [4], y: [0] }, { // pass 3 - 2px
      x: [0, 4], y: [4] }, { // pass 4 - 4px
      x: [2, 6], y: [0, 4] }, { // pass 5 - 8px
      x: [0, 2, 4, 6], y: [2, 6] }, { // pass 6 - 16px
      x: [1, 3, 5, 7], y: [0, 2, 4, 6] }, { // pass 7 - 32px
      x: [0, 1, 2, 3, 4, 5, 6, 7], y: [1, 3, 5, 7] }];exports.getImagePasses = function (width, height) {
      var images = [];var xLeftOver = width % 8;var yLeftOver = height % 8;var xRepeats = (width - xLeftOver) / 8;var yRepeats = (height - yLeftOver) / 8;for (var i = 0; i < imagePasses.length; i++) {
        var pass = imagePasses[i];var passWidth = xRepeats * pass.x.length;var passHeight = yRepeats * pass.y.length;for (var j = 0; j < pass.x.length; j++) {
          if (pass.x[j] < xLeftOver) {
            passWidth++;
          } else {
            break;
          }
        }for (j = 0; j < pass.y.length; j++) {
          if (pass.y[j] < yLeftOver) {
            passHeight++;
          } else {
            break;
          }
        }if (passWidth > 0 && passHeight > 0) {
          images.push({ width: passWidth, height: passHeight, index: i });
        }
      }return images;
    };exports.getInterlaceIterator = function (width) {
      return function (x, y, pass) {
        var outerXLeftOver = x % imagePasses[pass].x.length;var outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];var outerYLeftOver = y % imagePasses[pass].y.length;var outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];return outerX * 4 + outerY * width * 4;
      };
    };
  }, {}], 72: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var util = require('util');var Stream = require('stream');var constants = require('./constants');var Packer = require('./packer');var PackerAsync = module.exports = function (opt) {
        Stream.call(this);var options = opt || {};this._packer = new Packer(options);this._deflate = this._packer.createDeflate();this.readable = true;
      };util.inherits(PackerAsync, Stream);PackerAsync.prototype.pack = function (data, width, height, gamma) {
        // Signature
        this.emit('data', new Buffer(constants.PNG_SIGNATURE));this.emit('data', this._packer.packIHDR(width, height));if (gamma) {
          this.emit('data', this._packer.packGAMA(gamma));
        }var filteredData = this._packer.filterData(data, width, height); // compress it
        this._deflate.on('error', this.emit.bind(this, 'error'));this._deflate.on('data', function (compressedData) {
          this.emit('data', this._packer.packIDAT(compressedData));
        }.bind(this));this._deflate.on('end', function () {
          this.emit('data', this._packer.packIEND());this.emit('end');
        }.bind(this));this._deflate.end(filteredData);
      };
    }).call(this, require("buffer").Buffer);
  }, { "./constants": 64, "./packer": 74, "buffer": 14, "stream": 94, "util": 103 }], 73: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var hasSyncZlib = true;var zlib = require('zlib');var constants = require('./constants');var Packer = require('./packer');module.exports = function (metaData, opt) {
        if (!hasSyncZlib) {
          throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
        }var options = opt || {};var packer = new Packer(options);var chunks = []; // Signature
        chunks.push(new Buffer(constants.PNG_SIGNATURE)); // Header
        chunks.push(packer.packIHDR(metaData.width, metaData.height));if (metaData.gamma) {
          chunks.push(packer.packGAMA(metaData.gamma));
        }var filteredData = packer.filterData(metaData.data, metaData.width, metaData.height); // compress it
        var compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());filteredData = null;if (!compressedData || !compressedData.length) {
          throw new Error('bad png - invalid compressed data response');
        }chunks.push(packer.packIDAT(compressedData)); // End
        chunks.push(packer.packIEND());return Buffer.concat(chunks);
      };
    }).call(this, require("buffer").Buffer);
  }, { "./constants": 64, "./packer": 74, "buffer": 14, "zlib": 10 }], 74: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var constants = require('./constants');var CrcStream = require('./crc');var bitPacker = require('./bitpacker');var filter = require('./filter-pack');var zlib = require('zlib');var Packer = module.exports = function (options) {
        this._options = options;options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;options.deflateFactory = options.deflateFactory || zlib.createDeflate;options.bitDepth = options.bitDepth || 8;options.colorType = typeof options.colorType === 'number' ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;if (options.colorType !== constants.COLORTYPE_COLOR && options.colorType !== constants.COLORTYPE_COLOR_ALPHA) {
          throw new Error('option color type:' + options.colorType + ' is not supported at present');
        }if (options.bitDepth !== 8) {
          throw new Error('option bit depth:' + options.bitDepth + ' is not supported at present');
        }
      };Packer.prototype.getDeflateOptions = function () {
        return { chunkSize: this._options.deflateChunkSize, level: this._options.deflateLevel, strategy: this._options.deflateStrategy };
      };Packer.prototype.createDeflate = function () {
        return this._options.deflateFactory(this.getDeflateOptions());
      };Packer.prototype.filterData = function (data, width, height) {
        // convert to correct format for filtering (e.g. right bpp and bit depth)
        var packedData = bitPacker(data, width, height, this._options); // filter pixel data
        var bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];var filteredData = filter(packedData, width, height, this._options, bpp);return filteredData;
      };Packer.prototype._packChunk = function (type, data) {
        var len = data ? data.length : 0;var buf = new Buffer(len + 12);buf.writeUInt32BE(len, 0);buf.writeUInt32BE(type, 4);if (data) {
          data.copy(buf, 8);
        }buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);return buf;
      };Packer.prototype.packGAMA = function (gamma) {
        var buf = new Buffer(4);buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);return this._packChunk(constants.TYPE_gAMA, buf);
      };Packer.prototype.packIHDR = function (width, height) {
        var buf = new Buffer(13);buf.writeUInt32BE(width, 0);buf.writeUInt32BE(height, 4);buf[8] = this._options.bitDepth; // Bit depth
        buf[9] = this._options.colorType; // colorType
        buf[10] = 0; // compression
        buf[11] = 0; // filter
        buf[12] = 0; // interlace
        return this._packChunk(constants.TYPE_IHDR, buf);
      };Packer.prototype.packIDAT = function (data) {
        return this._packChunk(constants.TYPE_IDAT, data);
      };Packer.prototype.packIEND = function () {
        return this._packChunk(constants.TYPE_IEND, null);
      };
    }).call(this, require("buffer").Buffer);
  }, { "./bitpacker": 62, "./constants": 64, "./crc": 65, "./filter-pack": 66, "buffer": 14, "zlib": 10 }], 75: [function (require, module, exports) {
    'use strict';
    module.exports = function paethPredictor(left, above, upLeft) {
      var paeth = left + above - upLeft;var pLeft = Math.abs(paeth - left);var pAbove = Math.abs(paeth - above);var pUpLeft = Math.abs(paeth - upLeft);if (pLeft <= pAbove && pLeft <= pUpLeft) {
        return left;
      }if (pAbove <= pUpLeft) {
        return above;
      }return upLeft;
    };
  }, {}], 76: [function (require, module, exports) {
    'use strict';
    var util = require('util');var zlib = require('zlib');var ChunkStream = require('./chunkstream');var FilterAsync = require('./filter-parse-async');var Parser = require('./parser');var bitmapper = require('./bitmapper');var formatNormaliser = require('./format-normaliser');var ParserAsync = module.exports = function (options) {
      ChunkStream.call(this);this._parser = new Parser(options, { read: this.read.bind(this), error: this._handleError.bind(this), metadata: this._handleMetaData.bind(this), gamma: this.emit.bind(this, 'gamma'), palette: this._handlePalette.bind(this), transColor: this._handleTransColor.bind(this), finished: this._finished.bind(this), inflateData: this._inflateData.bind(this) });this._options = options;this.writable = true;this._parser.start();
    };util.inherits(ParserAsync, ChunkStream);ParserAsync.prototype._handleError = function (err) {
      this.emit('error', err);this.writable = false;this.destroy();if (this._inflate && this._inflate.destroy) {
        this._inflate.destroy();
      }this.errord = true;
    };ParserAsync.prototype._inflateData = function (data) {
      if (!this._inflate) {
        this._inflate = zlib.createInflate();this._inflate.on('error', this.emit.bind(this, 'error'));this._filter.on('complete', this._complete.bind(this));this._inflate.pipe(this._filter);
      }this._inflate.write(data);
    };ParserAsync.prototype._handleMetaData = function (metaData) {
      this.emit('metadata', metaData);this._bitmapInfo = Object.create(metaData);this._filter = new FilterAsync(this._bitmapInfo);
    };ParserAsync.prototype._handleTransColor = function (transColor) {
      this._bitmapInfo.transColor = transColor;
    };ParserAsync.prototype._handlePalette = function (palette) {
      this._bitmapInfo.palette = palette;
    };ParserAsync.prototype._finished = function () {
      if (this.errord) {
        return;
      }if (!this._inflate) {
        this.emit('error', 'No Inflate block');
      } else {
        // no more data to inflate
        this._inflate.end();
      }this.destroySoon();
    };ParserAsync.prototype._complete = function (filteredData) {
      if (this.errord) {
        return;
      }try {
        var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);bitmapData = null;
      } catch (ex) {
        this._handleError(ex);return;
      }this.emit('parsed', normalisedBitmapData);
    };
  }, { "./bitmapper": 61, "./chunkstream": 63, "./filter-parse-async": 67, "./format-normaliser": 70, "./parser": 78, "util": 103, "zlib": 10 }], 77: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var hasSyncZlib = true;var zlib = require('zlib');var SyncReader = require('./sync-reader');var FilterSync = require('./filter-parse-sync');var Parser = require('./parser');var bitmapper = require('./bitmapper');var formatNormaliser = require('./format-normaliser');module.exports = function (buffer, options) {
        if (!hasSyncZlib) {
          throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
        }var err;function handleError(_err_) {
          err = _err_;
        }var metaData;function handleMetaData(_metaData_) {
          metaData = _metaData_;
        }function handleTransColor(transColor) {
          metaData.transColor = transColor;
        }function handlePalette(palette) {
          metaData.palette = palette;
        }var gamma;function handleGamma(_gamma_) {
          gamma = _gamma_;
        }var inflateDataList = [];function handleInflateData(inflatedData) {
          inflateDataList.push(inflatedData);
        }var reader = new SyncReader(buffer);var parser = new Parser(options, { read: reader.read.bind(reader), error: handleError, metadata: handleMetaData, gamma: handleGamma, palette: handlePalette, transColor: handleTransColor, inflateData: handleInflateData });parser.start();reader.process();if (err) {
          throw err;
        } //join together the inflate datas
        var inflateData = Buffer.concat(inflateDataList);inflateDataList.length = 0;var inflatedData = zlib.inflateSync(inflateData);inflateData = null;if (!inflatedData || !inflatedData.length) {
          throw new Error('bad png - invalid inflate data response');
        }var unfilteredData = FilterSync.process(inflatedData, metaData);inflateData = null;var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);unfilteredData = null;var normalisedBitmapData = formatNormaliser(bitmapData, metaData);metaData.data = normalisedBitmapData;metaData.gamma = gamma || 0;return metaData;
      };
    }).call(this, require("buffer").Buffer);
  }, { "./bitmapper": 61, "./filter-parse-sync": 68, "./format-normaliser": 70, "./parser": 78, "./sync-reader": 81, "buffer": 14, "zlib": 10 }], 78: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var constants = require('./constants');var CrcCalculator = require('./crc');var Parser = module.exports = function (options, dependencies) {
        this._options = options;options.checkCRC = options.checkCRC !== false;this._hasIHDR = false;this._hasIEND = false; // input flags/metadata
        this._palette = [];this._colorType = 0;this._chunks = {};this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);this.read = dependencies.read;this.error = dependencies.error;this.metadata = dependencies.metadata;this.gamma = dependencies.gamma;this.transColor = dependencies.transColor;this.palette = dependencies.palette;this.parsed = dependencies.parsed;this.inflateData = dependencies.inflateData;this.inflateData = dependencies.inflateData;this.finished = dependencies.finished;
      };Parser.prototype.start = function () {
        this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));
      };Parser.prototype._parseSignature = function (data) {
        var signature = constants.PNG_SIGNATURE;for (var i = 0; i < signature.length; i++) {
          if (data[i] !== signature[i]) {
            this.error(new Error('Invalid file signature'));return;
          }
        }this.read(8, this._parseChunkBegin.bind(this));
      };Parser.prototype._parseChunkBegin = function (data) {
        // chunk content length
        var length = data.readUInt32BE(0); // chunk type
        var type = data.readUInt32BE(4);var name = '';for (var i = 4; i < 8; i++) {
          name += String.fromCharCode(data[i]);
        } //console.log('chunk ', name, length);
        // chunk flags
        var ancillary = Boolean(data[4] & 0x20); // or critical
        //    priv = Boolean(data[5] & 0x20), // or public
        //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe
        if (!this._hasIHDR && type !== constants.TYPE_IHDR) {
          this.error(new Error('Expected IHDR on beggining'));return;
        }this._crc = new CrcCalculator();this._crc.write(new Buffer(name));if (this._chunks[type]) {
          return this._chunks[type](length);
        }if (!ancillary) {
          this.error(new Error('Unsupported critical chunk type ' + name));return;
        }this.read(length + 4, this._skipChunk.bind(this));
      };Parser.prototype._skipChunk = function () /*data*/{
        this.read(8, this._parseChunkBegin.bind(this));
      };Parser.prototype._handleChunkEnd = function () {
        this.read(4, this._parseChunkEnd.bind(this));
      };Parser.prototype._parseChunkEnd = function (data) {
        var fileCrc = data.readInt32BE(0);var calcCrc = this._crc.crc32(); // check CRC
        if (this._options.checkCRC && calcCrc !== fileCrc) {
          this.error(new Error('Crc error - ' + fileCrc + ' - ' + calcCrc));return;
        }if (!this._hasIEND) {
          this.read(8, this._parseChunkBegin.bind(this));
        }
      };Parser.prototype._handleIHDR = function (length) {
        this.read(length, this._parseIHDR.bind(this));
      };Parser.prototype._parseIHDR = function (data) {
        this._crc.write(data);var width = data.readUInt32BE(0);var height = data.readUInt32BE(4);var depth = data[8];var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha
        var compr = data[10];var filter = data[11];var interlace = data[12]; // console.log('    width', width, 'height', height,
        //     'depth', depth, 'colorType', colorType,
        //     'compr', compr, 'filter', filter, 'interlace', interlace
        // );
        if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {
          this.error(new Error('Unsupported bit depth ' + depth));return;
        }if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {
          this.error(new Error('Unsupported color type'));return;
        }if (compr !== 0) {
          this.error(new Error('Unsupported compression method'));return;
        }if (filter !== 0) {
          this.error(new Error('Unsupported filter method'));return;
        }if (interlace !== 0 && interlace !== 1) {
          this.error(new Error('Unsupported interlace method'));return;
        }this._colorType = colorType;var bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];this._hasIHDR = true;this.metadata({ width: width, height: height, depth: depth, interlace: Boolean(interlace), palette: Boolean(colorType & constants.COLORTYPE_PALETTE), color: Boolean(colorType & constants.COLORTYPE_COLOR), alpha: Boolean(colorType & constants.COLORTYPE_ALPHA), bpp: bpp, colorType: colorType });this._handleChunkEnd();
      };Parser.prototype._handlePLTE = function (length) {
        this.read(length, this._parsePLTE.bind(this));
      };Parser.prototype._parsePLTE = function (data) {
        this._crc.write(data);var entries = Math.floor(data.length / 3); // console.log('Palette:', entries);
        for (var i = 0; i < entries; i++) {
          this._palette.push([data[i * 3], data[i * 3 + 1], data[i * 3 + 2], 0xff]);
        }this.palette(this._palette);this._handleChunkEnd();
      };Parser.prototype._handleTRNS = function (length) {
        this.read(length, this._parseTRNS.bind(this));
      };Parser.prototype._parseTRNS = function (data) {
        this._crc.write(data); // palette
        if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {
          if (this._palette.length === 0) {
            this.error(new Error('Transparency chunk must be after palette'));return;
          }if (data.length > this._palette.length) {
            this.error(new Error('More transparent colors than palette size'));return;
          }for (var i = 0; i < data.length; i++) {
            this._palette[i][3] = data[i];
          }this.palette(this._palette);
        } // for colorType 0 (grayscale) and 2 (rgb)
        // there might be one gray/color defined as transparent
        if (this._colorType === constants.COLORTYPE_GRAYSCALE) {
          // grey, 2 bytes
          this.transColor([data.readUInt16BE(0)]);
        }if (this._colorType === constants.COLORTYPE_COLOR) {
          this.transColor([data.readUInt16BE(0), data.readUInt16BE(2), data.readUInt16BE(4)]);
        }this._handleChunkEnd();
      };Parser.prototype._handleGAMA = function (length) {
        this.read(length, this._parseGAMA.bind(this));
      };Parser.prototype._parseGAMA = function (data) {
        this._crc.write(data);this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);this._handleChunkEnd();
      };Parser.prototype._handleIDAT = function (length) {
        this.read(-length, this._parseIDAT.bind(this, length));
      };Parser.prototype._parseIDAT = function (length, data) {
        this._crc.write(data);if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {
          throw new Error('Expected palette not found');
        }this.inflateData(data);var leftOverLength = length - data.length;if (leftOverLength > 0) {
          this._handleIDAT(leftOverLength);
        } else {
          this._handleChunkEnd();
        }
      };Parser.prototype._handleIEND = function (length) {
        this.read(length, this._parseIEND.bind(this));
      };Parser.prototype._parseIEND = function (data) {
        this._crc.write(data);this._hasIEND = true;this._handleChunkEnd();if (this.finished) {
          this.finished();
        }
      };
    }).call(this, require("buffer").Buffer);
  }, { "./constants": 64, "./crc": 65, "buffer": 14 }], 79: [function (require, module, exports) {
    'use strict';
    var parse = require('./parser-sync');var pack = require('./packer-sync');exports.read = function (buffer, options) {
      return parse(buffer, options || {});
    };exports.write = function (png) {
      return pack(png);
    };
  }, { "./packer-sync": 73, "./parser-sync": 77 }], 80: [function (require, module, exports) {
    (function (process, Buffer) {
      'use strict';
      var util = require('util');var Stream = require('stream');var Parser = require('./parser-async');var Packer = require('./packer-async');var PNGSync = require('./png-sync');var PNG = exports.PNG = function (options) {
        Stream.call(this);options = options || {}; // eslint-disable-line no-param-reassign
        this.width = options.width || 0;this.height = options.height || 0;this.data = this.width > 0 && this.height > 0 ? new Buffer(4 * this.width * this.height) : null;if (options.fill && this.data) {
          this.data.fill(0);
        }this.gamma = 0;this.readable = this.writable = true;this._parser = new Parser(options);this._parser.on('error', this.emit.bind(this, 'error'));this._parser.on('close', this._handleClose.bind(this));this._parser.on('metadata', this._metadata.bind(this));this._parser.on('gamma', this._gamma.bind(this));this._parser.on('parsed', function (data) {
          this.data = data;this.emit('parsed', data);
        }.bind(this));this._packer = new Packer(options);this._packer.on('data', this.emit.bind(this, 'data'));this._packer.on('end', this.emit.bind(this, 'end'));this._parser.on('close', this._handleClose.bind(this));this._packer.on('error', this.emit.bind(this, 'error'));
      };util.inherits(PNG, Stream);PNG.sync = PNGSync;PNG.prototype.pack = function () {
        if (!this.data || !this.data.length) {
          this.emit('error', 'No data provided');return this;
        }process.nextTick(function () {
          this._packer.pack(this.data, this.width, this.height, this.gamma);
        }.bind(this));return this;
      };PNG.prototype.parse = function (data, callback) {
        if (callback) {
          var onParsed, onError;onParsed = function (parsedData) {
            this.removeListener('error', onError);this.data = parsedData;callback(null, this);
          }.bind(this);onError = function (err) {
            this.removeListener('parsed', onParsed);callback(err, null);
          }.bind(this);this.once('parsed', onParsed);this.once('error', onError);
        }this.end(data);return this;
      };PNG.prototype.write = function (data) {
        this._parser.write(data);return true;
      };PNG.prototype.end = function (data) {
        this._parser.end(data);
      };PNG.prototype._metadata = function (metadata) {
        this.width = metadata.width;this.height = metadata.height;this.emit('metadata', metadata);
      };PNG.prototype._gamma = function (gamma) {
        this.gamma = gamma;
      };PNG.prototype._handleClose = function () {
        if (!this._parser.writable && !this._packer.readable) {
          this.emit('close');
        }
      };PNG.bitblt = function (src, dst, srcX, srcY, width, height, deltaX, deltaY) {
        // eslint-disable-line max-params
        if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {
          throw new Error('bitblt reading outside image');
        }if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {
          throw new Error('bitblt writing outside image');
        }for (var y = 0; y < height; y++) {
          src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);
        }
      };PNG.prototype.bitblt = function (dst, srcX, srcY, width, height, deltaX, deltaY) {
        // eslint-disable-line max-params
        PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);return this;
      };PNG.adjustGamma = function (src) {
        if (src.gamma) {
          for (var y = 0; y < src.height; y++) {
            for (var x = 0; x < src.width; x++) {
              var idx = src.width * y + x << 2;for (var i = 0; i < 3; i++) {
                var sample = src.data[idx + i] / 255;sample = Math.pow(sample, 1 / 2.2 / src.gamma);src.data[idx + i] = Math.round(sample * 255);
              }
            }
          }src.gamma = 0;
        }
      };PNG.prototype.adjustGamma = function () {
        PNG.adjustGamma(this);
      };
    }).call(this, require('_process'), require("buffer").Buffer);
  }, { "./packer-async": 72, "./parser-async": 76, "./png-sync": 79, "_process": 12, "buffer": 14, "stream": 94, "util": 103 }], 81: [function (require, module, exports) {
    'use strict';
    var SyncReader = module.exports = function (buffer) {
      this._buffer = buffer;this._reads = [];
    };SyncReader.prototype.read = function (length, callback) {
      this._reads.push({ length: Math.abs(length), // if length < 0 then at most this length
        allowLess: length < 0, func: callback });
    };SyncReader.prototype.process = function () {
      // as long as there is any data and read requests
      while (this._reads.length > 0 && this._buffer.length) {
        var read = this._reads[0];if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {
          // ok there is any data so that we can satisfy this request
          this._reads.shift(); // == read
          var buf = this._buffer;this._buffer = buf.slice(read.length);read.func.call(this, buf.slice(0, read.length));
        } else {
          break;
        }
      }if (this._reads.length > 0) {
        return new Error('There are some read requests waitng on finished stream');
      }if (this._buffer.length > 0) {
        return new Error('unrecognised content at end of stream');
      }
    };
  }, {}], 82: [function (require, module, exports) {
    (function (process) {
      'use strict';
      if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
        module.exports = nextTick;
      } else {
        module.exports = process.nextTick;
      }function nextTick(fn, arg1, arg2, arg3) {
        if (typeof fn !== 'function') {
          throw new TypeError('"callback" argument must be a function');
        }var len = arguments.length;var args, i;switch (len) {case 0:case 1:
            return process.nextTick(fn);case 2:
            return process.nextTick(function afterTickOne() {
              fn.call(null, arg1);
            });case 3:
            return process.nextTick(function afterTickTwo() {
              fn.call(null, arg1, arg2);
            });case 4:
            return process.nextTick(function afterTickThree() {
              fn.call(null, arg1, arg2, arg3);
            });default:
            args = new Array(len - 1);i = 0;while (i < args.length) {
              args[i++] = arguments[i];
            }return process.nextTick(function afterTick() {
              fn.apply(null, args);
            });}
      }
    }).call(this, require('_process'));
  }, { "_process": 12 }], 83: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';
      var fs = require('fs');module.exports = function (filepath, pos, len, cb) {
        var buf = new Buffer(len);fs.open(filepath, 'r', function (err, fd) {
          if (err) {
            return cb(err);
          }fs.read(fd, buf, 0, len, pos, function (err, bytesRead, buf) {
            if (err) {
              return cb(err);
            }fs.close(fd, function (err) {
              if (err) {
                return cb(err);
              }if (bytesRead < len) {
                buf = buf.slice(0, bytesRead);
              }cb(null, buf);
            });
          });
        });
      };module.exports.sync = function (filepath, pos, len) {
        var buf = new Buffer(len);var fd = fs.openSync(filepath, 'r');var bytesRead = fs.readSync(fd, buf, 0, len, pos);fs.closeSync(fd);if (bytesRead < len) {
          buf = buf.slice(0, bytesRead);
        }return buf;
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14, "fs": 11 }], 84: [function (require, module, exports) {
    module.exports = require("./lib/_stream_duplex.js");
  }, { "./lib/_stream_duplex.js": 85 }], 85: [function (require, module, exports) {
    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.
    'use strict'; /*<replacement>*/
    var objectKeys = Object.keys || function (obj) {
      var keys = [];for (var key in obj) {
        keys.push(key);
      }return keys;
    }; /*</replacement>*/module.exports = Duplex; /*<replacement>*/var processNextTick = require('process-nextick-args'); /*</replacement>*/ /*<replacement>*/var util = require('core-util-is');util.inherits = require('inherits'); /*</replacement>*/var Readable = require('./_stream_readable');var Writable = require('./_stream_writable');util.inherits(Duplex, Readable);var keys = objectKeys(Writable.prototype);for (var v = 0; v < keys.length; v++) {
      var method = keys[v];if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);Readable.call(this, options);Writable.call(this, options);if (options && options.readable === false) this.readable = false;if (options && options.writable === false) this.writable = false;this.allowHalfOpen = true;if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;this.once('end', onend);
    } // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
      // But allow more writes to happen in this tick.
      processNextTick(onEndNT, this);
    }function onEndNT(self) {
      self.end();
    }function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }
  }, { "./_stream_readable": 87, "./_stream_writable": 89, "core-util-is": 15, "inherits": 31, "process-nextick-args": 82 }], 86: [function (require, module, exports) {
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.
    'use strict';
    module.exports = PassThrough;var Transform = require('./_stream_transform'); /*<replacement>*/var util = require('core-util-is');util.inherits = require('inherits'); /*</replacement>*/util.inherits(PassThrough, Transform);function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);Transform.call(this, options);
    }PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
  }, { "./_stream_transform": 88, "core-util-is": 15, "inherits": 31 }], 87: [function (require, module, exports) {
    (function (process) {
      'use strict';
      module.exports = Readable; /*<replacement>*/var processNextTick = require('process-nextick-args'); /*</replacement>*/ /*<replacement>*/var isArray = require('isarray'); /*</replacement>*/ /*<replacement>*/var Buffer = require('buffer').Buffer; /*</replacement>*/Readable.ReadableState = ReadableState;var EE = require('events'); /*<replacement>*/var EElistenerCount = function EElistenerCount(emitter, type) {
        return emitter.listeners(type).length;
      }; /*</replacement>*/ /*<replacement>*/var Stream;(function () {
        try {
          Stream = require('st' + 'ream');
        } catch (_) {} finally {
          if (!Stream) Stream = require('events').EventEmitter;
        }
      })(); /*</replacement>*/var Buffer = require('buffer').Buffer; /*<replacement>*/var util = require('core-util-is');util.inherits = require('inherits'); /*</replacement>*/ /*<replacement>*/var debugUtil = require('util');var debug = undefined;if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog('stream');
      } else {
        debug = function debug() {};
      } /*</replacement>*/var StringDecoder;util.inherits(Readable, Stream);var Duplex;function ReadableState(options, stream) {
        Duplex = Duplex || require('./_stream_duplex');options = options || {}; // object stream flag. Used to make read(n) ignore n and to
        // make all the buffer merging and length checks go away
        this.objectMode = !!options.objectMode;if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
        // Note: 0 is a valid value, means "don't call _read preemptively ever"
        var hwm = options.highWaterMark;var defaultHwm = this.objectMode ? 16 : 16 * 1024;this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.
        this.highWaterMark = ~~this.highWaterMark;this.buffer = [];this.length = 0;this.pipes = null;this.pipesCount = 0;this.flowing = null;this.ended = false;this.endEmitted = false;this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
        // or on a later tick.  We set this to true at first, because any
        // actions that shouldn't happen until "later" should generally also
        // not happen before the first write call.
        this.sync = true; // whenever we return null, then we set a flag to say
        // that we're awaiting a 'readable' event emission.
        this.needReadable = false;this.emittedReadable = false;this.readableListening = false;this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
        // encoding is 'binary' so we have to make this configurable.
        // Everything else in the universe uses 'utf8', though.
        this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
        // after read()ing all the bytes and not getting any pushback.
        this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s
        this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
        this.readingMore = false;this.decoder = null;this.encoding = null;if (options.encoding) {
          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;this.decoder = new StringDecoder(options.encoding);this.encoding = options.encoding;
        }
      }var Duplex;function Readable(options) {
        Duplex = Duplex || require('./_stream_duplex');if (!(this instanceof Readable)) return new Readable(options);this._readableState = new ReadableState(options, this); // legacy
        this.readable = true;if (options && typeof options.read === 'function') this._read = options.read;Stream.call(this);
      } // Manually shove something into the read() buffer.
      // This returns true if the highWaterMark has not been hit yet,
      // similar to how Writable.write() returns true if you should
      // write() some more.
      Readable.prototype.push = function (chunk, encoding) {
        var state = this._readableState;if (!state.objectMode && typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;if (encoding !== state.encoding) {
            chunk = new Buffer(chunk, encoding);encoding = '';
          }
        }return readableAddChunk(this, state, chunk, encoding, false);
      }; // Unshift should *always* be something directly out of read()
      Readable.prototype.unshift = function (chunk) {
        var state = this._readableState;return readableAddChunk(this, state, chunk, '', true);
      };Readable.prototype.isPaused = function () {
        return this._readableState.flowing === false;
      };function readableAddChunk(stream, state, chunk, encoding, addToFront) {
        var er = chunkInvalid(state, chunk);if (er) {
          stream.emit('error', er);
        } else if (chunk === null) {
          state.reading = false;onEofChunk(stream, state);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (state.ended && !addToFront) {
            var e = new Error('stream.push() after EOF');stream.emit('error', e);
          } else if (state.endEmitted && addToFront) {
            var e = new Error('stream.unshift() after end event');stream.emit('error', e);
          } else {
            var skipAdd;if (state.decoder && !addToFront && !encoding) {
              chunk = state.decoder.write(chunk);skipAdd = !state.objectMode && chunk.length === 0;
            }if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
            // we're not in object mode
            if (!skipAdd) {
              // if we want the data now, just emit it.
              if (state.flowing && state.length === 0 && !state.sync) {
                stream.emit('data', chunk);stream.read(0);
              } else {
                // update the buffer info.
                state.length += state.objectMode ? 1 : chunk.length;if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);if (state.needReadable) emitReadable(stream);
              }
            }maybeReadMore(stream, state);
          }
        } else if (!addToFront) {
          state.reading = false;
        }return needMoreData(state);
      } // if it's past the high water mark, we can push in some more.
      // Also, if we have no data yet, we can stand some
      // more bytes.  This is to work around cases where hwm=0,
      // such as the repl.  Also, if the push() triggered a
      // readable event, and the user called read(largeNumber) such that
      // needReadable was set, then we ought to push more, so that another
      // 'readable' event will be triggered.
      function needMoreData(state) {
        return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
      } // backwards compatibility.
      Readable.prototype.setEncoding = function (enc) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;this._readableState.decoder = new StringDecoder(enc);this._readableState.encoding = enc;return this;
      }; // Don't raise the hwm > 8MB
      var MAX_HWM = 0x800000;function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM;
        } else {
          // Get the next highest power of 2
          n--;n |= n >>> 1;n |= n >>> 2;n |= n >>> 4;n |= n >>> 8;n |= n >>> 16;n++;
        }return n;
      }function howMuchToRead(n, state) {
        if (state.length === 0 && state.ended) return 0;if (state.objectMode) return n === 0 ? 0 : 1;if (n === null || isNaN(n)) {
          // only flow one buffer at a time
          if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
        }if (n <= 0) return 0; // If we're asking for more than the target buffer level,
        // then raise the water mark.  Bump up to the next highest
        // power of 2, to prevent increasing it excessively in tiny
        // amounts.
        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n); // don't have that much.  return null, unless we've ended.
        if (n > state.length) {
          if (!state.ended) {
            state.needReadable = true;return 0;
          } else {
            return state.length;
          }
        }return n;
      } // you can override either this method, or the async _read(n) below.
      Readable.prototype.read = function (n) {
        debug('read', n);var state = this._readableState;var nOrig = n;if (typeof n !== 'number' || n > 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
        // already have a bunch of data in the buffer, then just trigger
        // the 'readable' event and move on.
        if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
          debug('read: emitReadable', state.length, state.ended);if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);return null;
        }n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this);return null;
        } // All the actual chunk generation logic needs to be
        // *below* the call to _read.  The reason is that in certain
        // synthetic stream cases, such as passthrough streams, _read
        // may be a completely synchronous operation which may change
        // the state of the read buffer, providing enough data when
        // before there was *not* enough.
        //
        // So, the steps are:
        // 1. Figure out what the state of things will be after we do
        // a read from the buffer.
        //
        // 2. If that resulting state will trigger a _read, then call _read.
        // Note that this may be asynchronous, or synchronous.  Yes, it is
        // deeply ugly to write APIs this way, but that still doesn't mean
        // that the Readable class should behave improperly, as streams are
        // designed to be sync/async agnostic.
        // Take note if the _read call is sync or async (ie, if the read call
        // has returned yet), so that we know whether or not it's safe to emit
        // 'readable' etc.
        //
        // 3. Actually pull the requested chunks out of the buffer and return.
        // if we need a readable event, then we need to do some reading.
        var doRead = state.needReadable;debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;debug('length less than watermark', doRead);
        } // however, if we've ended, then there's no point, and if we're already
        // reading, then it's unnecessary.
        if (state.ended || state.reading) {
          doRead = false;debug('reading or ended', doRead);
        }if (doRead) {
          debug('do read');state.reading = true;state.sync = true; // if the length is currently zero, then we *need* a readable event.
          if (state.length === 0) state.needReadable = true; // call internal read method
          this._read(state.highWaterMark);state.sync = false;
        } // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (doRead && !state.reading) n = howMuchToRead(nOrig, state);var ret;if (n > 0) ret = fromList(n, state);else ret = null;if (ret === null) {
          state.needReadable = true;n = 0;
        }state.length -= n; // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (state.length === 0 && !state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended && state.length === 0) endReadable(this);if (ret !== null) this.emit('data', ret);return ret;
      };function chunkInvalid(state, chunk) {
        var er = null;if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
          er = new TypeError('Invalid non-string/buffer chunk');
        }return er;
      }function onEofChunk(stream, state) {
        if (state.ended) return;if (state.decoder) {
          var chunk = state.decoder.end();if (chunk && chunk.length) {
            state.buffer.push(chunk);state.length += state.objectMode ? 1 : chunk.length;
          }
        }state.ended = true; // emit 'readable' now to make sure it gets picked up.
        emitReadable(stream);
      } // Don't emit readable right away in sync mode, because this can trigger
      // another read() call => stack overflow.  This way, it might trigger
      // a nextTick recursion warning, but that's not so bad.
      function emitReadable(stream) {
        var state = stream._readableState;state.needReadable = false;if (!state.emittedReadable) {
          debug('emitReadable', state.flowing);state.emittedReadable = true;if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
        }
      }function emitReadable_(stream) {
        debug('emit readable');stream.emit('readable');flow(stream);
      } // at this point, the user has presumably seen the 'readable' event,
      // and called read() to consume some data.  that may have triggered
      // in turn another _read(n) call, in which case reading = true if
      // it's in progress.
      // However, if we're not ended, or reading, and the length < hwm,
      // then go ahead and try to read some more preemptively.
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;processNextTick(maybeReadMore_, stream, state);
        }
      }function maybeReadMore_(stream, state) {
        var len = state.length;while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
          debug('maybeReadMore read 0');stream.read(0);if (len === state.length) // didn't get any data, stop spinning.
            break;else len = state.length;
        }state.readingMore = false;
      } // abstract method.  to be overridden in specific implementation classes.
      // call cb(er, data) where data is <= n in length.
      // for virtual (non-string, non-buffer) streams, "length" is somewhat
      // arbitrary, and perhaps not very meaningful.
      Readable.prototype._read = function (n) {
        this.emit('error', new Error('not implemented'));
      };Readable.prototype.pipe = function (dest, pipeOpts) {
        var src = this;var state = this._readableState;switch (state.pipesCount) {case 0:
            state.pipes = dest;break;case 1:
            state.pipes = [state.pipes, dest];break;default:
            state.pipes.push(dest);break;}state.pipesCount += 1;debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;var endFn = doEnd ? onend : cleanup;if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);dest.on('unpipe', onunpipe);function onunpipe(readable) {
          debug('onunpipe');if (readable === src) {
            cleanup();
          }
        }function onend() {
          debug('onend');dest.end();
        } // when the dest drains, it reduces the awaitDrain counter
        // on the source.  This would be more elegant with a .once()
        // handler in flow(), but adding and removing repeatedly is
        // too slow.
        var ondrain = pipeOnDrain(src);dest.on('drain', ondrain);var cleanedUp = false;function cleanup() {
          debug('cleanup'); // cleanup event handlers once the pipe is broken
          dest.removeListener('close', onclose);dest.removeListener('finish', onfinish);dest.removeListener('drain', ondrain);dest.removeListener('error', onerror);dest.removeListener('unpipe', onunpipe);src.removeListener('end', onend);src.removeListener('end', cleanup);src.removeListener('data', ondata);cleanedUp = true; // if the reader is waiting for a drain event from this
          // specific writer, then it would cause it to never start
          // flowing again.
          // So, if this is awaiting a drain, then we just call it now.
          // If we don't know, then assume that we are waiting for one.
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
        }src.on('data', ondata);function ondata(chunk) {
          debug('ondata');var ret = dest.write(chunk);if (false === ret) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {
              debug('false write response, pause', src._readableState.awaitDrain);src._readableState.awaitDrain++;
            }src.pause();
          }
        } // if the dest has an error, then stop piping into it.
        // however, don't suppress the throwing behavior for this.
        function onerror(er) {
          debug('onerror', er);unpipe();dest.removeListener('error', onerror);if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
        } // This is a brutally ugly hack to make sure that our error handler
        // is attached before any userland ones.  NEVER DO THIS.
        if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error]; // Both close and finish should trigger unpipe, but only once.
        function onclose() {
          dest.removeListener('finish', onfinish);unpipe();
        }dest.once('close', onclose);function onfinish() {
          debug('onfinish');dest.removeListener('close', onclose);unpipe();
        }dest.once('finish', onfinish);function unpipe() {
          debug('unpipe');src.unpipe(dest);
        } // tell the dest that it's being piped to
        dest.emit('pipe', src); // start the flow if it hasn't been started already.
        if (!state.flowing) {
          debug('pipe resume');src.resume();
        }return dest;
      };function pipeOnDrain(src) {
        return function () {
          var state = src._readableState;debug('pipeOnDrain', state.awaitDrain);if (state.awaitDrain) state.awaitDrain--;if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;flow(src);
          }
        };
      }Readable.prototype.unpipe = function (dest) {
        var state = this._readableState; // if we're not piping anywhere, then do nothing.
        if (state.pipesCount === 0) return this; // just one destination.  most common case.
        if (state.pipesCount === 1) {
          // passed in one, but it's not the right one.
          if (dest && dest !== state.pipes) return this;if (!dest) dest = state.pipes; // got a match.
          state.pipes = null;state.pipesCount = 0;state.flowing = false;if (dest) dest.emit('unpipe', this);return this;
        } // slow case. multiple pipe destinations.
        if (!dest) {
          // remove all.
          var dests = state.pipes;var len = state.pipesCount;state.pipes = null;state.pipesCount = 0;state.flowing = false;for (var _i = 0; _i < len; _i++) {
            dests[_i].emit('unpipe', this);
          }return this;
        } // try to find the right one.
        var i = indexOf(state.pipes, dest);if (i === -1) return this;state.pipes.splice(i, 1);state.pipesCount -= 1;if (state.pipesCount === 1) state.pipes = state.pipes[0];dest.emit('unpipe', this);return this;
      }; // set up data events if they are asked for
      // Ensure readable listeners eventually get something
      Readable.prototype.on = function (ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn); // If listening to data, and it has not explicitly been paused,
        // then call resume to start the flow of data on the next tick.
        if (ev === 'data' && false !== this._readableState.flowing) {
          this.resume();
        }if (ev === 'readable' && !this._readableState.endEmitted) {
          var state = this._readableState;if (!state.readableListening) {
            state.readableListening = true;state.emittedReadable = false;state.needReadable = true;if (!state.reading) {
              processNextTick(nReadingNextTick, this);
            } else if (state.length) {
              emitReadable(this, state);
            }
          }
        }return res;
      };Readable.prototype.addListener = Readable.prototype.on;function nReadingNextTick(self) {
        debug('readable nexttick read 0');self.read(0);
      } // pause() and resume() are remnants of the legacy readable stream API
      // If the user uses them, then switch into old mode.
      Readable.prototype.resume = function () {
        var state = this._readableState;if (!state.flowing) {
          debug('resume');state.flowing = true;resume(this, state);
        }return this;
      };function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;processNextTick(resume_, stream, state);
        }
      }function resume_(stream, state) {
        if (!state.reading) {
          debug('resume read 0');stream.read(0);
        }state.resumeScheduled = false;stream.emit('resume');flow(stream);if (state.flowing && !state.reading) stream.read(0);
      }Readable.prototype.pause = function () {
        debug('call pause flowing=%j', this._readableState.flowing);if (false !== this._readableState.flowing) {
          debug('pause');this._readableState.flowing = false;this.emit('pause');
        }return this;
      };function flow(stream) {
        var state = stream._readableState;debug('flow', state.flowing);if (state.flowing) {
          do {
            var chunk = stream.read();
          } while (null !== chunk && state.flowing);
        }
      } // wrap an old-style stream as the async data source.
      // This is *not* part of the readable stream interface.
      // It is an ugly unfortunate mess of history.
      Readable.prototype.wrap = function (stream) {
        var state = this._readableState;var paused = false;var self = this;stream.on('end', function () {
          debug('wrapped end');if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();if (chunk && chunk.length) self.push(chunk);
          }self.push(null);
        });stream.on('data', function (chunk) {
          debug('wrapped data');if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
          if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;var ret = self.push(chunk);if (!ret) {
            paused = true;stream.pause();
          }
        }); // proxy all the other methods.
        // important when wrapping filters and duplexes.
        for (var i in stream) {
          if (this[i] === undefined && typeof stream[i] === 'function') {
            this[i] = function (method) {
              return function () {
                return stream[method].apply(stream, arguments);
              };
            }(i);
          }
        } // proxy certain important events.
        var events = ['error', 'close', 'destroy', 'pause', 'resume'];forEach(events, function (ev) {
          stream.on(ev, self.emit.bind(self, ev));
        }); // when we try to consume some more bytes, simply unpause the
        // underlying stream.
        self._read = function (n) {
          debug('wrapped _read', n);if (paused) {
            paused = false;stream.resume();
          }
        };return self;
      }; // exposed for testing purposes only.
      Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
      // Length is the combined lengths of all the buffers in the list.
      function fromList(n, state) {
        var list = state.buffer;var length = state.length;var stringMode = !!state.decoder;var objectMode = !!state.objectMode;var ret; // nothing in the list, definitely empty.
        if (list.length === 0) return null;if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
          // read it all, truncate the array.
          if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);list.length = 0;
        } else {
          // read just some of it.
          if (n < list[0].length) {
            // just take a part of the first list item.
            // slice is the same for buffers and strings.
            var buf = list[0];ret = buf.slice(0, n);list[0] = buf.slice(n);
          } else if (n === list[0].length) {
            // first list is a perfect match
            ret = list.shift();
          } else {
            // complex case.
            // we have enough to cover it, but it spans past the first buffer.
            if (stringMode) ret = '';else ret = new Buffer(n);var c = 0;for (var i = 0, l = list.length; i < l && c < n; i++) {
              var buf = list[0];var cpy = Math.min(n - c, buf.length);if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();c += cpy;
            }
          }
        }return ret;
      }function endReadable(stream) {
        var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
        // bug in node.  Should never happen.
        if (state.length > 0) throw new Error('endReadable called on non-empty stream');if (!state.endEmitted) {
          state.ended = true;processNextTick(endReadableNT, state, stream);
        }
      }function endReadableNT(state, stream) {
        // Check that we didn't get one last unshift.
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;stream.readable = false;stream.emit('end');
        }
      }function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
          f(xs[i], i);
        }
      }function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i;
        }return -1;
      }
    }).call(this, require('_process'));
  }, { "./_stream_duplex": 85, "_process": 12, "buffer": 14, "core-util-is": 15, "events": 17, "inherits": 31, "isarray": 35, "process-nextick-args": 82, "string_decoder/": 97, "util": 8 }], 88: [function (require, module, exports) {
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.
    'use strict';
    module.exports = Transform;var Duplex = require('./_stream_duplex'); /*<replacement>*/var util = require('core-util-is');util.inherits = require('inherits'); /*</replacement>*/util.inherits(Transform, Duplex);function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };this.needTransform = false;this.transforming = false;this.writecb = null;this.writechunk = null;this.writeencoding = null;
    }function afterTransform(stream, er, data) {
      var ts = stream._transformState;ts.transforming = false;var cb = ts.writecb;if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));ts.writechunk = null;ts.writecb = null;if (data !== null && data !== undefined) stream.push(data);cb(er);var rs = stream._readableState;rs.reading = false;if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);Duplex.call(this, options);this._transformState = new TransformState(this); // when the writable side finishes, then flush out anything remaining.
      var stream = this; // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;if (typeof options.flush === 'function') this._flush = options.flush;
      }this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;return Duplex.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('not implemented');
    };Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;ts.writecb = cb;ts.writechunk = chunk;ts.writeencoding = encoding;if (!ts.transforming) {
        var rs = this._readableState;if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };function done(stream, er) {
      if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;var ts = stream._transformState;if (ws.length) throw new Error('calling transform done when ws.length != 0');if (ts.transforming) throw new Error('calling transform done when still transforming');return stream.push(null);
    }
  }, { "./_stream_duplex": 85, "core-util-is": 15, "inherits": 31 }], 89: [function (require, module, exports) {
    (function (process) {
      // A bit simpler than readable streams.
      // Implement an async ._write(chunk, encoding, cb), and it'll handle all
      // the drain event emission and buffering.
      'use strict';
      module.exports = Writable; /*<replacement>*/var processNextTick = require('process-nextick-args'); /*</replacement>*/ /*<replacement>*/var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick; /*</replacement>*/ /*<replacement>*/var Buffer = require('buffer').Buffer; /*</replacement>*/Writable.WritableState = WritableState; /*<replacement>*/var util = require('core-util-is');util.inherits = require('inherits'); /*</replacement>*/ /*<replacement>*/var internalUtil = { deprecate: require('util-deprecate') }; /*</replacement>*/ /*<replacement>*/var Stream;(function () {
        try {
          Stream = require('st' + 'ream');
        } catch (_) {} finally {
          if (!Stream) Stream = require('events').EventEmitter;
        }
      })(); /*</replacement>*/var Buffer = require('buffer').Buffer;util.inherits(Writable, Stream);function nop() {}function WriteReq(chunk, encoding, cb) {
        this.chunk = chunk;this.encoding = encoding;this.callback = cb;this.next = null;
      }var Duplex;function WritableState(options, stream) {
        Duplex = Duplex || require('./_stream_duplex');options = options || {}; // object stream flag to indicate whether or not this stream
        // contains buffers or objects.
        this.objectMode = !!options.objectMode;if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
        // Note: 0 is a valid value, means that we always return false if
        // the entire buffer is not flushed immediately on write()
        var hwm = options.highWaterMark;var defaultHwm = this.objectMode ? 16 : 16 * 1024;this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.
        this.highWaterMark = ~~this.highWaterMark;this.needDrain = false; // at the start of calling end()
        this.ending = false; // when end() has been called, and returned
        this.ended = false; // when 'finish' is emitted
        this.finished = false; // should we decode strings into buffers before passing to _write?
        // this is here so that some node-core streams can optimize string
        // handling at a lower level.
        var noDecode = options.decodeStrings === false;this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
        // encoding is 'binary' so we have to make this configurable.
        // Everything else in the universe uses 'utf8', though.
        this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
        // of how much we're waiting to get pushed to some underlying
        // socket or file.
        this.length = 0; // a flag to see when we're in the middle of a write.
        this.writing = false; // when true all writes will be buffered until .uncork() call
        this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
        // or on a later tick.  We set this to true at first, because any
        // actions that shouldn't happen until "later" should generally also
        // not happen before the first write call.
        this.sync = true; // a flag to know if we're processing previously buffered items, which
        // may call the _write() callback in the same tick, so that we don't
        // end up in an overlapped onwrite situation.
        this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
        this.onwrite = function (er) {
          onwrite(stream, er);
        }; // the callback that the user supplies to write(chunk,encoding,cb)
        this.writecb = null; // the amount that is being written when _write is called.
        this.writelen = 0;this.bufferedRequest = null;this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
        // this must be 0 before 'finish' can be emitted
        this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
        // This is relevant for synchronous Transform streams
        this.prefinished = false; // True if the error was already emitted and should not be thrown again
        this.errorEmitted = false; // count buffered requests
        this.bufferedRequestCount = 0; // create the two objects needed to store the corked requests
        // they are not a linked list, as no new elements are inserted in there
        this.corkedRequestsFree = new CorkedRequest(this);this.corkedRequestsFree.next = new CorkedRequest(this);
      }WritableState.prototype.getBuffer = function writableStateGetBuffer() {
        var current = this.bufferedRequest;var out = [];while (current) {
          out.push(current);current = current.next;
        }return out;
      };(function () {
        try {
          Object.defineProperty(WritableState.prototype, 'buffer', { get: internalUtil.deprecate(function () {
              return this.getBuffer();
            }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.') });
        } catch (_) {}
      })();var Duplex;function Writable(options) {
        Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, though they're not
        // instanceof Writable, they're instanceof Readable.
        if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);this._writableState = new WritableState(options, this); // legacy.
        this.writable = true;if (options) {
          if (typeof options.write === 'function') this._write = options.write;if (typeof options.writev === 'function') this._writev = options.writev;
        }Stream.call(this);
      } // Otherwise people can pipe Writable streams, which is just wrong.
      Writable.prototype.pipe = function () {
        this.emit('error', new Error('Cannot pipe. Not readable.'));
      };function writeAfterEnd(stream, cb) {
        var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb
        stream.emit('error', er);processNextTick(cb, er);
      } // If we get something that is not a buffer, string, null, or undefined,
      // and we're not in objectMode, then that's an error.
      // Otherwise stream chunks are all considered to be of length=1, and the
      // watermarks determine how many objects to keep in the buffer, rather than
      // how many bytes or characters.
      function validChunk(stream, state, chunk, cb) {
        var valid = true;if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
          var er = new TypeError('Invalid non-string/buffer chunk');stream.emit('error', er);processNextTick(cb, er);valid = false;
        }return valid;
      }Writable.prototype.write = function (chunk, encoding, cb) {
        var state = this._writableState;var ret = false;if (typeof encoding === 'function') {
          cb = encoding;encoding = null;
        }if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;if (typeof cb !== 'function') cb = nop;if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
          state.pendingcb++;ret = writeOrBuffer(this, state, chunk, encoding, cb);
        }return ret;
      };Writable.prototype.cork = function () {
        var state = this._writableState;state.corked++;
      };Writable.prototype.uncork = function () {
        var state = this._writableState;if (state.corked) {
          state.corked--;if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
        }
      };Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        // node::ParseEncoding() requires lower case.
        if (typeof encoding === 'string') encoding = encoding.toLowerCase();if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);this._writableState.defaultEncoding = encoding;
      };function decodeChunk(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
          chunk = new Buffer(chunk, encoding);
        }return chunk;
      } // if we're already writing something, then just put this
      // in the queue, and wait our turn.  Otherwise, call _write
      // If we return false, then we need a drain event, so set that flag.
      function writeOrBuffer(stream, state, chunk, encoding, cb) {
        chunk = decodeChunk(state, chunk, encoding);if (Buffer.isBuffer(chunk)) encoding = 'buffer';var len = state.objectMode ? 1 : chunk.length;state.length += len;var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
        if (!ret) state.needDrain = true;if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }return ret;
      }function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;state.writecb = cb;state.writing = true;state.sync = true;if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);state.sync = false;
      }function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb;if (sync) processNextTick(cb, er);else cb(er);stream._writableState.errorEmitted = true;stream.emit('error', er);
      }function onwriteStateUpdate(state) {
        state.writing = false;state.writecb = null;state.length -= state.writelen;state.writelen = 0;
      }function onwrite(stream, er) {
        var state = stream._writableState;var sync = state.sync;var cb = state.writecb;onwriteStateUpdate(state);if (er) onwriteError(stream, state, sync, er, cb);else {
          // Check if we're actually ready to finish, but don't emit yet
          var finished = needFinish(state);if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
          }if (sync) {
            /*<replacement>*/asyncWrite(afterWrite, stream, state, finished, cb); /*</replacement>*/
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
      }function afterWrite(stream, state, finished, cb) {
        if (!finished) onwriteDrain(stream, state);state.pendingcb--;cb();finishMaybe(stream, state);
      } // Must force callback to be called on nextTick, so that we don't
      // emit 'drain' before the write() consumer gets the 'false' return
      // value, and has a chance to attach a 'drain' listener.
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;stream.emit('drain');
        }
      } // if there's something in the buffer waiting, then process it
      function clearBuffer(stream, state) {
        state.bufferProcessing = true;var entry = state.bufferedRequest;if (stream._writev && entry && entry.next) {
          // Fast case, write everything using _writev()
          var l = state.bufferedRequestCount;var buffer = new Array(l);var holder = state.corkedRequestsFree;holder.entry = entry;var count = 0;while (entry) {
            buffer[count] = entry;entry = entry.next;count += 1;
          }doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is always async, defer these to save a bit of time
          // as the hot path ends with doWrite
          state.pendingcb++;state.lastBufferedRequest = null;state.corkedRequestsFree = holder.next;holder.next = null;
        } else {
          // Slow case, write chunks one-by-one
          while (entry) {
            var chunk = entry.chunk;var encoding = entry.encoding;var cb = entry.callback;var len = state.objectMode ? 1 : chunk.length;doWrite(stream, state, false, len, chunk, encoding, cb);entry = entry.next; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) {
              break;
            }
          }if (entry === null) state.lastBufferedRequest = null;
        }state.bufferedRequestCount = 0;state.bufferedRequest = entry;state.bufferProcessing = false;
      }Writable.prototype._write = function (chunk, encoding, cb) {
        cb(new Error('not implemented'));
      };Writable.prototype._writev = null;Writable.prototype.end = function (chunk, encoding, cb) {
        var state = this._writableState;if (typeof chunk === 'function') {
          cb = chunk;chunk = null;encoding = null;
        } else if (typeof encoding === 'function') {
          cb = encoding;encoding = null;
        }if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
        if (state.corked) {
          state.corked = 1;this.uncork();
        } // ignore unnecessary end() calls.
        if (!state.ending && !state.finished) endWritable(this, state, cb);
      };function needFinish(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }function prefinish(stream, state) {
        if (!state.prefinished) {
          state.prefinished = true;stream.emit('prefinish');
        }
      }function finishMaybe(stream, state) {
        var need = needFinish(state);if (need) {
          if (state.pendingcb === 0) {
            prefinish(stream, state);state.finished = true;stream.emit('finish');
          } else {
            prefinish(stream, state);
          }
        }return need;
      }function endWritable(stream, state, cb) {
        state.ending = true;finishMaybe(stream, state);if (cb) {
          if (state.finished) processNextTick(cb);else stream.once('finish', cb);
        }state.ended = true;stream.writable = false;
      } // It seems a linked list but it is not
      // there will be only 2 of these for each stream
      function CorkedRequest(state) {
        var _this = this;this.next = null;this.entry = null;this.finish = function (err) {
          var entry = _this.entry;_this.entry = null;while (entry) {
            var cb = entry.callback;state.pendingcb--;cb(err);entry = entry.next;
          }if (state.corkedRequestsFree) {
            state.corkedRequestsFree.next = _this;
          } else {
            state.corkedRequestsFree = _this;
          }
        };
      }
    }).call(this, require('_process'));
  }, { "./_stream_duplex": 85, "_process": 12, "buffer": 14, "core-util-is": 15, "events": 17, "inherits": 31, "process-nextick-args": 82, "util-deprecate": 101 }], 90: [function (require, module, exports) {
    module.exports = require("./lib/_stream_passthrough.js");
  }, { "./lib/_stream_passthrough.js": 86 }], 91: [function (require, module, exports) {
    var Stream = function () {
      try {
        return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
      } catch (_) {}
    }();exports = module.exports = require('./lib/_stream_readable.js');exports.Stream = Stream || exports;exports.Readable = exports;exports.Writable = require('./lib/_stream_writable.js');exports.Duplex = require('./lib/_stream_duplex.js');exports.Transform = require('./lib/_stream_transform.js');exports.PassThrough = require('./lib/_stream_passthrough.js');
  }, { "./lib/_stream_duplex.js": 85, "./lib/_stream_passthrough.js": 86, "./lib/_stream_readable.js": 87, "./lib/_stream_transform.js": 88, "./lib/_stream_writable.js": 89 }], 92: [function (require, module, exports) {
    module.exports = require("./lib/_stream_transform.js");
  }, { "./lib/_stream_transform.js": 88 }], 93: [function (require, module, exports) {
    module.exports = require("./lib/_stream_writable.js");
  }, { "./lib/_stream_writable.js": 89 }], 94: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    module.exports = Stream;var EE = require('events').EventEmitter;var inherits = require('inherits');inherits(Stream, EE);Stream.Readable = require('readable-stream/readable.js');Stream.Writable = require('readable-stream/writable.js');Stream.Duplex = require('readable-stream/duplex.js');Stream.Transform = require('readable-stream/transform.js');Stream.PassThrough = require('readable-stream/passthrough.js'); // Backwards-compat with node 0.4.x
    Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.
    function Stream() {
      EE.call(this);
    }Stream.prototype.pipe = function (dest, options) {
      var source = this;function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }source.on('data', ondata);function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);source.on('close', onclose);
      }var didOnEnd = false;function onend() {
        if (didOnEnd) return;didOnEnd = true;dest.end();
      }function onclose() {
        if (didOnEnd) return;didOnEnd = true;if (typeof dest.destroy === 'function') dest.destroy();
      } // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();if (EE.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }source.on('error', onerror);dest.on('error', onerror); // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);dest.removeListener('drain', ondrain);source.removeListener('end', onend);source.removeListener('close', onclose);source.removeListener('error', onerror);dest.removeListener('error', onerror);source.removeListener('end', cleanup);source.removeListener('close', cleanup);dest.removeListener('close', cleanup);
      }source.on('end', cleanup);source.on('close', cleanup);dest.on('close', cleanup);dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };
  }, { "events": 17, "inherits": 31, "readable-stream/duplex.js": 84, "readable-stream/passthrough.js": 90, "readable-stream/readable.js": 91, "readable-stream/transform.js": 92, "readable-stream/writable.js": 93 }], 95: [function (require, module, exports) {
    module.exports = require('stream-to').buffer;
  }, { "stream-to": 96 }], 96: [function (require, module, exports) {
    (function (Buffer) {
      exports.array = toArray;exports.buffer = toBuffer;function toArray(stream, callback) {
        var arr = [];stream.on('data', onData);stream.once('end', onEnd);stream.once('error', callback);stream.once('error', cleanup);stream.once('close', cleanup);function onData(doc) {
          arr.push(doc);
        }function onEnd() {
          callback(null, arr);cleanup();
        }function cleanup() {
          arr = null;stream.removeListener('data', onData);stream.removeListener('end', onEnd);stream.removeListener('error', callback);stream.removeListener('error', cleanup);stream.removeListener('close', cleanup);
        }return stream;
      }function toBuffer(stream, callback) {
        toArray(stream, function (err, arr) {
          if (err || !arr) callback(err);else callback(null, Buffer.concat(arr));
        });return stream;
      }
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14 }], 97: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    var Buffer = require('buffer').Buffer;var isBufferEncoding = Buffer.isEncoding || function (encoding) {
      switch (encoding && encoding.toLowerCase()) {case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;default:
          return false;}
    };function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    } // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    var StringDecoder = exports.StringDecoder = function (encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');assertEncoding(encoding);switch (this.encoding) {case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;break;case 'ucs2':case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;this.detectIncompleteChar = utf16DetectIncompleteChar;break;case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;this.detectIncompleteChar = base64DetectIncompleteChar;break;default:
          this.write = passThroughWrite;return;} // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer(6); // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    }; // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function (buffer) {
      var charStr = ''; // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);this.charReceived += available;if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        } // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length); // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;charStr = '';continue;
        }this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }break;
      } // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);var end = buffer.length;if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);end -= this.charReceived;
      }charStr += buffer.toString(this.encoding, 0, end);var end = charStr.length - 1;var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;this.charLength += size;this.charReceived += size;this.charBuffer.copy(this.charBuffer, size, 0, size);buffer.copy(this.charBuffer, 0, 0, size);return charStr.substring(0, end);
      } // or just emit the charStr
      return charStr;
    }; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function (buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;break;
        } // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;break;
        } // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;break;
        }
      }this.charReceived = i;
    };StringDecoder.prototype.end = function (buffer) {
      var res = '';if (buffer && buffer.length) res = this.write(buffer);if (this.charReceived) {
        var cr = this.charReceived;var buf = this.charBuffer;var enc = this.encoding;res += buf.slice(0, cr).toString(enc);
      }return res;
    };function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;this.charLength = this.charReceived ? 2 : 0;
    }function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;this.charLength = this.charReceived ? 3 : 0;
    }
  }, { "buffer": 14 }], 98: [function (require, module, exports) {
    // TinyColor v1.4.1
    // https://github.com/bgrins/TinyColor
    // Brian Grinstead, MIT License
    (function (Math) {
      var trimLeft = /^\s+/,
          trimRight = /\s+$/,
          tinyCounter = 0,
          mathRound = Math.round,
          mathMin = Math.min,
          mathMax = Math.max,
          mathRandom = Math.random;function tinycolor(color, opts) {
        color = color ? color : '';opts = opts || {}; // If input is already a tinycolor, return itself
        if (color instanceof tinycolor) {
          return color;
        } // If we are called as a function, call using new instead
        if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
        }var rgb = inputToRGB(color);this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`
        if (this._r < 1) {
          this._r = mathRound(this._r);
        }if (this._g < 1) {
          this._g = mathRound(this._g);
        }if (this._b < 1) {
          this._b = mathRound(this._b);
        }this._ok = rgb.ok;this._tc_id = tinyCounter++;
      }tinycolor.prototype = { isDark: function isDark() {
          return this.getBrightness() < 128;
        }, isLight: function isLight() {
          return !this.isDark();
        }, isValid: function isValid() {
          return this._ok;
        }, getOriginalInput: function getOriginalInput() {
          return this._originalInput;
        }, getFormat: function getFormat() {
          return this._format;
        }, getAlpha: function getAlpha() {
          return this._a;
        }, getBrightness: function getBrightness() {
          //http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        }, getLuminance: function getLuminance() {
          //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();var RsRGB, GsRGB, BsRGB, R, G, B;RsRGB = rgb.r / 255;GsRGB = rgb.g / 255;BsRGB = rgb.b / 255;if (RsRGB <= 0.03928) {
            R = RsRGB / 12.92;
          } else {
            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
          }if (GsRGB <= 0.03928) {
            G = GsRGB / 12.92;
          } else {
            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
          }if (BsRGB <= 0.03928) {
            B = BsRGB / 12.92;
          } else {
            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
          }return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        }, setAlpha: function setAlpha(value) {
          this._a = boundAlpha(value);this._roundA = mathRound(100 * this._a) / 100;return this;
        }, toHsv: function toHsv() {
          var hsv = rgbToHsv(this._r, this._g, this._b);return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
        }, toHsvString: function toHsvString() {
          var hsv = rgbToHsv(this._r, this._g, this._b);var h = mathRound(hsv.h * 360),
              s = mathRound(hsv.s * 100),
              v = mathRound(hsv.v * 100);return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        }, toHsl: function toHsl() {
          var hsl = rgbToHsl(this._r, this._g, this._b);return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
        }, toHslString: function toHslString() {
          var hsl = rgbToHsl(this._r, this._g, this._b);var h = mathRound(hsl.h * 360),
              s = mathRound(hsl.s * 100),
              l = mathRound(hsl.l * 100);return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        }, toHex: function toHex(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        }, toHexString: function toHexString(allow3Char) {
          return '#' + this.toHex(allow3Char);
        }, toHex8: function toHex8(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        }, toHex8String: function toHex8String(allow4Char) {
          return '#' + this.toHex8(allow4Char);
        }, toRgb: function toRgb() {
          return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
        }, toRgbString: function toRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        }, toPercentageRgb: function toPercentageRgb() {
          return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
        }, toPercentageRgbString: function toPercentageRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        }, toName: function toName() {
          if (this._a === 0) {
            return "transparent";
          }if (this._a < 1) {
            return false;
          }return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        }, toFilter: function toFilter(secondColor) {
          var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);var secondHex8String = hex8String;var gradientType = this._gradientType ? "GradientType = 1, " : "";if (secondColor) {
            var s = tinycolor(secondColor);secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        }, toString: function toString(format) {
          var formatSet = !!format;format = format || this._format;var formattedString = false;var hasAlpha = this._a < 1 && this._a >= 0;var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
              return this.toName();
            }return this.toRgbString();
          }if (format === "rgb") {
            formattedString = this.toRgbString();
          }if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
          }if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
          }if (format === "hex3") {
            formattedString = this.toHexString(true);
          }if (format === "hex4") {
            formattedString = this.toHex8String(true);
          }if (format === "hex8") {
            formattedString = this.toHex8String();
          }if (format === "name") {
            formattedString = this.toName();
          }if (format === "hsl") {
            formattedString = this.toHslString();
          }if (format === "hsv") {
            formattedString = this.toHsvString();
          }return formattedString || this.toHexString();
        }, clone: function clone() {
          return tinycolor(this.toString());
        }, _applyModification: function _applyModification(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));this._r = color._r;this._g = color._g;this._b = color._b;this.setAlpha(color._a);return this;
        }, lighten: function lighten() {
          return this._applyModification(_lighten, arguments);
        }, brighten: function brighten() {
          return this._applyModification(_brighten, arguments);
        }, darken: function darken() {
          return this._applyModification(_darken, arguments);
        }, desaturate: function desaturate() {
          return this._applyModification(_desaturate, arguments);
        }, saturate: function saturate() {
          return this._applyModification(_saturate, arguments);
        }, greyscale: function greyscale() {
          return this._applyModification(_greyscale, arguments);
        }, spin: function spin() {
          return this._applyModification(_spin, arguments);
        }, _applyCombination: function _applyCombination(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
        }, analogous: function analogous() {
          return this._applyCombination(_analogous, arguments);
        }, complement: function complement() {
          return this._applyCombination(_complement, arguments);
        }, monochromatic: function monochromatic() {
          return this._applyCombination(_monochromatic, arguments);
        }, splitcomplement: function splitcomplement() {
          return this._applyCombination(_splitcomplement, arguments);
        }, triad: function triad() {
          return this._applyCombination(_triad, arguments);
        }, tetrad: function tetrad() {
          return this._applyCombination(_tetrad, arguments);
        } }; // If input is an object, force 1 into "1.0" to handle ratios properly
      // String input requires "1.0" as input, so 1 will be treated as 1
      tinycolor.fromRatio = function (color, opts) {
        if ((typeof color === "undefined" ? "undefined" : _typeof(color)) == "object") {
          var newColor = {};for (var i in color) {
            if (color.hasOwnProperty(i)) {
              if (i === "a") {
                newColor[i] = color[i];
              } else {
                newColor[i] = convertToPercentage(color[i]);
              }
            }
          }color = newColor;
        }return tinycolor(color, opts);
      }; // Given a string or object, convert that input to RGB
      // Possible string inputs:
      //
      //     "red"
      //     "#f00" or "f00"
      //     "#ff0000" or "ff0000"
      //     "#ff000000" or "ff000000"
      //     "rgb 255 0 0" or "rgb (255, 0, 0)"
      //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
      //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
      //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
      //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
      //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
      //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
      //
      function inputToRGB(color) {
        var rgb = { r: 0, g: 0, b: 0 };var a = 1;var s = null;var v = null;var l = null;var ok = false;var format = false;if (typeof color == "string") {
          color = stringInputToObject(color);
        }if ((typeof color === "undefined" ? "undefined" : _typeof(color)) == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);ok = true;format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);v = convertToPercentage(color.v);rgb = hsvToRgb(color.h, s, v);ok = true;format = "hsv";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);l = convertToPercentage(color.l);rgb = hslToRgb(color.h, s, l);ok = true;format = "hsl";
          }if (color.hasOwnProperty("a")) {
            a = color.a;
          }
        }a = boundAlpha(a);return { ok: ok, format: color.format || format, r: mathMin(255, mathMax(rgb.r, 0)), g: mathMin(255, mathMax(rgb.g, 0)), b: mathMin(255, mathMax(rgb.b, 0)), a: a };
      } // Conversion Functions
      // --------------------
      // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
      // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
      // `rgbToRgb`
      // Handle bounds / percentage checking to conform to CSS color spec
      // <http://www.w3.org/TR/css3-color/>
      // *Assumes:* r, g, b in [0, 255] or [0, 1]
      // *Returns:* { r, g, b } in [0, 255]
      function rgbToRgb(r, g, b) {
        return { r: bound01(r, 255) * 255, g: bound01(g, 255) * 255, b: bound01(b, 255) * 255 };
      } // `rgbToHsl`
      // Converts an RGB color value to HSL.
      // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
      // *Returns:* { h, s, l } in [0,1]
      function rgbToHsl(r, g, b) {
        r = bound01(r, 255);g = bound01(g, 255);b = bound01(b, 255);var max = mathMax(r, g, b),
            min = mathMin(r, g, b);var h,
            s,
            l = (max + min) / 2;if (max == min) {
          h = s = 0; // achromatic
        } else {
          var d = max - min;s = l > 0.5 ? d / (2 - max - min) : d / (max + min);switch (max) {case r:
              h = (g - b) / d + (g < b ? 6 : 0);break;case g:
              h = (b - r) / d + 2;break;case b:
              h = (r - g) / d + 4;break;}h /= 6;
        }return { h: h, s: s, l: l };
      } // `hslToRgb`
      // Converts an HSL color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]
      function hslToRgb(h, s, l) {
        var r, g, b;h = bound01(h, 360);s = bound01(s, 100);l = bound01(l, 100);function hue2rgb(p, q, t) {
          if (t < 0) t += 1;if (t > 1) t -= 1;if (t < 1 / 6) return p + (q - p) * 6 * t;if (t < 1 / 2) return q;if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;return p;
        }if (s === 0) {
          r = g = b = l; // achromatic
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;var p = 2 * l - q;r = hue2rgb(p, q, h + 1 / 3);g = hue2rgb(p, q, h);b = hue2rgb(p, q, h - 1 / 3);
        }return { r: r * 255, g: g * 255, b: b * 255 };
      } // `rgbToHsv`
      // Converts an RGB color value to HSV
      // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
      // *Returns:* { h, s, v } in [0,1]
      function rgbToHsv(r, g, b) {
        r = bound01(r, 255);g = bound01(g, 255);b = bound01(b, 255);var max = mathMax(r, g, b),
            min = mathMin(r, g, b);var h,
            s,
            v = max;var d = max - min;s = max === 0 ? 0 : d / max;if (max == min) {
          h = 0; // achromatic
        } else {
          switch (max) {case r:
              h = (g - b) / d + (g < b ? 6 : 0);break;case g:
              h = (b - r) / d + 2;break;case b:
              h = (r - g) / d + 4;break;}h /= 6;
        }return { h: h, s: s, v: v };
      } // `hsvToRgb`
      // Converts an HSV color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]
      function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;s = bound01(s, 100);v = bound01(v, 100);var i = Math.floor(h),
            f = h - i,
            p = v * (1 - s),
            q = v * (1 - f * s),
            t = v * (1 - (1 - f) * s),
            mod = i % 6,
            r = [v, q, p, p, t, v][mod],
            g = [t, v, v, q, p, p][mod],
            b = [p, p, t, v, v, q][mod];return { r: r * 255, g: g * 255, b: b * 255 };
      } // `rgbToHex`
      // Converts an RGB color to hex
      // Assumes r, g, and b are contained in the set [0, 255]
      // Returns a 3 or 6 character hex
      function rgbToHex(r, g, b, allow3Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible
        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }return hex.join("");
      } // `rgbaToHex`
      // Converts an RGBA color plus alpha transparency to hex
      // Assumes r, g, b are contained in the set [0, 255] and
      // a in [0, 1]. Returns a 4 or 8 character rgba hex
      function rgbaToHex(r, g, b, a, allow4Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible
        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }return hex.join("");
      } // `rgbaToArgbHex`
      // Converts an RGBA color to an ARGB Hex8 string
      // Rarely used, but required for "toFilter()"
      function rgbaToArgbHex(r, g, b, a) {
        var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];return hex.join("");
      } // `equals`
      // Can be called with any tinycolor input
      tinycolor.equals = function (color1, color2) {
        if (!color1 || !color2) {
          return false;
        }return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
      };tinycolor.random = function () {
        return tinycolor.fromRatio({ r: mathRandom(), g: mathRandom(), b: mathRandom() });
      }; // Modification Functions
      // ----------------------
      // Thanks to less.js for some of the basics here
      // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>
      function _desaturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;var hsl = tinycolor(color).toHsl();hsl.s -= amount / 100;hsl.s = clamp01(hsl.s);return tinycolor(hsl);
      }function _saturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;var hsl = tinycolor(color).toHsl();hsl.s += amount / 100;hsl.s = clamp01(hsl.s);return tinycolor(hsl);
      }function _greyscale(color) {
        return tinycolor(color).desaturate(100);
      }function _lighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;var hsl = tinycolor(color).toHsl();hsl.l += amount / 100;hsl.l = clamp01(hsl.l);return tinycolor(hsl);
      }function _brighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;var rgb = tinycolor(color).toRgb();rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));return tinycolor(rgb);
      }function _darken(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;var hsl = tinycolor(color).toHsl();hsl.l -= amount / 100;hsl.l = clamp01(hsl.l);return tinycolor(hsl);
      } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
      // Values outside of this range will be wrapped into this range.
      function _spin(color, amount) {
        var hsl = tinycolor(color).toHsl();var hue = (hsl.h + amount) % 360;hsl.h = hue < 0 ? 360 + hue : hue;return tinycolor(hsl);
      } // Combination Functions
      // ---------------------
      // Thanks to jQuery xColor for some of the ideas behind these
      // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>
      function _complement(color) {
        var hsl = tinycolor(color).toHsl();hsl.h = (hsl.h + 180) % 360;return tinycolor(hsl);
      }function _triad(color) {
        var hsl = tinycolor(color).toHsl();var h = hsl.h;return [tinycolor(color), tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })];
      }function _tetrad(color) {
        var hsl = tinycolor(color).toHsl();var h = hsl.h;return [tinycolor(color), tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })];
      }function _splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();var h = hsl.h;return [tinycolor(color), tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }), tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })];
      }function _analogous(color, results, slices) {
        results = results || 6;slices = slices || 30;var hsl = tinycolor(color).toHsl();var part = 360 / slices;var ret = [tinycolor(color)];for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
          hsl.h = (hsl.h + part) % 360;ret.push(tinycolor(hsl));
        }return ret;
      }function _monochromatic(color, results) {
        results = results || 6;var hsv = tinycolor(color).toHsv();var h = hsv.h,
            s = hsv.s,
            v = hsv.v;var ret = [];var modification = 1 / results;while (results--) {
          ret.push(tinycolor({ h: h, s: s, v: v }));v = (v + modification) % 1;
        }return ret;
      } // Utility Functions
      // ---------------------
      tinycolor.mix = function (color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;var rgb1 = tinycolor(color1).toRgb();var rgb2 = tinycolor(color2).toRgb();var p = amount / 100;var rgba = { r: (rgb2.r - rgb1.r) * p + rgb1.r, g: (rgb2.g - rgb1.g) * p + rgb1.g, b: (rgb2.b - rgb1.b) * p + rgb1.b, a: (rgb2.a - rgb1.a) * p + rgb1.a };return tinycolor(rgba);
      }; // Readability Functions
      // ---------------------
      // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
      // `contrast`
      // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
      tinycolor.readability = function (color1, color2) {
        var c1 = tinycolor(color1);var c2 = tinycolor(color2);return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      }; // `isReadable`
      // Ensure that foreground and background color combinations meet WCAG2 guidelines.
      // The third argument is an optional Object.
      //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
      //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
      // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
      // *Example*
      //    tinycolor.isReadable("#000", "#111") => false
      //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
      tinycolor.isReadable = function (color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);var wcag2Parms, out;out = false;wcag2Parms = validateWCAG2Parms(wcag2);switch (wcag2Parms.level + wcag2Parms.size) {case "AAsmall":case "AAAlarge":
            out = readability >= 4.5;break;case "AAlarge":
            out = readability >= 3;break;case "AAAsmall":
            out = readability >= 7;break;}return out;
      }; // `mostReadable`
      // Given a base color and a list of possible foreground or background
      // colors for that base, returns the most readable color.
      // Optionally returns Black or White if the most readable color is unreadable.
      // *Example*
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
      tinycolor.mostReadable = function (baseColor, colorList, args) {
        var bestColor = null;var bestScore = 0;var readability;var includeFallbackColors, level, size;args = args || {};includeFallbackColors = args.includeFallbackColors;level = args.level;size = args.size;for (var i = 0; i < colorList.length; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);if (readability > bestScore) {
            bestScore = readability;bestColor = tinycolor(colorList[i]);
          }
        }if (tinycolor.isReadable(baseColor, bestColor, { "level": level, "size": size }) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      }; // Big List of Colors
      // ------------------
      // <http://www.w3.org/TR/css3-color/#svg-color>
      var names = tinycolor.names = { aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "0ff", aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc", bisque: "ffe4c4", black: "000", blanchedalmond: "ffebcd", blue: "00f", blueviolet: "8a2be2", brown: "a52a2a", burlywood: "deb887", burntsienna: "ea7e5d", cadetblue: "5f9ea0", chartreuse: "7fff00", chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed", cornsilk: "fff8dc", crimson: "dc143c", cyan: "0ff", darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b", darkgray: "a9a9a9", darkgreen: "006400", darkgrey: "a9a9a9", darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f", darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000", darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b", darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1", darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff", dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff", firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22", fuchsia: "f0f", gainsboro: "dcdcdc", ghostwhite: "f8f8ff", gold: "ffd700", goldenrod: "daa520", gray: "808080", green: "008000", greenyellow: "adff2f", grey: "808080", honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c", indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c", lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00", lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080", lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3", lightgreen: "90ee90", lightgrey: "d3d3d3", lightpink: "ffb6c1", lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa", lightslategray: "789", lightslategrey: "789", lightsteelblue: "b0c4de", lightyellow: "ffffe0", lime: "0f0", limegreen: "32cd32", linen: "faf0e6", magenta: "f0f", maroon: "800000", mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3", mediumpurple: "9370db", mediumseagreen: "3cb371", mediumslateblue: "7b68ee", mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585", midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1", moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080", oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23", orange: "ffa500", orangered: "ff4500", orchid: "da70d6", palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee", palevioletred: "db7093", papayawhip: "ffefd5", peachpuff: "ffdab9", peru: "cd853f", pink: "ffc0cb", plum: "dda0dd", powderblue: "b0e0e6", purple: "800080", rebeccapurple: "663399", red: "f00", rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513", salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57", seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0", skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090", slategrey: "708090", snow: "fffafa", springgreen: "00ff7f", steelblue: "4682b4", tan: "d2b48c", teal: "008080", thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee", wheat: "f5deb3", white: "fff", whitesmoke: "f5f5f5", yellow: "ff0", yellowgreen: "9acd32" }; // Make it easy to access colors via `hexNames[hex]`
      var hexNames = tinycolor.hexNames = flip(names); // Utilities
      // ---------
      // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
      function flip(o) {
        var flipped = {};for (var i in o) {
          if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
          }
        }return flipped;
      } // Return a valid alpha value [0,1] with all invalid values being set to 1
      function boundAlpha(a) {
        a = parseFloat(a);if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
        }return a;
      } // Take input from [0, n] and return it as [0, 1]
      function bound01(n, max) {
        if (isOnePointZero(n)) {
          n = "100%";
        }var processPercent = isPercentage(n);n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number
        if (processPercent) {
          n = parseInt(n * max, 10) / 100;
        } // Handle floating point rounding errors
        if (Math.abs(n - max) < 0.000001) {
          return 1;
        } // Convert into [0, 1] range if it isn't already
        return n % max / parseFloat(max);
      } // Force a number between 0 and 1
      function clamp01(val) {
        return mathMin(1, mathMax(0, val));
      } // Parse a base-16 hex value into a base-10 integer
      function parseIntFromHex(val) {
        return parseInt(val, 16);
      } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
      // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
      function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
      } // Check to see if string passed in is a percentage
      function isPercentage(n) {
        return typeof n === "string" && n.indexOf('%') != -1;
      } // Force a hex value to have 2 characters
      function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
      } // Replace a decimal with it's percentage value
      function convertToPercentage(n) {
        if (n <= 1) {
          n = n * 100 + "%";
        }return n;
      } // Converts a decimal to a hex value
      function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
      } // Converts a hex value to a decimal
      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }var matchers = function () {
        // <http://www.w3.org/TR/css3-values/#integers>
        var CSS_INTEGER = "[-\\+]?\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.
        // Parentheses and commas are optional, but not required.
        // Whitespace can take the place of commas or opening paren
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";return { CSS_UNIT: new RegExp(CSS_UNIT), rgb: new RegExp("rgb" + PERMISSIVE_MATCH3), rgba: new RegExp("rgba" + PERMISSIVE_MATCH4), hsl: new RegExp("hsl" + PERMISSIVE_MATCH3), hsla: new RegExp("hsla" + PERMISSIVE_MATCH4), hsv: new RegExp("hsv" + PERMISSIVE_MATCH3), hsva: new RegExp("hsva" + PERMISSIVE_MATCH4), hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/, hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/, hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/, hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/ };
      }(); // `isValidCSSUnit`
      // Take in a single string / number and check to see if it looks like a CSS unit
      // (see `matchers` above for definition).
      function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
      } // `stringInputToObject`
      // Permissive string parsing.  Take in a number of formats, and output an object
      // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
      function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();var named = false;if (names[color]) {
          color = names[color];named = true;
        } else if (color == 'transparent') {
          return { r: 0, g: 0, b: 0, a: 0, format: "name" };
        } // Try to match string input using regular expressions.
        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
        // Just return an object and let the conversion functions handle that.
        // This way the result will be the same whether the tinycolor is initialized with string or object.
        var match;if (match = matchers.rgb.exec(color)) {
          return { r: match[1], g: match[2], b: match[3] };
        }if (match = matchers.rgba.exec(color)) {
          return { r: match[1], g: match[2], b: match[3], a: match[4] };
        }if (match = matchers.hsl.exec(color)) {
          return { h: match[1], s: match[2], l: match[3] };
        }if (match = matchers.hsla.exec(color)) {
          return { h: match[1], s: match[2], l: match[3], a: match[4] };
        }if (match = matchers.hsv.exec(color)) {
          return { h: match[1], s: match[2], v: match[3] };
        }if (match = matchers.hsva.exec(color)) {
          return { h: match[1], s: match[2], v: match[3], a: match[4] };
        }if (match = matchers.hex8.exec(color)) {
          return { r: parseIntFromHex(match[1]), g: parseIntFromHex(match[2]), b: parseIntFromHex(match[3]), a: convertHexToDecimal(match[4]), format: named ? "name" : "hex8" };
        }if (match = matchers.hex6.exec(color)) {
          return { r: parseIntFromHex(match[1]), g: parseIntFromHex(match[2]), b: parseIntFromHex(match[3]), format: named ? "name" : "hex" };
        }if (match = matchers.hex4.exec(color)) {
          return { r: parseIntFromHex(match[1] + '' + match[1]), g: parseIntFromHex(match[2] + '' + match[2]), b: parseIntFromHex(match[3] + '' + match[3]), a: convertHexToDecimal(match[4] + '' + match[4]), format: named ? "name" : "hex8" };
        }if (match = matchers.hex3.exec(color)) {
          return { r: parseIntFromHex(match[1] + '' + match[1]), g: parseIntFromHex(match[2] + '' + match[2]), b: parseIntFromHex(match[3] + '' + match[3]), format: named ? "name" : "hex" };
        }return false;
      }function validateWCAG2Parms(parms) {
        // return valid WCAG2 parms for isReadable.
        // If input parms are invalid, return {"level":"AA", "size":"small"}
        var level, size;parms = parms || { "level": "AA", "size": "small" };level = (parms.level || "AA").toUpperCase();size = (parms.size || "small").toLowerCase();if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }if (size !== "small" && size !== "large") {
          size = "small";
        }return { "level": level, "size": size };
      } // Node: Export function
      if (typeof module !== "undefined" && module.exports) {
        module.exports = tinycolor;
      } // AMD/requirejs: Define the module
      else if (typeof define === 'function' && define.amd) {
          define(function () {
            return tinycolor;
          });
        } // Browser: Expose to window
        else {
            window.tinycolor = tinycolor;
          }
    })(Math);
  }, {}], 99: [function (require, module, exports) {
    exports = module.exports = trim;function trim(str) {
      return str.replace(/^\s*|\s*$/g, '');
    }exports.left = function (str) {
      return str.replace(/^\s*/, '');
    };exports.right = function (str) {
      return str.replace(/\s*$/, '');
    };
  }, {}], 100: [function (require, module, exports) {
    'use strict';
    var ipRegex = require('ip-regex');module.exports = function (opts) {
      opts = opts || {};var protocol = '(?:(?:[a-z]+:)?//)';var auth = '(?:\\S+(?::\\S*)?@)?';var ip = ipRegex.v4().source;var host = "(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)";var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";var port = '(?::\\d{2,5})?';var path = '(?:[/?#][^\\s"]*)?';var regex = ['(?:' + protocol + '|www\\.)' + auth, '(?:localhost|' + ip + '|' + host + domain + tld + ')', port, path].join('');return opts.exact ? new RegExp('(?:^' + regex + '$)', 'i') : new RegExp(regex, 'ig');
    };
  }, { "ip-regex": 32 }], 101: [function (require, module, exports) {
    (function (global) {
      /**
      * Module exports.
      */module.exports = deprecate; /**
                                    * Mark that a method should not be used.
                                    * Returns a modified function which warns once by default.
                                    *
                                    * If `localStorage.noDeprecation = true` is set, then it is a no-op.
                                    *
                                    * If `localStorage.throwDeprecation = true` is set, then deprecated functions
                                    * will throw an Error when invoked.
                                    *
                                    * If `localStorage.traceDeprecation = true` is set, then deprecated functions
                                    * will invoke `console.trace()` instead of `console.error()`.
                                    *
                                    * @param {Function} fn - the function to deprecate
                                    * @param {String} msg - the string to print to the console when `fn` is invoked
                                    * @returns {Function} a new "deprecated" version of `fn`
                                    * @api public
                                    */function deprecate(fn, msg) {
        if (config('noDeprecation')) {
          return fn;
        }var warned = false;function deprecated() {
          if (!warned) {
            if (config('throwDeprecation')) {
              throw new Error(msg);
            } else if (config('traceDeprecation')) {
              console.trace(msg);
            } else {
              console.warn(msg);
            }warned = true;
          }return fn.apply(this, arguments);
        }return deprecated;
      } /**
        * Checks `localStorage` for boolean values for the given `name`.
        *
        * @param {String} name
        * @returns {Boolean}
        * @api private
        */function config(name) {
        // accessing global.localStorage can trigger a DOMException in sandboxed iframes
        try {
          if (!global.localStorage) return false;
        } catch (_) {
          return false;
        }var val = global.localStorage[name];if (null == val) return false;return String(val).toLowerCase() === 'true';
      }
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}], 102: [function (require, module, exports) {
    module.exports = function isBuffer(arg) {
      return arg && (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
    };
  }, {}], 103: [function (require, module, exports) {
    (function (process, global) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      var formatRegExp = /%[sdj%]/g;exports.format = function (f) {
        if (!isString(f)) {
          var objects = [];for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect(arguments[i]));
          }return objects.join(' ');
        }var i = 1;var args = arguments;var len = args.length;var str = String(f).replace(formatRegExp, function (x) {
          if (x === '%%') return '%';if (i >= len) return x;switch (x) {case '%s':
              return String(args[i++]);case '%d':
              return Number(args[i++]);case '%j':
              try {
                return JSON.stringify(args[i++]);
              } catch (_) {
                return '[Circular]';
              }default:
              return x;}
        });for (var x = args[i]; i < len; x = args[++i]) {
          if (isNull(x) || !isObject(x)) {
            str += ' ' + x;
          } else {
            str += ' ' + inspect(x);
          }
        }return str;
      }; // Mark that a method should not be used.
      // Returns a modified function which warns once by default.
      // If --no-deprecation is set, then it is a no-op.
      exports.deprecate = function (fn, msg) {
        // Allow for deprecating things in the process of starting up.
        if (isUndefined(global.process)) {
          return function () {
            return exports.deprecate(fn, msg).apply(this, arguments);
          };
        }if (process.noDeprecation === true) {
          return fn;
        }var warned = false;function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) {
              throw new Error(msg);
            } else if (process.traceDeprecation) {
              console.trace(msg);
            } else {
              console.error(msg);
            }warned = true;
          }return fn.apply(this, arguments);
        }return deprecated;
      };var debugs = {};var debugEnviron;exports.debuglog = function (set) {
        if (isUndefined(debugEnviron)) debugEnviron = undefined || '';set = set.toUpperCase();if (!debugs[set]) {
          if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
            var pid = process.pid;debugs[set] = function () {
              var msg = exports.format.apply(exports, arguments);console.error('%s %d: %s', set, pid, msg);
            };
          } else {
            debugs[set] = function () {};
          }
        }return debugs[set];
      }; /**
         * Echos the value of a value. Trys to print the value out
         * in the best way possible given the different types.
         *
         * @param {Object} obj The object to print out.
         * @param {Object} opts Optional options object that alters the output.
         */ /* legacy: obj, showHidden, depth, colors*/function inspect(obj, opts) {
        // default options
        var ctx = { seen: [], stylize: stylizeNoColor }; // legacy...
        if (arguments.length >= 3) ctx.depth = arguments[2];if (arguments.length >= 4) ctx.colors = arguments[3];if (isBoolean(opts)) {
          // legacy...
          ctx.showHidden = opts;
        } else if (opts) {
          // got an "options" object
          exports._extend(ctx, opts);
        } // set default options
        if (isUndefined(ctx.showHidden)) ctx.showHidden = false;if (isUndefined(ctx.depth)) ctx.depth = 2;if (isUndefined(ctx.colors)) ctx.colors = false;if (isUndefined(ctx.customInspect)) ctx.customInspect = true;if (ctx.colors) ctx.stylize = stylizeWithColor;return formatValue(ctx, obj, ctx.depth);
      }exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
      inspect.colors = { 'bold': [1, 22], 'italic': [3, 23], 'underline': [4, 24], 'inverse': [7, 27], 'white': [37, 39], 'grey': [90, 39], 'black': [30, 39], 'blue': [34, 39], 'cyan': [36, 39], 'green': [32, 39], 'magenta': [35, 39], 'red': [31, 39], 'yellow': [33, 39] }; // Don't use 'blue' not visible on cmd.exe
      inspect.styles = { 'special': 'cyan', 'number': 'yellow', 'boolean': 'yellow', 'undefined': 'grey', 'null': 'bold', 'string': 'green', 'date': 'magenta', // "name": intentionally not styling
        'regexp': 'red' };function stylizeWithColor(str, styleType) {
        var style = inspect.styles[styleType];if (style) {
          return "\u001b[" + inspect.colors[style][0] + 'm' + str + "\u001b[" + inspect.colors[style][1] + 'm';
        } else {
          return str;
        }
      }function stylizeNoColor(str, styleType) {
        return str;
      }function arrayToHash(array) {
        var hash = {};array.forEach(function (val, idx) {
          hash[val] = true;
        });return hash;
      }function formatValue(ctx, value, recurseTimes) {
        // Provide a hook for user-specified inspect functions.
        // Check that value is an object with an inspect function on it
        if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
          var ret = value.inspect(recurseTimes, ctx);if (!isString(ret)) {
            ret = formatValue(ctx, ret, recurseTimes);
          }return ret;
        } // Primitive types cannot have properties
        var primitive = formatPrimitive(ctx, value);if (primitive) {
          return primitive;
        } // Look up the keys of the object.
        var keys = Object.keys(value);var visibleKeys = arrayToHash(keys);if (ctx.showHidden) {
          keys = Object.getOwnPropertyNames(value);
        } // IE doesn't make error fields non-enumerable
        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
        if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
          return formatError(value);
        } // Some type of object without properties can be shortcutted.
        if (keys.length === 0) {
          if (isFunction(value)) {
            var name = value.name ? ': ' + value.name : '';return ctx.stylize('[Function' + name + ']', 'special');
          }if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
          }if (isDate(value)) {
            return ctx.stylize(Date.prototype.toString.call(value), 'date');
          }if (isError(value)) {
            return formatError(value);
          }
        }var base = '',
            array = false,
            braces = ['{', '}']; // Make Array say that they are Array
        if (isArray(value)) {
          array = true;braces = ['[', ']'];
        } // Make functions say that they are functions
        if (isFunction(value)) {
          var n = value.name ? ': ' + value.name : '';base = ' [Function' + n + ']';
        } // Make RegExps say that they are RegExps
        if (isRegExp(value)) {
          base = ' ' + RegExp.prototype.toString.call(value);
        } // Make dates with properties first say the date
        if (isDate(value)) {
          base = ' ' + Date.prototype.toUTCString.call(value);
        } // Make error with message first say the error
        if (isError(value)) {
          base = ' ' + formatError(value);
        }if (keys.length === 0 && (!array || value.length == 0)) {
          return braces[0] + base + braces[1];
        }if (recurseTimes < 0) {
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
          } else {
            return ctx.stylize('[Object]', 'special');
          }
        }ctx.seen.push(value);var output;if (array) {
          output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
          output = keys.map(function (key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
          });
        }ctx.seen.pop();return reduceToSingleString(output, base, braces);
      }function formatPrimitive(ctx, value) {
        if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');if (isString(value)) {
          var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';return ctx.stylize(simple, 'string');
        }if (isNumber(value)) return ctx.stylize('' + value, 'number');if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.
        if (isNull(value)) return ctx.stylize('null', 'null');
      }function formatError(value) {
        return '[' + Error.prototype.toString.call(value) + ']';
      }function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];for (var i = 0, l = value.length; i < l; ++i) {
          if (hasOwnProperty(value, String(i))) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
          } else {
            output.push('');
          }
        }keys.forEach(function (key) {
          if (!key.match(/^\d+$/)) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
          }
        });return output;
      }function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };if (desc.get) {
          if (desc.set) {
            str = ctx.stylize('[Getter/Setter]', 'special');
          } else {
            str = ctx.stylize('[Getter]', 'special');
          }
        } else {
          if (desc.set) {
            str = ctx.stylize('[Setter]', 'special');
          }
        }if (!hasOwnProperty(visibleKeys, key)) {
          name = '[' + key + ']';
        }if (!str) {
          if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx, desc.value, null);
            } else {
              str = formatValue(ctx, desc.value, recurseTimes - 1);
            }if (str.indexOf('\n') > -1) {
              if (array) {
                str = str.split('\n').map(function (line) {
                  return '  ' + line;
                }).join('\n').substr(2);
              } else {
                str = '\n' + str.split('\n').map(function (line) {
                  return '   ' + line;
                }).join('\n');
              }
            }
          } else {
            str = ctx.stylize('[Circular]', 'special');
          }
        }if (isUndefined(name)) {
          if (array && key.match(/^\d+$/)) {
            return str;
          }name = JSON.stringify('' + key);if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);name = ctx.stylize(name, 'name');
          } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");name = ctx.stylize(name, 'string');
          }
        }return name + ': ' + str;
      }function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;var length = output.reduce(function (prev, cur) {
          numLinesEst++;if (cur.indexOf('\n') >= 0) numLinesEst++;return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
        }, 0);if (length > 60) {
          return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
        }return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
      } // NOTE: These type checking functions intentionally don't use `instanceof`
      // because it is fragile and can be easily faked with `Object.create()`.
      function isArray(ar) {
        return Array.isArray(ar);
      }exports.isArray = isArray;function isBoolean(arg) {
        return typeof arg === 'boolean';
      }exports.isBoolean = isBoolean;function isNull(arg) {
        return arg === null;
      }exports.isNull = isNull;function isNullOrUndefined(arg) {
        return arg == null;
      }exports.isNullOrUndefined = isNullOrUndefined;function isNumber(arg) {
        return typeof arg === 'number';
      }exports.isNumber = isNumber;function isString(arg) {
        return typeof arg === 'string';
      }exports.isString = isString;function isSymbol(arg) {
        return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'symbol';
      }exports.isSymbol = isSymbol;function isUndefined(arg) {
        return arg === void 0;
      }exports.isUndefined = isUndefined;function isRegExp(re) {
        return isObject(re) && objectToString(re) === '[object RegExp]';
      }exports.isRegExp = isRegExp;function isObject(arg) {
        return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'object' && arg !== null;
      }exports.isObject = isObject;function isDate(d) {
        return isObject(d) && objectToString(d) === '[object Date]';
      }exports.isDate = isDate;function isError(e) {
        return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
      }exports.isError = isError;function isFunction(arg) {
        return typeof arg === 'function';
      }exports.isFunction = isFunction;function isPrimitive(arg) {
        return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'symbol' || // ES6 symbol
        typeof arg === 'undefined';
      }exports.isPrimitive = isPrimitive;exports.isBuffer = require('./support/isBuffer');function objectToString(o) {
        return Object.prototype.toString.call(o);
      }function pad(n) {
        return n < 10 ? '0' + n.toString(10) : n.toString(10);
      }var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34
      function timestamp() {
        var d = new Date();var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');return [d.getDate(), months[d.getMonth()], time].join(' ');
      } // log is just a thin wrapper to console.log that prepends a timestamp
      exports.log = function () {
        console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
      }; /**
         * Inherit the prototype methods from one constructor into another.
         *
         * The Function.prototype.inherits from lang.js rewritten as a standalone
         * function (not on Function.prototype). NOTE: If this file is to be loaded
         * during bootstrapping this function needs to be rewritten using some native
         * functions as prototype setup using normal JavaScript does not work as
         * expected during bootstrapping (see mirror.js in r114903).
         *
         * @param {function} ctor Constructor function which needs to inherit the
         *     prototype.
         * @param {function} superCtor Constructor function to inherit prototype from.
         */exports.inherits = require('inherits');exports._extend = function (origin, add) {
        // Don't do anything if add isn't an object
        if (!add || !isObject(add)) return origin;var keys = Object.keys(add);var i = keys.length;while (i--) {
          origin[keys[i]] = add[keys[i]];
        }return origin;
      };function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, { "./support/isBuffer": 102, "_process": 12, "inherits": 31 }], 104: [function (require, module, exports) {
    "use strict";
    var window = require("global/window");var isFunction = require("is-function");var parseHeaders = require("parse-headers");var xtend = require("xtend");module.exports = createXHR;createXHR.XMLHttpRequest = window.XMLHttpRequest || noop;createXHR.XDomainRequest = "withCredentials" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window.XDomainRequest;forEachArray(["get", "put", "post", "patch", "head", "delete"], function (method) {
      createXHR[method === "delete" ? "del" : method] = function (uri, options, callback) {
        options = initParams(uri, options, callback);options.method = method.toUpperCase();return _createXHR(options);
      };
    });function forEachArray(array, iterator) {
      for (var i = 0; i < array.length; i++) {
        iterator(array[i]);
      }
    }function isEmpty(obj) {
      for (var i in obj) {
        if (obj.hasOwnProperty(i)) return false;
      }return true;
    }function initParams(uri, options, callback) {
      var params = uri;if (isFunction(options)) {
        callback = options;if (typeof uri === "string") {
          params = { uri: uri };
        }
      } else {
        params = xtend(options, { uri: uri });
      }params.callback = callback;return params;
    }function createXHR(uri, options, callback) {
      options = initParams(uri, options, callback);return _createXHR(options);
    }function _createXHR(options) {
      if (typeof options.callback === "undefined") {
        throw new Error("callback argument missing");
      }var called = false;var callback = function cbOnce(err, response, body) {
        if (!called) {
          called = true;options.callback(err, response, body);
        }
      };function readystatechange() {
        if (xhr.readyState === 4) {
          loadFunc();
        }
      }function getBody() {
        // Chrome with requestType=blob throws errors arround when even testing access to responseText
        var body = undefined;if (xhr.response) {
          body = xhr.response;
        } else {
          body = xhr.responseText || getXml(xhr);
        }if (isJson) {
          try {
            body = JSON.parse(body);
          } catch (e) {}
        }return body;
      }var failureResponse = { body: undefined, headers: {}, statusCode: 0, method: method, url: uri, rawRequest: xhr };function errorFunc(evt) {
        clearTimeout(timeoutTimer);if (!(evt instanceof Error)) {
          evt = new Error("" + (evt || "Unknown XMLHttpRequest Error"));
        }evt.statusCode = 0;return callback(evt, failureResponse);
      } // will load the data & process the response in a special response object
      function loadFunc() {
        if (aborted) return;var status;clearTimeout(timeoutTimer);if (options.useXDR && xhr.status === undefined) {
          //IE8 CORS GET successful response doesn't have a status field, but body is fine
          status = 200;
        } else {
          status = xhr.status === 1223 ? 204 : xhr.status;
        }var response = failureResponse;var err = null;if (status !== 0) {
          response = { body: getBody(), statusCode: status, method: method, headers: {}, url: uri, rawRequest: xhr };if (xhr.getAllResponseHeaders) {
            //remember xhr can in fact be XDR for CORS in IE
            response.headers = parseHeaders(xhr.getAllResponseHeaders());
          }
        } else {
          err = new Error("Internal XMLHttpRequest Error");
        }return callback(err, response, response.body);
      }var xhr = options.xhr || null;if (!xhr) {
        if (options.cors || options.useXDR) {
          xhr = new createXHR.XDomainRequest();
        } else {
          xhr = new createXHR.XMLHttpRequest();
        }
      }var key;var aborted;var uri = xhr.url = options.uri || options.url;var method = xhr.method = options.method || "GET";var body = options.body || options.data || null;var headers = xhr.headers = options.headers || {};var sync = !!options.sync;var isJson = false;var timeoutTimer;if ("json" in options) {
        isJson = true;headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json"); //Don't override existing accept header declared by user
        if (method !== "GET" && method !== "HEAD") {
          headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json"); //Don't override existing accept header declared by user
          body = JSON.stringify(options.json);
        }
      }xhr.onreadystatechange = readystatechange;xhr.onload = loadFunc;xhr.onerror = errorFunc; // IE9 must have onprogress be set to a unique function.
      xhr.onprogress = function () {// IE must die
      };xhr.ontimeout = errorFunc;xhr.open(method, uri, !sync, options.username, options.password); //has to be after open
      if (!sync) {
        xhr.withCredentials = !!options.withCredentials;
      } // Cannot set timeout with sync request
      // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
      // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
      if (!sync && options.timeout > 0) {
        timeoutTimer = setTimeout(function () {
          aborted = true; //IE9 may still call readystatechange
          xhr.abort("timeout");var e = new Error("XMLHttpRequest timeout");e.code = "ETIMEDOUT";errorFunc(e);
        }, options.timeout);
      }if (xhr.setRequestHeader) {
        for (key in headers) {
          if (headers.hasOwnProperty(key)) {
            xhr.setRequestHeader(key, headers[key]);
          }
        }
      } else if (options.headers && !isEmpty(options.headers)) {
        throw new Error("Headers cannot be set on an XDomainRequest object");
      }if ("responseType" in options) {
        xhr.responseType = options.responseType;
      }if ("beforeSend" in options && typeof options.beforeSend === "function") {
        options.beforeSend(xhr);
      }xhr.send(body);return xhr;
    }function getXml(xhr) {
      if (xhr.responseType === "document") {
        return xhr.responseXML;
      }var firefoxBugTakenEffect = xhr.status === 204 && xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";if (xhr.responseType === "" && !firefoxBugTakenEffect) {
        return xhr.responseXML;
      }return null;
    }function noop() {}
  }, { "global/window": 29, "is-function": 34, "parse-headers": 58, "xtend": 106 }], 105: [function (require, module, exports) {
    module.exports = function xmlparser() {
      //common browsers
      if (typeof window.DOMParser !== 'undefined') {
        return function (str) {
          var parser = new window.DOMParser();return parser.parseFromString(str, 'application/xml');
        };
      } //IE8 fallback
      if (typeof window.ActiveXObject !== 'undefined' && new window.ActiveXObject('Microsoft.XMLDOM')) {
        return function (str) {
          var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");xmlDoc.async = "false";xmlDoc.loadXML(str);return xmlDoc;
        };
      } //last resort fallback
      return function (str) {
        var div = document.createElement('div');div.innerHTML = str;return div;
      };
    }();
  }, {}], 106: [function (require, module, exports) {
    module.exports = extend;var hasOwnProperty = Object.prototype.hasOwnProperty;function extend() {
      var target = {};for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }return target;
    }
  }, {}], 107: [function (require, module, exports) {
    function ImagePHash(t, a) {
      this.size = this.size || t, this.smallerSize = this.smallerSize || a, initCoefficients(this.size);
    }function intToRGBA(t) {
      var a = {};return a.r = Math.floor(t / Math.pow(256, 3)), a.g = Math.floor((t - a.r * Math.pow(256, 3)) / Math.pow(256, 2)), a.b = Math.floor((t - a.r * Math.pow(256, 3) - a.g * Math.pow(256, 2)) / Math.pow(256, 1)), a.a = Math.floor((t - a.r * Math.pow(256, 3) - a.g * Math.pow(256, 2) - a.b * Math.pow(256, 1)) / Math.pow(256, 0)), a;
    }function initCoefficients(t) {
      for (var a = 1; a < t; a++) {
        c[a] = 1;
      }c[0] = 1 / Math.sqrt(2);
    }function applyDCT(t, a) {
      for (var r = a, e = [], o = 0; o < r; o++) {
        e[o] = [];for (var i = 0; i < r; i++) {
          for (var s = 0, h = 0; h < r; h++) {
            for (var l = 0; l < r; l++) {
              s += Math.cos((2 * h + 1) / (2 * r) * o * Math.PI) * Math.cos((2 * l + 1) / (2 * r) * i * Math.PI) * t[h][l];
            }
          }s *= c[o] * c[i] / 4, e[o][i] = s;
        }
      }return e;
    }ImagePHash.prototype.size = 32, ImagePHash.prototype.smallerSize = 8, ImagePHash.prototype.distance = function (t, a) {
      for (var r = 0, e = 0; e < t.length; e++) {
        t[e] != a[e] && r++;
      }return r / t.length;
    }, ImagePHash.prototype.getHash = function (t) {
      t = t.clone().resize(this.size, this.size), t.grayscale();for (var a = [], r = 0; r < t.bitmap.width; r++) {
        a[r] = [];for (var e = 0; e < t.bitmap.height; e++) {
          a[r][e] = intToRGBA(t.getPixelColor(r, e)).b;
        }
      }for (var o = applyDCT(a, this.size), i = 0, r = 0; r < this.smallerSize; r++) {
        for (var e = 0; e < this.smallerSize; e++) {
          i += o[r][e];
        }
      }for (var s = i / (this.smallerSize * this.smallerSize), h = "", r = 0; r < this.smallerSize; r++) {
        for (var e = 0; e < this.smallerSize; e++) {
          h += o[r][e] > s ? "1" : "0";
        }
      }return h;
    };var c = [];module.exports = ImagePHash;
  }, {}], 108: [function (require, module, exports) {
    function Resize(i, t, e, h, s, r, l) {
      this.widthOriginal = Math.abs(parseInt(i) || 0), this.heightOriginal = Math.abs(parseInt(t) || 0), this.targetWidth = Math.abs(parseInt(e) || 0), this.targetHeight = Math.abs(parseInt(h) || 0), this.colorChannels = s ? 4 : 3, this.interpolationPass = !!r, this.resizeCallback = "function" == typeof l ? l : function (i) {}, this.targetWidthMultipliedByChannels = this.targetWidth * this.colorChannels, this.originalWidthMultipliedByChannels = this.widthOriginal * this.colorChannels, this.originalHeightMultipliedByChannels = this.heightOriginal * this.colorChannels, this.widthPassResultSize = this.targetWidthMultipliedByChannels * this.heightOriginal, this.finalResultSize = this.targetWidthMultipliedByChannels * this.targetHeight, this.initialize();
    }Resize.prototype.initialize = function () {
      if (!(this.widthOriginal > 0 && this.heightOriginal > 0 && this.targetWidth > 0 && this.targetHeight > 0)) throw new Error("Invalid settings specified for the resizer.");this.configurePasses();
    }, Resize.prototype.configurePasses = function () {
      this.widthOriginal == this.targetWidth ? this.resizeWidth = this.bypassResizer : (this.ratioWeightWidthPass = this.widthOriginal / this.targetWidth, this.ratioWeightWidthPass < 1 && this.interpolationPass ? (this.initializeFirstPassBuffers(!0), this.resizeWidth = 4 == this.colorChannels ? this.resizeWidthInterpolatedRGBA : this.resizeWidthInterpolatedRGB) : (this.initializeFirstPassBuffers(!1), this.resizeWidth = 4 == this.colorChannels ? this.resizeWidthRGBA : this.resizeWidthRGB)), this.heightOriginal == this.targetHeight ? this.resizeHeight = this.bypassResizer : (this.ratioWeightHeightPass = this.heightOriginal / this.targetHeight, this.ratioWeightHeightPass < 1 && this.interpolationPass ? (this.initializeSecondPassBuffers(!0), this.resizeHeight = this.resizeHeightInterpolated) : (this.initializeSecondPassBuffers(!1), this.resizeHeight = 4 == this.colorChannels ? this.resizeHeightRGBA : this.resizeHeightRGB));
    }, Resize.prototype.resizeWidthRGB = function (i) {
      var t = this.ratioWeightWidthPass,
          e = 1 / t,
          h = 0,
          s = 0,
          r = 0,
          l = 0,
          n = 0,
          a = 0,
          o = 0,
          d = this.originalWidthMultipliedByChannels - 2,
          u = this.targetWidthMultipliedByChannels - 2,
          g = this.outputWidthWorkBench,
          f = this.widthBuffer;do {
        for (n = 0; n < this.originalHeightMultipliedByChannels;) {
          g[n++] = 0, g[n++] = 0, g[n++] = 0;
        }h = t;do {
          if (s = 1 + r - l, !(h >= s)) {
            for (n = 0, a = r; n < this.originalHeightMultipliedByChannels; a += d) {
              g[n++] += i[a++] * h, g[n++] += i[a++] * h, g[n++] += i[a] * h;
            }l += h;break;
          }for (n = 0, a = r; n < this.originalHeightMultipliedByChannels; a += d) {
            g[n++] += i[a++] * s, g[n++] += i[a++] * s, g[n++] += i[a] * s;
          }l = r += 3, h -= s;
        } while (h > 0 && r < this.originalWidthMultipliedByChannels);for (n = 0, a = o; n < this.originalHeightMultipliedByChannels; a += u) {
          f[a++] = g[n++] * e, f[a++] = g[n++] * e, f[a] = g[n++] * e;
        }o += 3;
      } while (o < this.targetWidthMultipliedByChannels);return f;
    }, Resize.prototype.resizeWidthInterpolatedRGB = function (i) {
      for (var t = this.ratioWeightWidthPass, e = 0, h = 0, s = 0, r = 0, l = 0, n = this.widthBuffer, a = 0; e < 1 / 3; a += 3, e += t) {
        for (h = a, s = 0; h < this.widthPassResultSize; s += this.originalWidthMultipliedByChannels, h += this.targetWidthMultipliedByChannels) {
          n[h] = i[s], n[h + 1] = i[s + 1], n[h + 2] = i[s + 2];
        }
      }e -= 1 / 3;for (var o = this.widthOriginal - 1; e < o; a += 3, e += t) {
        for (l = e % 1, r = 1 - l, h = a, s = 3 * Math.floor(e); h < this.widthPassResultSize; s += this.originalWidthMultipliedByChannels, h += this.targetWidthMultipliedByChannels) {
          n[h] = i[s] * r + i[s + 3] * l, n[h + 1] = i[s + 1] * r + i[s + 4] * l, n[h + 2] = i[s + 2] * r + i[s + 5] * l;
        }
      }for (o = this.originalWidthMultipliedByChannels - 3; a < this.targetWidthMultipliedByChannels; a += 3) {
        for (h = a, s = o; h < this.widthPassResultSize; s += this.originalWidthMultipliedByChannels, h += this.targetWidthMultipliedByChannels) {
          n[h] = i[s], n[h + 1] = i[s + 1], n[h + 2] = i[s + 2];
        }
      }return n;
    }, Resize.prototype.resizeWidthRGBA = function (i) {
      var t = this.ratioWeightWidthPass,
          e = 1 / t,
          h = 0,
          s = 0,
          r = 0,
          l = 0,
          n = 0,
          a = 0,
          o = 0,
          d = this.originalWidthMultipliedByChannels - 3,
          u = this.targetWidthMultipliedByChannels - 3,
          g = this.outputWidthWorkBench,
          f = this.widthBuffer;do {
        for (n = 0; n < this.originalHeightMultipliedByChannels;) {
          g[n++] = 0, g[n++] = 0, g[n++] = 0, g[n++] = 0;
        }h = t;do {
          if (s = 1 + r - l, !(h >= s)) {
            for (n = 0, a = r; n < this.originalHeightMultipliedByChannels; a += d) {
              g[n++] += i[a++] * h, g[n++] += i[a++] * h, g[n++] += i[a++] * h, g[n++] += i[a] * h;
            }l += h;break;
          }for (n = 0, a = r; n < this.originalHeightMultipliedByChannels; a += d) {
            g[n++] += i[a++] * s, g[n++] += i[a++] * s, g[n++] += i[a++] * s, g[n++] += i[a] * s;
          }l = r += 4, h -= s;
        } while (h > 0 && r < this.originalWidthMultipliedByChannels);for (n = 0, a = o; n < this.originalHeightMultipliedByChannels; a += u) {
          f[a++] = g[n++] * e, f[a++] = g[n++] * e, f[a++] = g[n++] * e, f[a] = g[n++] * e;
        }o += 4;
      } while (o < this.targetWidthMultipliedByChannels);return f;
    }, Resize.prototype.resizeWidthInterpolatedRGBA = function (i) {
      for (var t = this.ratioWeightWidthPass, e = 0, h = 0, s = 0, r = 0, l = 0, n = this.widthBuffer, a = 0; e < 1 / 3; a += 4, e += t) {
        for (h = a, s = 0; h < this.widthPassResultSize; s += this.originalWidthMultipliedByChannels, h += this.targetWidthMultipliedByChannels) {
          n[h] = i[s], n[h + 1] = i[s + 1], n[h + 2] = i[s + 2], n[h + 3] = i[s + 3];
        }
      }e -= 1 / 3;for (var o = this.widthOriginal - 1; e < o; a += 4, e += t) {
        for (l = e % 1, r = 1 - l, h = a, s = 4 * Math.floor(e); h < this.widthPassResultSize; s += this.originalWidthMultipliedByChannels, h += this.targetWidthMultipliedByChannels) {
          n[h] = i[s] * r + i[s + 4] * l, n[h + 1] = i[s + 1] * r + i[s + 5] * l, n[h + 2] = i[s + 2] * r + i[s + 6] * l, n[h + 3] = i[s + 3] * r + i[s + 7] * l;
        }
      }for (o = this.originalWidthMultipliedByChannels - 4; a < this.targetWidthMultipliedByChannels; a += 4) {
        for (h = a, s = o; h < this.widthPassResultSize; s += this.originalWidthMultipliedByChannels, h += this.targetWidthMultipliedByChannels) {
          n[h] = i[s], n[h + 1] = i[s + 1], n[h + 2] = i[s + 2], n[h + 3] = i[s + 3];
        }
      }return n;
    }, Resize.prototype.resizeHeightRGB = function (i) {
      var t = this.ratioWeightHeightPass,
          e = 1 / t,
          h = 0,
          s = 0,
          r = 0,
          l = 0,
          n = 0,
          a = 0,
          o = this.outputHeightWorkBench,
          d = this.heightBuffer;do {
        for (n = 0; n < this.targetWidthMultipliedByChannels;) {
          o[n++] = 0, o[n++] = 0, o[n++] = 0;
        }h = t;do {
          if (s = 1 + r - l, !(h >= s)) {
            for (n = 0, s = r; n < this.targetWidthMultipliedByChannels;) {
              o[n++] += i[s++] * h, o[n++] += i[s++] * h, o[n++] += i[s++] * h;
            }l += h;break;
          }for (n = 0; n < this.targetWidthMultipliedByChannels;) {
            o[n++] += i[r++] * s, o[n++] += i[r++] * s, o[n++] += i[r++] * s;
          }l = r, h -= s;
        } while (h > 0 && r < this.widthPassResultSize);for (n = 0; n < this.targetWidthMultipliedByChannels;) {
          d[a++] = Math.round(o[n++] * e), d[a++] = Math.round(o[n++] * e), d[a++] = Math.round(o[n++] * e);
        }
      } while (a < this.finalResultSize);return d;
    }, Resize.prototype.resizeHeightInterpolated = function (i) {
      for (var t = this.ratioWeightHeightPass, e = 0, h = 0, s = 0, r = 0, l = 0, n = 0, a = 0, o = this.heightBuffer; e < 1 / 3; e += t) {
        for (s = 0; s < this.targetWidthMultipliedByChannels;) {
          o[h++] = Math.round(i[s++]);
        }
      }e -= 1 / 3;for (var d = this.heightOriginal - 1; e < d; e += t) {
        for (a = e % 1, n = 1 - a, r = Math.floor(e) * this.targetWidthMultipliedByChannels, l = r + this.targetWidthMultipliedByChannels, s = 0; s < this.targetWidthMultipliedByChannels; ++s) {
          o[h++] = Math.round(i[r++] * n + i[l++] * a);
        }
      }for (; h < this.finalResultSize;) {
        for (s = 0, r = d * this.targetWidthMultipliedByChannels; s < this.targetWidthMultipliedByChannels; ++s) {
          o[h++] = Math.round(i[r++]);
        }
      }return o;
    }, Resize.prototype.resizeHeightRGBA = function (i) {
      var t = this.ratioWeightHeightPass,
          e = 1 / t,
          h = 0,
          s = 0,
          r = 0,
          l = 0,
          n = 0,
          a = 0,
          o = this.outputHeightWorkBench,
          d = this.heightBuffer;do {
        for (n = 0; n < this.targetWidthMultipliedByChannels;) {
          o[n++] = 0, o[n++] = 0, o[n++] = 0, o[n++] = 0;
        }h = t;do {
          if (s = 1 + r - l, !(h >= s)) {
            for (n = 0, s = r; n < this.targetWidthMultipliedByChannels;) {
              o[n++] += i[s++] * h, o[n++] += i[s++] * h, o[n++] += i[s++] * h, o[n++] += i[s++] * h;
            }l += h;break;
          }for (n = 0; n < this.targetWidthMultipliedByChannels;) {
            o[n++] += i[r++] * s, o[n++] += i[r++] * s, o[n++] += i[r++] * s, o[n++] += i[r++] * s;
          }l = r, h -= s;
        } while (h > 0 && r < this.widthPassResultSize);for (n = 0; n < this.targetWidthMultipliedByChannels;) {
          d[a++] = Math.round(o[n++] * e), d[a++] = Math.round(o[n++] * e), d[a++] = Math.round(o[n++] * e), d[a++] = Math.round(o[n++] * e);
        }
      } while (a < this.finalResultSize);return d;
    }, Resize.prototype.resize = function (i) {
      this.resizeCallback(this.resizeHeight(this.resizeWidth(i)));
    }, Resize.prototype.bypassResizer = function (i) {
      return i;
    }, Resize.prototype.initializeFirstPassBuffers = function (i) {
      this.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize), i || (this.outputWidthWorkBench = this.generateFloatBuffer(this.originalHeightMultipliedByChannels));
    }, Resize.prototype.initializeSecondPassBuffers = function (i) {
      this.heightBuffer = this.generateUint8Buffer(this.finalResultSize), i || (this.outputHeightWorkBench = this.generateFloatBuffer(this.targetWidthMultipliedByChannels));
    }, Resize.prototype.generateFloatBuffer = function (i) {
      try {
        return new Float32Array(i);
      } catch (i) {
        return [];
      }
    }, Resize.prototype.generateUint8Buffer = function (i) {
      try {
        return new Uint8Array(i);
      } catch (i) {
        return [];
      }
    }, module.exports = Resize;
  }, {}], 109: [function (require, module, exports) {
    (function (Buffer) {
      "use strict";
      module.exports = { nearestNeighbor: function nearestNeighbor(r, t, a) {
          for (var o = r.width, n = r.height, i = t.width, h = t.height, e = r.data, f = t.data, u = 0; u < h; u++) {
            for (var v = 0; v < i; v++) {
              var M = 4 * (u * i + v),
                  d = Math.round(u * n / h),
                  l = Math.round(v * o / i),
                  c = 4 * (d * o + l);f[M++] = e[c++], f[M++] = e[c++], f[M++] = e[c++], f[M++] = e[c++];
            }
          }
        }, bilinearInterpolation: function bilinearInterpolation(r, t, a) {
          for (var o = r.width, n = r.height, i = t.width, h = t.height, e = r.data, f = t.data, u = function u(r, t, a, o, n) {
            return t === o ? a : Math.round((r - t) * n + (o - r) * a);
          }, v = function v(r, t, a, n, i, h, _v, M) {
            var d = 4 * (_v * o + n) + t,
                l = 4 * (_v * o + i) + t,
                c = u(a, n, e[d], i, e[l]);if (M === _v) f[r + t] = c;else {
              d = 4 * (M * o + n) + t, l = 4 * (M * o + i) + t;var m = u(a, n, e[d], i, e[l]);f[r + t] = u(h, _v, c, M, m);
            }
          }, M = 0; M < h; M++) {
            for (var d = 0; d < i; d++) {
              var l = 4 * (M * i + d),
                  c = d * o / i,
                  m = Math.floor(c),
                  p = Math.min(Math.ceil(c), o - 1),
                  s = M * n / h,
                  w = Math.floor(s),
                  g = Math.min(Math.ceil(s), n - 1);v(l, 0, c, m, p, s, w, g), v(l, 1, c, m, p, s, w, g), v(l, 2, c, m, p, s, w, g), v(l, 3, c, m, p, s, w, g);
            }
          }
        }, _interpolate2D: function _interpolate2D(r, t, a, o) {
          for (var n = r.data, i = t.data, h = r.width, e = r.height, f = t.width, u = t.height, v = Math.max(1, Math.floor(h / f)), M = f * v, d = Math.max(1, Math.floor(e / u)), l = u * d, c = new Buffer(M * e * 4), m = 0; m < e; m++) {
            for (var p = 0; p < M; p++) {
              for (var s = p * (h - 1) / M, w = Math.floor(s), g = s - w, x = 4 * (m * h + w), b = 4 * (m * M + p), D = 0; D < 4; D++) {
                var I = x + D,
                    _ = w > 0 ? n[I - 4] : 2 * n[I] - n[I + 4],
                    B = n[I],
                    z = n[I + 4],
                    N = w < h - 2 ? n[I + 8] : 2 * n[I + 4] - n[I];c[b + D] = o(_, B, z, N, g);
              }
            }
          }for (var j = new Buffer(M * l * 4), m = 0; m < l; m++) {
            for (var p = 0; p < M; p++) {
              for (var k = m * (e - 1) / l, q = Math.floor(k), g = k - q, b = 4 * (q * M + p), y = 4 * (m * M + p), D = 0; D < 4; D++) {
                var I = b + D,
                    A = q > 0 ? c[I - 4 * M] : 2 * c[I] - c[I + 4 * M],
                    C = c[I],
                    E = c[I + 4 * M],
                    F = q < e - 2 ? c[I + 8 * M] : 2 * c[I + 4 * M] - c[I];j[y + D] = o(A, C, E, F, g);
              }
            }
          }var G = v * d;if (G > 1) for (var m = 0; m < u; m++) {
            for (var p = 0; p < f; p++) {
              for (var H = 0, J = 0, K = 0, L = 0, k = 0; k < d; k++) {
                for (var q = m * d + k, s = 0; s < v; s++) {
                  var w = p * v + s,
                      O = 4 * (q * M + w);H += j[O], J += j[O + 1], K += j[O + 2], L += j[O + 3];
                }
              }var P = 4 * (m * f + p);i[P] = Math.round(H / G), i[P + 1] = Math.round(J / G), i[P + 2] = Math.round(K / G), i[P + 3] = Math.round(L / G);
            }
          } else t.data = j;
        }, bicubicInterpolation: function bicubicInterpolation(r, t, a) {
          var o = function o(r, t, a, _o, n) {
            var i = _o - a - r + t,
                h = r - t - i,
                e = a - r,
                f = t;return Math.max(0, Math.min(255, i * (n * n * n) + h * (n * n) + e * n + f));
          };return this._interpolate2D(r, t, a, o);
        }, hermiteInterpolation: function hermiteInterpolation(r, t, a) {
          var o = function o(r, t, a, _o2, n) {
            var i = t,
                h = .5 * (a - r),
                e = r - 2.5 * t + 2 * a - .5 * _o2,
                f = .5 * (_o2 - r) + 1.5 * (t - a);return Math.max(0, Math.min(255, Math.round(((f * n + e) * n + h) * n + i)));
          };return this._interpolate2D(r, t, a, o);
        }, bezierInterpolation: function bezierInterpolation(r, t, a) {
          var o = function o(r, t, a, _o3, n) {
            var i = t + (a - r) / 4,
                h = a - (_o3 - t) / 4,
                e = 1 - n,
                f = t * e * e * e,
                u = 3 * i * e * e * n,
                v = 3 * h * e * n * n,
                M = a * n * n * n;return Math.max(0, Math.min(255, Math.round(f + u + v + M)));
          };return this._interpolate2D(r, t, a, o);
        } };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 14 }] }, {}, [1]);
//    The MIT License (MIT)
//
//    Copyright (c) 2015 Phil Seaton
//
//    Permission is hereby granted, free of charge, to any person obtaining a copy
//    of this software and associated documentation files (the "Software"), to deal
//    in the Software without restriction, including without limitation the rights
//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    copies of the Software, and to permit persons to whom the Software is
//    furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included in all
//    copies or substantial portions of the Software.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//    SOFTWARE.

if (!self.Buffer && !window.Buffer) {
  throw new Error("Node's Buffer() not available");
} else if (!self.Jimp && !window.Jimp) {
  throw new Error("Could not Jimp object");
}

(function () {

  function fetchImageDataFromUrl(url, cb) {
    // Fetch image data via xhr. Note that this will not work
    // without cross-domain allow-origin headers because of CORS restrictions
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.responseType = "arraybuffer";
    xhr.onload = function () {
      if (xhr.status < 400) cb(this.response, null);else cb(null, "HTTP Status " + xhr.status + " for url " + url);
    };
    xhr.onerror = function (e) {
      cb(null, e);
    };

    xhr.send();
  };

  function bufferFromArrayBuffer(arrayBuffer) {
    // Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,
    // But this function is not useful when running in node directly
    var buffer = new Buffer(arrayBuffer.byteLength);
    var view = new Uint8Array(arrayBuffer);
    for (var i = 0; i < buffer.length; ++i) {
      buffer[i] = view[i];
    }

    return buffer;
  }

  function isArrayBuffer(test) {
    return Object.prototype.toString.call(test).toLowerCase().indexOf("arraybuffer") > -1;
  }

  // delete the write method
  delete Jimp.prototype.write;

  // Override the nodejs implementation of Jimp.read()
  delete Jimp.read;
  Jimp.read = function (src, cb) {
    return new Promise(function (resolve, reject) {
      cb = cb || function (err, image) {
        if (err) reject(err);else resolve(image);
      };

      if ("string" == typeof src) {
        // Download via xhr
        fetchImageDataFromUrl(src, function (arrayBuffer, error) {
          if (arrayBuffer) {
            if (!isArrayBuffer(arrayBuffer)) {
              cb(new Error("Unrecognized data received for " + src));
            } else {
              new Jimp(bufferFromArrayBuffer(arrayBuffer), cb);
            }
          } else if (error) {
            cb(error);
          }
        });
      } else if (isArrayBuffer(src)) {
        // src is an ArrayBuffer already
        new Jimp(bufferFromArrayBuffer(src), cb);
      } else {
        // src is not a string or ArrayBuffer
        cb(new Error("Jimp expects a single ArrayBuffer or image URL"));
      }
    });
  };
})();
},{"process":"pBGv","buffer":"dskh"}],"F4Cd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMobile = isMobile;
function isMobile() {
    var a = navigator.userAgent || navigator.vendor || window.opera;
    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
    );
}
//# sourceMappingURL=device_util.js.map
},{}],"VkNo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.doc = doc;
function doc(info) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
    };
}
//# sourceMappingURL=doc.js.map
},{}],"lDaM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.assertArgumentsAreTensors = assertArgumentsAreTensors;
exports.shuffle = shuffle;
exports.clamp = clamp;
exports.randUniform = randUniform;
exports.distSquared = distSquared;
exports.assert = assert;
exports.assertShapesMatch = assertShapesMatch;
exports.assertTypesMatch = assertTypesMatch;
exports.flatten = flatten;
exports.inferShape = inferShape;
exports.sizeFromShape = sizeFromShape;
exports.isScalarShape = isScalarShape;
exports.arraysEqual = arraysEqual;
exports.isInt = isInt;
exports.tanh = tanh;
exports.sizeToSquarishShape = sizeToSquarishShape;
exports.createShuffledIndices = createShuffledIndices;
exports.rightPad = rightPad;
exports.repeatedTry = repeatedTry;
exports.getQueryParams = getQueryParams;
exports.inferFromImplicitShape = inferFromImplicitShape;
exports.squeezeShape = squeezeShape;
exports.getTypedArrayFromDType = getTypedArrayFromDType;
exports.isTensorInList = isTensorInList;
exports.checkForNaN = checkForNaN;
exports.flattenNameArrayMap = flattenNameArrayMap;
exports.unflattenToNameArrayMap = unflattenToNameArrayMap;
exports.hasEncodingLoss = hasEncodingLoss;
exports.copyTypedArray = copyTypedArray;
exports.isTypedArray = isTypedArray;
exports.bytesPerElement = bytesPerElement;
exports.isFunction = isFunction;
exports.extractTensorsFromContainer = extractTensorsFromContainer;
exports.extractTensorsFromAny = extractTensorsFromAny;

var _tensor = require("./tensor");

function assertArgumentIsTensor(x, argName, functionName) {
    assert(x instanceof _tensor.Tensor, "Argument '" + argName + "' passed to '" + functionName + "' must be a Tensor, " + ("but got " + typeof x + "."));
}
function assertArgumentsAreTensors(args, functionName) {
    var _loop_1 = function (argName) {
        var arg = args[argName];
        if (Array.isArray(arg)) {
            arg.forEach(function (t, i) {
                assertArgumentIsTensor(t, argName + "[" + i + "]", functionName);
            });
        } else {
            assertArgumentIsTensor(arg, argName, functionName);
        }
    };
    for (var argName in args) {
        _loop_1(argName);
    }
}
function shuffle(array) {
    var counter = array.length;
    var temp = 0;
    var index = 0;
    while (counter > 0) {
        index = Math.random() * counter | 0;
        counter--;
        temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }
}
function clamp(min, x, max) {
    return Math.max(min, Math.min(x, max));
}
function randUniform(a, b) {
    return Math.random() * (b - a) + a;
}
function distSquared(a, b) {
    var result = 0;
    for (var i = 0; i < a.length; i++) {
        var diff = Number(a[i]) - Number(b[i]);
        result += diff * diff;
    }
    return result;
}
function assert(expr, msg) {
    if (!expr) {
        throw new Error(msg);
    }
}
function assertShapesMatch(shapeA, shapeB, errorMessagePrefix) {
    if (errorMessagePrefix === void 0) {
        errorMessagePrefix = '';
    }
    assert(arraysEqual(shapeA, shapeB), errorMessagePrefix + (" Shapes " + shapeA + " and " + shapeB + " must match"));
}
function assertTypesMatch(a, b) {
    assert(a.dtype === b.dtype, " The dtypes of the first(" + a.dtype + ") and" + (" second(" + b.dtype + ") input must match"));
}
function flatten(arr, ret) {
    if (ret === void 0) {
        ret = [];
    }
    if (Array.isArray(arr)) {
        for (var i = 0; i < arr.length; ++i) {
            flatten(arr[i], ret);
        }
    } else {
        ret.push(arr);
    }
    return ret;
}
function inferShape(val) {
    if (isTypedArray(val)) {
        return [val.length];
    }
    if (!Array.isArray(val)) {
        return [];
    }
    var shape = [];
    while (val instanceof Array) {
        shape.push(val.length);
        val = val[0];
    }
    return shape;
}
function sizeFromShape(shape) {
    if (shape.length === 0) {
        return 1;
    }
    var size = shape[0];
    for (var i = 1; i < shape.length; i++) {
        size *= shape[i];
    }
    return size;
}
function isScalarShape(shape) {
    return shape.length === 0;
}
function arraysEqual(n1, n2) {
    if (n1.length !== n2.length) {
        return false;
    }
    for (var i = 0; i < n1.length; i++) {
        if (n1[i] !== n2[i]) {
            return false;
        }
    }
    return true;
}
function isInt(a) {
    return a % 1 === 0;
}
function tanh(x) {
    if (Math.tanh != null) {
        return Math.tanh(x);
    }
    if (x === Infinity) {
        return 1;
    } else if (x === -Infinity) {
        return -1;
    } else {
        var e2x = Math.exp(2 * x);
        return (e2x - 1) / (e2x + 1);
    }
}
function sizeToSquarishShape(size) {
    for (var a = Math.floor(Math.sqrt(size)); a > 1; --a) {
        if (size % a === 0) {
            return [a, size / a];
        }
    }
    return [1, size];
}
function createShuffledIndices(n) {
    var shuffledIndices = new Uint32Array(n);
    for (var i = 0; i < n; ++i) {
        shuffledIndices[i] = i;
    }
    shuffle(shuffledIndices);
    return shuffledIndices;
}
function rightPad(a, size) {
    if (size <= a.length) {
        return a;
    }
    return a + ' '.repeat(size - a.length);
}
function repeatedTry(checkFn, delayFn, maxCounter) {
    if (delayFn === void 0) {
        delayFn = function (counter) {
            return 0;
        };
    }
    return new Promise(function (resolve, reject) {
        var tryCount = 0;
        var tryFn = function () {
            if (checkFn()) {
                resolve();
                return;
            }
            tryCount++;
            var nextBackoff = delayFn(tryCount);
            if (maxCounter != null && tryCount >= maxCounter) {
                reject();
                return;
            }
            setTimeout(tryFn, nextBackoff);
        };
        setTimeout(tryFn, 0);
    });
}
function getQueryParams(queryString) {
    var params = {};
    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {
        var t = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            t[_i - 1] = arguments[_i];
        }
        decodeParam(params, t[0], t[1]);
        return t.join('=');
    });
    return params;
}
function decodeParam(params, name, value) {
    params[decodeURIComponent(name)] = decodeURIComponent(value || '');
}
function inferFromImplicitShape(shape, size) {
    var shapeProd = 1;
    var implicitIdx = -1;
    for (var i = 0; i < shape.length; ++i) {
        if (shape[i] > 0) {
            shapeProd *= shape[i];
        } else if (shape[i] === -1) {
            if (implicitIdx !== -1) {
                throw Error("Shapes can only have 1 implicit size. " + ("Found - 1 at dim " + implicitIdx + " and dim " + i));
            }
            implicitIdx = i;
        } else if (shape[i] <= 0) {
            throw Error("Shapes can not be <= 0. Found " + shape[i] + " at dim " + i);
        }
    }
    if (implicitIdx === -1) {
        if (size > 0 && size !== shapeProd) {
            throw Error("Size(" + size + ") must match the product of shape " + shape);
        }
        return shape;
    }
    if (size % shapeProd !== 0) {
        throw Error("The implicit shape can't be a fractional number. " + ("Got " + size + " / " + shapeProd));
    }
    var newShape = shape.slice();
    newShape[implicitIdx] = size / shapeProd;
    return newShape;
}
function squeezeShape(shape, axis) {
    var newShape = [];
    var keptDims = [];
    var j = 0;
    for (var i = 0; i < shape.length; ++i) {
        if (axis != null) {
            if (axis[j] === i && shape[i] > 1) {
                throw new Error("Can't squeeze axis " + i + " since its dim '" + shape[i] + "' is not 1");
            }
            if ((axis[j] == null || axis[j] > i) && shape[i] === 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
            if (axis[j] <= i) {
                j++;
            }
        }
        if (shape[i] > 1) {
            newShape.push(shape[i]);
            keptDims.push(i);
        }
    }
    return { newShape: newShape, keptDims: keptDims };
}
function getTypedArrayFromDType(dtype, size) {
    var values = null;
    if (dtype == null || dtype === 'float32') {
        values = new Float32Array(size);
    } else if (dtype === 'int32') {
        values = new Int32Array(size);
    } else if (dtype === 'bool') {
        values = new Uint8Array(size);
    } else {
        throw new Error("Unknown data type " + dtype);
    }
    return values;
}
function isTensorInList(tensor, tensorList) {
    for (var i = 0; i < tensorList.length; i++) {
        if (tensorList[i].id === tensor.id) {
            return true;
        }
    }
    return false;
}
function checkForNaN(vals, dtype, name) {
    if (dtype !== 'float32') {
        return;
    }
    for (var i = 0; i < vals.length; i++) {
        if (isNaN(vals[i])) {
            throw Error("The result of the '" + name + "' has NaNs.");
        }
    }
}
function flattenNameArrayMap(nameArrayMap, keys) {
    var xs = [];
    if (nameArrayMap instanceof _tensor.Tensor) {
        xs.push(nameArrayMap);
    } else {
        var xMap = nameArrayMap;
        for (var i = 0; i < keys.length; i++) {
            xs.push(xMap[keys[i]]);
        }
    }
    return xs;
}
function unflattenToNameArrayMap(keys, flatArrays) {
    if (keys.length !== flatArrays.length) {
        throw new Error("Cannot unflatten Tensor[], keys and arrays are not of same length.");
    }
    var result = {};
    for (var i = 0; i < keys.length; i++) {
        result[keys[i]] = flatArrays[i];
    }
    return result;
}
function hasEncodingLoss(oldType, newType) {
    if (newType === 'float32') {
        return false;
    }
    if (newType === 'int32' && oldType !== 'float32') {
        return false;
    }
    if (newType === 'bool' && oldType === 'bool') {
        return false;
    }
    return true;
}
function copyTypedArray(array, dtype) {
    if (dtype == null || dtype === 'float32') {
        return new Float32Array(array);
    } else if (dtype === 'int32') {
        return new Int32Array(array);
    } else if (dtype === 'bool') {
        var bool = new Uint8Array(array.length);
        for (var i = 0; i < bool.length; ++i) {
            if (Math.round(array[i]) !== 0) {
                bool[i] = 1;
            }
        }
        return bool;
    } else {
        throw new Error("Unknown data type " + dtype);
    }
}
function isTypedArray(a) {
    return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array;
}
function bytesPerElement(dtype) {
    if (dtype === 'float32' || dtype === 'int32') {
        return 4;
    } else if (dtype === 'bool') {
        return 1;
    } else {
        throw new Error("Unknown dtype " + dtype);
    }
}
function isFunction(f) {
    return !!(f && f.constructor && f.call && f.apply);
}
function extractTensorsFromContainer(result) {
    return extractTensorsFromAny(result);
}
function extractTensorsFromAny(result) {
    if (result == null) {
        return [];
    }
    if (result instanceof _tensor.Tensor) {
        return [result];
    }
    var list = [];
    var resultObj = result;
    if (!isIterable(resultObj)) {
        return [];
    }
    for (var k in resultObj) {
        var sublist = flatten(resultObj[k]).filter(function (x) {
            return x instanceof _tensor.Tensor;
        });
        list.push.apply(list, sublist);
    }
    return list;
}
function isIterable(obj) {
    return Array.isArray(obj) || typeof obj === 'object';
}
//# sourceMappingURL=util.js.map
},{"./tensor":"Xe78"}],"S7Qn":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.tensorToString = tensorToString;

var _util = require('./util');

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var FORMAT_LIMIT_NUM_VALS = 20;
var FORMAT_NUM_FIRST_LAST_VALS = 3;
var FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(t, verbose) {
    var vals = t.dataSync();
    var padPerCol = computeMaxSizePerColumn(t);
    var valsLines = subTensorToString(vals, t.shape, t.strides, padPerCol);
    var lines = ['Tensor'];
    if (verbose) {
        lines.push("  dtype: " + t.dtype);
        lines.push("  rank: " + t.rank);
        lines.push("  shape: [" + t.shape + "]");
        lines.push("  values:");
    }
    lines.push(valsLines.map(function (l) {
        return '    ' + l;
    }).join('\n'));
    return lines.join('\n');
}
function computeMaxSizePerColumn(t) {
    var vals = t.dataSync();
    var n = t.size;
    var numCols = t.strides[t.strides.length - 1];
    var padPerCol = new Array(numCols).fill(0);
    if (t.rank > 1) {
        for (var row = 0; row < n / numCols; row++) {
            var offset = row * numCols;
            for (var j = 0; j < numCols; j++) {
                padPerCol[j] = Math.max(padPerCol[j], valToString(vals[offset + j], 0).length);
            }
        }
    }
    return padPerCol;
}
function valToString(val, pad) {
    return util.rightPad(parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), pad);
}
function subTensorToString(vals, shape, strides, padPerCol, isLast) {
    if (isLast === void 0) {
        isLast = true;
    }
    var size = shape[0];
    var rank = shape.length;
    if (rank === 0) {
        return [vals[0].toString()];
    }
    if (rank === 1) {
        if (size > FORMAT_LIMIT_NUM_VALS) {
            var firstVals = Array.from(vals.subarray(0, FORMAT_NUM_FIRST_LAST_VALS));
            var lastVals = Array.from(vals.subarray(size - FORMAT_NUM_FIRST_LAST_VALS, size));
            return ['[' + firstVals.map(function (x, i) {
                return valToString(x, padPerCol[i]);
            }).join(', ') + ', ..., ' + lastVals.map(function (x, i) {
                return valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i]);
            }).join(', ') + ']'];
        }
        return ['[' + Array.from(vals).map(function (x, i) {
            return valToString(x, padPerCol[i]);
        }).join(', ') + ']'];
    }
    var subshape = shape.slice(1);
    var substrides = strides.slice(1);
    var stride = strides[0];
    var lines = [];
    if (size > FORMAT_LIMIT_NUM_VALS) {
        for (var i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
            var start = i * stride;
            var end = start + stride;
            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, false));
        }
        lines.push('...');
        for (var i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
            var start = i * stride;
            var end = start + stride;
            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));
        }
    } else {
        for (var i = 0; i < size; i++) {
            var start = i * stride;
            var end = start + stride;
            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));
        }
    }
    var sep = rank === 2 ? ',' : '';
    lines[0] = '[' + lines[0] + sep;
    for (var i = 1; i < lines.length - 1; i++) {
        lines[i] = ' ' + lines[i] + sep;
    }
    var newLineSep = ',\n';
    for (var i = 2; i < rank; i++) {
        newLineSep += '\n';
    }
    lines[lines.length - 1] = ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
    return lines;
}
//# sourceMappingURL=tensor_util.js.map
},{"./util":"lDaM"}],"61IY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.axesAreInnerMostDims = axesAreInnerMostDims;
exports.combineLocations = combineLocations;
exports.computeOutAndReduceShapes = computeOutAndReduceShapes;
exports.expandShapeToKeepDim = expandShapeToKeepDim;
exports.parseAxisParam = parseAxisParam;
exports.assertAxesAreInnerMostDims = assertAxesAreInnerMostDims;
exports.getAxesPermutation = getAxesPermutation;
exports.getUndoAxesPermutation = getUndoAxesPermutation;
exports.getInnerMostAxes = getInnerMostAxes;

var _util = require("../util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function axesAreInnerMostDims(axes, rank) {
    for (var i = 0; i < axes.length; ++i) {
        if (axes[axes.length - i - 1] !== rank - 1 - i) {
            return false;
        }
    }
    return true;
}
function combineLocations(outputLoc, reduceLoc, axes) {
    var rank = outputLoc.length + reduceLoc.length;
    var loc = [];
    var outIdx = 0;
    var reduceIdx = 0;
    for (var dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            loc.push(outputLoc[outIdx++]);
        } else {
            loc.push(reduceLoc[reduceIdx++]);
        }
    }
    return loc;
}
function computeOutAndReduceShapes(aShape, axes) {
    var outShape = [];
    var rank = aShape.length;
    for (var dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            outShape.push(aShape[dim]);
        }
    }
    var reduceShape = axes.map(function (dim) {
        return aShape[dim];
    });
    return [outShape, reduceShape];
}
function expandShapeToKeepDim(shape, axes) {
    var reduceSubShape = axes.map(function (x) {
        return 1;
    });
    return combineLocations(shape, reduceSubShape, axes);
}
function parseAxisParam(axis, shape) {
    var rank = shape.length;
    axis = axis == null ? shape.map(function (s, i) {
        return i;
    }) : [].concat(axis);
    util.assert(axis.every(function (ax) {
        return ax >= -rank && ax < rank;
    }), "All values in axis param must be in range [-" + rank + ", " + rank + ") but " + ("got axis " + axis));
    util.assert(axis.every(function (ax) {
        return util.isInt(ax);
    }), "All values in axis param must be integers but " + ("got axis " + axis));
    return axis.map(function (a) {
        return a < 0 ? rank + a : a;
    });
}
function assertAxesAreInnerMostDims(msg, axes, rank) {
    util.assert(axesAreInnerMostDims(axes, rank), msg + " supports only inner-most axes for now. " + ("Got axes " + axes + " and rank-" + rank + " input."));
}
function getAxesPermutation(axes, rank) {
    if (axesAreInnerMostDims(axes, rank)) {
        return null;
    }
    var result = [];
    for (var i = 0; i < rank; ++i) {
        if (axes.indexOf(i) === -1) {
            result.push(i);
        }
    }
    axes.forEach(function (axis) {
        return result.push(axis);
    });
    return result;
}
function getUndoAxesPermutation(axes) {
    return axes.map(function (axis, i) {
        return [i, axis];
    }).sort(function (a, b) {
        return a[1] - b[1];
    }).map(function (x) {
        return x[0];
    });
}
function getInnerMostAxes(numAxes, rank) {
    var res = [];
    for (var i = rank - numAxes; i < rank; ++i) {
        res.push(i);
    }
    return res;
}
//# sourceMappingURL=axis_util.js.map
},{"../util":"lDaM"}],"NP2Z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.assertParams = assertParams;
exports.computeOutShape1D = computeOutShape1D;
exports.computeOutShape = computeOutShape;
exports.computeGradientSliceShapes = computeGradientSliceShapes;

var _util = require("../util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function assertParams(aShape, bShape, axis) {
    var aRank = aShape.length;
    var bRank = bShape.length;
    util.assert(aShape.length === bShape.length, "Error in concat" + aRank + "D: rank of x1 (" + aRank + ") and x2 (" + bRank + ") " + "must be the same.");
    util.assert(axis >= 0 && axis < aRank, "Error in concat" + aRank + "D: axis must be " + ("between 0 and " + (aRank - 1) + "."));
    for (var i = 0; i < aRank; i++) {
        util.assert(i === axis || aShape[i] === bShape[i], "Error in concat" + aRank + "D: Shape (" + aShape + ") does not match " + ("(" + bShape + ") along the non-concatenated axis " + i + "."));
    }
}
function computeOutShape1D(x1Shape, x2Shape) {
    util.assert(x1Shape.length === 1 && x2Shape.length === 1, 'x1 and x2 should be 1d array.');
    var outputShape = x1Shape.slice();
    outputShape[0] += x2Shape[0];
    return outputShape;
}
function computeOutShape(x1Shape, x2Shape, axis) {
    util.assert(x1Shape.length === x2Shape.length, 'x1 and x2 should have the same rank.');
    var outputShape = x1Shape.slice();
    outputShape[axis] += x2Shape[axis];
    return outputShape;
}
function computeGradientSliceShapes(aShape, bShape) {
    return {
        aBegin: [0, 0],
        aSize: aShape,
        bBegin: [0, aShape[1]],
        bSize: bShape
    };
}
//# sourceMappingURL=concat_util.js.map
},{"../util":"lDaM"}],"uPhB":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.operation = operation;

var _globals = require('../globals');

function operation(target, name, descriptor) {
    var fn = descriptor.value;
    descriptor.value = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (0, _globals.tidy)(name, function () {
            return fn.apply(void 0, args);
        });
    };
    return descriptor;
}
//# sourceMappingURL=operation.js.map
},{"../globals":"AeC1"}],"nJYU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConcatOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _axis_util = require("./axis_util");

var _concat_util = require("./concat_util");

var concat_util = _interopRequireWildcard(_concat_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ConcatOps = function () {
    function ConcatOps() {}
    ConcatOps.concat1d = function (tensors) {
        return ConcatOps.concat(tensors, 0);
    };
    ConcatOps.concat2d = function (tensors, axis) {
        return ConcatOps.concat(tensors, axis);
    };
    ConcatOps.concat3d = function (tensors, axis) {
        return ConcatOps.concat(tensors, axis);
    };
    ConcatOps.concat4d = function (tensors, axis) {
        return ConcatOps.concat(tensors, axis);
    };
    ConcatOps.concat = function (tensors, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        util.assert(tensors.length >= 1, 'Pass at least one tensor to concat');
        util.assertArgumentsAreTensors({ tensors: tensors }, 'concat');
        var result = tensors[0];
        if (tensors.length === 1) {
            return result;
        }
        var axes = (0, _axis_util.parseAxisParam)(axis, result.shape);
        for (var i = 1; i < tensors.length; ++i) {
            result = concat2Tensors(result, tensors[i], axes[0]);
        }
        return result;
    };
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], ConcatOps, "concat", null);
    return ConcatOps;
}();
exports.ConcatOps = ConcatOps;

function concat2Tensors(a, b, axis) {
    concat_util.assertParams(a.shape, b.shape, axis);
    var outShape = concat_util.computeOutShape(a.shape, b.shape, axis);
    var a2D = a.as2D(-1, util.sizeFromShape(a.shape.slice(axis)));
    var b2D = b.as2D(-1, util.sizeFromShape(b.shape.slice(axis)));
    var _a = concat_util.computeGradientSliceShapes(a2D.shape, b2D.shape),
        aBegin = _a.aBegin,
        aSize = _a.aSize,
        bBegin = _a.bBegin,
        bSize = _a.bSize;
    var der = function (dy) {
        return { a: function () {
                return dy.slice(aBegin, aSize);
            }, b: function () {
                return dy.slice(bBegin, bSize);
            } };
    };
    var res = _environment.ENV.engine.runKernel(function (backend) {
        return backend.concat(a2D, b2D);
    }, { a: a2D, b: b2D }, der);
    return res.reshape(outShape);
}
//# sourceMappingURL=concat.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./axis_util":"61IY","./concat_util":"NP2Z","./operation":"uPhB"}],"SSZJ":[function(require,module,exports) {
var define;
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = data.toString();
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.alea = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"C6rM":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor128 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"kkTl":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorwow = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"+rUy":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorshift7 = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);


},{}],"nNkA":[function(require,module,exports) {
var define;
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);

},{}],"gMhV":[function(require,module,exports) {
var define;
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.tychei = impl;
}

})(
  this,
  (typeof module) == 'object' && module,    // present in node.js
  (typeof define) == 'function' && define   // present with an AMD loader
);



},{}],"YOzy":[function(require,module,exports) {
var global = arguments[3];
var define;
/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ((typeof module) == 'object' && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = require('crypto');
  } catch (ex) {}
} else if ((typeof define) == 'function' && define.amd) {
  define(function() { return seedrandom; });
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);

},{"crypto":"tuDi"}],"/xt2":[function(require,module,exports) {
// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = require('./lib/alea');

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = require('./lib/xor128');

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = require('./lib/xorwow');

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = require('./lib/xorshift7');

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = require('./lib/xor4096');

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = require('./lib/tychei');

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = require('./seedrandom');

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;

},{"./lib/alea":"SSZJ","./lib/xor128":"C6rM","./lib/xorwow":"kkTl","./lib/xorshift7":"+rUy","./lib/xor4096":"nNkA","./lib/tychei":"gMhV","./seedrandom":"YOzy"}],"TClz":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MPRandGauss = undefined;

var _seedrandom = require('seedrandom');

var seedrandom = _interopRequireWildcard(_seedrandom);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var MPRandGauss = function () {
    function MPRandGauss(mean, stdDeviation, dtype, truncated, seed) {
        this.mean = mean;
        this.stdDev = stdDeviation;
        this.dtype = dtype;
        this.nextVal = NaN;
        this.truncated = truncated;
        if (this.truncated) {
            this.upper = this.mean + this.stdDev * 2;
            this.lower = this.mean - this.stdDev * 2;
        }
        var seedValue = seed ? seed : Math.random();
        this.random = seedrandom.alea(seedValue.toString());
    }
    MPRandGauss.prototype.nextValue = function () {
        if (!isNaN(this.nextVal)) {
            var value = this.nextVal;
            this.nextVal = NaN;
            return value;
        }
        var resultX, resultY;
        var isValid = false;
        while (!isValid) {
            var v1 = void 0,
                v2 = void 0,
                s = void 0;
            do {
                v1 = 2 * this.random() - 1;
                v2 = 2 * this.random() - 1;
                s = v1 * v1 + v2 * v2;
            } while (s >= 1 || s === 0);
            var mul = Math.sqrt(-2.0 * Math.log(s) / s);
            resultX = this.mean + this.stdDev * v1 * mul;
            resultY = this.mean + this.stdDev * v2 * mul;
            if (!this.truncated || this.isValidTruncated(resultX)) {
                isValid = true;
            }
        }
        if (!this.truncated || this.isValidTruncated(resultY)) {
            this.nextVal = this.convertValue(resultY);
        }
        return this.convertValue(resultX);
    };
    MPRandGauss.prototype.convertValue = function (value) {
        if (this.dtype == null || this.dtype === 'float32') {
            return value;
        }
        return Math.round(value);
    };
    MPRandGauss.prototype.isValidTruncated = function (value) {
        return value <= this.upper && value >= this.lower;
    };
    return MPRandGauss;
}();
exports.MPRandGauss = MPRandGauss;
//# sourceMappingURL=rand.js.map
},{"seedrandom":"/xt2"}],"BbW7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReductionOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _globals = require("../globals");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _axis_util = require("./axis_util");

var axis_util = _interopRequireWildcard(_axis_util);

var _operation = require("./operation");

var _ops = require("./ops");

var ops = _interopRequireWildcard(_ops);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ReductionOps = function () {
    function ReductionOps() {}
    ReductionOps.logSumExp = function (x, axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        util.assertArgumentsAreTensors({ x: x }, 'logSumExp');
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var xMax = x.max(axes, true);
        var a = x.sub(xMax);
        var b = a.exp();
        var c = b.sum(axes);
        var d = c.log();
        var res = xMax.reshape(d.shape).add(d);
        if (keepDims) {
            var newShape = axis_util.expandShapeToKeepDim(res.shape, axes);
            return res.reshape(newShape);
        }
        return res;
    };
    ReductionOps.sum = function (x, axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        util.assertArgumentsAreTensors({ x: x }, 'sum');
        if (x.dtype === 'bool') {
            x = x.toInt();
        }
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var customOp = (0, _globals.customGrad)(function (x) {
            var permutation = axis_util.getAxesPermutation(axes, x.rank);
            var reductionAxes = axes;
            var permutedX = x;
            if (permutation != null) {
                permutedX = x.transpose(permutation);
                reductionAxes = axis_util.getInnerMostAxes(reductionAxes.length, x.rank);
            }
            var value = _environment.ENV.engine.runKernel(function (backend) {
                return backend.sum(permutedX, reductionAxes);
            }, { permutedX: permutedX });
            if (keepDims) {
                var newShape = axis_util.expandShapeToKeepDim(value.shape, axes);
                value = value.reshape(newShape);
            }
            var gradFunc = function (dy) {
                var expandedDyShape = x.shape.slice();
                axes.forEach(function (axis) {
                    expandedDyShape[axis] = 1;
                });
                var expandedDy = dy.reshape(expandedDyShape);
                var derX = expandedDy.mul(ops.ones(x.shape, 'float32'));
                return derX;
            };
            return { value: value, gradFunc: gradFunc };
        });
        return customOp(x);
    };
    ReductionOps.mean = function (x, axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        util.assertArgumentsAreTensors({ x: x }, 'mean');
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var shapes = axis_util.computeOutAndReduceShapes(x.shape, axes);
        var reduceShape = shapes[1];
        var reduceSize = util.sizeFromShape(reduceShape);
        var customOp = (0, _globals.customGrad)(function (x) {
            var reduceSizeScalar = ops.scalar(reduceSize);
            var xReduce = reduceSizeScalar.dtype === x.dtype ? x : x.cast(reduceSizeScalar.dtype);
            var res = xReduce.div(reduceSizeScalar);
            var value = res.sum(axis, keepDims);
            var gradFunc = function (dy) {
                var expandedDyShape = x.shape.slice();
                axes.forEach(function (axis) {
                    expandedDyShape[axis] = 1;
                });
                var expandedDy = dy.reshape(expandedDyShape);
                var derX = expandedDy.mul(ops.ones(x.shape, 'float32')).div(reduceSizeScalar);
                return derX;
            };
            return { value: value, gradFunc: gradFunc };
        });
        return customOp(x);
    };
    ReductionOps.min = function (x, axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        util.assertArgumentsAreTensors({ x: x }, 'min');
        var origAxes = axis_util.parseAxisParam(axis, x.shape);
        var axes = origAxes;
        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);
        if (permutedAxes != null) {
            x = x.transpose(permutedAxes);
            axes = axis_util.getInnerMostAxes(axes.length, x.rank);
        }
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.min(x, axes);
        }, { x: x });
        if (keepDims) {
            var newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);
            return res.reshape(newShape);
        }
        return res;
    };
    ReductionOps.max = function (x, axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        util.assertArgumentsAreTensors({ x: x }, 'max');
        var origAxes = axis_util.parseAxisParam(axis, x.shape);
        var axes = origAxes;
        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);
        if (permutedAxes != null) {
            x = x.transpose(permutedAxes);
            axes = axis_util.getInnerMostAxes(axes.length, x.rank);
        }
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.max(x, axes);
        }, { x: x });
        if (keepDims) {
            var newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);
            return res.reshape(newShape);
        }
        return res;
    };
    ReductionOps.argMin = function (x, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        util.assertArgumentsAreTensors({ x: x }, 'argMin');
        if (axis == null) {
            axis = 0;
        }
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);
        if (permutedAxes != null) {
            x = x.transpose(permutedAxes);
            axes = axis_util.getInnerMostAxes(axes.length, x.rank);
        }
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.argMin(x, axes[0]);
        }, { x: x });
    };
    ReductionOps.argMax = function (x, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        util.assertArgumentsAreTensors({ x: x }, 'argMax');
        if (axis == null) {
            axis = 0;
        }
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);
        if (permutedAxes != null) {
            x = x.transpose(permutedAxes);
            axes = axis_util.getInnerMostAxes(axes.length, x.rank);
        }
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.argMax(x, axes[0]);
        }, { x: x });
    };
    ReductionOps.moments = function (x, axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        util.assertArgumentsAreTensors({ x: x }, 'moments');
        var axes = axis_util.parseAxisParam(axis, x.shape);
        var mean = x.mean(axes, keepDims);
        var keepDimsShape = mean.shape;
        if (!keepDims) {
            keepDimsShape = axis_util.expandShapeToKeepDim(mean.shape, axes);
        }
        var devSquared = x.toFloat().sub(mean.reshape(keepDimsShape)).square();
        var variance = devSquared.mean(axes, keepDims);
        return { mean: mean, variance: variance };
    };
    ReductionOps.unsortedSegmentSum = function (x, segmentIds, numSegments, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        util.assertArgumentsAreTensors({ x: x, segmentIds: segmentIds }, 'unsortedSegmentSum');
        util.assert(segmentIds.dtype === 'int32', 'Segment Ids must be of dtype `int32`');
        axis = axis_util.parseAxisParam(axis, x.shape)[0];
        var res = [];
        var dim = segmentIds.shape[0];
        var newShape = [];
        for (var i = 0; i < x.shape.length; i++) {
            if (i === axis) {
                newShape.push(dim);
            } else {
                newShape.push(1);
            }
        }
        var reshapedSegmentIds = ops.reshape(segmentIds, newShape);
        for (var i = 0; i < numSegments; i++) {
            var segmentId = ops.scalar(i, 'int32');
            var mask = ops.equal(segmentId, reshapedSegmentIds).asType('float32');
            var sum = mask.mul(x).sum(axis);
            res.push(sum);
        }
        return ops.stack(res, axis);
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, "logSumExp", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, "sum", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, "mean", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, "min", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, "max", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, "argMin", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, "argMax", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Normalization' }), _operation.operation], ReductionOps, "moments", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Reduction' }), _operation.operation], ReductionOps, "unsortedSegmentSum", null);
    return ReductionOps;
}();
exports.ReductionOps = ReductionOps;
//# sourceMappingURL=reduction_ops.js.map
},{"../doc":"VkNo","../environment":"CAkW","../globals":"AeC1","../util":"lDaM","./axis_util":"61IY","./operation":"uPhB","./ops":"bzyr"}],"2sZK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ArrayOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _tensor = require("../tensor");

var _tensor_util = require("../tensor_util");

var tensor_util = _interopRequireWildcard(_tensor_util);

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _axis_util = require("./axis_util");

var _concat = require("./concat");

var _operation = require("./operation");

var _rand = require("./rand");

var _reduction_ops = require("./reduction_ops");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var ArrayOps = function () {
    function ArrayOps() {}
    ArrayOps.tensor = function (values, shape, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        var inferredShape = util.inferShape(values);
        if (shape != null && inferredShape.length !== 1) {
            util.assertShapesMatch(shape, inferredShape, "Error creating a new Tensor. " + ("Inferred shape (" + inferredShape + ") does not match the ") + ("provided shape (" + shape + "). "));
        }
        if (!util.isTypedArray(values) && !Array.isArray(values)) {
            values = [values];
        }
        shape = shape || inferredShape;
        return _tensor.Tensor.make(shape, { values: toTypedArray(values, dtype) }, dtype);
    };
    ArrayOps.scalar = function (value, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        if (util.isTypedArray(value) || Array.isArray(value)) {
            throw new Error('Error creating a new Scalar: value must be a primitive ' + '(number|boolean)');
        }
        return ArrayOps.tensor(value, [], dtype);
    };
    ArrayOps.tensor1d = function (values, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        var inferredShape = util.inferShape(values);
        if (inferredShape.length !== 1) {
            throw new Error('tensor1d() requires values to be a flat/TypedArray');
        }
        return ArrayOps.tensor(values, inferredShape, dtype);
    };
    ArrayOps.tensor2d = function (values, shape, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        if (shape != null && shape.length !== 2) {
            throw new Error('tensor2d() requires shape to have two numbers');
        }
        var inferredShape = util.inferShape(values);
        if (inferredShape.length !== 2 && inferredShape.length !== 1) {
            throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor2d() requires shape to be provided when `values` ' + 'are a flat/TypedArray');
        }
        shape = shape || inferredShape;
        return ArrayOps.tensor(values, shape, dtype);
    };
    ArrayOps.tensor3d = function (values, shape, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        if (shape != null && shape.length !== 3) {
            throw new Error('tensor3d() requires shape to have three numbers');
        }
        var inferredShape = util.inferShape(values);
        if (inferredShape.length !== 3 && inferredShape.length !== 1) {
            throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor3d() requires shape to be provided when `values` ' + 'are a flat array');
        }
        shape = shape || inferredShape;
        return ArrayOps.tensor(values, shape, dtype);
    };
    ArrayOps.tensor4d = function (values, shape, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        if (shape != null && shape.length !== 4) {
            throw new Error('tensor4d() requires shape to have four numbers');
        }
        var inferredShape = util.inferShape(values);
        if (inferredShape.length !== 4 && inferredShape.length !== 1) {
            throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');
        }
        if (inferredShape.length === 1 && shape == null) {
            throw new Error('tensor4d() requires shape to be provided when `values` ' + 'are a flat array');
        }
        shape = shape || inferredShape;
        return ArrayOps.tensor(values, shape, dtype);
    };
    ArrayOps.ones = function (shape, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        var values = makeOnesTypedArray(util.sizeFromShape(shape), dtype);
        return _tensor.Tensor.make(shape, { values: values }, dtype);
    };
    ArrayOps.zeros = function (shape, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        var values = makeZerosTypedArray(util.sizeFromShape(shape), dtype);
        return _tensor.Tensor.make(shape, { values: values }, dtype);
    };
    ArrayOps.fill = function (shape, value, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        var values = util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));
        values.fill(value);
        return _tensor.Tensor.make(shape, { values: values }, dtype);
    };
    ArrayOps.onesLike = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'onesLike');
        return ArrayOps.ones(x.shape, x.dtype);
    };
    ArrayOps.zerosLike = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'zerosLike');
        return ArrayOps.zeros(x.shape, x.dtype);
    };
    ArrayOps.clone = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'clone');
        var der = function (dy) {
            return { x: function () {
                    return dy.toFloat();
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return _tensor.Tensor.make(x.shape, { dataId: x.dataId }, x.dtype);
        }, { x: x }, der);
    };
    ArrayOps.eye = function (numRows, numColumns, batchShape, dtype) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        if (numColumns == null) {
            numColumns = numRows;
        }
        var buffer = ArrayOps.buffer([numRows, numColumns], dtype);
        var n = numRows <= numColumns ? numRows : numColumns;
        for (var i = 0; i < n; ++i) {
            buffer.set(1, i, i);
        }
        var out = buffer.toTensor().as2D(numRows, numColumns);
        if (batchShape == null) {
            return out;
        } else {
            if (batchShape.length === 1) {
                return ArrayOps.tile(ArrayOps.expandDims(out, 0), [batchShape[0], 1, 1]);
            } else if (batchShape.length === 2) {
                return ArrayOps.tile(ArrayOps.expandDims(ArrayOps.expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);
            } else {
                throw new Error("eye() currently supports only 1D and 2D " + ("batchShapes, but received " + batchShape.length + "D."));
            }
        }
    };
    ArrayOps.randomNormal = function (shape, mean, stdDev, dtype, seed) {
        if (mean === void 0) {
            mean = 0;
        }
        if (stdDev === void 0) {
            stdDev = 1;
        }
        if (dtype != null && dtype === 'bool') {
            throw new Error("Unsupported data type " + dtype);
        }
        var randGauss = new _rand.MPRandGauss(mean, stdDev, dtype, false, seed);
        var res = ArrayOps.buffer(shape, dtype);
        for (var i = 0; i < res.values.length; i++) {
            res.values[i] = randGauss.nextValue();
        }
        return res.toTensor();
    };
    ArrayOps.truncatedNormal = function (shape, mean, stdDev, dtype, seed) {
        if (mean === void 0) {
            mean = 0;
        }
        if (stdDev === void 0) {
            stdDev = 1;
        }
        if (dtype != null && dtype === 'bool') {
            throw new Error("Unsupported data type " + dtype);
        }
        var randGauss = new _rand.MPRandGauss(mean, stdDev, dtype, true, seed);
        var res = ArrayOps.buffer(shape, dtype);
        for (var i = 0; i < res.values.length; i++) {
            res.values[i] = randGauss.nextValue();
        }
        return res.toTensor();
    };
    ArrayOps.randomUniform = function (shape, minval, maxval, dtype) {
        if (minval === void 0) {
            minval = 0;
        }
        if (maxval === void 0) {
            maxval = 1;
        }
        if (dtype === void 0) {
            dtype = 'float32';
        }
        var res = ArrayOps.buffer(shape, dtype);
        for (var i = 0; i < res.values.length; i++) {
            res.values[i] = util.randUniform(minval, maxval);
        }
        return res.toTensor();
    };
    ArrayOps.rand = function (shape, randFunction, dtype) {
        var size = util.sizeFromShape(shape);
        var values = null;
        if (dtype == null || dtype === 'float32') {
            values = new Float32Array(size);
        } else if (dtype === 'int32') {
            values = new Int32Array(size);
        } else if (dtype === 'bool') {
            values = new Uint8Array(size);
        } else {
            throw new Error("Unknown data type " + dtype);
        }
        for (var i = 0; i < size; i++) {
            values[i] = randFunction();
        }
        return _tensor.Tensor.make(shape, { values: values }, dtype);
    };
    ArrayOps.multinomial = function (logits, numSamples, seed, normalized) {
        if (normalized === void 0) {
            normalized = false;
        }
        util.assertArgumentsAreTensors({ logits: logits }, 'multinomial');
        var numOutcomes = logits.size;
        var origRank = logits.rank;
        if (numOutcomes < 2) {
            throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + (numOutcomes + "."));
        }
        if (origRank > 2) {
            throw new Error("Rank of probabilities must be 1 or 2, but is " + origRank);
        }
        seed = seed || Math.random();
        var logits2D = origRank === 1 ? logits.as2D(1, -1) : logits;
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.multinomial(logits2D, normalized, numSamples, seed);
        }, { logits2D: logits2D });
        return origRank === 1 ? res.as1D() : res;
    };
    ArrayOps.oneHot = function (indices, depth, onValue, offValue) {
        if (onValue === void 0) {
            onValue = 1;
        }
        if (offValue === void 0) {
            offValue = 0;
        }
        util.assert(indices.dtype === 'int32', 'Indices must be of dtype `int32`');
        if (depth < 2) {
            throw new Error("Error in oneHot: depth must be >=2, but it is " + depth);
        }
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.oneHot(indices, depth, onValue, offValue);
        }, { indices: indices });
    };
    ArrayOps.fromPixels = function (pixels, numChannels) {
        if (numChannels === void 0) {
            numChannels = 3;
        }
        if (numChannels > 4) {
            throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
        }
        return _environment.ENV.engine.fromPixels(pixels, numChannels);
    };
    ArrayOps.toPixels = function (img, canvas) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, height, width, depth, minTensor, maxTensor, min, max, data, multiplier, bytes, i, r, g, b, a, j, ctx, imageData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        util.assertArgumentsAreTensors({ img: img }, 'toPixels');
                        if (img.rank !== 2 && img.rank !== 3) {
                            throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + img.rank + ".");
                        }
                        _a = img.shape.slice(0, 2), height = _a[0], width = _a[1];
                        depth = img.rank === 2 ? 1 : img.shape[2];
                        if (depth > 4 || depth === 2) {
                            throw new Error("toPixels only supports depth of size " + ("1, 3 or 4 but got " + depth));
                        }
                        minTensor = img.min();
                        maxTensor = img.max();
                        return [4, minTensor.data()];
                    case 1:
                        min = _b.sent()[0];
                        return [4, maxTensor.data()];
                    case 2:
                        max = _b.sent()[0];
                        minTensor.dispose();
                        maxTensor.dispose();
                        if (img.dtype === 'float32') {
                            if (min < 0 || max > 1) {
                                throw new Error("Tensor values for a float32 Tensor must be in the " + ("range [0 - 1] but got range [" + min + " - " + max + "]."));
                            }
                        } else if (img.dtype === 'int32') {
                            if (min < 0 || max > 255) {
                                throw new Error("Tensor values for a int32 Tensor must be in the " + ("range [0 - 255] but got range [" + min + " - " + max + "]."));
                            }
                        } else {
                            throw new Error("Unsupported type for toPixels: " + img.dtype + "." + " Please use float32 or int32 tensors.");
                        }
                        return [4, img.data()];
                    case 3:
                        data = _b.sent();
                        multiplier = img.dtype === 'float32' ? 255 : 1;
                        bytes = new Uint8ClampedArray(width * height * 4);
                        for (i = 0; i < height * width; ++i) {
                            r = void 0, g = void 0, b = void 0, a = void 0;
                            if (depth === 1) {
                                r = data[i] * multiplier;
                                g = data[i] * multiplier;
                                b = data[i] * multiplier;
                                a = 255;
                            } else if (depth === 3) {
                                r = data[i * 3] * multiplier;
                                g = data[i * 3 + 1] * multiplier;
                                b = data[i * 3 + 2] * multiplier;
                                a = 255;
                            } else if (depth === 4) {
                                r = data[i * 4] * multiplier;
                                g = data[i * 4 + 1] * multiplier;
                                b = data[i * 4 + 2] * multiplier;
                                a = data[i * 4 + 3] * multiplier;
                            }
                            j = i * 4;
                            bytes[j + 0] = Math.round(r);
                            bytes[j + 1] = Math.round(g);
                            bytes[j + 2] = Math.round(b);
                            bytes[j + 3] = Math.round(a);
                        }
                        if (canvas != null) {
                            canvas.width = width;
                            canvas.height = height;
                            ctx = canvas.getContext('2d');
                            imageData = new ImageData(bytes, width, height);
                            ctx.putImageData(imageData, 0, 0);
                        }
                        return [2, bytes];
                }
            });
        });
    };
    ArrayOps.reshape = function (x, shape) {
        util.assertArgumentsAreTensors({ x: x }, 'reshape');
        shape = util.inferFromImplicitShape(shape, x.size);
        util.assert(x.size === util.sizeFromShape(shape), 'new shape and old shape must have the same number of elements.');
        var grad = function (dy) {
            return { x: function () {
                    return dy.reshape(x.shape);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.reshape(x, shape);
        }, { x: x }, grad);
    };
    ArrayOps.squeeze = function (x, axis) {
        util.assertArgumentsAreTensors({ x: x }, 'squeeze');
        return ArrayOps.reshape(x, util.squeezeShape(x.shape, axis).newShape);
    };
    ArrayOps.cast = function (x, dtype) {
        util.assertArgumentsAreTensors({ x: x }, 'cast');
        var grad = function (dy) {
            return { x: function () {
                    return dy.clone();
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.cast(x, dtype);
        }, { x: x }, grad);
    };
    ArrayOps.tile = function (x, reps) {
        util.assertArgumentsAreTensors({ x: x }, 'tile');
        util.assert(x.rank === reps.length, "Error in transpose: rank of input " + x.rank + " " + ("must match length of reps " + reps + "."));
        var grad = function (dy) {
            var derX = function () {
                var xGrad = ArrayOps.zerosLike(x);
                if (x.rank === 1) {
                    for (var i = 0; i < reps[0]; ++i) {
                        xGrad = xGrad.add(dy.slice([i * x.shape[0]], [x.shape[0]]));
                    }
                } else if (x.rank === 2) {
                    for (var i = 0; i < reps[0]; ++i) {
                        for (var j = 0; j < reps[1]; ++j) {
                            xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));
                        }
                    }
                } else if (x.rank === 3) {
                    for (var i = 0; i < reps[0]; ++i) {
                        for (var j = 0; j < reps[1]; ++j) {
                            for (var k = 0; k < reps[2]; ++k) {
                                xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));
                            }
                        }
                    }
                } else if (x.rank === 4) {
                    for (var i = 0; i < reps[0]; ++i) {
                        for (var j = 0; j < reps[1]; ++j) {
                            for (var k = 0; k < reps[2]; ++k) {
                                for (var l = 0; l < reps[3]; ++l) {
                                    xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1], k * x.shape[2], l * x.shape[3]], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));
                                }
                            }
                        }
                    }
                } else {
                    throw new Error("Gradient for tile operation is not implemented for rank-" + (x.rank + " tensors yet."));
                }
                return xGrad;
            };
            return { x: derX };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.tile(x, reps);
        }, { x: x }, grad);
    };
    ArrayOps.gather = function (x, indices, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        util.assertArgumentsAreTensors({ x: x, indices: indices }, 'gather');
        util.assert(indices.dtype === 'int32', 'Indices must be of dtype `int32`');
        axis = (0, _axis_util.parseAxisParam)(axis, x.shape)[0];
        var grad = function (dy) {
            var derX = function () {
                return _reduction_ops.ReductionOps.unsortedSegmentSum(dy, indices, x.shape[axis], axis);
            };
            return { x: derX };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.gather(x, indices, axis);
        }, { x: x }, grad);
    };
    ArrayOps.pad1d = function (x, paddings, constantValue) {
        if (constantValue === void 0) {
            constantValue = 0;
        }
        util.assert(paddings.length === 2, 'Invalid number of paddings. Must be length of 2.');
        return ArrayOps.pad(x, [paddings], constantValue);
    };
    ArrayOps.pad2d = function (x, paddings, constantValue) {
        if (constantValue === void 0) {
            constantValue = 0;
        }
        util.assert(paddings.length === 2 && paddings[0].length === 2 && paddings[1].length === 2, 'Invalid number of paddings. Must be length of 2 each.');
        return ArrayOps.pad(x, paddings, constantValue);
    };
    ArrayOps.pad3d = function (x, paddings, constantValue) {
        if (constantValue === void 0) {
            constantValue = 0;
        }
        util.assert(paddings.length === 3 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2, 'Invalid number of paddings. Must be length of 2 each.');
        return ArrayOps.pad(x, paddings, constantValue);
    };
    ArrayOps.pad4d = function (x, paddings, constantValue) {
        if (constantValue === void 0) {
            constantValue = 0;
        }
        util.assert(paddings.length === 4 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2 && paddings[3].length === 2, 'Invalid number of paddings. Must be length of 2 each.');
        return ArrayOps.pad(x, paddings, constantValue);
    };
    ArrayOps.pad = function (x, paddings, constantValue) {
        if (constantValue === void 0) {
            constantValue = 0;
        }
        util.assertArgumentsAreTensors({ x: x }, 'pad');
        if (x.rank === 0) {
            throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
        }
        var begin = paddings.map(function (p) {
            return p[0];
        });
        var grad = function (dy) {
            return { x: function () {
                    return dy.slice(begin, x.shape);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.pad(x, paddings, constantValue);
        }, { x: x }, grad);
    };
    ArrayOps.stack = function (tensors, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        util.assertArgumentsAreTensors({ tensors: tensors }, 'stack');
        util.assert(tensors.length >= 1, 'Pass at least one tensor to tf.stack');
        if (tensors.length === 1) {
            return tensors[0].expandDims(axis);
        }
        var rank = tensors[0].rank;
        var shape = tensors[0].shape;
        var dtype = tensors[0].dtype;
        util.assert(axis <= rank, 'Axis must be <= rank of the tensor');
        tensors.forEach(function (t) {
            util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');
        });
        tensors.forEach(function (t) {
            util.assert(dtype === t.dtype, 'All tensors passed to stack must have matching dtypes');
        });
        var expandedTensors = tensors.map(function (t) {
            return t.expandDims(axis);
        });
        return _concat.ConcatOps.concat(expandedTensors, axis);
    };
    ArrayOps.unstack = function (value, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        var num = value.shape[axis];
        var outputShape = Array(value.rank - 1).fill(0);
        var outIndex = 0;
        for (var i = 0; i < value.rank; i++) {
            if (i !== axis) {
                outputShape[outIndex] = value.shape[i];
                outIndex++;
            }
        }
        var splitSizes;
        splitSizes = Array(num).fill(1);
        var begin = Array(value.rank).fill(0);
        var size = value.shape.slice();
        return splitSizes.map(function (s) {
            size[axis] = s;
            var slice = value.slice(begin, size);
            begin[axis] += s;
            return slice.reshape(outputShape);
        });
    };
    ArrayOps.split = function (x, numOrSizeSplits, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        util.assertArgumentsAreTensors({ x: x }, 'split');
        axis = (0, _axis_util.parseAxisParam)(axis, x.shape)[0];
        var splitSizes;
        if (typeof numOrSizeSplits === 'number') {
            util.assert(x.shape[axis] % numOrSizeSplits === 0, 'Number of splits must evenly divide the axis.');
            splitSizes = Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
        } else {
            util.assert(x.shape[axis] === numOrSizeSplits.reduce(function (a, b) {
                return a + b;
            }), 'The sum of sizes must match the size of the axis dimension.');
            splitSizes = numOrSizeSplits;
        }
        var begin = Array(x.rank).fill(0);
        var size = x.shape.slice();
        return splitSizes.map(function (s) {
            size[axis] = s;
            var slice = x.slice(begin, size);
            begin[axis] += s;
            return slice;
        });
    };
    ArrayOps.cumsum = function (x, axis, exclusive, reverse) {
        if (axis === void 0) {
            axis = 0;
        }
        if (exclusive === void 0) {
            exclusive = false;
        }
        if (reverse === void 0) {
            reverse = false;
        }
        util.assertArgumentsAreTensors({ x: x }, 'cumsum');
        axis = axis | 0;
        var permutation = (0, _axis_util.getAxesPermutation)([axis], x.rank);
        var permutedX = x;
        if (permutation != null) {
            permutedX = x.transpose(permutation);
        }
        var permutedAxis = (0, _axis_util.getInnerMostAxes)(1, x.rank)[0];
        var grad = function (dy) {
            return { permutedX: function () {
                    return dy.cumsum(axis, exclusive, !reverse);
                } };
        };
        var value = _environment.ENV.engine.runKernel(function (backend) {
            return backend.cumsum(permutedX, permutedAxis, exclusive, reverse);
        }, { permutedX: permutedX }, grad);
        if (permutation != null) {
            value = value.transpose(permutation);
        }
        return value;
    };
    ArrayOps.expandDims = function (x, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        util.assertArgumentsAreTensors({ x: x }, 'expandDims');
        util.assert(axis <= x.rank, 'Axis must be <= rank of the tensor');
        var newShape = x.shape.slice();
        newShape.splice(axis, 0, 1);
        return ArrayOps.reshape(x, newShape);
    };
    ArrayOps.linspace = function (start, stop, num) {
        if (num === 0) {
            throw new Error('Cannot request zero samples');
        }
        var step = (stop - start) / (num - 1);
        var values = makeZerosTypedArray(num, 'float32');
        values[0] = start;
        for (var i = 1; i < values.length; i++) {
            values[i] = values[i - 1] + step;
        }
        return ArrayOps.tensor1d(values, 'float32');
    };
    ArrayOps.range = function (start, stop, step, dtype) {
        if (step === void 0) {
            step = 1;
        }
        if (dtype === void 0) {
            dtype = 'float32';
        }
        if (step === 0) {
            throw new Error('Cannot have a step of zero');
        }
        var sameStartStop = start === stop;
        var increasingRangeNegativeStep = start < stop && step < 0;
        var decreasingRangePositiveStep = stop < start && step > 1;
        if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) {
            return ArrayOps.zeros([0], dtype);
        }
        var numElements = Math.abs(Math.ceil((stop - start) / step));
        var values = makeZerosTypedArray(numElements, dtype);
        if (stop < start && step === 1) {
            step = -1;
        }
        values[0] = start;
        for (var i = 1; i < values.length; i++) {
            values[i] = values[i - 1] + step;
        }
        return ArrayOps.tensor1d(values, dtype);
    };
    ArrayOps.buffer = function (shape, dtype, values) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        return new _tensor.TensorBuffer(shape, dtype, values);
    };
    ArrayOps.print = function (x, verbose) {
        if (verbose === void 0) {
            verbose = false;
        }
        console.log(tensor_util.tensorToString(x, verbose));
    };
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "tensor", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "scalar", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "tensor1d", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "tensor2d", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "tensor3d", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "tensor4d", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "ones", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "zeros", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "fill", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "onesLike", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "zerosLike", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "clone", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "eye", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "randomNormal", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "truncatedNormal", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "randomUniform", null);
    __decorate([_operation.operation], ArrayOps, "rand", null);
    __decorate([_operation.operation], ArrayOps, "multinomial", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "oneHot", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' }), _operation.operation], ArrayOps, "fromPixels", null);
    __decorate([(0, _doc.doc)({ heading: 'Visualization' })], ArrayOps, "toPixels", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Transformations' }), _operation.operation], ArrayOps, "reshape", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Transformations' })], ArrayOps, "squeeze", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Transformations' }), _operation.operation], ArrayOps, "cast", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], ArrayOps, "tile", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], ArrayOps, "gather", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Transformations' }), _operation.operation], ArrayOps, "pad", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], ArrayOps, "stack", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], ArrayOps, "unstack", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], ArrayOps, "split", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Scan' })], ArrayOps, "cumsum", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Transformations' }), _operation.operation], ArrayOps, "expandDims", null);
    __decorate([_operation.operation, (0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "linspace", null);
    __decorate([_operation.operation, (0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "range", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "buffer", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, "print", null);
    return ArrayOps;
}();
exports.ArrayOps = ArrayOps;

function makeZerosTypedArray(size, dtype) {
    if (dtype == null || dtype === 'float32') {
        return new Float32Array(size);
    } else if (dtype === 'int32') {
        return new Int32Array(size);
    } else if (dtype === 'bool') {
        return new Uint8Array(size);
    } else {
        throw new Error("Unknown data type $ {dtype}");
    }
}
function makeOnesTypedArray(size, dtype) {
    var array = makeZerosTypedArray(size, dtype);
    for (var i = 0; i < array.length; i++) {
        array[i] = 1;
    }
    return array;
}
function toTypedArray(a, dtype) {
    if (noConversionNeeded(a, dtype)) {
        return a;
    }
    if (Array.isArray(a)) {
        a = util.flatten(a);
    }
    return util.copyTypedArray(a, dtype);
}
function noConversionNeeded(a, dtype) {
    return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';
}
//# sourceMappingURL=array_ops.js.map
},{"../doc":"VkNo","../environment":"CAkW","../tensor":"Xe78","../tensor_util":"S7Qn","../util":"lDaM","./axis_util":"61IY","./concat":"nJYU","./operation":"uPhB","./rand":"TClz","./reduction_ops":"BbW7"}],"lcGM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getBroadcastDims = getBroadcastDims;
exports.getReductionAxes = getReductionAxes;
exports.broadcastDimsAreOuter = broadcastDimsAreOuter;
exports.assertAndGetBroadcastShape = assertAndGetBroadcastShape;
function getBroadcastDims(inShape, outShape) {
    var inRank = inShape.length;
    var dims = [];
    for (var i = 0; i < inRank; i++) {
        var dim = inRank - 1 - i;
        var a = inShape[dim] || 1;
        var b = outShape[outShape.length - 1 - i] || 1;
        if (b > 1 && a === 1) {
            dims.unshift(dim);
        }
    }
    return dims;
}
function getReductionAxes(inShape, outShape) {
    var result = [];
    for (var i = 0; i < outShape.length; i++) {
        var inDim = inShape[inShape.length - i - 1];
        var outAxis = outShape.length - i - 1;
        var outDim = outShape[outAxis];
        if (inDim == null || inDim === 1 && outDim > 1) {
            result.unshift(outAxis);
        }
    }
    return result;
}
function broadcastDimsAreOuter(dims) {
    for (var i = 0; i < dims.length; i++) {
        if (dims[i] !== i) {
            return false;
        }
    }
    return true;
}
function assertAndGetBroadcastShape(shapeA, shapeB) {
    var result = [];
    var errMsg = "Operands could not be broadcast together with shapes " + (shapeA + " and " + shapeB + ".");
    var l = Math.max(shapeA.length, shapeB.length);
    for (var i = 0; i < l; i++) {
        var a = shapeA[shapeA.length - i - 1] || 1;
        var b = shapeB[shapeB.length - i - 1] || 1;
        if (a > 1 && b > 1 && a !== b) {
            throw Error(errMsg);
        }
        result.unshift(Math.max(a, b));
    }
    return result;
}
//# sourceMappingURL=broadcast_util.js.map
},{}],"3YjN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BatchNormOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _array_ops = require("./array_ops");

var _broadcast_util = require("./broadcast_util");

var _operation = require("./operation");

var _ops = require("./ops");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var BatchNormOps = function () {
    function BatchNormOps() {}
    BatchNormOps.batchNormalization2d = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) {
            varianceEpsilon = .001;
        }
        util.assert(x.rank === 2, "Error in batchNormalization3D: x must be rank 3 but got rank " + (x.rank + "."));
        util.assert(mean.rank === 2 || mean.rank === 1, "Error in batchNormalization2D: mean must be rank 2 or rank 1 but " + ("got rank " + mean.rank + "."));
        util.assert(variance.rank === 2 || variance.rank === 1, "Error in batchNormalization2D: variance must be rank 2 or rank 1 " + ("but got rank " + variance.rank + "."));
        if (scale != null) {
            util.assert(scale.rank === 2 || scale.rank === 1, "Error in batchNormalization2D: scale must be rank 2 or rank 1 " + ("but got rank " + scale.rank + "."));
        }
        if (offset != null) {
            util.assert(offset.rank === 2 || offset.rank === 1, "Error in batchNormalization2D: offset must be rank 2 or rank 1 " + ("but got rank " + offset.rank + "."));
        }
        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);
    };
    BatchNormOps.batchNormalization3d = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) {
            varianceEpsilon = .001;
        }
        util.assert(x.rank === 3, "Error in batchNormalization3D: x must be rank 3 but got rank " + (x.rank + "."));
        util.assert(mean.rank === 3 || mean.rank === 1, "Error in batchNormalization3D: mean must be rank 3 or rank 1 but " + ("got rank " + mean.rank + "."));
        util.assert(variance.rank === 3 || variance.rank === 1, "Error in batchNormalization3D: variance must be rank 3 or rank 1 " + ("but got rank " + variance.rank + "."));
        if (scale != null) {
            util.assert(scale.rank === 3 || scale.rank === 1, "Error in batchNormalization3D: scale must be rank 3 or rank 1 " + ("but got rank " + scale.rank + "."));
        }
        if (offset != null) {
            util.assert(offset.rank === 3 || offset.rank === 1, "Error in batchNormalization3D: offset must be rank 3 or rank 1 " + ("but got rank " + offset.rank + "."));
        }
        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);
    };
    BatchNormOps.batchNormalization4d = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) {
            varianceEpsilon = .001;
        }
        util.assert(x.rank === 4, "Error in batchNormalization4D: x must be rank 4 but got rank " + (x.rank + "."));
        util.assert(mean.rank === 4 || mean.rank === 1, "Error in batchNormalization4D: mean must be rank 4 or rank 1 but " + ("got rank " + mean.rank + "."));
        util.assert(variance.rank === 4 || variance.rank === 1, "Error in batchNormalization4D: variance must be rank 4 or rank 1 " + ("but got rank " + variance.rank + "."));
        if (scale != null) {
            util.assert(scale.rank === 4 || scale.rank === 1, "Error in batchNormalization4D: scale must be rank 4 or rank 1 " + ("but got rank " + scale.rank + "."));
        }
        if (offset != null) {
            util.assert(offset.rank === 4 || offset.rank === 1, "Error in batchNormalization4D: offset must be rank 4 or rank 1 " + ("but got rank " + offset.rank + "."));
        }
        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);
    };
    BatchNormOps.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) {
            varianceEpsilon = .001;
        }
        util.assertArgumentsAreTensors({ x: x, mean: mean, variance: variance }, 'batchNormalization');
        if (scale != null) {
            util.assertArgumentsAreTensors({ scale: scale }, 'batchNormalization');
        }
        if (offset != null) {
            util.assertArgumentsAreTensors({ offset: offset }, 'batchNormalization');
        }
        util.assert(mean.rank === variance.rank, 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');
        util.assert(offset == null || mean.rank === offset.rank, 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');
        util.assert(scale == null || mean.rank === scale.rank, 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');
        var x4D;
        if (x.rank === 0 || x.rank === 1) {
            x4D = x.as4D(1, 1, 1, x.size);
        } else if (x.rank === 2) {
            x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);
        } else if (x.rank === 3) {
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        } else {
            x4D = x;
        }
        var der = function (dy) {
            var scaleValue = scale == null ? _array_ops.ArrayOps.scalar(1) : scale;
            var reductionAxes = (0, _broadcast_util.getReductionAxes)(mean.shape, x4D.shape);
            var tileShape = [];
            if (mean.rank === 1) {
                for (var i = 0; i < x4D.shape.length - 1; ++i) {
                    tileShape.push(x4D.shape[i]);
                }
                tileShape.push(1);
            }
            var xMinusMean = x.sub(mean);
            var dyTimesScaleValue = dy.mul(scaleValue);
            var oneOverSqrtVariance = (0, _ops.rsqrt)(variance.add(_array_ops.ArrayOps.scalar(varianceEpsilon)));
            var minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance).mul(oneOverSqrtVariance).mul(_array_ops.ArrayOps.scalar(-0.5));
            var derX = function () {
                if (mean.rank === 1) {
                    return dy.mul(_array_ops.ArrayOps.tile(oneOverSqrtVariance.as4D(1, 1, 1, mean.shape[0]), tileShape)).mul(scaleValue).reshape(x.shape);
                } else {
                    return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape(x.shape);
                }
            };
            var derMean = function () {
                var meanDer = oneOverSqrtVariance.mul(_array_ops.ArrayOps.scalar(-1)).mul(dyTimesScaleValue);
                if (mean.rank === 1) {
                    meanDer = meanDer.sum(reductionAxes);
                }
                return meanDer.reshape(mean.shape);
            };
            var derVariance = function () {
                var varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);
                if (mean.rank === 1) {
                    varianceDer = varianceDer.sum(reductionAxes);
                }
                return varianceDer.reshape(mean.shape);
            };
            var derScale = function () {
                var xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);
                var scaleDer = dy.mul(xMinusMean2TimesRsqrt);
                if (mean.rank === 1) {
                    scaleDer = scaleDer.sum(reductionAxes);
                }
                return scaleDer.reshape(mean.shape);
            };
            var derOffset = function () {
                var offsetDer = dy;
                if (mean.rank === 1) {
                    offsetDer = offsetDer.sum(reductionAxes);
                }
                return offsetDer.reshape(mean.shape);
            };
            return {
                x: derX,
                mean: derMean,
                variance: derVariance,
                scale: derScale,
                offset: derOffset
            };
        };
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.batchNormalization(x4D, batchnormReshape4D(mean), batchnormReshape4D(variance), varianceEpsilon, batchnormReshape4D(scale), batchnormReshape4D(offset));
        }, { x: x, mean: mean, variance: variance, scale: scale, offset: offset }, der);
        return res.reshape(x.shape);
    };
    __decorate([_operation.operation], BatchNormOps, "batchNormalization2d", null);
    __decorate([_operation.operation], BatchNormOps, "batchNormalization3d", null);
    __decorate([_operation.operation], BatchNormOps, "batchNormalization4d", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Normalization' })], BatchNormOps, "batchNormalization", null);
    return BatchNormOps;
}();
exports.BatchNormOps = BatchNormOps;

function batchnormReshape4D(x) {
    if (x == null) {
        return null;
    }
    if (x.rank === 0) {
        return x.as1D();
    } else if (x.rank === 1) {
        return x;
    } else if (x.rank === 2) {
        return x.as4D(1, 1, x.shape[0], x.shape[1]);
    } else if (x.rank === 3) {
        return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
    }
    return x;
}
//# sourceMappingURL=batchnorm.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./array_ops":"2sZK","./broadcast_util":"lcGM","./operation":"uPhB","./ops":"bzyr"}],"q15R":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.upcastType = upcastType;
exports.sumOutType = sumOutType;
var DType = exports.DType = undefined;
(function (DType) {
    DType["float32"] = "float32";
    DType["int32"] = "int32";
    DType["bool"] = "bool";
})(DType || (exports.DType = DType = {}));
var Rank = exports.Rank = undefined;
(function (Rank) {
    Rank["R0"] = "R0";
    Rank["R1"] = "R1";
    Rank["R2"] = "R2";
    Rank["R3"] = "R3";
    Rank["R4"] = "R4";
})(Rank || (exports.Rank = Rank = {}));
var UpcastInt32AndMap;
(function (UpcastInt32AndMap) {
    UpcastInt32AndMap["float32"] = "float32";
    UpcastInt32AndMap["int32"] = "int32";
    UpcastInt32AndMap["bool"] = "int32";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
var UpcastBoolAndMap;
(function (UpcastBoolAndMap) {
    UpcastBoolAndMap["float32"] = "float32";
    UpcastBoolAndMap["int32"] = "int32";
    UpcastBoolAndMap["bool"] = "bool";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
var UpcastFloat32AndMap;
(function (UpcastFloat32AndMap) {
    UpcastFloat32AndMap["float32"] = "float32";
    UpcastFloat32AndMap["int32"] = "float32";
    UpcastFloat32AndMap["bool"] = "float32";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
var upcastTypeMap = {
    float32: UpcastFloat32AndMap,
    int32: UpcastInt32AndMap,
    bool: UpcastBoolAndMap
};
function upcastType(typeA, typeB) {
    return upcastTypeMap[typeA][typeB];
}
function sumOutType(type) {
    return upcastType(type, 'int32');
}
//# sourceMappingURL=types.js.map
},{}],"fVeS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BinaryOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _types = require("../types");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _broadcast_util = require("./broadcast_util");

var broadcast_util = _interopRequireWildcard(_broadcast_util);

var _operation = require("./operation");

var _ops = require("./ops");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var BinaryOps = function () {
    function BinaryOps() {}
    BinaryOps.add = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'add');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var res = dy;
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(a.shape);
            };
            var derB = function () {
                var res = dy;
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(b.shape);
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.add(a, b);
        }, { a: a, b: b }, der);
    };
    BinaryOps.addStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in addStrict: ');
        return a.add(b);
    };
    BinaryOps.sub = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'sub');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var res = dy;
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(a.shape);
            };
            var derB = function () {
                var res = dy;
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.neg().reshape(b.shape);
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.subtract(a, b);
        }, { a: a, b: b }, der);
    };
    BinaryOps.subStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in subStrict: ');
        return a.sub(b);
    };
    BinaryOps.pow = function (base, exp) {
        util.assertArgumentsAreTensors({ base: base, exp: exp }, 'pow');
        var outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);
        base = base.cast((0, _types.upcastType)(base.dtype, exp.dtype));
        exp = exp.cast((0, _types.upcastType)(base.dtype, exp.dtype));
        var grad = function (dy, saved) {
            var y = saved[0];
            var derBase = function () {
                var res = dy.mul(exp.toFloat().mul(y.div(base)));
                var reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(base.shape);
            };
            var derExp = function () {
                var res = dy.mul(y.mul(base.log()).toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(exp.shape);
            };
            return { base: derBase, exp: derExp };
        };
        return _environment.ENV.engine.runKernel(function (backend, save) {
            return save(backend.pow(base, exp));
        }, { base: base, exp: exp }, grad);
    };
    BinaryOps.powStrict = function (base, exp) {
        util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');
        return base.pow(exp);
    };
    BinaryOps.mul = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'mul');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var res = dy.mul(b.toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    return res.sum(reduceAxes).reshape(a.shape);
                }
                return res;
            };
            var derB = function () {
                var res = dy.mul(a.toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    return res.sum(reduceAxes).reshape(b.shape);
                }
                return res;
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.multiply(a, b);
        }, { a: a, b: b }, der);
    };
    BinaryOps.mulStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in multiplyStrict: ');
        return a.mul(b);
    };
    BinaryOps.div = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'div');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var res = dy.div(b.toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    return res.sum(reduceAxes).reshape(a.shape);
                }
                return res;
            };
            var derB = function () {
                var res = dy.mul(a.toFloat());
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes).reshape(b.shape);
                }
                var tmp = b.square();
                return res.div(tmp.toFloat()).neg();
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.divide(a, b);
        }, { a: a, b: b }, der);
    };
    BinaryOps.divStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in divideStrict: ');
        return a.div(b);
    };
    BinaryOps.mod = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'mod');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    return dy.sum(reduceAxes).reshape(a.shape);
                }
                return dy;
            };
            var derB = function () {
                var res = dy.mul(a.div(b).floor().neg());
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    return res.sum(reduceAxes).reshape(b.shape);
                }
                return res;
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.mod(a, b);
        }, { a: a, b: b }, der);
    };
    BinaryOps.modStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in modStrict: ');
        return a.mod(b);
    };
    BinaryOps.minimum = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'minimum');
        util.assertTypesMatch(a, b);
        if (a.dtype === 'bool') {
            a = a.toInt();
        }
        if (b.dtype === 'bool') {
            b = b.toInt();
        }
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                return dy.mul(a.lessEqual(b).toFloat());
            };
            var derB = function () {
                return dy.mul(a.greater(b).toFloat());
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.minimum(a, b);
        }, { a: a, b: b }, der);
    };
    BinaryOps.minimumStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');
        return a.minimum(b);
    };
    BinaryOps.maximum = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'maximum');
        util.assertTypesMatch(a, b);
        if (a.dtype === 'bool') {
            a = a.toInt();
        }
        if (b.dtype === 'bool') {
            b = b.toInt();
        }
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                return dy.mul(a.greaterEqual(b).toFloat());
            };
            var derB = function () {
                return dy.mul(a.less(b).toFloat());
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.maximum(a, b);
        }, { a: a, b: b }, der);
    };
    BinaryOps.maximumStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');
        return a.maximum(b);
    };
    BinaryOps.squaredDifference = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'squaredDifference');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var two = (0, _ops.scalar)(2);
            var derA = function () {
                return dy.mul(a.sub(b).mul(two));
            };
            var derB = function () {
                return dy.mul(b.sub(a).mul(two));
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.squaredDifference(a, b);
        }, { a: a, b: b }, der);
    };
    BinaryOps.squaredDifferenceStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in squaredDifferenceStrict: ');
        return a.squaredDifference(b);
    };
    BinaryOps.atan2 = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'atan2');
        util.assertTypesMatch(a, b);
        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var der = function (dy) {
            var derA = function () {
                var d = BinaryOps.add((0, _ops.square)(a), (0, _ops.square)(b));
                var res = dy.mul(b.div(d));
                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(a.shape);
            };
            var derB = function () {
                var d = BinaryOps.add((0, _ops.square)(a), (0, _ops.square)(b));
                var res = (0, _ops.neg)(dy.mul(a.div(d)));
                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);
                if (reduceAxes.length > 0) {
                    res = res.sum(reduceAxes);
                }
                return res.reshape(b.shape);
            };
            return { a: derA, b: derB };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.atan2(a, b);
        }, { a: a, b: b }, der);
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "add", null);
    __decorate([_operation.operation], BinaryOps, "addStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "sub", null);
    __decorate([_operation.operation], BinaryOps, "subStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "pow", null);
    __decorate([_operation.operation], BinaryOps, "powStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "mul", null);
    __decorate([_operation.operation], BinaryOps, "mulStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "div", null);
    __decorate([_operation.operation], BinaryOps, "divStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "mod", null);
    __decorate([_operation.operation], BinaryOps, "modStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "minimum", null);
    __decorate([_operation.operation], BinaryOps, "minimumStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "maximum", null);
    __decorate([_operation.operation], BinaryOps, "maximumStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Arithmetic' }), _operation.operation], BinaryOps, "squaredDifference", null);
    __decorate([_operation.operation], BinaryOps, "squaredDifferenceStrict", null);
    __decorate([_operation.operation], BinaryOps, "atan2", null);
    return BinaryOps;
}();
exports.BinaryOps = BinaryOps;
//# sourceMappingURL=binary_ops.js.map
},{"../doc":"VkNo","../environment":"CAkW","../types":"q15R","../util":"lDaM","./broadcast_util":"lcGM","./operation":"uPhB","./ops":"bzyr"}],"Q2lp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CompareOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _broadcast_util = require("./broadcast_util");

var broadcast_util = _interopRequireWildcard(_broadcast_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var CompareOps = function () {
    function CompareOps() {}
    CompareOps.notEqual = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'notEqual');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.notEqual(a, b);
        }, { a: a, b: b });
    };
    CompareOps.notEqualStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in notEqualStrict: ');
        return a.notEqual(b);
    };
    CompareOps.less = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'less');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.less(a, b);
        }, { a: a, b: b });
    };
    CompareOps.lessStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in lessStrict: ');
        return a.less(b);
    };
    CompareOps.equal = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'equal');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.equal(a, b);
        }, { a: a, b: b });
    };
    CompareOps.equalStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in equalStrict: ');
        return a.equal(b);
    };
    CompareOps.lessEqual = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'lessEqual');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.lessEqual(a, b);
        }, { a: a, b: b });
    };
    CompareOps.lessEqualStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in lessEqualStrict: ');
        return a.lessEqual(b);
    };
    CompareOps.greater = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'greater');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.greater(a, b);
        }, { a: a, b: b });
    };
    CompareOps.greaterStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in greaterStrict: ');
        return a.greater(b);
    };
    CompareOps.greaterEqual = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'greaterEqual');
        util.assertTypesMatch(a, b);
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.greaterEqual(a, b);
        }, { a: a, b: b });
    };
    CompareOps.greaterEqualStrict = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in greaterEqualStrict: ');
        return a.greaterEqual(b);
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], CompareOps, "notEqual", null);
    __decorate([_operation.operation], CompareOps, "notEqualStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], CompareOps, "less", null);
    __decorate([_operation.operation], CompareOps, "lessStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], CompareOps, "equal", null);
    __decorate([_operation.operation], CompareOps, "equalStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], CompareOps, "lessEqual", null);
    __decorate([_operation.operation], CompareOps, "lessEqualStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], CompareOps, "greater", null);
    __decorate([_operation.operation], CompareOps, "greaterStrict", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], CompareOps, "greaterEqual", null);
    __decorate([_operation.operation], CompareOps, "greaterEqualStrict", null);
    return CompareOps;
}();
exports.CompareOps = CompareOps;
//# sourceMappingURL=compare.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./broadcast_util":"lcGM","./operation":"uPhB"}],"4XDJ":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.computePool2DInfo = computePool2DInfo;
exports.computeConv2DInfo = computeConv2DInfo;
exports.computeDefaultPad = computeDefaultPad;

var _util = require('../util');

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function computePool2DInfo(inShape, filterSize, strides, pad, roundingMode, dataFormat) {
    if (dataFormat === void 0) {
        dataFormat = 'channelsLast';
    }
    var _a = parseTupleParam(filterSize),
        filterHeight = _a[0],
        filterWidth = _a[1];
    var filterShape;
    if (dataFormat === 'channelsLast') {
        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];
    } else if (dataFormat === 'channelsFirst') {
        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];
    } else {
        throw new Error("Unknown dataFormat " + dataFormat);
    }
    var dilations = 1;
    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
}
function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise, dataFormat) {
    if (depthwise === void 0) {
        depthwise = false;
    }
    if (dataFormat === void 0) {
        dataFormat = 'channelsLast';
    }
    var _a = [-1, -1, -1, -1],
        batchSize = _a[0],
        inHeight = _a[1],
        inWidth = _a[2],
        inChannels = _a[3];
    if (dataFormat === 'channelsLast') {
        batchSize = inShape[0], inHeight = inShape[1], inWidth = inShape[2], inChannels = inShape[3];
    } else if (dataFormat === 'channelsFirst') {
        batchSize = inShape[0], inChannels = inShape[1], inHeight = inShape[2], inWidth = inShape[3];
    } else {
        throw new Error("Unknown dataFormat " + dataFormat);
    }
    var filterHeight = filterShape[0],
        filterWidth = filterShape[1],
        filterChannels = filterShape[3];
    var _b = parseTupleParam(strides),
        strideHeight = _b[0],
        strideWidth = _b[1];
    var _c = parseTupleParam(dilations),
        dilationHeight = _c[0],
        dilationWidth = _c[1];
    var effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    var effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    var _d = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode),
        padInfo = _d.padInfo,
        outHeight = _d.outHeight,
        outWidth = _d.outWidth;
    var outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    var outShape;
    if (dataFormat === 'channelsFirst') {
        outShape = [batchSize, outChannels, outHeight, outWidth];
    } else if (dataFormat === 'channelsLast') {
        outShape = [batchSize, outHeight, outWidth, outChannels];
    }
    return {
        batchSize: batchSize,
        dataFormat: dataFormat,
        inHeight: inHeight,
        inWidth: inWidth,
        inChannels: inChannels,
        outHeight: outHeight,
        outWidth: outWidth,
        outChannels: outChannels,
        padInfo: padInfo,
        strideHeight: strideHeight,
        strideWidth: strideWidth,
        filterHeight: filterHeight,
        filterWidth: filterWidth,
        dilationHeight: dilationHeight,
        dilationWidth: dilationWidth,
        inShape: inShape,
        outShape: outShape,
        filterShape: filterShape
    };
}
function computeOutputShape3D(inShape, fieldSize, outDepth, stride, zeroPad, roundingMode) {
    if (zeroPad == null) {
        zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    }
    var inputRows = inShape[0];
    var inputCols = inShape[1];
    var outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    util.assert(util.isInt(outputRows), "The output # of rows (" + outputRows + ") must be an integer. Change the " + "stride and/or zero pad parameters");
    var outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    util.assert(util.isInt(outputCols), "The output # of columns (" + outputCols + ") must be an integer. Change " + "the stride and/or zero pad parameters");
    return [outputRows, outputCols, outDepth];
}
function computeDefaultPad(inputShape, fieldSize, stride, dilation) {
    if (dilation === void 0) {
        dilation = 1;
    }
    var effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
}
function parseTupleParam(param) {
    return typeof param === 'number' ? [param, param] : param;
}
function getEffectiveFilterSize(filterSize, dilation) {
    if (dilation <= 1) {
        return filterSize;
    }
    return filterSize + (filterSize - 1) * (dilation - 1);
}
function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode) {
    var padInfo;
    var outHeight;
    var outWidth;
    if (typeof pad === 'number') {
        var padType = pad === 0 ? 'VALID' : 'NUMBER';
        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };
        var outShape = computeOutputShape3D([inHeight, inWidth, 1], filterHeight, 1, strideHeight, pad, roundingMode);
        outHeight = outShape[0];
        outWidth = outShape[1];
    } else if (pad === 'same') {
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        var padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
        var padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
        var top_1 = Math.floor(padAlongHeight / 2);
        var bottom = padAlongHeight - top_1;
        var left = Math.floor(padAlongWidth / 2);
        var right = padAlongWidth - left;
        padInfo = { top: top_1, bottom: bottom, left: left, right: right, type: 'SAME' };
    } else if (pad === 'valid') {
        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    } else {
        throw Error("Unknown padding parameter: " + pad);
    }
    return { padInfo: padInfo, outHeight: outHeight, outWidth: outWidth };
}
function conditionalRound(value, roundingMode) {
    if (!roundingMode) {
        return value;
    }
    switch (roundingMode) {
        case 'round':
            return Math.round(value);
        case 'ceil':
            return Math.ceil(value);
        case 'floor':
            return Math.floor(value);
        default:
            throw new Error("Unknown roundingMode " + roundingMode);
    }
}
//# sourceMappingURL=conv_util.js.map
},{"../util":"lDaM"}],"3UGL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConvOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _conv_util = require("./conv_util");

var conv_util = _interopRequireWildcard(_conv_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ConvOps = function () {
    function ConvOps() {}
    ConvOps.conv1d = function (x, filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
        if (dataFormat === void 0) {
            dataFormat = 'NWC';
        }
        if (dilation === void 0) {
            dilation = 1;
        }
        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv1d');
        var x3D = x;
        var reshapedTo3D = false;
        if (x.rank === 2) {
            reshapedTo3D = true;
            x3D = x.as3D(1, x.shape[0], x.shape[1]);
        }
        util.assert(x3D.rank === 3, "Error in conv1d: input must be rank 3, but got rank " + x3D.rank + ".");
        util.assert(filter.rank === 3, "Error in conv1d: filter must be rank 3, but got rank " + (filter.rank + "."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in conv1d: pad must be an integer when using, " + ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        util.assert(x3D.shape[2] === filter.shape[1], "Error in conv1d: depth of input (" + x3D.shape[2] + ") must match " + ("input depth for filter " + filter.shape[1] + "."));
        util.assert(eitherStridesOrDilationsAreOne(stride, dilation), 'Error in conv1D: Either stride or dilation must be 1. ' + ("Got stride " + stride + " and dilation '" + dilation + "'"));
        util.assert(dataFormat === 'NWC', "Error in conv1d: got dataFormat of " + dataFormat + " but only NWC is currently supported.");
        var filter4D = filter.as4D(1, filter.shape[0], filter.shape[1], filter.shape[2]);
        var input4D = x3D.as4D(x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]);
        var strides = [1, stride];
        var dilations = [1, dilation];
        var conv2dDataFormat = 'NHWC';
        var res = ConvOps.conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);
        if (reshapedTo3D) {
            return res.as2D(res.shape[2], res.shape[3]);
        }
        return res.as3D(res.shape[0], res.shape[2], res.shape[3]);
    };
    ConvOps.conv2d = function (x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
        if (dataFormat === void 0) {
            dataFormat = 'NHWC';
        }
        if (dilations === void 0) {
            dilations = [1, 1];
        }
        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv2d');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in conv2d: input must be rank 4, but got rank " + x4D.rank + ".");
        util.assert(filter.rank === 4, "Error in conv2d: filter must be rank 4, but got rank " + (filter.rank + "."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in conv2d: pad must be an integer when using, " + ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        util.assert(x4D.shape[3] === filter.shape[2], "Error in conv2d: depth of input (" + x4D.shape[3] + ") must match " + ("input depth for filter " + filter.shape[2] + "."));
        util.assert(eitherStridesOrDilationsAreOne(strides, dilations), 'Error in conv2D: Either strides or dilations must be 1. ' + ("Got strides " + strides + " and dilations '" + dilations + "'"));
        util.assert(dataFormat === 'NHWC', "Error in conv2d: got dataFormat of " + dataFormat + " but only NHWC is currently supported.");
        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filter.shape, strides, dilations, pad, dimRoundingMode);
        var grad = function (dy) {
            util.assert(tupleValuesAreOne(dilations), 'Error in gradient of conv2D: dilation rates greater than 1 are not' + ("yet supported in gradients. Got dilations '" + dilations + "'"));
            return {
                x: function () {
                    return ConvOps.conv2dDerInput(x4D.shape, dy, filter, strides, pad);
                },
                filter: function () {
                    return ConvOps.conv2dDerFilter(x4D, dy, filter.shape, strides, pad);
                }
            };
        };
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.conv2d(x4D, filter, convInfo);
        }, { x: x4D, filter: filter }, grad);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    ConvOps.conv2dDerInput = function (xShape, dy, filter, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ dy: dy, filter: filter }, 'conv2dDerInput');
        util.assert(xShape.length === dy.rank, "Length of inShape " + ("(" + xShape.length + ") and rank of dy (" + dy.rank + ") must match"));
        var xShape4D = xShape;
        var dy4D = dy;
        var reshapedTo4D = false;
        if (dy.rank === 3) {
            reshapedTo4D = true;
            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);
            xShape4D = [1, xShape[0], xShape[1], xShape[2]];
        }
        var inDepth = xShape4D[3];
        var outDepth = dy4D.shape[3];
        util.assert(xShape4D.length === 4, "Error in conv2dDerInput: inShape must be length 4, but got length " + (xShape4D.length + "."));
        util.assert(dy4D.rank === 4, "Error in conv2dDerInput: dy must be rank 4, but got " + ("rank " + dy4D.rank));
        util.assert(filter.rank === 4, "Error in conv2dDerInput: filter must be rank 4, but got " + ("rank " + filter.rank));
        util.assert(inDepth === filter.shape[2], "Error in conv2dDerInput: depth of input (" + inDepth + ") must " + ("match input depth for filter " + filter.shape[2] + "."));
        util.assert(outDepth === filter.shape[3], "Error in conv2dDerInput: depth of output (" + outDepth + ") must " + ("match output depth for filter " + filter.shape[3] + "."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in conv2dDerInput: pad must be an integer when using, " + ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var dilations = 1;
        var convInfo = conv_util.computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode);
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.conv2dDerInput(dy4D, filter, convInfo);
        }, { dy4D: dy4D });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    ConvOps.conv2dDerFilter = function (x, dy, filterShape, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ x: x, dy: dy }, 'conv2dDerFilter');
        var x4D = x;
        if (x.rank === 3) {
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        var dy4D = dy;
        if (dy4D.rank === 3) {
            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in conv2dDerFilter: input must be rank 4, but got shape " + (x4D.shape + "."));
        util.assert(dy4D.rank === 4, "Error in conv2dDerFilter: dy must be rank 4, but got shape " + (dy4D.shape + "."));
        util.assert(filterShape.length === 4, "Error in conv2dDerFilter: filterShape must be length 4, but got " + (filterShape + "."));
        util.assert(x4D.shape[3] === filterShape[2], "Error in conv2dDerFilter: depth of input " + x4D.shape[3] + ") must " + ("match input depth in filter (" + filterShape[2] + "."));
        util.assert(dy4D.shape[3] === filterShape[3], "Error in conv2dDerFilter: depth of dy (" + dy4D.shape[3] + ") must " + ("match output depth for filter (" + filterShape[3] + ")."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in conv2dDerFilter: pad must be an integer when using, " + ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var dilations = 1;
        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.conv2dDerFilter(x4D, dy4D, convInfo);
        }, { x4D: x4D, dy4D: dy4D });
    };
    ConvOps.conv2dTranspose = function (x, filter, outputShape, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'conv2dTranspose');
        return ConvOps.conv2dDerInput(outputShape, x, filter, strides, pad, dimRoundingMode);
    };
    ConvOps.depthwiseConv2d = function (x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
        if (dataFormat === void 0) {
            dataFormat = 'NHWC';
        }
        if (dilations === void 0) {
            dilations = [1, 1];
        }
        util.assertArgumentsAreTensors({ x: x, filter: filter }, 'depthwiseConv2d');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in depthwiseConv2d: input must be rank 4, but got " + ("rank " + x4D.rank + "."));
        util.assert(filter.rank === 4, "Error in depthwiseConv2d: filter must be rank 4, but got rank " + (filter.rank + "."));
        util.assert(x4D.shape[3] === filter.shape[2], "Error in depthwiseConv2d: number of input channels " + ("(" + x4D.shape[3] + ") must match the inChannels dimension in ") + ("filter " + filter.shape[2] + "."));
        if (dilations == null) {
            dilations = [1, 1];
        }
        util.assert(eitherStridesOrDilationsAreOne(strides, dilations), 'Error in depthwiseConv2d: Either strides or dilations must be 1. ' + ("Got strides " + strides + " and dilations '" + dilations + "'"));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in depthwiseConv2d: pad must be an integer when using, " + ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filter.shape, strides, dilations, pad, dimRoundingMode, true);
        var grad = function (dy) {
            util.assert(tupleValuesAreOne(dilations), 'Error in gradient of depthwiseConv2d: dilation rates greater than ' + ("1 are not yet supported. Got dilations '" + dilations + "'"));
            return {
                x: function () {
                    return depthwiseConv2dDerInput(x4D.shape, dy, filter, convInfo);
                },
                filter: function () {
                    return depthwiseConv2dDerFilter(x4D, dy, filter.shape, convInfo);
                }
            };
        };
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.depthwiseConv2D(x4D, filter, convInfo);
        }, { x: x4D, filter: filter }, grad);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    ConvOps.separableConv2d = function (x, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
        if (dilation === void 0) {
            dilation = [1, 1];
        }
        if (dataFormat === void 0) {
            dataFormat = 'NHWC';
        }
        util.assertArgumentsAreTensors({ x: x, depthwiseFilter: depthwiseFilter, pointwiseFilter: pointwiseFilter }, 'separableConv2d');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        if (dataFormat === 'NCHW') {
            throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' + 'NHWC is supported');
        }
        util.assert(x4D.rank === 4, "Error in separableConv2d: input must be rank 4, but got " + ("rank " + x4D.rank + "."));
        util.assert(depthwiseFilter.rank === 4, "Error in separableConv2d: depthwise filter must be rank 4, but got " + ("rank " + depthwiseFilter.rank + "."));
        util.assert(pointwiseFilter.rank === 4, "Error in separableConv2d: pointwise filter must be rank 4, but got " + ("rank " + depthwiseFilter.rank + "."));
        util.assert(pointwiseFilter.shape[0] === 1, "Error in separableConv2d: the first dimension of pointwise filter " + (" must be 1, but got " + pointwiseFilter.shape[0] + "."));
        util.assert(pointwiseFilter.shape[1] === 1, "Error in separableConv2d: the second dimension of pointwise filter " + (" must be 1, but got " + pointwiseFilter.shape[1] + "."));
        var inChannels = depthwiseFilter.shape[2];
        var channelMultiplier = depthwiseFilter.shape[3];
        util.assert(pointwiseFilter.shape[2] === inChannels * channelMultiplier, "Error in separableConv2d: the third dimension of pointwise filter " + ("must be " + inChannels * channelMultiplier + ", ") + ("but got " + pointwiseFilter.shape[2] + "."));
        var depthwise = ConvOps.depthwiseConv2d(x4D, depthwiseFilter, strides, pad, dataFormat, dilation);
        var pointwiseStride = 1;
        var res = ConvOps.conv2d(depthwise, pointwiseFilter, pointwiseStride, 'valid', dataFormat);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, "conv1d", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, "conv2d", null);
    __decorate([_operation.operation], ConvOps, "conv2dDerInput", null);
    __decorate([_operation.operation], ConvOps, "conv2dDerFilter", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, "conv2dTranspose", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, "depthwiseConv2d", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], ConvOps, "separableConv2d", null);
    return ConvOps;
}();
exports.ConvOps = ConvOps;

function parseTupleParam(param) {
    return typeof param === 'number' ? [param, param] : param;
}
function tupleValuesAreOne(param) {
    var _a = parseTupleParam(param),
        dimA = _a[0],
        dimB = _a[1];
    return dimA === 1 && dimB === 1;
}
function eitherStridesOrDilationsAreOne(strides, dilations) {
    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
}
function depthwiseConv2dDerInput(xShape, dy, filter, convInfo) {
    var dy4D = dy;
    var reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);
    }
    var res = _environment.ENV.engine.runKernel(function (backend) {
        return backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);
    }, { dy4D: dy4D });
    if (reshapedTo4D) {
        return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
    }
    return res;
}
function depthwiseConv2dDerFilter(x, dy, filterShape, convInfo) {
    var x4D = x;
    if (x.rank === 3) {
        x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
    }
    var dy4D = dy;
    if (dy4D.rank === 3) {
        dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);
    }
    return _environment.ENV.engine.runKernel(function (backend) {
        return backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo);
    }, { x4D: x4D, dy4D: dy4D });
}
//# sourceMappingURL=conv.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./conv_util":"4XDJ","./operation":"uPhB"}],"Y0cx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ImageOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ImageOps = function () {
    function ImageOps() {}
    ImageOps.resizeBilinear = function (images, size, alignCorners) {
        if (alignCorners === void 0) {
            alignCorners = false;
        }
        util.assertArgumentsAreTensors({ images: images }, 'resizeBilinear');
        util.assert(images.rank === 3 || images.rank === 4, "Error in resizeBilinear: x must be rank 3 or 4, but got " + ("rank " + images.rank + "."));
        util.assert(size.length === 2, "Error in resizeBilinear: new shape must 2D, but got shape " + (size + "."));
        var batchImages = images;
        var reshapedTo4D = false;
        if (images.rank === 3) {
            reshapedTo4D = true;
            batchImages = images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);
        }
        var newHeight = size[0],
            newWidth = size[1];
        var forward = function (backend, save) {
            return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);
        };
        var backward = function (dy, saved) {
            return {
                batchImages: function () {
                    return _environment.ENV.engine.runKernel(function (backend) {
                        return backend.resizeBilinearBackprop(dy, batchImages, alignCorners);
                    }, {});
                }
            };
        };
        var res = _environment.ENV.engine.runKernel(forward, { batchImages: batchImages }, backward);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    ImageOps.resizeNearestNeighbor = function (images, size, alignCorners) {
        if (alignCorners === void 0) {
            alignCorners = false;
        }
        util.assertArgumentsAreTensors({ images: images }, 'resizeNearestNeighbor');
        util.assert(images.rank === 3 || images.rank === 4, "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got " + ("rank " + images.rank + "."));
        util.assert(size.length === 2, "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + (size + "."));
        util.assert(images.dtype === 'float32' || images.dtype === 'int32', '`images` must have `int32` or `float32` as dtype');
        var batchImages = images;
        var reshapedTo4D = false;
        if (images.rank === 3) {
            reshapedTo4D = true;
            batchImages = images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);
        }
        var newHeight = size[0],
            newWidth = size[1];
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);
        }, { batchImages: batchImages });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Images', namespace: 'image' }), _operation.operation], ImageOps, "resizeBilinear", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Images', namespace: 'image' }), _operation.operation], ImageOps, "resizeNearestNeighbor", null);
    return ImageOps;
}();
exports.ImageOps = ImageOps;
//# sourceMappingURL=image_ops.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./operation":"uPhB"}],"jCrq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Tracking = undefined;

var _doc = require("./doc");

var _environment = require("./environment");

var _util = require("./util");

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var Tracking = function () {
    function Tracking() {}
    Tracking.tidy = function (nameOrFn, fn, gradMode) {
        if (gradMode === void 0) {
            gradMode = false;
        }
        var name = null;
        if (fn == null) {
            if (typeof nameOrFn !== 'function') {
                throw new Error('Please provide a function to tidy()');
            }
            fn = nameOrFn;
        } else {
            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
                throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');
            }
            if (typeof fn !== 'function') {
                throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');
            }
            name = nameOrFn;
        }
        _environment.ENV.engine.startScope(name, gradMode);
        var result = fn();
        if (result instanceof Promise) {
            console.error('Cannot return a Promise inside of tidy.');
        }
        _environment.ENV.engine.endScope(result, gradMode);
        return result;
    };
    Tracking.dispose = function (container) {
        var tensors = (0, _util.extractTensorsFromAny)(container);
        tensors.forEach(function (tensor) {
            return tensor.dispose();
        });
    };
    Tracking.keep = function (result) {
        return _environment.ENV.engine.keep(result);
    };
    Tracking.time = function (f) {
        return _environment.ENV.engine.time(f);
    };
    __decorate([(0, _doc.doc)({ heading: 'Performance', subheading: 'Memory' })], Tracking, "tidy", null);
    __decorate([(0, _doc.doc)({ heading: 'Performance', subheading: 'Memory' })], Tracking, "keep", null);
    __decorate([(0, _doc.doc)({ heading: 'Performance', subheading: 'Timing' })], Tracking, "time", null);
    return Tracking;
}();
exports.Tracking = Tracking;
//# sourceMappingURL=tracking.js.map
},{"./doc":"VkNo","./environment":"CAkW","./util":"lDaM"}],"NdFy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LinalgOps = undefined;

var _doc = require("../doc");

var _tracking = require("../tracking");

var _util = require("../util");

var _operation = require("./operation");

var _ops = require("./ops");

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var LinalgOps = function () {
    function LinalgOps() {}
    LinalgOps.gramSchmidt = function (xs) {
        var inputIsTensor2D;
        if (Array.isArray(xs)) {
            inputIsTensor2D = false;
            (0, _util.assert)(xs != null && xs.length > 0, 'Gram-Schmidt process: input must not be null, undefined, or empty');
            var dim = xs[0].shape[0];
            for (var i = 1; i < xs.length; ++i) {
                (0, _util.assert)(xs[i].shape[0] === dim, 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' + ("(" + xs[i].shape[0] + " vs. " + dim + ")"));
            }
        } else {
            inputIsTensor2D = true;
            xs = (0, _ops.split)(xs, xs.shape[0], 0).map(function (x) {
                return (0, _ops.squeeze)(x, [0]);
            });
        }
        (0, _util.assert)(xs.length <= xs[0].shape[0], "Gram-Schmidt: Number of vectors (" + xs.length + ") exceeds " + ("number of dimensions (" + xs[0].shape[0] + ")."));
        var ys = [];
        var xs1d = xs;
        var _loop_1 = function (i) {
            ys.push(_tracking.Tracking.tidy(function () {
                var x = xs1d[i];
                if (i > 0) {
                    for (var j = 0; j < i; ++j) {
                        var proj = (0, _ops.sum)(ys[j].mulStrict(x)).mul(ys[j]);
                        x = x.sub(proj);
                    }
                }
                return x.div((0, _ops.norm)(x, 'euclidean'));
            }));
        };
        for (var i = 0; i < xs.length; ++i) {
            _loop_1(i);
        }
        if (inputIsTensor2D) {
            return (0, _ops.stack)(ys, 0);
        } else {
            return ys;
        }
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Linear Algebra' }), _operation.operation], LinalgOps, "gramSchmidt", null);
    return LinalgOps;
}();
exports.LinalgOps = LinalgOps;
//# sourceMappingURL=linalg_ops.js.map
},{"../doc":"VkNo","../tracking":"jCrq","../util":"lDaM","./operation":"uPhB","./ops":"bzyr"}],"2dtG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LogicalOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _types = require("../types");

var types = _interopRequireWildcard(_types);

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _broadcast_util = require("./broadcast_util");

var broadcast_util = _interopRequireWildcard(_broadcast_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var LogicalOps = function () {
    function LogicalOps() {}
    LogicalOps.logicalNot = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'logicalNot');
        util.assert(x.dtype === 'bool', 'Error Array must be of type bool.');
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.logicalNot(x);
        }, { x: x });
    };
    LogicalOps.logicalAnd = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'logicalAnd');
        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.logicalAnd(a, b);
        }, { a: a, b: b });
    };
    LogicalOps.logicalOr = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'logicalOr');
        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.logicalOr(a, b);
        }, { a: a, b: b });
    };
    LogicalOps.logicalXor = function (a, b) {
        util.assertArgumentsAreTensors({ a: a, b: b }, 'logicalXor');
        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');
        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        return LogicalOps.logicalOr(a, b).logicalAnd(LogicalOps.logicalAnd(a, b).logicalNot());
    };
    LogicalOps.where = function (condition, a, b) {
        util.assertArgumentsAreTensors({ condition: condition, a: a, b: b }, 'where');
        util.assert(condition.dtype === 'bool', 'Error Condition must be of type bool.');
        util.assertShapesMatch(a.shape, b.shape, 'Error in where: ');
        if (condition.rank === 1) {
            util.assert(condition.shape[0] === a.shape[0], 'The first dimension of `a` must match the size of `condition`.');
        } else {
            util.assertShapesMatch(condition.shape, b.shape, 'Error in where: ');
        }
        var dtype = types.upcastType(a.dtype, b.dtype);
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.where(condition, a, b, dtype);
        }, { condition: condition, a: a, b: b });
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], LogicalOps, "logicalNot", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], LogicalOps, "logicalAnd", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], LogicalOps, "logicalOr", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], LogicalOps, "logicalXor", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Logical' }), _operation.operation], LogicalOps, "where", null);
    return LogicalOps;
}();
exports.LogicalOps = LogicalOps;
//# sourceMappingURL=logical_ops.js.map
},{"../doc":"VkNo","../environment":"CAkW","../types":"q15R","../util":"lDaM","./broadcast_util":"lcGM","./operation":"uPhB"}],"gHYy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LossOps = exports.Reduction = undefined;

var _doc = require("../doc");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _operation = require("./operation");

var _ops = require("./ops");

var ops = _interopRequireWildcard(_ops);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Reduction = exports.Reduction = undefined;
(function (Reduction) {
    Reduction[Reduction["NONE"] = 0] = "NONE";
    Reduction[Reduction["MEAN"] = 1] = "MEAN";
    Reduction[Reduction["SUM"] = 2] = "SUM";
    Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction || (exports.Reduction = Reduction = {}));
var LossOps = function () {
    function LossOps() {}
    LossOps.computeWeightedLoss = function (losses, weights, reduction) {
        if (reduction === void 0) {
            reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;
        }
        util.assertArgumentsAreTensors({ losses: losses }, 'computeWeightedLoss');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'computeWeightedLoss');
        }
        var weightedLoss = weights == null ? losses : losses.mul(weights);
        if (reduction === Reduction.NONE) {
            return weightedLoss;
        }
        if (reduction === Reduction.SUM) {
            return weightedLoss.sum();
        }
        if (reduction === Reduction.MEAN) {
            return weights == null ? weightedLoss.mean() : weightedLoss.sum().div(weights.sum());
        }
        if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {
            if (weights == null) {
                return weightedLoss.sum().div(ops.scalar(losses.size));
            } else {
                var numNonZeros = weights.notEqual(ops.scalar(0)).sum().toFloat();
                return weightedLoss.sum().div(numNonZeros);
            }
        }
        throw Error("Unknown reduction: " + reduction);
    };
    LossOps.absoluteDifference = function (labels, predictions, weights, reduction) {
        if (reduction === void 0) {
            reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;
        }
        util.assertArgumentsAreTensors({ labels: labels, predictions: predictions }, 'absoluteDifference');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'absoluteDifference');
        }
        util.assertShapesMatch(labels.shape, predictions.shape, 'Error in absoluteDifference: ');
        var losses = labels.sub(predictions).abs();
        return LossOps.computeWeightedLoss(losses, weights, reduction);
    };
    LossOps.meanSquaredError = function (labels, predictions, weights, reduction) {
        if (reduction === void 0) {
            reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;
        }
        util.assertArgumentsAreTensors({ labels: labels, predictions: predictions }, 'meanSquaredError');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'meanSquaredError');
        }
        util.assertShapesMatch(labels.shape, predictions.shape, 'Error in meanSquaredError: ');
        var losses = labels.squaredDifference(predictions);
        return LossOps.computeWeightedLoss(losses, weights, reduction);
    };
    LossOps.cosineDistance = function (labels, predictions, axis, weights, reduction) {
        if (reduction === void 0) {
            reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;
        }
        util.assertArgumentsAreTensors({ labels: labels, predictions: predictions }, 'cosineDistance');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'cosineDistance');
        }
        util.assertShapesMatch(labels.shape, predictions.shape, 'Error in cosineDistance: ');
        var one = ops.scalar(1);
        var losses = one.sub(labels.mul(predictions).sum(axis, true));
        return LossOps.computeWeightedLoss(losses, weights, reduction);
    };
    LossOps.hingeLoss = function (labels, predictions, weights, reduction) {
        if (reduction === void 0) {
            reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;
        }
        util.assertArgumentsAreTensors({ labels: labels, predictions: predictions }, 'hingeLoss');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'hingeLoss');
        }
        util.assertShapesMatch(labels.shape, predictions.shape, 'Error in hingeLoss: ');
        var one = ops.scalar(1);
        labels = ops.scalar(2).mul(labels).sub(one);
        var losses = one.sub(labels.mul(predictions)).relu();
        return LossOps.computeWeightedLoss(losses, weights, reduction);
    };
    LossOps.logLoss = function (labels, predictions, weights, epsilon, reduction) {
        if (epsilon === void 0) {
            epsilon = 1e-7;
        }
        if (reduction === void 0) {
            reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;
        }
        util.assertArgumentsAreTensors({ labels: labels, predictions: predictions }, 'logLoss');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'logLoss');
        }
        util.assertShapesMatch(labels.shape, predictions.shape, 'Error in logLoss: ');
        var one = ops.scalar(1);
        var epsilonScalar = ops.scalar(epsilon);
        var losses = labels.mul(predictions.add(epsilonScalar).log()).neg().sub(one.sub(labels).mul(one.sub(predictions).add(epsilonScalar).log()));
        return LossOps.computeWeightedLoss(losses, weights, reduction);
    };
    LossOps.huberLoss = function (labels, predictions, weights, delta, reduction) {
        if (delta === void 0) {
            delta = 1.0;
        }
        if (reduction === void 0) {
            reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;
        }
        util.assertArgumentsAreTensors({ labels: labels, predictions: predictions }, 'huberLoss');
        if (weights != null) {
            util.assertArgumentsAreTensors({ weights: weights }, 'huberLoss');
        }
        util.assertShapesMatch(labels.shape, predictions.shape, 'Error in huberLoss: ');
        var deltaScalar = ops.scalar(delta);
        var error = predictions.sub(labels).abs();
        var quadratic = ops.minimum(error, deltaScalar);
        var linear = error.sub(quadratic);
        var losses = ops.scalar(0.5).mul(quadratic.square()).add(deltaScalar.mul(linear));
        return LossOps.computeWeightedLoss(losses, weights, reduction);
    };
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), _operation.operation], LossOps, "computeWeightedLoss", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), _operation.operation], LossOps, "absoluteDifference", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), _operation.operation], LossOps, "meanSquaredError", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), _operation.operation], LossOps, "cosineDistance", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), _operation.operation], LossOps, "hingeLoss", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), _operation.operation], LossOps, "logLoss", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), _operation.operation], LossOps, "huberLoss", null);
    return LossOps;
}();
exports.LossOps = LossOps;
//# sourceMappingURL=loss_ops.js.map
},{"../doc":"VkNo","../util":"lDaM","./operation":"uPhB","./ops":"bzyr"}],"Zv/r":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LRNOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var LRNOps = function () {
    function LRNOps() {}
    LRNOps.localResponseNormalization = function (x, radius, bias, alpha, beta) {
        if (radius === void 0) {
            radius = 5;
        }
        if (bias === void 0) {
            bias = 1;
        }
        if (alpha === void 0) {
            alpha = 1;
        }
        if (beta === void 0) {
            beta = 0.5;
        }
        util.assertArgumentsAreTensors({ x: x }, 'localResponseNormalization');
        util.assert(x.rank === 4 || x.rank === 3, "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + x.rank + ".");
        util.assert(util.isInt(radius), "Error in localResponseNormalization3D: radius must be an integer\n                     but got radius " + radius + ".");
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.localResponseNormalization4D(x4D, radius, bias, alpha, beta);
        }, { x4D: x4D });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        } else {
            return res;
        }
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Normalization' }), _operation.operation], LRNOps, "localResponseNormalization", null);
    return LRNOps;
}();
exports.LRNOps = LRNOps;
//# sourceMappingURL=lrn.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./operation":"uPhB"}],"PJ3g":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LSTMOps = undefined;

var _doc = require("../doc");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var LSTMOps = function () {
    function LSTMOps() {}
    LSTMOps.multiRNNCell = function (lstmCells, data, c, h) {
        util.assertArgumentsAreTensors({ data: data, c: c, h: h }, 'multiRNNCell');
        var input = data;
        var newStates = [];
        for (var i = 0; i < lstmCells.length; i++) {
            var output = lstmCells[i](input, c[i], h[i]);
            newStates.push(output[0]);
            newStates.push(output[1]);
            input = output[1];
        }
        var newC = [];
        var newH = [];
        for (var i = 0; i < newStates.length; i += 2) {
            newC.push(newStates[i]);
            newH.push(newStates[i + 1]);
        }
        return [newC, newH];
    };
    LSTMOps.basicLSTMCell = function (forgetBias, lstmKernel, lstmBias, data, c, h) {
        util.assertArgumentsAreTensors({ forgetBias: forgetBias, lstmKernel: lstmKernel, lstmBias: lstmBias, data: data, c: c, h: h }, 'basicLSTMCell');
        var combined = data.concat(h, 1);
        var weighted = combined.matMul(lstmKernel);
        var res = weighted.add(lstmBias);
        var batchSize = res.shape[0];
        var sliceCols = res.shape[1] / 4;
        var sliceSize = [batchSize, sliceCols];
        var i = res.slice([0, 0], sliceSize);
        var j = res.slice([0, sliceCols], sliceSize);
        var f = res.slice([0, sliceCols * 2], sliceSize);
        var o = res.slice([0, sliceCols * 3], sliceSize);
        var newC = i.sigmoid().mulStrict(j.tanh()).addStrict(c.mulStrict(forgetBias.add(f).sigmoid()));
        var newH = newC.tanh().mulStrict(o.sigmoid());
        return [newC, newH];
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'RNN' }), _operation.operation], LSTMOps, "multiRNNCell", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'RNN' }), _operation.operation], LSTMOps, "basicLSTMCell", null);
    return LSTMOps;
}();
exports.LSTMOps = LSTMOps;
//# sourceMappingURL=lstm.js.map
},{"../doc":"VkNo","../util":"lDaM","./operation":"uPhB"}],"uFBe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MatmulOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var MatmulOps = function () {
    function MatmulOps() {}
    MatmulOps.matMul = function (a, b, transposeA, transposeB) {
        if (transposeA === void 0) {
            transposeA = false;
        }
        if (transposeB === void 0) {
            transposeB = false;
        }
        util.assertArgumentsAreTensors({ a: a, b: b }, 'matMul');
        var innerShapeA = transposeA ? a.shape[0] : a.shape[1];
        var innerShapeB = transposeB ? b.shape[1] : b.shape[0];
        util.assert(a.rank === 2 && b.rank === 2, "Error in matMul: inputs must be rank 2, got ranks " + a.rank + (" and " + b.rank + "."));
        util.assert(innerShapeA === innerShapeB, "Error in matMul: inner shapes (" + innerShapeA + ") and (" + (innerShapeB + ") of Tensors with shapes " + a.shape + " and ") + (b.shape + " and transposeA=" + transposeA) + (" and transposeB=" + transposeB + " must match."));
        var grad = function (dy) {
            if (!transposeA && !transposeB) {
                return {
                    a: function () {
                        return dy.matMul(b.toFloat(), false, true);
                    },
                    b: function () {
                        return a.toFloat().matMul(dy, true, false);
                    }
                };
            } else if (!transposeA && transposeB) {
                return {
                    a: function () {
                        return dy.matMul(b.toFloat(), false, false);
                    },
                    b: function () {
                        return dy.matMul(a.toFloat(), true, false);
                    }
                };
            } else if (transposeA && !transposeB) {
                return {
                    a: function () {
                        return b.toFloat().matMul(dy, false, true);
                    },
                    b: function () {
                        return a.toFloat().matMul(dy, false, false);
                    }
                };
            } else {
                return {
                    a: function () {
                        return b.toFloat().matMul(dy, true, true);
                    },
                    b: function () {
                        return dy.matMul(a.toFloat(), true, true);
                    }
                };
            }
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.matMul(a, b, transposeA, transposeB);
        }, { a: a, b: b }, grad);
    };
    MatmulOps.vectorTimesMatrix = function (v, matrix) {
        util.assert(v.rank === 1, "Error in vectorTimesMatrix: first input must be rank 1, but got " + ("rank " + v.rank + "."));
        util.assert(matrix.rank === 2, "Error in vectorTimesMatrix: second input must be rank 2, but got " + ("rank " + matrix.rank + "."));
        util.assert(v.size === matrix.shape[0], "Error in vectorTimesMatrix: size of vector (" + v.size + ") " + ("must match first dimension of matrix (" + matrix.shape[0] + ")"));
        return v.as2D(1, -1).matMul(matrix).as1D();
    };
    MatmulOps.matrixTimesVector = function (matrix, v) {
        util.assert(v.rank === 1, "Error in matrixTimesVector: second input must rank 1, but got " + ("rank " + v.rank + "."));
        util.assert(matrix.rank === 2, "Error in matrixTimesVector: first input must be a rank 2, but got " + ("rank " + matrix.rank + "."));
        util.assert(v.size === matrix.shape[1], "Error in matrixTimesVector: size of first rank 1 input " + v.size + " " + "must match inner dimension of second rank 2 input, but got " + ("shape " + matrix.shape + "."));
        return matrix.matMul(v.as2D(-1, 1)).as1D();
    };
    MatmulOps.dotProduct = function (v1, v2) {
        util.assert(v1.rank === 1 && v2.rank === 1, "Error in dotProduct: inputs must be rank 1, but got ranks " + (v1.rank + " and " + v2.rank + "."));
        util.assert(v1.size === v2.size, "Error in dotProduct: size of inputs (" + v1.size + ") and (" + (v2.size + ") must match."));
        return v1.as2D(1, -1).matMul(v2.as2D(-1, 1)).asScalar();
    };
    MatmulOps.outerProduct = function (v1, v2) {
        util.assert(v1.rank === 1 && v2.rank === 1, "Error in outerProduct: inputs must be rank 1, but got ranks " + (v1.rank + " and " + v2.rank + "."));
        return v1.as2D(-1, 1).matMul(v2.as2D(1, -1));
    };
    MatmulOps.dot = function (t1, t2) {
        util.assert((t1.rank === 1 || t1.rank === 2) && (t2.rank === 1 || t2.rank === 2), "Error in dot: inputs must all be rank 1 or 2, but got ranks " + (t1.rank + " and " + t2.rank + "."));
        var t1Inner = t1.rank === 1 ? t1.size : t1.shape[1];
        var t2Inner = t2.rank === 1 ? t2.size : t2.shape[0];
        util.assert(t1Inner === t2Inner, "Error in dot: inner dimensions of inputs must match, but got " + (t1Inner + " and " + t2Inner + "."));
        if (t1.rank === 1 && t2.rank === 1) {
            return t1.as2D(1, -1).matMul(t2.as2D(-1, 1)).asScalar();
        } else if (t1.rank === 1 && t2.rank === 2) {
            return t1.as2D(1, -1).matMul(t2.as2D(t2.shape[0], t2.shape[1])).as1D();
        } else if (t1.rank === 2 && t2.rank === 1) {
            return t1.matMul(t2.as2D(-1, 1)).as1D();
        } else {
            return t1.matMul(t2.as2D(t2.shape[0], t2.shape[1]));
        }
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Matrices' }), _operation.operation], MatmulOps, "matMul", null);
    __decorate([_operation.operation], MatmulOps, "vectorTimesMatrix", null);
    __decorate([_operation.operation], MatmulOps, "matrixTimesVector", null);
    __decorate([_operation.operation], MatmulOps, "dotProduct", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Matrices' }), _operation.operation], MatmulOps, "outerProduct", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Matrices' }), _operation.operation], MatmulOps, "dot", null);
    return MatmulOps;
}();
exports.MatmulOps = MatmulOps;
//# sourceMappingURL=matmul.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./operation":"uPhB"}],"Giye":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MovingAverageOps = undefined;

var _doc = require("../doc");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _array_ops = require("./array_ops");

var _binary_ops = require("./binary_ops");

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var MovingAverageOps = function () {
    function MovingAverageOps() {}
    MovingAverageOps.movingAverage = function (v, x, decay, step, zeroDebias) {
        if (zeroDebias === void 0) {
            zeroDebias = true;
        }
        util.assertArgumentsAreTensors({ v: v, x: x }, 'movingAverage');
        util.assertTypesMatch(v, x);
        util.assert(util.arraysEqual(v.shape, x.shape), 'Shape mismatch in v and x');
        var one = _array_ops.ArrayOps.scalar(1);
        decay = typeof decay === 'number' ? _array_ops.ArrayOps.scalar(decay) : decay;
        var oneMinusDecay = one.sub(decay);
        var update = x.sub(v).mul(oneMinusDecay);
        if (zeroDebias) {
            util.assert(step != null, 'When using zeroDebias: true, step is required.');
            step = typeof step === 'number' ? _array_ops.ArrayOps.scalar(step) : step;
            update = update.div(one.sub(_binary_ops.BinaryOps.pow(decay, step)));
        }
        return v.add(update);
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Moving Average' }), _operation.operation], MovingAverageOps, "movingAverage", null);
    return MovingAverageOps;
}();
exports.MovingAverageOps = MovingAverageOps;
//# sourceMappingURL=moving_average.js.map
},{"../doc":"VkNo","../util":"lDaM","./array_ops":"2sZK","./binary_ops":"fVeS","./operation":"uPhB"}],"FLdA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NormOps = undefined;

var _doc = require("../doc");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _axis_util = require("./axis_util");

var axis_util = _interopRequireWildcard(_axis_util);

var _operation = require("./operation");

var _ops = require("./ops");

var ops = _interopRequireWildcard(_ops);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var NormOps = function () {
    function NormOps() {}
    NormOps.norm = function (x, ord, axis, keepDims) {
        if (ord === void 0) {
            ord = 'euclidean';
        }
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        util.assertArgumentsAreTensors({ x: x }, 'norm');
        var norm = normImpl(x, ord, axis);
        var keepDimsShape = norm.shape;
        if (keepDims) {
            var axes = axis_util.parseAxisParam(axis, x.shape);
            keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);
        }
        return norm.reshape(keepDimsShape);
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Matrices' }), _operation.operation], NormOps, "norm", null);
    return NormOps;
}();
exports.NormOps = NormOps;

function normImpl(x, p, axis) {
    if (axis === void 0) {
        axis = null;
    }
    if (x.rank === 0) {
        return x.abs();
    }
    if (x.rank !== 1 && axis === null) {
        return normImpl(x.reshape([-1]), p, axis);
    }
    if (x.rank === 1 || typeof axis === 'number' || axis instanceof Array && axis.length === 1) {
        if (p === 1) {
            return x.abs().sum(axis);
        }
        if (p === Infinity) {
            return x.abs().max(axis);
        }
        if (p === -Infinity) {
            return x.abs().min(axis);
        }
        if (p === 'euclidean' || p === 2) {
            return x.abs().pow(ops.scalar(2, 'int32')).sum(axis).sqrt();
        }
        throw new Error("Error in norm: invalid ord value: " + p);
    }
    if (axis instanceof Array && axis.length === 2) {
        if (p === 1) {
            return x.abs().sum(axis[0]).max(axis[1] - 1);
        }
        if (p === Infinity) {
            return x.abs().sum(axis[1]).max(axis[0]);
        }
        if (p === -Infinity) {
            return x.abs().sum(axis[1]).min(axis[0]);
        }
        if (p === 'fro' || p === 'euclidean') {
            return x.square().sum(axis).sqrt();
        }
        throw new Error("Error in norm: invalid ord value: " + p);
    }
    throw new Error("Error in norm: invalid axis: " + axis);
}
//# sourceMappingURL=norm.js.map
},{"../doc":"VkNo","../util":"lDaM","./axis_util":"61IY","./operation":"uPhB","./ops":"bzyr"}],"gMYE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PoolOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _conv_util = require("./conv_util");

var conv_util = _interopRequireWildcard(_conv_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var PoolOps = function () {
    function PoolOps() {}
    PoolOps.maxPool = function (x, filterSize, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ x: x }, 'maxPool');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in maxPool: input must be rank 4 but got rank " + x4D.rank + ".");
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in maxPool: pad must be an integer when using, " + ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad, dimRoundingMode);
        var grad = function (dy, saved) {
            var y4D = saved[0];
            return {
                x: function () {
                    return PoolOps.maxPoolBackprop(dy, x4D, y4D, filterSize, strides, pad);
                }
            };
        };
        var res = _environment.ENV.engine.runKernel(function (backend, save) {
            return save(backend.maxPool(x4D, convInfo));
        }, { x: x4D }, grad);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    PoolOps.maxPoolBackprop = function (dy, input, output, filterSize, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ dy: dy, input: input, output: output }, 'maxPoolBackprop');
        util.assert(input.rank === dy.rank, "Rank of input (" + input.rank + ") does not match rank of dy (" + dy.rank + ")");
        util.assert(dy.rank === 4, "Error in maxPoolBackprop: dy must be rank 4 but got rank " + (dy.rank + "."));
        util.assert(input.rank === 4, "Error in maxPoolBackprop: input must be rank 4 but got rank " + (input.rank + "."));
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in maxPoolBackprop: pad must be an integer when using, " + ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var convInfo = conv_util.computePool2DInfo(input.shape, filterSize, strides, pad, dimRoundingMode);
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.maxPoolBackprop(dy, input, output, convInfo);
        }, { dy: dy, input: input });
        return res;
    };
    PoolOps.avgPool = function (x, filterSize, strides, pad, dimRoundingMode) {
        util.assertArgumentsAreTensors({ x: x }, 'avgPool');
        util.assert(x.dtype === 'float32', 'The input dtype to avgPool must be float32');
        var x4D = x;
        var reshapedTo4D = false;
        if (x.rank === 3) {
            reshapedTo4D = true;
            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
        }
        util.assert(x4D.rank === 4, "Error in avgPool: x must be rank 4 but got rank " + x4D.rank + ".");
        if (dimRoundingMode != null) {
            util.assert(util.isInt(pad), "Error in avgPool: pad must be an integer when using, " + ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."));
        }
        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad);
        var grad = function (dy) {
            return {
                x: function () {
                    return PoolOps.avgPoolBackprop(dy, x4D, filterSize, strides, pad);
                }
            };
        };
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.avgPool(x4D, convInfo);
        }, { x: x4D }, grad);
        res = res.cast(x.dtype);
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    PoolOps.avgPoolBackprop = function (dy, input, filterSize, strides, pad) {
        util.assertArgumentsAreTensors({ dy: dy, input: input }, 'avgPoolBackprop');
        util.assert(input.rank === dy.rank, "Rank of input (" + input.rank + ") does not match rank of dy (" + dy.rank + ")");
        var input4D = input;
        var dy4D = dy;
        var reshapedTo4D = false;
        if (input.rank === 3) {
            reshapedTo4D = true;
            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);
            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);
        }
        util.assert(dy4D.rank === 4, "Error in avgPoolBackprop: dy must be rank 4 but got rank " + (dy4D.rank + "."));
        util.assert(input4D.rank === 4, "Error in avgPoolBackprop: input must be rank 4 but got rank " + (input4D.rank + "."));
        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad);
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.avgPoolBackprop(dy4D, input4D, convInfo);
        }, { dy4D: dy4D, input4D: input4D });
        if (reshapedTo4D) {
            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
        }
        return res;
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], PoolOps, "maxPool", null);
    __decorate([_operation.operation], PoolOps, "maxPoolBackprop", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Convolution' }), _operation.operation], PoolOps, "avgPool", null);
    __decorate([_operation.operation], PoolOps, "avgPoolBackprop", null);
    return PoolOps;
}();
exports.PoolOps = PoolOps;
//# sourceMappingURL=pool.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./conv_util":"4XDJ","./operation":"uPhB"}],"jrtE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReverseOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _axis_util = require("./axis_util");

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ReverseOps = function () {
    function ReverseOps() {}
    ReverseOps.reverse1d = function (x) {
        util.assert(x.rank === 1, "Error in reverse1D: x must be rank 1 but got\n             rank " + x.rank + ".");
        return ReverseOps.reverse(x, 0);
    };
    ReverseOps.reverse2d = function (x, axis) {
        util.assert(x.rank === 2, "Error in reverse2D: x must be rank 2 but got\n             rank " + x.rank + ".");
        return ReverseOps.reverse(x, axis);
    };
    ReverseOps.reverse3d = function (x, axis) {
        util.assert(x.rank === 3, "Error in reverse3D: x must be rank 3 but got\n             rank " + x.rank + ".");
        return ReverseOps.reverse(x, axis);
    };
    ReverseOps.reverse4d = function (x, axis) {
        util.assert(x.rank === 4, "Error in reverse4D: x must be rank 4 but got\n             rank " + x.rank + ".");
        return ReverseOps.reverse(x, axis);
    };
    ReverseOps.reverse = function (x, axis) {
        util.assertArgumentsAreTensors({ x: x }, 'reverse');
        if (x.rank === 0) {
            return x.clone();
        }
        var axes = (0, _axis_util.parseAxisParam)(axis, x.shape);
        var grad = function (dy) {
            return { x: function () {
                    return dy.reverse(axes);
                } };
        };
        var res = _environment.ENV.engine.runKernel(function (backend) {
            return backend.reverse(x, axes);
        }, { x: x }, grad);
        return res.reshapeAs(x);
    };
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], ReverseOps, "reverse", null);
    return ReverseOps;
}();
exports.ReverseOps = ReverseOps;
//# sourceMappingURL=reverse.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./axis_util":"61IY","./operation":"uPhB"}],"EpsS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.assertParamsValid = assertParamsValid;
exports.getStridedSlicedInfo = getStridedSlicedInfo;
exports.startForAxis = startForAxis;
exports.stopForAxis = stopForAxis;

var _util = require("../util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function assertParamsValid(input, begin, size) {
    util.assert(input.rank === begin.length, "Error in slice" + input.rank + "D: Length of begin " + begin + " must " + ("match the rank of the array (" + input.rank + ")."));
    util.assert(input.rank === size.length, "Error in slice" + input.rank + "D: Length of size " + size + " must " + ("match the rank of the array (" + input.rank + ")."));
    for (var i = 0; i < input.rank; ++i) {
        util.assert(begin[i] + size[i] <= input.shape[i], "Error in slice" + input.rank + "D: begin[" + i + "] + size[" + i + "] " + ("(" + (begin[i] + size[i]) + ") would overflow input.shape[" + i + "] (" + input.shape[i] + ")"));
    }
}
function getStridedSlicedInfo(shape, begin, end, strides, beginMask, endMask) {
    if (beginMask === void 0) {
        beginMask = 0;
    }
    if (endMask === void 0) {
        endMask = 0;
    }
    var startIndex = [];
    var endIndex = [];
    for (var i = 0; i < shape.length; i++) {
        startIndex[i] = startForAxis(beginMask, begin, strides, shape, i);
        endIndex[i] = stopForAxis(endMask, end, strides, shape, i);
    }
    var size = new Array(shape.length).fill(0);
    size = size.map(function (d, i) {
        var count = 0;
        for (var start = startIndex[i]; !(strides[i] > 0 ? start >= endIndex[i] : start <= endIndex[i]); start += strides[i]) {
            count += 1;
        }
        return count;
    });
    return [startIndex, size];
}
function startForAxis(beginMask, startIndices, strides, inputShape, axis) {
    var start = startIndices[axis];
    if (beginMask & 1 << axis) {
        if (strides[axis] > 0) {
            start = Number.MIN_SAFE_INTEGER;
        } else {
            start = Number.MAX_SAFE_INTEGER;
        }
    }
    var axisSize = inputShape[axis];
    if (start < 0) {
        start += axisSize;
    }
    start = util.clamp(0, start, axisSize - 1);
    return start;
}
function stopForAxis(endMask, stopIndices, strides, inputShape, axis) {
    var stop = stopIndices[axis];
    if (endMask & 1 << axis) {
        if (strides[axis] > 0) {
            stop = Number.MAX_SAFE_INTEGER;
        } else {
            stop = Number.MIN_SAFE_INTEGER;
        }
    }
    var axisSize = inputShape[axis];
    if (stop < 0) {
        stop += axisSize;
    }
    if (strides[axis] > 0) {
        stop = util.clamp(0, stop, axisSize);
    } else {
        stop = util.clamp(-1, stop, axisSize - 1);
    }
    return stop;
}
//# sourceMappingURL=slice_util.js.map
},{"../util":"lDaM"}],"RRwU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SliceOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _operation = require("./operation");

var _slice_util = require("./slice_util");

var slice_util = _interopRequireWildcard(_slice_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var SliceOps = function () {
    function SliceOps() {}
    SliceOps.slice1d = function (x, begin, size) {
        util.assert(x.rank === 1, "slice1d expects a rank-1 tensor, but got a rank-" + x.rank + " tensor");
        return SliceOps.slice(x, [begin], [size]);
    };
    SliceOps.slice2d = function (x, begin, size) {
        util.assert(x.rank === 2, "slice1d expects a rank-2 tensor, but got a rank-" + x.rank + " tensor");
        return SliceOps.slice(x, begin, size);
    };
    SliceOps.slice3d = function (x, begin, size) {
        util.assert(x.rank === 3, "slice1d expects a rank-3 tensor, but got a rank-" + x.rank + " tensor");
        return SliceOps.slice(x, begin, size);
    };
    SliceOps.slice4d = function (x, begin, size) {
        util.assert(x.rank === 4, "slice1d expects a rank-4 tensor, but got a rank-" + x.rank + " tensor");
        return SliceOps.slice(x, begin, size);
    };
    SliceOps.slice = function (x, begin, size) {
        util.assertArgumentsAreTensors({ x: x }, 'slice');
        if (x.rank === 0) {
            throw new Error('Slicing scalar is not possible');
        }
        var begin_;
        if (typeof begin === 'number') {
            begin_ = [begin].concat(new Array(x.rank - 1).fill(0));
        } else if (begin.length < x.rank) {
            begin_ = begin.concat(new Array(x.rank - begin.length).fill(0));
        } else {
            begin_ = begin;
        }
        var size_;
        if (size == null) {
            size_ = new Array(x.rank).fill(-1);
        } else if (typeof size === 'number') {
            size_ = [size].concat(new Array(x.rank - 1).fill(-1));
        } else if (size.length < x.rank) {
            size_ = size.concat(new Array(x.rank - size.length).fill(-1));
        } else {
            size_ = size;
        }
        size_ = size_.map(function (d, i) {
            if (d >= 0) {
                return d;
            } else {
                util.assert(d === -1, 'Bad value in size');
                return x.shape[i] - begin_[i];
            }
        });
        slice_util.assertParamsValid(x, begin_, size_);
        var inputShape = x.shape;
        var grad = function (dy) {
            var paddings = [];
            for (var i = 0; i < dy.rank; i++) {
                paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);
            }
            return { x: function () {
                    return dy.pad(paddings);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.slice(x, begin_, size_);
        }, { x: x }, grad);
    };
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Slicing and Joining' }), _operation.operation], SliceOps, "slice", null);
    return SliceOps;
}();
exports.SliceOps = SliceOps;
//# sourceMappingURL=slice.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./operation":"uPhB","./slice_util":"EpsS"}],"3jX+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SoftmaxOps = undefined;

var _doc = require("../doc");

var _globals = require("../globals");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _axis_util = require("./axis_util");

var axis_util = _interopRequireWildcard(_axis_util);

var _operation = require("./operation");

var _ops = require("./ops");

var ops = _interopRequireWildcard(_ops);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var SoftmaxOps = function () {
    function SoftmaxOps() {}
    SoftmaxOps.softmax = function (logits, dim) {
        if (dim === void 0) {
            dim = -1;
        }
        util.assertArgumentsAreTensors({ logits: logits }, 'softmax');
        if (dim === -1) {
            dim = logits.rank - 1;
        }
        if (dim !== logits.rank - 1) {
            throw Error('Softmax along a non-last dimension is not yet supported. ' + ("Logits was rank " + logits.rank + " and dim was " + dim));
        }
        var customOp = (0, _globals.customGrad)(function (logits) {
            var keepDims = true;
            var lse = logits.logSumExp([dim], keepDims);
            var logResult = logits.toFloat().sub(lse);
            var y = logResult.exp();
            var gradFunc = function (dy) {
                var dyTimesY = dy.mul(y);
                var keepDims = true;
                return dyTimesY.sub(dyTimesY.sum([dim], keepDims).mul(y));
            };
            return { value: y, gradFunc: gradFunc };
        });
        return customOp(logits);
    };
    SoftmaxOps.softmaxCrossEntropy = function (labels, logits, dim) {
        if (dim === void 0) {
            dim = -1;
        }
        util.assertArgumentsAreTensors({ labels: labels, logits: logits }, 'softmaxCrossEntropy');
        util.assertShapesMatch(labels.shape, logits.shape, 'Error in softmaxCrossEntropy: ');
        if (dim === -1) {
            dim = logits.rank - 1;
        }
        if (dim !== logits.rank - 1) {
            throw Error("Softmax cross entropy along a non-last dimension is not yet " + ("supported. Labels / logits was rank " + logits.rank + " ") + ("and dim was " + dim));
        }
        var customOp = (0, _globals.customGrad)(function (labels, logits) {
            var predictedProbs = logits.softmax(dim);
            var costVector = ops.scalar(1e-5).add(predictedProbs).log().mul(labels).neg();
            var value = costVector.sum([dim]);
            var gradFunc = function (dy) {
                var dyShape = axis_util.expandShapeToKeepDim(dy.shape, [dim]);
                return [dy.reshape(dyShape).mul(labels.toFloat().sub(predictedProbs)), dy.reshape(dyShape).mul(predictedProbs.sub(labels.toFloat()))];
            };
            return { value: value, gradFunc: gradFunc };
        });
        return customOp(labels, logits);
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Normalization' }), _operation.operation], SoftmaxOps, "softmax", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), _operation.operation], SoftmaxOps, "softmaxCrossEntropy", null);
    return SoftmaxOps;
}();
exports.SoftmaxOps = SoftmaxOps;
//# sourceMappingURL=softmax.js.map
},{"../doc":"VkNo","../globals":"AeC1","../util":"lDaM","./axis_util":"61IY","./operation":"uPhB","./ops":"bzyr"}],"JA6x":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StridedSliceOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var StridedSliceOps = function () {
    function StridedSliceOps() {}
    StridedSliceOps.stridedSlice = function (x, begin, end, strides, beginMask, endMask) {
        if (beginMask === void 0) {
            beginMask = 0;
        }
        if (endMask === void 0) {
            endMask = 0;
        }
        util.assertArgumentsAreTensors({ x: x }, 'stridedSlice');
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.stridedSlice(x, begin, end, strides, beginMask, endMask);
        }, { x: x });
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Slicing and Joining' }), _operation.operation], StridedSliceOps, "stridedSlice", null);
    return StridedSliceOps;
}();
exports.StridedSliceOps = StridedSliceOps;
//# sourceMappingURL=strided_slice.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./operation":"uPhB"}],"6kMP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransposeOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _axis_util = require("./axis_util");

var axis_util = _interopRequireWildcard(_axis_util);

var _operation = require("./operation");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var TransposeOps = function () {
    function TransposeOps() {}
    TransposeOps.transpose = function (x, perm) {
        util.assertArgumentsAreTensors({ x: x }, 'transpose');
        if (perm == null) {
            perm = x.shape.map(function (s, i) {
                return i;
            }).reverse();
        }
        util.assert(x.rank === perm.length, "Error in transpose: rank of input " + x.rank + " " + ("must match length of perm " + perm + "."));
        perm.forEach(function (axis) {
            util.assert(axis >= 0 && axis < x.rank, "All entries in 'perm' must be between 0 and " + (x.rank - 1) + (" but got " + perm));
        });
        if (x.rank <= 1) {
            return x.clone();
        }
        var der = function (dy) {
            var undoPerm = axis_util.getUndoAxesPermutation(perm);
            return { x: function () {
                    return dy.transpose(undoPerm);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.transpose(x, perm);
        }, { x: x }, der);
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Matrices' }), _operation.operation], TransposeOps, "transpose", null);
    return TransposeOps;
}();
exports.TransposeOps = TransposeOps;
//# sourceMappingURL=transpose.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./axis_util":"61IY","./operation":"uPhB"}],"XOGQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SELU_SCALEALPHA = exports.SELU_SCALEALPHA = 1.7580993408473768599402175208123;
var SELU_SCALE = exports.SELU_SCALE = 1.0507009873554804934193349852946;
//# sourceMappingURL=selu_util.js.map
},{}],"8EAs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnaryOps = undefined;

var _doc = require("../doc");

var _environment = require("../environment");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _operation = require("./operation");

var _ops = require("./ops");

var ops = _interopRequireWildcard(_ops);

var _selu_util = require("./selu_util");

var selu_util = _interopRequireWildcard(_selu_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var UnaryOps = function () {
    function UnaryOps() {}
    UnaryOps.neg = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'neg');
        var grad = function (dy) {
            return { x: function () {
                    return dy.neg();
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.neg(x);
        }, { x: x }, grad);
    };
    UnaryOps.ceil = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'ceil');
        var grad = function (dy) {
            return { x: function () {
                    return ops.zerosLike(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.ceil(x);
        }, { x: x }, grad);
    };
    UnaryOps.floor = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'floor');
        var grad = function (dy) {
            return { x: function () {
                    return ops.zerosLike(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.floor(x);
        }, { x: x }, grad);
    };
    UnaryOps.sign = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sign');
        var grad = function (dy) {
            return { x: function () {
                    return ops.zerosLike(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.sign(x);
        }, { x: x }, grad);
    };
    UnaryOps.round = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'round');
        var grad = function (dy) {
            return { x: function () {
                    return ops.zerosLike(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.round(x);
        }, { x: x }, grad);
    };
    UnaryOps.exp = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'exp');
        var bck = function (dy, saved) {
            var y = saved[0];
            return { x: function () {
                    return dy.mulStrict(y);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend, save) {
            return save(backend.exp(x));
        }, { x: x }, bck);
    };
    UnaryOps.expm1 = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'expm1');
        var grad = function (dy) {
            return { x: function () {
                    return dy.mulStrict(x.exp());
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.expm1(x);
        }, { x: x }, grad);
    };
    UnaryOps.log = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'log');
        var grad = function (dy) {
            return { x: function () {
                    return dy.divStrict(x.toFloat());
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.log(x);
        }, { x: x }, grad);
    };
    UnaryOps.log1p = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'log1p');
        var grad = function (dy) {
            return { x: function () {
                    return dy.divStrict(x.add(ops.scalar(1)));
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.log1p(x);
        }, { x: x }, grad);
    };
    UnaryOps.sqrt = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sqrt');
        var grad = function (dy) {
            return { x: function () {
                    return dy.divStrict(x.toFloat().sqrt().mul(ops.scalar(2)));
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.sqrt(x);
        }, { x: x }, grad);
    };
    UnaryOps.rsqrt = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'rsqrt');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(x.pow(ops.scalar(1.5)).mul(ops.scalar(2))).neg();
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.rsqrt(x);
        }, { x: x }, grad);
    };
    UnaryOps.square = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'square');
        var grad = function (dy) {
            return { x: function () {
                    return dy.mulStrict(x.toFloat().mul(ops.scalar(2)));
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.square(x);
        }, { x: x }, grad);
    };
    UnaryOps.reciprocal = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'reciprocal');
        var grad = function (dy) {
            return { x: function () {
                    return dy.divStrict(x.square().neg());
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.reciprocal(x);
        }, { x: x }, grad);
    };
    UnaryOps.abs = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'abs');
        var grad = function (dy) {
            return { x: function () {
                    return dy.mulStrict(x.toFloat().step(-1));
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.abs(x);
        }, { x: x }, grad);
    };
    UnaryOps.clipByValue = function (x, clipValueMin, clipValueMax) {
        util.assertArgumentsAreTensors({ x: x }, 'clipByValue');
        util.assert(clipValueMin <= clipValueMax, "Error in clip: min (" + clipValueMin + ") must be " + ("less than or equal to max (" + clipValueMax + ")."));
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.where(x.greater(ops.scalar(clipValueMin)).logicalAnd(x.less(ops.scalar(clipValueMax))), (0, _ops.zerosLike)(dy));
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.clip(x, clipValueMin, clipValueMax);
        }, { x: x }, grad);
    };
    UnaryOps.relu = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'relu');
        if (x.dtype === 'bool') {
            return x.toInt();
        }
        var grad = function (dy) {
            var stepRes = x.step();
            return { x: function () {
                    return dy.mulStrict(stepRes.toFloat());
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.relu(x);
        }, { x: x }, grad);
    };
    UnaryOps.elu = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'elu');
        var grad = function (dy, saved) {
            var y = saved[0];
            return {
                x: function () {
                    return _environment.ENV.engine.runKernel(function (backend) {
                        return backend.eluDer(dy, y);
                    }, { dy: dy, y: y });
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend, save) {
            return save(backend.elu(x));
        }, { x: x }, grad);
    };
    UnaryOps.selu = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'selu');
        var grad = function (dy) {
            return {
                x: function () {
                    var mask = x.greater(ops.scalar(0));
                    var scaleAlpha = ops.scalar(selu_util.SELU_SCALEALPHA);
                    var scale = ops.scalar(selu_util.SELU_SCALE);
                    var greaterThanZeroDer = dy.mul(scale);
                    var lessEqualZeroDer = dy.mul(scaleAlpha).mul(x.toFloat().exp());
                    return ops.where(mask, greaterThanZeroDer, lessEqualZeroDer);
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.selu(x);
        }, { x: x }, grad);
    };
    UnaryOps.leakyRelu = function (x, alpha) {
        if (alpha === void 0) {
            alpha = 0.2;
        }
        util.assertArgumentsAreTensors({ x: x }, 'leakyRelu');
        return ops.maximum(ops.scalar(alpha).mul(x), x);
    };
    UnaryOps.prelu = function (x, alpha) {
        util.assertArgumentsAreTensors({ x: x, alpha: alpha }, 'prelu');
        var zero = ops.scalar(0);
        return ops.maximum(zero, x).add(alpha.mul(ops.minimum(zero, x)));
    };
    UnaryOps.sigmoid = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sigmoid');
        var grad = function (dy, saved) {
            var y = saved[0];
            return { x: function () {
                    return dy.mulStrict(y.mul(ops.scalar(1).sub(y)));
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend, save) {
            return save(backend.sigmoid(x));
        }, { x: x }, grad);
    };
    UnaryOps.logSigmoid = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'logSigmoid');
        var grad = function (dy) {
            return { x: function () {
                    return dy.mulStrict(x.neg().sigmoid());
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.softplus(x.neg()).neg();
        }, { x: x }, grad);
    };
    UnaryOps.softplus = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'softplus');
        var grad = function (dy) {
            return { x: function () {
                    return dy.mulStrict(x.sigmoid());
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.softplus(x);
        }, { x: x }, grad);
    };
    UnaryOps.sin = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sin');
        var grad = function (dy) {
            return { x: function () {
                    return x.toFloat().cos().mulStrict(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.sin(x);
        }, { x: x }, grad);
    };
    UnaryOps.cos = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'cos');
        var grad = function (dy) {
            return { x: function () {
                    return x.toFloat().sin().neg().mulStrict(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.cos(x);
        }, { x: x }, grad);
    };
    UnaryOps.tan = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'tan');
        var grad = function (dy) {
            return { x: function () {
                    return dy.divStrict(x.cos().square());
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.tan(x);
        }, { x: x }, grad);
    };
    UnaryOps.asin = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'asin');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).sub(x.toFloat().square())));
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.asin(x);
        }, { x: x }, grad);
    };
    UnaryOps.acos = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'acos');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).sub(x.toFloat().square()))).neg();
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.acos(x);
        }, { x: x }, grad);
    };
    UnaryOps.atan = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'atan');
        var grad = function (dy) {
            return { x: function () {
                    return dy.divStrict(ops.scalar(1).add(x.toFloat().square()));
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.atan(x);
        }, { x: x }, grad);
    };
    UnaryOps.sinh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'sinh');
        var grad = function (dy) {
            return { x: function () {
                    return x.toFloat().cosh().mulStrict(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.sinh(x);
        }, { x: x }, grad);
    };
    UnaryOps.cosh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'cosh');
        var grad = function (dy) {
            return { x: function () {
                    return x.toFloat().sinh().mulStrict(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.cosh(x);
        }, { x: x }, grad);
    };
    UnaryOps.tanh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'tanh');
        var grad = function (dy, saved) {
            var y = saved[0];
            return { x: function () {
                    return ops.scalar(1).sub(y.square()).mulStrict(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend, save) {
            return save(backend.tanh(x));
        }, { x: x }, grad);
    };
    UnaryOps.asinh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'asinh');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).add(x.toFloat().square())));
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.asinh(x);
        }, { x: x }, grad);
    };
    UnaryOps.acosh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'acosh');
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.divStrict(UnaryOps.sqrt(x.toFloat().square().sub(ops.scalar(1))));
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.acosh(x);
        }, { x: x }, grad);
    };
    UnaryOps.atanh = function (x) {
        util.assertArgumentsAreTensors({ x: x }, 'atanh');
        var grad = function (dy) {
            return { x: function () {
                    return dy.divStrict(ops.scalar(1).sub(x.toFloat().square()));
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.atanh(x);
        }, { x: x }, grad);
    };
    UnaryOps.erf = function (x) {
        util.assert(x.dtype === 'int32' || x.dtype === 'float32', 'Input dtype must be `int32` or `float32`.');
        if (x.dtype === 'int32') {
            x = x.toFloat();
        }
        var grad = function (dy) {
            return {
                x: function () {
                    return dy.mulStrict(ops.scalar(2 / Math.sqrt(Math.PI)).mul(x.square().neg().exp()));
                }
            };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.erf(x);
        }, { x: x }, grad);
    };
    UnaryOps.step = function (x, alpha) {
        if (alpha === void 0) {
            alpha = 0.0;
        }
        util.assertArgumentsAreTensors({ x: x }, 'step');
        var grad = function (dy) {
            return { x: function () {
                    return ops.zerosLike(dy);
                } };
        };
        return _environment.ENV.engine.runKernel(function (backend) {
            return backend.step(x, alpha);
        }, { x: x }, grad);
    };
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "neg", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "ceil", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "floor", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "sign", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "round", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "exp", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "expm1", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "log", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "log1p", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "sqrt", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "rsqrt", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "square", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "reciprocal", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "abs", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "clipByValue", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "relu", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "elu", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "selu", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "leakyRelu", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "prelu", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "sigmoid", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "logSigmoid", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "softplus", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "sin", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "cos", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "tan", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "asin", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "acos", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "atan", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "sinh", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "cosh", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "tanh", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "asinh", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "acosh", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "atanh", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "erf", null);
    __decorate([(0, _doc.doc)({ heading: 'Operations', subheading: 'Basic math' }), _operation.operation], UnaryOps, "step", null);
    return UnaryOps;
}();
exports.UnaryOps = UnaryOps;
//# sourceMappingURL=unary_ops.js.map
},{"../doc":"VkNo","../environment":"CAkW","../util":"lDaM","./operation":"uPhB","./ops":"bzyr","./selu_util":"XOGQ"}],"bzyr":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.image = exports.losses = exports.operation = exports.linalg = exports.localResponseNormalization = exports.softmax = exports.multiRNNCell = exports.basicLSTMCell = exports.movingAverage = exports.pad4d = exports.pad3d = exports.pad2d = exports.pad1d = exports.pad = exports.cumsum = exports.split = exports.unstack = exports.stack = exports.expandDims = exports.print = exports.tensor4d = exports.tensor3d = exports.tensor2d = exports.tensor1d = exports.scalar = exports.tensor = exports.fill = exports.buffer = exports.range = exports.linspace = exports.oneHot = exports.gather = exports.tile = exports.squeeze = exports.reshape = exports.multinomial = exports.randomUniform = exports.truncatedNormal = exports.randomNormal = exports.rand = exports.eye = exports.zerosLike = exports.zeros = exports.onesLike = exports.ones = exports.toPixels = exports.fromPixels = exports.clone = exports.cast = exports.norm = exports.squaredDifferenceStrict = exports.squaredDifference = exports.subStrict = exports.sub = exports.powStrict = exports.pow = exports.mulStrict = exports.mul = exports.modStrict = exports.mod = exports.minimumStrict = exports.minimum = exports.maximumStrict = exports.maximum = exports.divStrict = undefined;
exports.div = exports.atan2 = exports.addStrict = exports.add = exports.erf = exports.tanh = exports.tan = exports.step = exports.square = exports.rsqrt = exports.sqrt = exports.softplus = exports.sinh = exports.sin = exports.sigmoid = exports.selu = exports.round = exports.reciprocal = exports.relu = exports.prelu = exports.neg = exports.logSigmoid = exports.log1p = exports.log = exports.leakyRelu = exports.sign = exports.floor = exports.expm1 = exports.exp = exports.elu = exports.cosh = exports.cos = exports.clipByValue = exports.ceil = exports.atanh = exports.atan = exports.asinh = exports.asin = exports.acosh = exports.acos = exports.abs = exports.where = exports.logicalXor = exports.logicalOr = exports.logicalAnd = exports.logicalNot = exports.notEqualStrict = exports.notEqual = exports.lessEqualStrict = exports.lessEqual = exports.lessStrict = exports.less = exports.greaterEqualStrict = exports.greaterEqual = exports.greaterStrict = exports.greater = exports.equalStrict = exports.equal = exports.unsortedSegmentSum = exports.sum = exports.moments = exports.min = exports.mean = exports.max = exports.logSumExp = exports.argMin = exports.argMax = exports.stridedSlice = exports.slice4d = exports.slice3d = exports.slice2d = exports.slice1d = exports.slice = exports.reverse4d = exports.reverse3d = exports.reverse2d = exports.reverse1d = exports.reverse = exports.transpose = exports.maxPool = exports.avgPool = exports.dot = exports.vectorTimesMatrix = exports.outerProduct = exports.matrixTimesVector = exports.matMul = exports.separableConv2d = exports.depthwiseConv2d = exports.conv2dTranspose = exports.conv2d = exports.conv1d = exports.concat4d = exports.concat3d = exports.concat2d = exports.concat1d = exports.concat = exports.batchNormalization4d = exports.batchNormalization3d = exports.batchNormalization2d = exports.batchNormalization = undefined;

var _operation = require('./operation');

Object.defineProperty(exports, 'operation', {
    enumerable: true,
    get: function () {
        return _operation.operation;
    }
});

var _array_ops = require('./array_ops');

var _batchnorm = require('./batchnorm');

var _binary_ops = require('./binary_ops');

var _compare = require('./compare');

var _concat = require('./concat');

var _conv = require('./conv');

var _image_ops = require('./image_ops');

var _linalg_ops = require('./linalg_ops');

var _logical_ops = require('./logical_ops');

var _loss_ops = require('./loss_ops');

var _lrn = require('./lrn');

var _lstm = require('./lstm');

var _matmul = require('./matmul');

var _moving_average = require('./moving_average');

var _norm = require('./norm');

var _pool = require('./pool');

var _reduction_ops = require('./reduction_ops');

var _reverse = require('./reverse');

var _slice = require('./slice');

var _softmax = require('./softmax');

var _strided_slice = require('./strided_slice');

var _transpose = require('./transpose');

var _unary_ops = require('./unary_ops');

var _tensor = require('../tensor');

var _types = require('../types');

var batchNormalization = exports.batchNormalization = _batchnorm.BatchNormOps.batchNormalization;
var batchNormalization2d = exports.batchNormalization2d = _batchnorm.BatchNormOps.batchNormalization2d;
var batchNormalization3d = exports.batchNormalization3d = _batchnorm.BatchNormOps.batchNormalization3d;
var batchNormalization4d = exports.batchNormalization4d = _batchnorm.BatchNormOps.batchNormalization4d;
var concat = exports.concat = _concat.ConcatOps.concat;
var concat1d = exports.concat1d = _concat.ConcatOps.concat1d;
var concat2d = exports.concat2d = _concat.ConcatOps.concat2d;
var concat3d = exports.concat3d = _concat.ConcatOps.concat3d;
var concat4d = exports.concat4d = _concat.ConcatOps.concat4d;
var conv1d = exports.conv1d = _conv.ConvOps.conv1d;
var conv2d = exports.conv2d = _conv.ConvOps.conv2d;
var conv2dTranspose = exports.conv2dTranspose = _conv.ConvOps.conv2dTranspose;
var depthwiseConv2d = exports.depthwiseConv2d = _conv.ConvOps.depthwiseConv2d;
var separableConv2d = exports.separableConv2d = _conv.ConvOps.separableConv2d;
var matMul = exports.matMul = _matmul.MatmulOps.matMul;
var matrixTimesVector = exports.matrixTimesVector = _matmul.MatmulOps.matrixTimesVector;
var outerProduct = exports.outerProduct = _matmul.MatmulOps.outerProduct;
var vectorTimesMatrix = exports.vectorTimesMatrix = _matmul.MatmulOps.vectorTimesMatrix;
var dot = exports.dot = _matmul.MatmulOps.dot;
var avgPool = exports.avgPool = _pool.PoolOps.avgPool;
var maxPool = exports.maxPool = _pool.PoolOps.maxPool;
var transpose = exports.transpose = _transpose.TransposeOps.transpose;
var reverse = exports.reverse = _reverse.ReverseOps.reverse;
var reverse1d = exports.reverse1d = _reverse.ReverseOps.reverse1d;
var reverse2d = exports.reverse2d = _reverse.ReverseOps.reverse2d;
var reverse3d = exports.reverse3d = _reverse.ReverseOps.reverse3d;
var reverse4d = exports.reverse4d = _reverse.ReverseOps.reverse4d;
var slice = exports.slice = _slice.SliceOps.slice;
var slice1d = exports.slice1d = _slice.SliceOps.slice1d;
var slice2d = exports.slice2d = _slice.SliceOps.slice2d;
var slice3d = exports.slice3d = _slice.SliceOps.slice3d;
var slice4d = exports.slice4d = _slice.SliceOps.slice4d;
var stridedSlice = exports.stridedSlice = _strided_slice.StridedSliceOps.stridedSlice;
var argMax = exports.argMax = _reduction_ops.ReductionOps.argMax;
var argMin = exports.argMin = _reduction_ops.ReductionOps.argMin;
var logSumExp = exports.logSumExp = _reduction_ops.ReductionOps.logSumExp;
var max = exports.max = _reduction_ops.ReductionOps.max;
var mean = exports.mean = _reduction_ops.ReductionOps.mean;
var min = exports.min = _reduction_ops.ReductionOps.min;
var moments = exports.moments = _reduction_ops.ReductionOps.moments;
var sum = exports.sum = _reduction_ops.ReductionOps.sum;
var unsortedSegmentSum = exports.unsortedSegmentSum = _reduction_ops.ReductionOps.unsortedSegmentSum;
var equal = exports.equal = _compare.CompareOps.equal;
var equalStrict = exports.equalStrict = _compare.CompareOps.equalStrict;
var greater = exports.greater = _compare.CompareOps.greater;
var greaterStrict = exports.greaterStrict = _compare.CompareOps.greaterStrict;
var greaterEqual = exports.greaterEqual = _compare.CompareOps.greaterEqual;
var greaterEqualStrict = exports.greaterEqualStrict = _compare.CompareOps.greaterEqualStrict;
var less = exports.less = _compare.CompareOps.less;
var lessStrict = exports.lessStrict = _compare.CompareOps.lessStrict;
var lessEqual = exports.lessEqual = _compare.CompareOps.lessEqual;
var lessEqualStrict = exports.lessEqualStrict = _compare.CompareOps.lessEqualStrict;
var notEqual = exports.notEqual = _compare.CompareOps.notEqual;
var notEqualStrict = exports.notEqualStrict = _compare.CompareOps.notEqualStrict;
var logicalNot = exports.logicalNot = _logical_ops.LogicalOps.logicalNot;
var logicalAnd = exports.logicalAnd = _logical_ops.LogicalOps.logicalAnd;
var logicalOr = exports.logicalOr = _logical_ops.LogicalOps.logicalOr;
var logicalXor = exports.logicalXor = _logical_ops.LogicalOps.logicalXor;
var where = exports.where = _logical_ops.LogicalOps.where;
var abs = exports.abs = _unary_ops.UnaryOps.abs;
var acos = exports.acos = _unary_ops.UnaryOps.acos;
var acosh = exports.acosh = _unary_ops.UnaryOps.acosh;
var asin = exports.asin = _unary_ops.UnaryOps.asin;
var asinh = exports.asinh = _unary_ops.UnaryOps.asinh;
var atan = exports.atan = _unary_ops.UnaryOps.atan;
var atanh = exports.atanh = _unary_ops.UnaryOps.atanh;
var ceil = exports.ceil = _unary_ops.UnaryOps.ceil;
var clipByValue = exports.clipByValue = _unary_ops.UnaryOps.clipByValue;
var cos = exports.cos = _unary_ops.UnaryOps.cos;
var cosh = exports.cosh = _unary_ops.UnaryOps.cosh;
var elu = exports.elu = _unary_ops.UnaryOps.elu;
var exp = exports.exp = _unary_ops.UnaryOps.exp;
var expm1 = exports.expm1 = _unary_ops.UnaryOps.expm1;
var floor = exports.floor = _unary_ops.UnaryOps.floor;
var sign = exports.sign = _unary_ops.UnaryOps.sign;
var leakyRelu = exports.leakyRelu = _unary_ops.UnaryOps.leakyRelu;
var log = exports.log = _unary_ops.UnaryOps.log;
var log1p = exports.log1p = _unary_ops.UnaryOps.log1p;
var logSigmoid = exports.logSigmoid = _unary_ops.UnaryOps.logSigmoid;
var neg = exports.neg = _unary_ops.UnaryOps.neg;
var prelu = exports.prelu = _unary_ops.UnaryOps.prelu;
var relu = exports.relu = _unary_ops.UnaryOps.relu;
var reciprocal = exports.reciprocal = _unary_ops.UnaryOps.reciprocal;
var round = exports.round = _unary_ops.UnaryOps.round;
var selu = exports.selu = _unary_ops.UnaryOps.selu;
var sigmoid = exports.sigmoid = _unary_ops.UnaryOps.sigmoid;
var sin = exports.sin = _unary_ops.UnaryOps.sin;
var sinh = exports.sinh = _unary_ops.UnaryOps.sinh;
var softplus = exports.softplus = _unary_ops.UnaryOps.softplus;
var sqrt = exports.sqrt = _unary_ops.UnaryOps.sqrt;
var rsqrt = exports.rsqrt = _unary_ops.UnaryOps.rsqrt;
var square = exports.square = _unary_ops.UnaryOps.square;
var step = exports.step = _unary_ops.UnaryOps.step;
var tan = exports.tan = _unary_ops.UnaryOps.tan;
var tanh = exports.tanh = _unary_ops.UnaryOps.tanh;
var erf = exports.erf = _unary_ops.UnaryOps.erf;
var add = exports.add = _binary_ops.BinaryOps.add;
var addStrict = exports.addStrict = _binary_ops.BinaryOps.addStrict;
var atan2 = exports.atan2 = _binary_ops.BinaryOps.atan2;
var div = exports.div = _binary_ops.BinaryOps.div;
var divStrict = exports.divStrict = _binary_ops.BinaryOps.divStrict;
var maximum = exports.maximum = _binary_ops.BinaryOps.maximum;
var maximumStrict = exports.maximumStrict = _binary_ops.BinaryOps.maximumStrict;
var minimum = exports.minimum = _binary_ops.BinaryOps.minimum;
var minimumStrict = exports.minimumStrict = _binary_ops.BinaryOps.minimumStrict;
var mod = exports.mod = _binary_ops.BinaryOps.mod;
var modStrict = exports.modStrict = _binary_ops.BinaryOps.modStrict;
var mul = exports.mul = _binary_ops.BinaryOps.mul;
var mulStrict = exports.mulStrict = _binary_ops.BinaryOps.mulStrict;
var pow = exports.pow = _binary_ops.BinaryOps.pow;
var powStrict = exports.powStrict = _binary_ops.BinaryOps.powStrict;
var sub = exports.sub = _binary_ops.BinaryOps.sub;
var subStrict = exports.subStrict = _binary_ops.BinaryOps.subStrict;
var squaredDifference = exports.squaredDifference = _binary_ops.BinaryOps.squaredDifference;
var squaredDifferenceStrict = exports.squaredDifferenceStrict = _binary_ops.BinaryOps.squaredDifferenceStrict;
var norm = exports.norm = _norm.NormOps.norm;
var cast = exports.cast = _array_ops.ArrayOps.cast;
var clone = exports.clone = _array_ops.ArrayOps.clone;
var fromPixels = exports.fromPixels = _array_ops.ArrayOps.fromPixels;
var toPixels = exports.toPixels = _array_ops.ArrayOps.toPixels;
var ones = exports.ones = _array_ops.ArrayOps.ones;
var onesLike = exports.onesLike = _array_ops.ArrayOps.onesLike;
var zeros = exports.zeros = _array_ops.ArrayOps.zeros;
var zerosLike = exports.zerosLike = _array_ops.ArrayOps.zerosLike;
var eye = exports.eye = _array_ops.ArrayOps.eye;
var rand = exports.rand = _array_ops.ArrayOps.rand;
var randomNormal = exports.randomNormal = _array_ops.ArrayOps.randomNormal;
var truncatedNormal = exports.truncatedNormal = _array_ops.ArrayOps.truncatedNormal;
var randomUniform = exports.randomUniform = _array_ops.ArrayOps.randomUniform;
var multinomial = exports.multinomial = _array_ops.ArrayOps.multinomial;
var reshape = exports.reshape = _array_ops.ArrayOps.reshape;
var squeeze = exports.squeeze = _array_ops.ArrayOps.squeeze;
var tile = exports.tile = _array_ops.ArrayOps.tile;
var gather = exports.gather = _array_ops.ArrayOps.gather;
var oneHot = exports.oneHot = _array_ops.ArrayOps.oneHot;
var linspace = exports.linspace = _array_ops.ArrayOps.linspace;
var range = exports.range = _array_ops.ArrayOps.range;
var buffer = exports.buffer = _array_ops.ArrayOps.buffer;
var fill = exports.fill = _array_ops.ArrayOps.fill;
var tensor = exports.tensor = _array_ops.ArrayOps.tensor;
var scalar = exports.scalar = _array_ops.ArrayOps.scalar;
var tensor1d = exports.tensor1d = _array_ops.ArrayOps.tensor1d;
var tensor2d = exports.tensor2d = _array_ops.ArrayOps.tensor2d;
var tensor3d = exports.tensor3d = _array_ops.ArrayOps.tensor3d;
var tensor4d = exports.tensor4d = _array_ops.ArrayOps.tensor4d;
var print = exports.print = _array_ops.ArrayOps.print;
var expandDims = exports.expandDims = _array_ops.ArrayOps.expandDims;
var stack = exports.stack = _array_ops.ArrayOps.stack;
var unstack = exports.unstack = _array_ops.ArrayOps.unstack;
var split = exports.split = _array_ops.ArrayOps.split;
var cumsum = exports.cumsum = _array_ops.ArrayOps.cumsum;
var pad = exports.pad = _array_ops.ArrayOps.pad;
var pad1d = exports.pad1d = _array_ops.ArrayOps.pad1d;
var pad2d = exports.pad2d = _array_ops.ArrayOps.pad2d;
var pad3d = exports.pad3d = _array_ops.ArrayOps.pad3d;
var pad4d = exports.pad4d = _array_ops.ArrayOps.pad4d;
var movingAverage = exports.movingAverage = _moving_average.MovingAverageOps.movingAverage;
var basicLSTMCell = exports.basicLSTMCell = _lstm.LSTMOps.basicLSTMCell;
var multiRNNCell = exports.multiRNNCell = _lstm.LSTMOps.multiRNNCell;
var softmax = exports.softmax = _softmax.SoftmaxOps.softmax;
var localResponseNormalization = exports.localResponseNormalization = _lrn.LRNOps.localResponseNormalization;
var linalg = exports.linalg = _linalg_ops.LinalgOps;

[_tensor.Tensor, _types.Rank];
[_loss_ops.Reduction];
var losses = exports.losses = {
    absoluteDifference: _loss_ops.LossOps.absoluteDifference,
    computeWeightedLoss: _loss_ops.LossOps.computeWeightedLoss,
    cosineDistance: _loss_ops.LossOps.cosineDistance,
    hingeLoss: _loss_ops.LossOps.hingeLoss,
    huberLoss: _loss_ops.LossOps.huberLoss,
    logLoss: _loss_ops.LossOps.logLoss,
    meanSquaredError: _loss_ops.LossOps.meanSquaredError,
    softmaxCrossEntropy: _softmax.SoftmaxOps.softmaxCrossEntropy
};
var image = exports.image = {
    resizeBilinear: _image_ops.ImageOps.resizeBilinear,
    resizeNearestNeighbor: _image_ops.ImageOps.resizeNearestNeighbor
};
//# sourceMappingURL=ops.js.map
},{"./array_ops":"2sZK","./batchnorm":"3YjN","./binary_ops":"fVeS","./compare":"Q2lp","./concat":"nJYU","./conv":"3UGL","./image_ops":"Y0cx","./linalg_ops":"NdFy","./logical_ops":"2dtG","./loss_ops":"gHYy","./lrn":"Zv/r","./lstm":"PJ3g","./matmul":"uFBe","./moving_average":"Giye","./norm":"FLdA","./pool":"gMYE","./reduction_ops":"BbW7","./reverse":"jrtE","./slice":"RRwU","./softmax":"3jX+","./strided_slice":"JA6x","./transpose":"6kMP","./unary_ops":"8EAs","./operation":"uPhB","../tensor":"Xe78","../types":"q15R"}],"Xe78":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.variable = exports.Variable = exports.Tensor = exports.TensorBuffer = undefined;

var _doc = require("./doc");

var _environment = require("./environment");

var _ops = require("./ops/ops");

var ops = _interopRequireWildcard(_ops);

var _tensor_util = require("./tensor_util");

var tensor_util = _interopRequireWildcard(_tensor_util);

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var TensorBuffer = function () {
    function TensorBuffer(shape, dtype, values) {
        this.dtype = dtype;
        if (values != null) {
            var n = values.length;
            var size = util.sizeFromShape(shape);
            util.assert(n === size, "Length of values '" + n + "' does not match the size " + ("inferred by the shape '" + size + "'"));
        }
        this.shape = shape.slice();
        this.values = values || util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));
        this.strides = computeStrides(shape);
        this.size = util.sizeFromShape(shape);
    }
    TensorBuffer.prototype.set = function (value) {
        var locs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            locs[_i - 1] = arguments[_i];
        }
        if (locs.length === 0) {
            locs = [0];
        }
        util.assert(locs.length === this.rank, "The number of provided coordinates (" + locs.length + ") must " + ("match the rank (" + this.rank + ")"));
        var index = this.locToIndex(locs);
        this.values[index] = value;
    };
    TensorBuffer.prototype.get = function () {
        var locs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            locs[_i] = arguments[_i];
        }
        if (locs.length === 0) {
            locs = [0];
        }
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return this.values[index];
    };
    TensorBuffer.prototype.locToIndex = function (locs) {
        if (this.rank === 0) {
            return 0;
        } else if (this.rank === 1) {
            return locs[0];
        }
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return index;
    };
    TensorBuffer.prototype.indexToLoc = function (index) {
        if (this.rank === 0) {
            return [];
        } else if (this.rank === 1) {
            return [index];
        }
        var locs = new Array(this.shape.length);
        for (var i = 0; i < locs.length - 1; ++i) {
            locs[i] = Math.floor(index / this.strides[i]);
            index -= locs[i] * this.strides[i];
        }
        locs[locs.length - 1] = index;
        return locs;
    };
    Object.defineProperty(TensorBuffer.prototype, "rank", {
        get: function () {
            return this.shape.length;
        },
        enumerable: true,
        configurable: true
    });
    TensorBuffer.prototype.toTensor = function () {
        return Tensor.make(this.shape, { values: this.values }, this.dtype);
    };
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], TensorBuffer.prototype, "set", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], TensorBuffer.prototype, "get", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], TensorBuffer.prototype, "toTensor", null);
    TensorBuffer = __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], TensorBuffer);
    return TensorBuffer;
}();
exports.TensorBuffer = TensorBuffer;

var Tensor = function () {
    function Tensor(shape, dtype, values, dataId) {
        this.isDisposed = false;
        this.size = util.sizeFromShape(shape);
        if (values != null) {
            util.assert(this.size === values.length, "Constructing tensor of shape (" + this.size + ") should match the " + ("length of values (" + values.length + ")"));
        }
        this.shape = shape.slice();
        this.dtype = dtype || 'float32';
        this.strides = computeStrides(shape);
        this.dataId = dataId != null ? dataId : {};
        this.id = Tensor_1.nextId++;
        this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';
        _environment.ENV.engine.registerTensor(this);
        if (values != null) {
            _environment.ENV.engine.write(this.dataId, values);
        }
    }
    Tensor_1 = Tensor;
    Tensor.make = function (shape, data, dtype) {
        return new Tensor_1(shape, dtype, data.values, data.dataId);
    };
    Tensor.prototype.flatten = function () {
        this.throwIfDisposed();
        return this.as1D();
    };
    Tensor.prototype.asScalar = function () {
        this.throwIfDisposed();
        util.assert(this.size === 1, 'The array must have only 1 element.');
        return this.reshape([]);
    };
    Tensor.prototype.as1D = function () {
        this.throwIfDisposed();
        return this.reshape([this.size]);
    };
    Tensor.prototype.as2D = function (rows, columns) {
        this.throwIfDisposed();
        return this.reshape([rows, columns]);
    };
    Tensor.prototype.as3D = function (rows, columns, depth) {
        this.throwIfDisposed();
        return this.reshape([rows, columns, depth]);
    };
    Tensor.prototype.as4D = function (rows, columns, depth, depth2) {
        this.throwIfDisposed();
        return this.reshape([rows, columns, depth, depth2]);
    };
    Tensor.prototype.asType = function (dtype) {
        this.throwIfDisposed();
        return ops.cast(this, dtype);
    };
    Object.defineProperty(Tensor.prototype, "rank", {
        get: function () {
            return this.shape.length;
        },
        enumerable: true,
        configurable: true
    });
    Tensor.prototype.get = function () {
        var locs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            locs[_i] = arguments[_i];
        }
        util.assert(locs.length === this.rank, 'Number of coordinates in get() must match the rank of the tensor');
        this.throwIfDisposed();
        if (locs.length === 0) {
            locs = [0];
        }
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return this.dataSync()[index];
    };
    Tensor.prototype.buffer = function () {
        return ops.buffer(this.shape, this.dtype, this.dataSync());
    };
    Tensor.prototype.data = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.throwIfDisposed();
                return [2, _environment.ENV.engine.read(this.dataId)];
            });
        });
    };
    Tensor.prototype.dataSync = function () {
        this.throwIfDisposed();
        return _environment.ENV.engine.readSync(this.dataId);
    };
    Tensor.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this.isDisposed = true;
        _environment.ENV.engine.disposeTensor(this);
    };
    Tensor.prototype.throwIfDisposed = function () {
        if (this.isDisposed) {
            throw new Error("Tensor is disposed.");
        }
    };
    Tensor.prototype.toFloat = function () {
        return this.asType('float32');
    };
    Tensor.prototype.toInt = function () {
        return this.asType('int32');
    };
    Tensor.prototype.toBool = function () {
        return this.asType('bool');
    };
    Tensor.prototype.print = function (verbose) {
        if (verbose === void 0) {
            verbose = false;
        }
        return ops.print(this, verbose);
    };
    Tensor.prototype.reshape = function (newShape) {
        this.throwIfDisposed();
        return ops.reshape(this, newShape);
    };
    Tensor.prototype.reshapeAs = function (x) {
        this.throwIfDisposed();
        return this.reshape(x.shape);
    };
    Tensor.prototype.expandDims = function (axis) {
        if (axis === void 0) {
            axis = 0;
        }
        return ops.expandDims(this, axis);
    };
    Tensor.prototype.cumsum = function (axis, exclusive, reverse) {
        if (axis === void 0) {
            axis = 0;
        }
        if (exclusive === void 0) {
            exclusive = false;
        }
        if (reverse === void 0) {
            reverse = false;
        }
        return ops.cumsum(this, axis, exclusive, reverse);
    };
    Tensor.prototype.squeeze = function (axis) {
        this.throwIfDisposed();
        return ops.squeeze(this, axis);
    };
    Tensor.prototype.clone = function () {
        this.throwIfDisposed();
        return ops.clone(this);
    };
    Tensor.prototype.toString = function (verbose) {
        if (verbose === void 0) {
            verbose = false;
        }
        return tensor_util.tensorToString(this, verbose);
    };
    Tensor.prototype.tile = function (reps) {
        this.throwIfDisposed();
        return ops.tile(this, reps);
    };
    Tensor.prototype.gather = function (indices, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        this.throwIfDisposed();
        return ops.gather(this, indices, axis);
    };
    Tensor.prototype.matMul = function (b, transposeA, transposeB) {
        if (transposeA === void 0) {
            transposeA = false;
        }
        if (transposeB === void 0) {
            transposeB = false;
        }
        this.throwIfDisposed();
        return ops.matMul(this, b, transposeA, transposeB);
    };
    Tensor.prototype.dot = function (b) {
        this.throwIfDisposed();
        return ops.dot(this, b);
    };
    Tensor.prototype.norm = function (ord, axis, keepDims) {
        if (ord === void 0) {
            ord = 'euclidean';
        }
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        this.throwIfDisposed();
        return ops.norm(this, ord, axis, keepDims);
    };
    Tensor.prototype.slice = function (begin, size) {
        this.throwIfDisposed();
        return ops.slice(this, begin, size);
    };
    Tensor.prototype.reverse = function (axis) {
        this.throwIfDisposed();
        return ops.reverse(this, axis);
    };
    Tensor.prototype.concat = function (x, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        this.throwIfDisposed();
        return ops.concat([this, x], axis);
    };
    Tensor.prototype.stack = function (x, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        return ops.stack([this, x], axis);
    };
    Tensor.prototype.unstack = function (x, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        return ops.unstack(this, axis);
    };
    Tensor.prototype.pad = function (paddings, constantValue) {
        if (constantValue === void 0) {
            constantValue = 0;
        }
        return ops.pad(this, paddings, constantValue);
    };
    Tensor.prototype.batchNormalization = function (mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) {
            varianceEpsilon = .001;
        }
        this.throwIfDisposed();
        return ops.batchNormalization(this, mean, variance, varianceEpsilon, scale, offset);
    };
    Tensor.prototype.logSumExp = function (axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        this.throwIfDisposed();
        return ops.logSumExp(this, axis, keepDims);
    };
    Tensor.prototype.sum = function (axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        this.throwIfDisposed();
        return ops.sum(this, axis, keepDims);
    };
    Tensor.prototype.mean = function (axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        this.throwIfDisposed();
        return ops.mean(this, axis, keepDims);
    };
    Tensor.prototype.min = function (axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        this.throwIfDisposed();
        return ops.min(this, axis, keepDims);
    };
    Tensor.prototype.max = function (axis, keepDims) {
        if (axis === void 0) {
            axis = null;
        }
        if (keepDims === void 0) {
            keepDims = false;
        }
        this.throwIfDisposed();
        return ops.max(this, axis, keepDims);
    };
    Tensor.prototype.argMin = function (axis) {
        if (axis === void 0) {
            axis = null;
        }
        this.throwIfDisposed();
        return ops.argMin(this, axis);
    };
    Tensor.prototype.argMax = function (axis) {
        if (axis === void 0) {
            axis = null;
        }
        this.throwIfDisposed();
        return ops.argMax(this, axis);
    };
    Tensor.prototype.cast = function (dtype) {
        this.throwIfDisposed();
        return ops.cast(this, dtype);
    };
    Tensor.prototype.add = function (x) {
        this.throwIfDisposed();
        return ops.add(this, x);
    };
    Tensor.prototype.addStrict = function (x) {
        this.throwIfDisposed();
        return ops.addStrict(this, x);
    };
    Tensor.prototype.sub = function (x) {
        this.throwIfDisposed();
        return ops.sub(this, x);
    };
    Tensor.prototype.subStrict = function (x) {
        this.throwIfDisposed();
        return ops.subStrict(this, x);
    };
    Tensor.prototype.pow = function (exp) {
        this.throwIfDisposed();
        return ops.pow(this, exp);
    };
    Tensor.prototype.powStrict = function (exp) {
        this.throwIfDisposed();
        return ops.powStrict(this, exp);
    };
    Tensor.prototype.mul = function (x) {
        this.throwIfDisposed();
        return ops.mul(this, x);
    };
    Tensor.prototype.mulStrict = function (x) {
        this.throwIfDisposed();
        return ops.mulStrict(this, x);
    };
    Tensor.prototype.div = function (x) {
        this.throwIfDisposed();
        return ops.div(this, x);
    };
    Tensor.prototype.divStrict = function (x) {
        this.throwIfDisposed();
        return ops.divStrict(this, x);
    };
    Tensor.prototype.minimum = function (x) {
        this.throwIfDisposed();
        return ops.minimum(this, x);
    };
    Tensor.prototype.minimumStrict = function (x) {
        this.throwIfDisposed();
        return ops.minimumStrict(this, x);
    };
    Tensor.prototype.maximum = function (x) {
        this.throwIfDisposed();
        return ops.maximum(this, x);
    };
    Tensor.prototype.maximumStrict = function (x) {
        this.throwIfDisposed();
        return ops.maximumStrict(this, x);
    };
    Tensor.prototype.mod = function (x) {
        this.throwIfDisposed();
        return ops.mod(this, x);
    };
    Tensor.prototype.modStrict = function (x) {
        this.throwIfDisposed();
        return ops.modStrict(this, x);
    };
    Tensor.prototype.squaredDifference = function (x) {
        this.throwIfDisposed();
        return ops.squaredDifference(this, x);
    };
    Tensor.prototype.squaredDifferenceStrict = function (x) {
        this.throwIfDisposed();
        return ops.squaredDifferenceStrict(this, x);
    };
    Tensor.prototype.transpose = function (perm) {
        this.throwIfDisposed();
        return ops.transpose(this, perm);
    };
    Tensor.prototype.notEqual = function (x) {
        this.throwIfDisposed();
        return ops.notEqual(this, x);
    };
    Tensor.prototype.notEqualStrict = function (x) {
        this.throwIfDisposed();
        return ops.notEqualStrict(this, x);
    };
    Tensor.prototype.less = function (x) {
        this.throwIfDisposed();
        return ops.less(this, x);
    };
    Tensor.prototype.lessStrict = function (x) {
        this.throwIfDisposed();
        return ops.lessStrict(this, x);
    };
    Tensor.prototype.equal = function (x) {
        this.throwIfDisposed();
        return ops.equal(this, x);
    };
    Tensor.prototype.equalStrict = function (x) {
        this.throwIfDisposed();
        return ops.equalStrict(this, x);
    };
    Tensor.prototype.lessEqual = function (x) {
        this.throwIfDisposed();
        return ops.lessEqual(this, x);
    };
    Tensor.prototype.lessEqualStrict = function (x) {
        this.throwIfDisposed();
        return ops.lessEqualStrict(this, x);
    };
    Tensor.prototype.greater = function (x) {
        this.throwIfDisposed();
        return ops.greater(this, x);
    };
    Tensor.prototype.greaterStrict = function (x) {
        this.throwIfDisposed();
        return ops.greaterStrict(this, x);
    };
    Tensor.prototype.greaterEqual = function (x) {
        this.throwIfDisposed();
        return ops.greaterEqual(this, x);
    };
    Tensor.prototype.greaterEqualStrict = function (x) {
        this.throwIfDisposed();
        return ops.greaterEqualStrict(this, x);
    };
    Tensor.prototype.logicalAnd = function (x) {
        this.throwIfDisposed();
        return ops.logicalAnd(this, x);
    };
    Tensor.prototype.logicalOr = function (x) {
        this.throwIfDisposed();
        return ops.logicalOr(this, x);
    };
    Tensor.prototype.logicalNot = function () {
        this.throwIfDisposed();
        return ops.logicalNot(this);
    };
    Tensor.prototype.logicalXor = function (x) {
        this.throwIfDisposed();
        return ops.logicalXor(this, x);
    };
    Tensor.prototype.where = function (condition, x) {
        this.throwIfDisposed();
        return ops.where(condition, this, x);
    };
    Tensor.prototype.neg = function () {
        this.throwIfDisposed();
        return ops.neg(this);
    };
    Tensor.prototype.ceil = function () {
        this.throwIfDisposed();
        return ops.ceil(this);
    };
    Tensor.prototype.floor = function () {
        this.throwIfDisposed();
        return ops.floor(this);
    };
    Tensor.prototype.sign = function () {
        this.throwIfDisposed();
        return ops.sign(this);
    };
    Tensor.prototype.exp = function () {
        this.throwIfDisposed();
        return ops.exp(this);
    };
    Tensor.prototype.expm1 = function () {
        this.throwIfDisposed();
        return ops.expm1(this);
    };
    Tensor.prototype.log = function () {
        this.throwIfDisposed();
        return ops.log(this);
    };
    Tensor.prototype.log1p = function () {
        this.throwIfDisposed();
        return ops.log1p(this);
    };
    Tensor.prototype.sqrt = function () {
        this.throwIfDisposed();
        return ops.sqrt(this);
    };
    Tensor.prototype.rsqrt = function () {
        this.throwIfDisposed();
        return ops.rsqrt(this);
    };
    Tensor.prototype.square = function () {
        this.throwIfDisposed();
        return ops.square(this);
    };
    Tensor.prototype.reciprocal = function () {
        this.throwIfDisposed();
        return ops.reciprocal(this);
    };
    Tensor.prototype.abs = function () {
        this.throwIfDisposed();
        return ops.abs(this);
    };
    Tensor.prototype.clipByValue = function (min, max) {
        this.throwIfDisposed();
        return ops.clipByValue(this, min, max);
    };
    Tensor.prototype.relu = function () {
        this.throwIfDisposed();
        return ops.relu(this);
    };
    Tensor.prototype.elu = function () {
        this.throwIfDisposed();
        return ops.elu(this);
    };
    Tensor.prototype.selu = function () {
        this.throwIfDisposed();
        return ops.selu(this);
    };
    Tensor.prototype.leakyRelu = function (alpha) {
        if (alpha === void 0) {
            alpha = 0.2;
        }
        this.throwIfDisposed();
        return ops.leakyRelu(this, alpha);
    };
    Tensor.prototype.prelu = function (alpha) {
        this.throwIfDisposed();
        return ops.prelu(this, alpha);
    };
    Tensor.prototype.sigmoid = function () {
        this.throwIfDisposed();
        return ops.sigmoid(this);
    };
    Tensor.prototype.logSigmoid = function () {
        this.throwIfDisposed();
        return ops.logSigmoid(this);
    };
    Tensor.prototype.softplus = function () {
        this.throwIfDisposed();
        return ops.softplus(this);
    };
    Tensor.prototype.sin = function () {
        this.throwIfDisposed();
        return ops.sin(this);
    };
    Tensor.prototype.cos = function () {
        this.throwIfDisposed();
        return ops.cos(this);
    };
    Tensor.prototype.tan = function () {
        this.throwIfDisposed();
        return ops.tan(this);
    };
    Tensor.prototype.asin = function () {
        this.throwIfDisposed();
        return ops.asin(this);
    };
    Tensor.prototype.acos = function () {
        this.throwIfDisposed();
        return ops.acos(this);
    };
    Tensor.prototype.atan = function () {
        this.throwIfDisposed();
        return ops.atan(this);
    };
    Tensor.prototype.sinh = function () {
        this.throwIfDisposed();
        return ops.sinh(this);
    };
    Tensor.prototype.cosh = function () {
        this.throwIfDisposed();
        return ops.cosh(this);
    };
    Tensor.prototype.tanh = function () {
        this.throwIfDisposed();
        return ops.tanh(this);
    };
    Tensor.prototype.asinh = function () {
        this.throwIfDisposed();
        return ops.asinh(this);
    };
    Tensor.prototype.acosh = function () {
        this.throwIfDisposed();
        return ops.acosh(this);
    };
    Tensor.prototype.atanh = function () {
        this.throwIfDisposed();
        return ops.atanh(this);
    };
    Tensor.prototype.erf = function () {
        this.throwIfDisposed();
        return ops.erf(this);
    };
    Tensor.prototype.round = function () {
        this.throwIfDisposed();
        return ops.round(this);
    };
    Tensor.prototype.step = function (alpha) {
        if (alpha === void 0) {
            alpha = 0.0;
        }
        this.throwIfDisposed();
        return ops.step(this, alpha);
    };
    Tensor.prototype.softmax = function (dim) {
        if (dim === void 0) {
            dim = -1;
        }
        this.throwIfDisposed();
        return ops.softmax(this, dim);
    };
    Tensor.prototype.resizeBilinear = function (newShape2D, alignCorners) {
        if (alignCorners === void 0) {
            alignCorners = false;
        }
        this.throwIfDisposed();
        return ops.image.resizeBilinear(this, newShape2D, alignCorners);
    };
    Tensor.prototype.resizeNearestNeighbor = function (newShape2D, alignCorners) {
        if (alignCorners === void 0) {
            alignCorners = false;
        }
        this.throwIfDisposed();
        return ops.image.resizeNearestNeighbor(this, newShape2D, alignCorners);
    };
    Tensor.prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
        if (dataFormat === void 0) {
            dataFormat = 'NWC';
        }
        if (dilation === void 0) {
            dilation = 1;
        }
        this.throwIfDisposed();
        return ops.conv1d(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);
    };
    Tensor.prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
        if (dataFormat === void 0) {
            dataFormat = 'NHWC';
        }
        if (dilations === void 0) {
            dilations = [1, 1];
        }
        this.throwIfDisposed();
        return ops.conv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
    };
    Tensor.prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {
        this.throwIfDisposed();
        return ops.conv2dTranspose(this, filter, outputShape, strides, pad, dimRoundingMode);
    };
    Tensor.prototype.depthwiseConv2D = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
        if (dataFormat === void 0) {
            dataFormat = 'NHWC';
        }
        if (dilations === void 0) {
            dilations = [1, 1];
        }
        this.throwIfDisposed();
        return ops.depthwiseConv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
    };
    Tensor.prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {
        this.throwIfDisposed();
        return ops.avgPool(this, filterSize, strides, pad, dimRoundingMode);
    };
    Tensor.prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {
        this.throwIfDisposed();
        return ops.maxPool(this, filterSize, strides, pad, dimRoundingMode);
    };
    Tensor.prototype.localResponseNormalization = function (radius, bias, alpha, beta) {
        if (radius === void 0) {
            radius = 5;
        }
        if (bias === void 0) {
            bias = 1;
        }
        if (alpha === void 0) {
            alpha = 1;
        }
        if (beta === void 0) {
            beta = 0.5;
        }
        return ops.localResponseNormalization(this, radius, bias, alpha, beta);
    };
    Tensor.prototype.variable = function (trainable, name, dtype) {
        if (trainable === void 0) {
            trainable = true;
        }
        this.throwIfDisposed();
        return Variable.variable(this, trainable, name, dtype);
    };
    Tensor.prototype.unsortedSegmentSum = function (segmentIds, numSegments, axis) {
        if (axis === void 0) {
            axis = 0;
        }
        this.throwIfDisposed();
        return ops.unsortedSegmentSum(this, segmentIds, numSegments, axis);
    };
    Tensor.nextId = 0;
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "flatten", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "asScalar", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "as1D", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "as2D", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "as3D", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "as4D", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "asType", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "buffer", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "data", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "dataSync", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "dispose", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "toFloat", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "toInt", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "toBool", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "print", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "reshape", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "reshapeAs", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "expandDims", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "cumsum", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "squeeze", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "clone", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, "toString", null);
    Tensor = Tensor_1 = __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Tensor);
    return Tensor;
    var Tensor_1;
}();
exports.Tensor = Tensor;

var Variable = function (_super) {
    __extends(Variable, _super);
    function Variable(initialValue, trainable, name) {
        if (trainable === void 0) {
            trainable = true;
        }
        var _this = _super.call(this, initialValue.shape, initialValue.dtype, null, initialValue.dataId) || this;
        _this.trainable = trainable;
        _this.name = name;
        if (_this.name == null) {
            _this.name = Variable_1.nextVarId.toString();
            Variable_1.nextVarId++;
        }
        _environment.ENV.engine.registerVariable(_this);
        return _this;
    }
    Variable_1 = Variable;
    Variable.variable = function (initialValue, trainable, name, dtype) {
        if (trainable === void 0) {
            trainable = true;
        }
        if (dtype != null && dtype !== initialValue.dtype) {
            initialValue = initialValue.asType(dtype);
        }
        return new Variable_1(initialValue, trainable, name);
    };
    Variable.prototype.assign = function (newValue) {
        if (newValue.dtype !== this.dtype) {
            throw new Error("dtype of the new value (" + newValue.dtype + ") and " + ("previous value (" + this.dtype + ") must match"));
        }
        if (!util.arraysEqual(newValue.shape, this.shape)) {
            throw new Error("shape of the new value (" + newValue.shape + ") and " + ("previous value (" + this.shape + ") must match"));
        }
        _environment.ENV.engine.disposeTensor(this);
        this.dataId = newValue.dataId;
        _environment.ENV.engine.registerTensor(this);
    };
    Variable.nextVarId = 0;
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Variable.prototype, "assign", null);
    __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Creation' })], Variable, "variable", null);
    Variable = Variable_1 = __decorate([(0, _doc.doc)({ heading: 'Tensors', subheading: 'Classes' })], Variable);
    return Variable;
    var Variable_1;
}(Tensor);
exports.Variable = Variable;

var variable = Variable.variable;
exports.variable = variable;

function computeStrides(shape) {
    var rank = shape.length;
    if (rank < 2) {
        return [];
    }
    var strides = new Array(rank - 1);
    strides[rank - 2] = shape[rank - 1];
    for (var i = rank - 3; i >= 0; --i) {
        strides[i] = strides[i + 1] * shape[i + 1];
    }
    return strides;
}
//# sourceMappingURL=tensor.js.map
},{"./doc":"VkNo","./environment":"CAkW","./ops/ops":"bzyr","./tensor_util":"S7Qn","./util":"lDaM"}],"9hlo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Gradients = undefined;

var _doc = require("./doc");

var _environment = require("./environment");

var _globals = require("./globals");

var _tensor = require("./tensor");

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var Gradients = function () {
    function Gradients() {}
    Gradients.gradScope = function (nameOrScopeFn, scopeFn) {
        return (0, _globals.tidy)(nameOrScopeFn, scopeFn, true);
    };
    Gradients.grad = function (f) {
        util.assert(util.isFunction(f), 'The f passed in grad(f) must be a function');
        return function (x, dy) {
            util.assert(x instanceof _tensor.Tensor, 'The x passed in grad(f)(x) must be a tensor');
            util.assert(dy == null || dy instanceof _tensor.Tensor, 'The dy passed in grad(f)(x, dy) must be a tensor');
            return (0, _globals.tidy)(function () {
                var _a = _environment.ENV.engine.gradients(function () {
                    return f(x);
                }, [x], dy),
                    value = _a.value,
                    grads = _a.grads;
                if (dy != null) {
                    util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');
                }
                checkGrads(grads);
                return grads[0];
            });
        };
    };
    Gradients.grads = function (f) {
        util.assert(util.isFunction(f), 'The f passed in grads(f) must be a function');
        return function (args, dy) {
            util.assert(Array.isArray(args) && args.every(function (arg) {
                return arg instanceof _tensor.Tensor;
            }), 'The args passed in grads(f)(args) must be an array of tensors');
            util.assert(dy == null || dy instanceof _tensor.Tensor, 'The dy passed in grads(f)(args, dy) must be a tensor');
            return (0, _globals.tidy)(function () {
                var _a = _environment.ENV.engine.gradients(function () {
                    return f.apply(void 0, args);
                }, args, dy),
                    value = _a.value,
                    grads = _a.grads;
                if (dy != null) {
                    util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');
                }
                checkGrads(grads);
                return grads;
            });
        };
    };
    Gradients.valueAndGrad = function (f) {
        util.assert(util.isFunction(f), 'The f passed in valueAndGrad(f) must be a function');
        return function (x, dy) {
            util.assert(x instanceof _tensor.Tensor, 'The x passed in valueAndGrad(f)(x) must be a tensor');
            util.assert(dy == null || dy instanceof _tensor.Tensor, 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');
            var _a = _environment.ENV.engine.gradients(function () {
                return f(x);
            }, [x], dy),
                grads = _a.grads,
                value = _a.value;
            checkGrads(grads);
            return { grad: grads[0], value: value };
        };
    };
    Gradients.valueAndGrads = function (f) {
        util.assert(util.isFunction(f), 'The f passed in valueAndGrads(f) must be a function');
        return function (args, dy) {
            util.assert(Array.isArray(args) && args.every(function (arg) {
                return arg instanceof _tensor.Tensor;
            }), 'The args passed in valueAndGrads(f)(args) must be array of tensors');
            util.assert(dy == null || dy instanceof _tensor.Tensor, 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');
            var res = _environment.ENV.engine.gradients(function () {
                return f.apply(void 0, args);
            }, args, dy);
            if (dy != null) {
                util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');
            }
            checkGrads(res.grads);
            return res;
        };
    };
    Gradients.variableGrads = function (f, varList) {
        util.assert(util.isFunction(f), 'The f passed in variableGrads(f) must be a function');
        util.assert(varList == null || Array.isArray(varList) && varList.every(function (v) {
            return v instanceof _tensor.Variable;
        }), 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');
        if (varList == null) {
            varList = [];
            for (var varName in _environment.ENV.engine.registeredVariables) {
                varList.push(_environment.ENV.engine.registeredVariables[varName]);
            }
        }
        var originalVarCount = varList.length;
        varList = varList.filter(function (variable) {
            return variable.trainable;
        });
        util.assert(varList.length > 0, "variableGrads() expects at least one of the input variables to be " + ("trainable, but none of the " + originalVarCount + " variables is ") + "trainable.");
        var allowNoGradients = true;
        var _a = _environment.ENV.engine.gradients(f, varList, null, allowNoGradients),
            value = _a.value,
            grads = _a.grads;
        util.assert(grads.some(function (g) {
            return g != null;
        }), 'Cannot find a connection between any variable and the result of the ' + 'loss function y=f(x). Please make sure the operations that use ' + 'variables are inside the function f passed to minimize().');
        util.assert(value.rank === 0, "The f passed in variableGrads(f) must return a scalar, but it " + ("returned a rank-" + value.rank + " tensor"));
        var namedGrads = {};
        varList.forEach(function (v, i) {
            if (grads[i] != null) {
                namedGrads[v.name] = grads[i];
            }
        });
        return { value: value, grads: namedGrads };
    };
    Gradients.customGrad = function (f) {
        return _environment.ENV.engine.customGrad(f);
    };
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, "grad", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, "grads", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, "valueAndGrad", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, "valueAndGrads", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, "variableGrads", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Gradients' })], Gradients, "customGrad", null);
    return Gradients;
}();
exports.Gradients = Gradients;

function checkGrads(grads) {
    var numNullGradients = grads.filter(function (g) {
        return g == null;
    }).length;
    if (numNullGradients > 0) {
        throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
    }
}
//# sourceMappingURL=gradients.js.map
},{"./doc":"VkNo","./environment":"CAkW","./globals":"AeC1","./tensor":"Xe78","./util":"lDaM"}],"AeC1":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customGrad = exports.variableGrads = exports.valueAndGrads = exports.grads = exports.valueAndGrad = exports.grad = exports.time = exports.dispose = exports.keep = exports.tidy = undefined;

var _gradients = require('./gradients');

var _tracking = require('./tracking');

var tidy = exports.tidy = _tracking.Tracking.tidy;
var keep = exports.keep = _tracking.Tracking.keep;
var dispose = exports.dispose = _tracking.Tracking.dispose;
var time = exports.time = _tracking.Tracking.time;
var grad = exports.grad = _gradients.Gradients.grad;
var valueAndGrad = exports.valueAndGrad = _gradients.Gradients.valueAndGrad;
var grads = exports.grads = _gradients.Gradients.grads;
var valueAndGrads = exports.valueAndGrads = _gradients.Gradients.valueAndGrads;
var variableGrads = exports.variableGrads = _gradients.Gradients.variableGrads;
var customGrad = exports.customGrad = _gradients.Gradients.customGrad;
//# sourceMappingURL=globals.js.map
},{"./gradients":"9hlo","./tracking":"jCrq"}],"y/7t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Logger = exports.Profiler = undefined;

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var Profiler = function () {
    function Profiler(backendTimer, logger) {
        this.backendTimer = backendTimer;
        this.logger = logger;
        if (logger == null) {
            this.logger = new Logger();
        }
    }
    Profiler.prototype.profileKernel = function (name, f) {
        var _this = this;
        var result;
        var holdResultWrapperFn = function () {
            result = f();
        };
        var timer = this.backendTimer.time(holdResultWrapperFn);
        var vals = result.dataSync();
        util.checkForNaN(vals, result.dtype, name);
        timer.then(function (timing) {
            _this.logger.logKernelProfile(name, result, vals, timing.kernelMs);
        });
        return result;
    };
    return Profiler;
}();
exports.Profiler = Profiler;

var Logger = function () {
    function Logger() {}
    Logger.prototype.logKernelProfile = function (name, result, vals, timeMs) {
        var time = util.rightPad(timeMs + "ms", 9);
        var paddedName = util.rightPad(name, 25);
        var rank = result.rank;
        var size = result.size;
        var shape = util.rightPad(result.shape.toString(), 14);
        console.log("%c" + paddedName + "\t%c" + time + "\t%c" + rank + "D " + shape + "\t%c" + size, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange');
    };
    return Logger;
}();
exports.Logger = Logger;
//# sourceMappingURL=profiler.js.map
},{"./util":"lDaM"}],"FtOi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getFilteredNodesXToY = getFilteredNodesXToY;
exports.backpropagateGradients = backpropagateGradients;

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function getFilteredNodesXToY(tape, xs, y) {
    var tensorsFromX = {};
    var nodesFromX = {};
    for (var i = 0; i < xs.length; i++) {
        tensorsFromX[xs[i].id] = true;
    }
    for (var i = 0; i < tape.length; i++) {
        var node = tape[i];
        var nodeInputs = node.inputs;
        for (var inputName in nodeInputs) {
            var input = nodeInputs[inputName];
            var anyInputFromX = false;
            for (var j = 0; j < xs.length; j++) {
                if (tensorsFromX[input.id]) {
                    tensorsFromX[node.output.id] = true;
                    anyInputFromX = true;
                    nodesFromX[node.id] = true;
                    break;
                }
            }
            if (anyInputFromX) {
                break;
            }
        }
    }
    var tensorsLeadToY = {};
    tensorsLeadToY[y.id] = true;
    var nodesToY = {};
    for (var i = tape.length - 1; i >= 0; i--) {
        var node = tape[i];
        var nodeInputs = node.inputs;
        var outputs = [];
        outputs.push(node.output);
        for (var j = 0; j < outputs.length; j++) {
            if (tensorsLeadToY[outputs[j].id]) {
                for (var inputName in nodeInputs) {
                    tensorsLeadToY[nodeInputs[inputName].id] = true;
                    nodesToY[node.id] = true;
                }
                break;
            }
        }
    }
    var filteredTape = [];
    for (var i = 0; i < tape.length; i++) {
        var node = tape[i];
        if (nodesFromX[node.id] && nodesToY[node.id]) {
            var prunedInputs = {};
            for (var inputName in node.inputs) {
                var nodeInput = node.inputs[inputName];
                if (tensorsFromX[nodeInput.id]) {
                    prunedInputs[inputName] = nodeInput;
                }
            }
            var prunedNode = Object.assign({}, node);
            prunedNode.inputs = prunedInputs;
            prunedNode.output = node.output;
            filteredTape.push(prunedNode);
        }
    }
    return filteredTape;
}
function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape) {
    for (var i = filteredTape.length - 1; i >= 0; i--) {
        var node = filteredTape[i];
        var dy = tensorAccumulatedGradientMap[node.output.id];
        if (node.gradient == null) {
            throw new Error("Cannot compute gradient: gradient function not found " + ("for " + node.name + "."));
        }
        var inputGradients = node.gradient(dy);
        for (var inputName in node.inputs) {
            if (!(inputName in inputGradients)) {
                throw new Error("Cannot backprop through input " + inputName + ". " + ("Available gradients found: " + Object.keys(inputGradients) + "."));
            }
            var dx = inputGradients[inputName]();
            var x = node.inputs[inputName];
            if (!util.arraysEqual(dx.shape, x.shape)) {
                throw new Error("Error in gradient for op " + node.name + ". The gradient of input " + ("'" + inputName + "' has shape '" + dx.shape + "', which does not match ") + ("the shape of the input '" + x.shape + "'"));
            }
            if (tensorAccumulatedGradientMap[x.id] == null) {
                tensorAccumulatedGradientMap[x.id] = dx;
            } else {
                var curGradient = tensorAccumulatedGradientMap[x.id];
                tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);
                curGradient.dispose();
            }
        }
    }
}
//# sourceMappingURL=tape.js.map
},{"./util":"lDaM"}],"PnqH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Engine = undefined;

var _environment = require("./environment");

var _globals = require("./globals");

var _ops = require("./ops/ops");

var ops = _interopRequireWildcard(_ops);

var _profiler = require("./profiler");

var _tape = require("./tape");

var _tensor = require("./tensor");

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var Engine = function () {
    function Engine(backend, safeMode) {
        this.backend = backend;
        this.safeMode = safeMode;
        this.registeredVariables = {};
        this.refCounter = new WeakMap();
        this.nextTapeNodeId = 0;
        this.numBytes = 0;
        this.numTensors = 0;
        this.numDataBuffers = 0;
        this.gradientScopeCount = 0;
        this.customGradientDepth = 0;
        this.activeScope = { keep: [], track: [] };
        this.scopeStack = [this.activeScope];
        this.profiler = new _profiler.Profiler(backend);
    }
    Engine.prototype.runKernel = function (forwardFunc, inputs, backwardsFunc) {
        var _this = this;
        var result;
        var saved = [];
        var saveFunc = function (x) {
            saved.push(x);
            return x;
        };
        var scopeName = this.activeScope.name;
        this.customGradientDepth++;
        if (!_environment.ENV.get('DEBUG')) {
            result = forwardFunc(this.backend, saveFunc);
        } else {
            result = this.profiler.profileKernel(scopeName, function () {
                return forwardFunc(_this.backend, saveFunc);
            });
        }
        this.customGradientDepth--;
        if (this.shouldRecord()) {
            var tapeNode = {
                id: this.nextTapeNodeId++,
                name: scopeName,
                inputs: inputs,
                output: result
            };
            if (backwardsFunc != null) {
                tapeNode.gradient = function (dy) {
                    return backwardsFunc(dy, saved);
                };
            }
            this.activeTape.push(tapeNode);
        }
        return result;
    };
    Engine.prototype.registerTensor = function (a) {
        var refCount = this.refCounter.has(a.dataId) ? this.refCounter.get(a.dataId) : 0;
        this.numTensors++;
        if (refCount === 0) {
            this.numDataBuffers++;
            this.numBytes += util.sizeFromShape(a.shape) * util.bytesPerElement(a.dtype);
            this.backend.register(a.dataId, a.shape, a.dtype);
        }
        this.refCounter.set(a.dataId, refCount + 1);
        if (!(a instanceof _tensor.Variable)) {
            this.track(a);
        }
    };
    Engine.prototype.registerVariable = function (v) {
        if (this.registeredVariables[v.name] != null) {
            throw new Error("Variable with name " + v.name + " was already registered");
        }
        this.registeredVariables[v.name] = v;
    };
    Engine.prototype.disposeTensor = function (a) {
        if (!this.refCounter.has(a.dataId)) {
            return;
        }
        this.numTensors--;
        var refCount = this.refCounter.get(a.dataId);
        if (refCount <= 1) {
            this.refCounter.delete(a.dataId);
            this.backend.disposeData(a.dataId);
            this.numDataBuffers--;
            this.numBytes -= util.sizeFromShape(a.shape) * util.bytesPerElement(a.dtype);
        } else {
            this.refCounter.set(a.dataId, refCount - 1);
        }
    };
    Engine.prototype.disposeVariables = function () {
        for (var varName in this.registeredVariables) {
            var v = this.registeredVariables[varName];
            this.disposeTensor(v);
            delete this.registeredVariables[varName];
        }
    };
    Engine.prototype.memory = function () {
        var info = this.backend.memory();
        info.numTensors = this.numTensors;
        info.numDataBuffers = this.numDataBuffers;
        info.numBytes = this.numBytes;
        return info;
    };
    Engine.prototype.shouldRecord = function () {
        return this.activeTape != null && this.customGradientDepth === 0;
    };
    Engine.prototype.addTapeNode = function (inputs, result, gradientsFunc) {
        var inputsMap = {};
        inputs.forEach(function (input, idx) {
            inputsMap[idx] = input;
        });
        var gradient = function (dy) {
            var res = gradientsFunc(dy);
            var resMap = {};
            res.forEach(function (r, idx) {
                resMap[idx] = function () {
                    return r;
                };
            });
            return resMap;
        };
        var tapeNode = {
            id: this.nextTapeNodeId++,
            name: this.activeScope.name,
            inputs: inputsMap,
            output: result,
            gradient: gradient
        };
        this.activeTape.push(tapeNode);
    };
    Engine.prototype.keep = function (result) {
        if (this.scopeStack.length === 1 && _environment.ENV.engine.safeMode) {
            throw new Error('Safe mode is ON. Enclose all tensor operations inside tf.tidy(): ' + 'tf.tidy(() => {...}) to avoid memory leaks.');
        }
        this.activeScope.keep.push(result);
        return result;
    };
    Engine.prototype.startScope = function (name, gradientsMode) {
        if (gradientsMode === void 0) {
            gradientsMode = false;
        }
        if (gradientsMode && this.gradientScopeCount === 0) {
            this.activeTape = [];
        }
        if (gradientsMode) {
            this.gradientScopeCount++;
        }
        var scopeInfo = { keep: [], track: [] };
        if (name) {
            scopeInfo.name = name;
        }
        this.scopeStack.push(scopeInfo);
        this.activeScope = scopeInfo;
    };
    Engine.prototype.endScope = function (result, gradientsMode) {
        var _this = this;
        if (gradientsMode === void 0) {
            gradientsMode = false;
        }
        if (gradientsMode) {
            this.gradientScopeCount--;
            if (this.gradientScopeCount === 0) {
                this.activeTape = null;
            }
        }
        var tensorsToKeep = this.activeScope.keep;
        var tensorsToTrackInParent = util.extractTensorsFromContainer(result);
        tensorsToKeep = tensorsToKeep.concat(tensorsToTrackInParent);
        for (var i = 0; i < this.activeScope.track.length; i++) {
            var tensor = this.activeScope.track[i];
            if (util.isTensorInList(tensor, tensorsToKeep)) {
                continue;
            }
            if (this.activeTape != null) {
                tensorsToTrackInParent.push(tensor);
            } else {
                tensor.dispose();
            }
        }
        this.scopeStack.pop();
        this.activeScope = this.scopeStack.length === 0 ? { keep: [], track: [] } : this.scopeStack[this.scopeStack.length - 1];
        tensorsToTrackInParent.forEach(function (tensor) {
            if (!util.isTensorInList(tensor, _this.activeScope.keep)) {
                _this.track(tensor);
            }
        });
    };
    Engine.prototype.dispose = function () {};
    Engine.prototype.gradients = function (f, xs, dy, allowNoGradients) {
        var _this = this;
        if (allowNoGradients === void 0) {
            allowNoGradients = false;
        }
        util.assert(xs.length > 0, 'gradients() received an empty list of xs.');
        return (0, _globals.tidy)('gradients', function () {
            var y = f();
            util.assert(y instanceof _tensor.Tensor, 'The result y returned by f() must be a tensor.');
            var filteredTape = (0, _tape.getFilteredNodesXToY)(_this.activeTape, xs, y);
            if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
                throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');
            }
            var accumulatedGradientMap = {};
            accumulatedGradientMap[y.id] = dy == null ? ops.ones(y.shape) : dy;
            (0, _tape.backpropagateGradients)(accumulatedGradientMap, filteredTape);
            var grads = xs.map(function (x) {
                return accumulatedGradientMap[x.id];
            });
            return { value: y, grads: grads };
        }, true);
    };
    Engine.prototype.customGrad = function (f) {
        var _this = this;
        util.assert(util.isFunction(f), 'The f passed in customGrad(f) must be a function.');
        return function () {
            var inputs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                inputs[_i] = arguments[_i];
            }
            util.assert(inputs.every(function (t) {
                return t instanceof _tensor.Tensor;
            }), 'The args passed in customGrad(f)(x1, x2,...) must all be tensors');
            _this.customGradientDepth++;
            var gradientsFunc;
            var gradientsMode = true;
            var result = (0, _globals.tidy)(f.name, function () {
                var _a = f.apply(void 0, inputs),
                    value = _a.value,
                    gradFunc = _a.gradFunc;
                util.assert(value instanceof _tensor.Tensor, 'The function f passed in customGrad(f) must return an object ' + 'where `obj.value` is a tensor');
                util.assert(util.isFunction(gradFunc), 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function.');
                gradientsFunc = gradFunc;
                return value;
            }, gradientsMode);
            _this.customGradientDepth--;
            if (_this.shouldRecord()) {
                var gradFunc = function (dy) {
                    var res = gradientsFunc(dy);
                    var grads = Array.isArray(res) ? res : [res];
                    util.assert(grads.length === inputs.length, 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function that returns the same ' + 'number of tensors as inputs passed to f(...).');
                    util.assert(grads.every(function (t) {
                        return t instanceof _tensor.Tensor;
                    }), 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function that returns a list of ' + 'only tensors.');
                    return grads;
                };
                _this.addTapeNode(inputs, result, gradFunc);
            }
            return result;
        };
    };
    Engine.prototype.write = function (dataId, values) {
        this.backend.write(dataId, values);
    };
    Engine.prototype.readSync = function (dataId) {
        return this.backend.readSync(dataId);
    };
    Engine.prototype.read = function (dataId) {
        return this.backend.read(dataId);
    };
    Engine.prototype.fromPixels = function (pixels, numChannels) {
        return this.backend.fromPixels(pixels, numChannels);
    };
    Engine.prototype.time = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var start, timingInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        start = performance.now();
                        return [4, this.backend.time(query)];
                    case 1:
                        timingInfo = _a.sent();
                        timingInfo.wallMs = performance.now() - start;
                        return [2, timingInfo];
                }
            });
        });
    };
    Engine.prototype.track = function (result) {
        if (this.scopeStack.length === 1 && this.safeMode) {
            throw new Error('Safe mode is ON. Enclose all tensor operations inside tf.tidy(): ' + 'tf.tidy(() => {op();...}); to avoid memory leaks.');
        }
        this.activeScope.track.push(result);
        return result;
    };
    return Engine;
}();
exports.Engine = Engine;
//# sourceMappingURL=engine.js.map
},{"./environment":"CAkW","./globals":"AeC1","./ops/ops":"bzyr","./profiler":"y/7t","./tape":"FtOi","./tensor":"Xe78","./util":"lDaM"}],"CAkW":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ENV = exports.Environment = exports.URL_PROPERTIES = exports.Type = undefined;

var _device_util = require("./device_util");

var device_util = _interopRequireWildcard(_device_util);

var _doc = require("./doc");

var _engine = require("./engine");

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Type = exports.Type = undefined;
(function (Type) {
    Type[Type["NUMBER"] = 0] = "NUMBER";
    Type[Type["BOOLEAN"] = 1] = "BOOLEAN";
    Type[Type["STRING"] = 2] = "STRING";
})(Type || (exports.Type = Type = {}));
var URL_PROPERTIES = exports.URL_PROPERTIES = [{ name: 'DEBUG', type: Type.BOOLEAN }, { name: 'IS_BROWSER', type: Type.BOOLEAN }, { name: 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', type: Type.NUMBER }, { name: 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', type: Type.BOOLEAN }, { name: 'WEBGL_VERSION', type: Type.NUMBER }, { name: 'WEBGL_FLOAT_TEXTURE_ENABLED', type: Type.BOOLEAN }, {
    name: 'WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED',
    type: Type.BOOLEAN
}, { name: 'BACKEND', type: Type.STRING }];
function hasExtension(gl, extensionName) {
    var ext = gl.getExtension(extensionName);
    return ext != null;
}
function getWebGLRenderingContext(webGLVersion) {
    if (webGLVersion === 0) {
        throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');
    }
    var tempCanvas = document.createElement('canvas');
    if (webGLVersion === 1) {
        return tempCanvas.getContext('webgl') || tempCanvas.getContext('experimental-webgl');
    }
    return tempCanvas.getContext('webgl2');
}
function loseContext(gl) {
    if (gl != null) {
        var loseContextExtension = gl.getExtension('WEBGL_lose_context');
        if (loseContextExtension == null) {
            throw new Error('Extension WEBGL_lose_context not supported on this browser.');
        }
        loseContextExtension.loseContext();
    }
}
function isWebGLVersionEnabled(webGLVersion) {
    var gl = getWebGLRenderingContext(webGLVersion);
    if (gl != null) {
        loseContext(gl);
        return true;
    }
    return false;
}
function getWebGLDisjointQueryTimerVersion(webGLVersion) {
    if (webGLVersion === 0) {
        return 0;
    }
    var queryTimerVersion;
    var gl = getWebGLRenderingContext(webGLVersion);
    if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') && webGLVersion === 2) {
        queryTimerVersion = 2;
    } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {
        queryTimerVersion = 1;
    } else {
        queryTimerVersion = 0;
    }
    if (gl != null) {
        loseContext(gl);
    }
    return queryTimerVersion;
}
function isFloatTextureReadPixelsEnabled(webGLVersion) {
    if (webGLVersion === 0) {
        return false;
    }
    var gl = getWebGLRenderingContext(webGLVersion);
    if (webGLVersion === 1) {
        if (!hasExtension(gl, 'OES_texture_float')) {
            return false;
        }
    } else {
        if (!hasExtension(gl, 'EXT_color_buffer_float')) {
            return false;
        }
    }
    var frameBuffer = gl.createFramebuffer();
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    var internalFormat = webGLVersion === 2 ? gl.RGBA32F : gl.RGBA;
    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    var frameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, new Float32Array(4));
    var readPixelsNoError = gl.getError() === gl.NO_ERROR;
    loseContext(gl);
    return frameBufferComplete && readPixelsNoError;
}
function isWebGLGetBufferSubDataAsyncExtensionEnabled(webGLVersion) {
    if (webGLVersion > 0) {
        return false;
    }
    if (webGLVersion !== 2) {
        return false;
    }
    var gl = getWebGLRenderingContext(webGLVersion);
    var isEnabled = hasExtension(gl, 'WEBGL_get_buffer_sub_data_async');
    loseContext(gl);
    return isEnabled;
}
var Environment = function () {
    function Environment(features) {
        this.features = {};
        this.registry = {};
        if (features != null) {
            this.features = features;
        }
        if (this.get('DEBUG')) {
            console.warn('Debugging mode is ON. The output of every math call will ' + 'be downloaded to CPU and checked for NaNs. ' + 'This significantly impacts performance.');
        }
    }
    Environment.setBackend = function (backendType, safeMode) {
        if (safeMode === void 0) {
            safeMode = false;
        }
        if (!(backendType in ENV.registry)) {
            throw new Error("Backend type '" + backendType + "' not found in registry");
        }
        ENV.initBackend(backendType, safeMode);
    };
    Environment.getBackend = function () {
        ENV.initDefaultBackend();
        return ENV.currentBackend;
    };
    Environment.disposeVariables = function () {
        ENV.engine.disposeVariables();
    };
    Environment.memory = function () {
        return ENV.engine.memory();
    };
    Environment.prototype.get = function (feature) {
        if (feature in this.features) {
            return this.features[feature];
        }
        this.features[feature] = this.evaluateFeature(feature);
        return this.features[feature];
    };
    Environment.prototype.set = function (feature, value) {
        this.features[feature] = value;
    };
    Environment.prototype.getBestBackendType = function () {
        var _this = this;
        if (Object.keys(this.registry).length === 0) {
            throw new Error('No backend found in registry.');
        }
        var sortedBackends = Object.keys(this.registry).map(function (name) {
            return { name: name, entry: _this.registry[name] };
        }).sort(function (a, b) {
            return b.entry.priority - a.entry.priority;
        });
        return sortedBackends[0].name;
    };
    Environment.prototype.evaluateFeature = function (feature) {
        if (feature === 'DEBUG') {
            return false;
        } else if (feature === 'IS_BROWSER') {
            return typeof window !== 'undefined';
        } else if (feature === 'BACKEND') {
            return this.getBestBackendType();
        } else if (feature === 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') {
            var webGLVersion = this.get('WEBGL_VERSION');
            if (webGLVersion === 0) {
                return 0;
            }
            return getWebGLDisjointQueryTimerVersion(webGLVersion);
        } else if (feature === 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') {
            return this.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !device_util.isMobile();
        } else if (feature === 'WEBGL_VERSION') {
            if (isWebGLVersionEnabled(2)) {
                return 2;
            } else if (isWebGLVersionEnabled(1)) {
                return 1;
            }
            return 0;
        } else if (feature === 'WEBGL_FLOAT_TEXTURE_ENABLED') {
            return isFloatTextureReadPixelsEnabled(this.get('WEBGL_VERSION'));
        } else if (feature === 'WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED') {
            return isWebGLGetBufferSubDataAsyncExtensionEnabled(this.get('WEBGL_VERSION'));
        }
        throw new Error("Unknown feature " + feature + ".");
    };
    Environment.prototype.setFeatures = function (features) {
        this.features = features;
    };
    Environment.prototype.reset = function () {
        this.features = getFeaturesFromURL();
        if (this.globalEngine != null) {
            this.globalEngine.dispose();
            this.globalEngine = null;
        }
    };
    Environment.prototype.initBackend = function (backendType, safeMode) {
        if (safeMode === void 0) {
            safeMode = false;
        }
        this.currentBackend = backendType;
        if (this.globalEngine != null) {
            this.globalEngine.dispose();
        }
        var backend = ENV.findBackend(backendType);
        this.globalEngine = new _engine.Engine(backend, safeMode);
    };
    Environment.prototype.findBackend = function (name) {
        if (!(name in this.registry)) {
            return null;
        }
        return this.registry[name].backend;
    };
    Environment.prototype.registerBackend = function (name, factory, priority) {
        if (priority === void 0) {
            priority = 1;
        }
        if (name in this.registry) {
            console.warn(name + " backend was already registered");
        }
        try {
            var backend = factory();
            this.registry[name] = { backend: backend, priority: priority };
            return true;
        } catch (err) {
            console.warn(err.message);
            return false;
        }
    };
    Environment.prototype.removeBackend = function (name) {
        if (!(name in this.registry)) {
            throw new Error(name + " backend not found in registry");
        }
        this.registry[name].backend.dispose();
        delete this.registry[name];
    };
    Object.defineProperty(Environment.prototype, "engine", {
        get: function () {
            this.initDefaultBackend();
            return this.globalEngine;
        },
        enumerable: true,
        configurable: true
    });
    Environment.prototype.initDefaultBackend = function () {
        if (this.globalEngine == null) {
            this.initBackend(ENV.get('BACKEND'), false);
        }
    };
    __decorate([(0, _doc.doc)({ heading: 'Environment' })], Environment, "setBackend", null);
    __decorate([(0, _doc.doc)({ heading: 'Environment' })], Environment, "getBackend", null);
    __decorate([(0, _doc.doc)({ heading: 'Environment' })], Environment, "disposeVariables", null);
    __decorate([(0, _doc.doc)({ heading: 'Performance', subheading: 'Memory' })], Environment, "memory", null);
    return Environment;
}();
exports.Environment = Environment;

var TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
function getFeaturesFromURL() {
    var features = {};
    if (typeof window === 'undefined' || typeof window.location === 'undefined') {
        return features;
    }
    var urlParams = util.getQueryParams(window.location.search);
    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
        var urlFlags_1 = {};
        var keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
        keyValues.forEach(function (keyValue) {
            var _a = keyValue.split(':'),
                key = _a[0],
                value = _a[1];
            urlFlags_1[key] = value;
        });
        URL_PROPERTIES.forEach(function (urlProperty) {
            if (urlProperty.name in urlFlags_1) {
                console.log("Setting feature override from URL " + urlProperty.name + ": " + ("" + urlFlags_1[urlProperty.name]));
                if (urlProperty.type === Type.NUMBER) {
                    features[urlProperty.name] = +urlFlags_1[urlProperty.name];
                } else if (urlProperty.type === Type.BOOLEAN) {
                    features[urlProperty.name] = urlFlags_1[urlProperty.name] === 'true';
                } else if (urlProperty.type === Type.STRING) {
                    features[urlProperty.name] = urlFlags_1[urlProperty.name];
                } else {
                    console.warn("Unknown URL param: " + urlProperty.name + ".");
                }
            }
        });
    }
    return features;
}
function getGlobalNamespace() {
    var ns;
    if (typeof window !== 'undefined') {
        ns = window;
    } else if (typeof global !== 'undefined') {
        ns = global;
    } else {
        throw new Error('Could not find a global object');
    }
    return ns;
}
function getOrMakeEnvironment() {
    var ns = getGlobalNamespace();
    ns.ENV = ns.ENV || new Environment(getFeaturesFromURL());
    return ns.ENV;
}
var ENV = exports.ENV = getOrMakeEnvironment();
//# sourceMappingURL=environment.js.map
},{"./device_util":"F4Cd","./doc":"VkNo","./engine":"PnqH","./util":"lDaM"}],"axmJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.computeOptimalWindowSize = computeOptimalWindowSize;
var PARALLELIZE_THRESHOLD = exports.PARALLELIZE_THRESHOLD = 30;
function computeOptimalWindowSize(inSize) {
    if (inSize <= PARALLELIZE_THRESHOLD) {
        return inSize;
    }
    return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));
}
function nearestDivisor(size, start) {
    for (var i = start; i < size; ++i) {
        if (size % i === 0) {
            return i;
        }
    }
    return size;
}
//# sourceMappingURL=reduce_util.js.map
},{}],"1Fpp":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.castTensor = castTensor;
exports.reshapeTensor = reshapeTensor;

var _ = require('..');

var _array_ops = require('../ops/array_ops');

function castTensor(x, dtype, backend) {
    if (!_.util.hasEncodingLoss(x.dtype, dtype)) {
        return _.Tensor.make(x.shape, { dataId: x.dataId }, dtype);
    }
    if (dtype === 'int32') {
        return backend.int(x);
    } else if (dtype === 'bool') {
        return backend.notEqual(x, _array_ops.ArrayOps.scalar(0, x.dtype));
    } else {
        throw new Error("Error in Cast: unknown dtype argument (" + dtype + ")");
    }
}
function reshapeTensor(x, shape) {
    return _.Tensor.make(shape, { dataId: x.dataId }, x.dtype);
}
//# sourceMappingURL=backend_util.js.map
},{"..":"Ppj4","../ops/array_ops":"2sZK"}],"XE9t":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var ArgMinMaxProgram = function () {
    function ArgMinMaxProgram(reduceInfo, op, firstPass) {
        this.variableNames = ['A'];
        var windowSize = reduceInfo.windowSize;
        var batchSize = reduceInfo.batchSize;
        var inSize = reduceInfo.inSize;
        var outSize = Math.ceil(inSize / windowSize);
        if (!firstPass) {
            this.variableNames.push('bestIndicesA');
        }
        this.outputShape = [batchSize, outSize];
        var compOp = op === 'max' ? '>' : '<';
        var indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + windowSize + ";\n\n        int bestIndex = 0;\n        float bestValue = getA(batch, inOffset);\n\n        for (int i = 0; i < " + windowSize + "; i++) {\n          int inIdx = " + indexSnippet + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + compOp + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
    }
    return ArgMinMaxProgram;
}();
exports.ArgMinMaxProgram = ArgMinMaxProgram;
//# sourceMappingURL=argminmax_gpu.js.map
},{}],"RHxD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var AvgPool2DBackpropProgram = function () {
    function AvgPool2DBackpropProgram(convInfo) {
        this.variableNames = ['dy'];
        this.outputShape = convInfo.inShape;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var avgMultiplier = 1 / (filterHeight * filterWidth);
        this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n      const float avgMultiplier = float(" + avgMultiplier + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return AvgPool2DBackpropProgram;
}();
exports.AvgPool2DBackpropProgram = AvgPool2DBackpropProgram;
//# sourceMappingURL=avg_pool_backprop_gpu.js.map
},{}],"k/dr":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BatchNormProgram = undefined;

var _broadcast_util = require('../../ops/broadcast_util');

var broadcast_util = _interopRequireWildcard(_broadcast_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var BatchNormProgram = function () {
    function BatchNormProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
        this.outputShape = [];
        this.supportsBroadcasting = true;
        this.variableNames = ['x', 'mean', 'variance'];
        broadcast_util.assertAndGetBroadcastShape(xShape, meanShape);
        broadcast_util.assertAndGetBroadcastShape(xShape, varianceShape);
        var offsetSnippet = '0.0';
        if (offsetShape != null) {
            broadcast_util.assertAndGetBroadcastShape(xShape, offsetShape);
            this.variableNames.push('offset');
            offsetSnippet = 'getOffsetAtOutCoords()';
        }
        var scaleSnippet = '1.0';
        if (scaleShape != null) {
            broadcast_util.assertAndGetBroadcastShape(xShape, scaleShape);
            this.variableNames.push('scale');
            scaleSnippet = 'getScaleAtOutCoords()';
        }
        this.outputShape = xShape;
        this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + offsetSnippet + ";\n        float scale = " + scaleSnippet + ";\n        float inv = scale * inversesqrt(variance + float(" + varianceEpsilon + "));\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
    }
    return BatchNormProgram;
}();
exports.BatchNormProgram = BatchNormProgram;
//# sourceMappingURL=batchnorm_gpu.js.map
},{"../../ops/broadcast_util":"lcGM"}],"N1Gy":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BinaryOpProgram = exports.ELU_DER = exports.ATAN2 = exports.MOD = exports.MIN = exports.MAX = exports.LOGICAL_OR = exports.LOGICAL_AND = exports.GREATER_EQUAL = exports.GREATER = exports.LESS_EQUAL = exports.LESS = exports.NOT_EQUAL = exports.EQUAL = exports.SQUARED_DIFFERENCE = exports.POW = exports.INT_DIV = exports.DIV = exports.MUL = exports.SUB = exports.ADD = undefined;

var _broadcast_util = require('../../ops/broadcast_util');

var broadcast_util = _interopRequireWildcard(_broadcast_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var CHECK_NAN_SNIPPET = "\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n";
var ADD = exports.ADD = 'return a + b;';
var SUB = exports.SUB = 'return a - b;';
var MUL = exports.MUL = 'return a * b;';
var DIV = exports.DIV = 'return a / b;';
var INT_DIV = exports.INT_DIV = "\n  float resultSign = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  int result = ia / ib;\n  int amodb = ia - ib * result;\n\n  if (resultSign < 0.0 && amodb != 0) {\n    result -= 1;\n  }\n  return float(result);\n";
var POW = exports.POW = "\n  return (round(mod(b, 2.0)) == 0 || round(mod(b, 2.0)) == 2) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n";
var SQUARED_DIFFERENCE = exports.SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
var EQUAL = exports.EQUAL = "return float(a == b);";
var NOT_EQUAL = exports.NOT_EQUAL = "return float(a != b);";
var LESS = exports.LESS = "return float(a < b);";
var LESS_EQUAL = exports.LESS_EQUAL = "return float(a <= b);";
var GREATER = exports.GREATER = "return float(a > b);";
var GREATER_EQUAL = exports.GREATER_EQUAL = "return float(a >= b);";
var LOGICAL_AND = exports.LOGICAL_AND = "return float(a >= 1.0 && b >= 1.0);";
var LOGICAL_OR = exports.LOGICAL_OR = "return float(a >= 1.0 || b >= 1.0);";
var MAX = exports.MAX = CHECK_NAN_SNIPPET + "\n  return max(a, b);\n";
var MIN = exports.MIN = CHECK_NAN_SNIPPET + "\n  return min(a, b);\n";
var MOD = exports.MOD = "return mod(a, b);";
var ATAN2 = exports.ATAN2 = CHECK_NAN_SNIPPET + "\n  return atan(a, b);\n";
var ELU_DER = exports.ELU_DER = "return (b >= 1.0) ? a : a * (b + 1.0);";
var BinaryOpProgram = function () {
    function BinaryOpProgram(op, aShape, bShape) {
        this.variableNames = ['A', 'B'];
        this.supportsBroadcasting = true;
        this.outputShape = broadcast_util.assertAndGetBroadcastShape(aShape, bShape);
        this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + op + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
    }
    return BinaryOpProgram;
}();
exports.BinaryOpProgram = BinaryOpProgram;
//# sourceMappingURL=binaryop_gpu.js.map
},{"../../ops/broadcast_util":"lcGM"}],"sRt9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var ClipProgram = function () {
    function ClipProgram(aShape, min, max) {
        this.variableNames = ['A'];
        this.outputShape = aShape;
        var minFixed = min.toFixed(20);
        var maxFixed = max.toFixed(20);
        this.userCode = "\n      void main() {\n        float value = getAAtOutCoords();\n        if (isNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, " + minFixed + ", " + maxFixed + "));\n      }\n    ";
    }
    return ClipProgram;
}();
exports.ClipProgram = ClipProgram;
//# sourceMappingURL=clip_gpu.js.map
},{}],"GNMJ":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConcatProgram = undefined;

var _concat_util = require('../../ops/concat_util');

var concat_util = _interopRequireWildcard(_concat_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var ConcatProgram = function () {
    function ConcatProgram(aShape, bShape) {
        this.variableNames = ['A', 'B'];
        this.outputShape = [];
        this.outputShape = concat_util.computeOutShape(aShape, bShape, 1);
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        float value = 0.0;\n        if (yC < " + aShape[1] + ") {\n          value = getA(yR, yC);\n        } else {\n          yC -= " + aShape[1] + ";\n          value = getB(yR, yC);\n        }\n\n        setOutput(value);\n      }\n    ";
    }
    return ConcatProgram;
}();
exports.ConcatProgram = ConcatProgram;
//# sourceMappingURL=concat_gpu.js.map
},{"../../ops/concat_util":"NP2Z"}],"sdaQ":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var Conv2DDerFilterProgram = function () {
    function Conv2DDerFilterProgram(convInfo) {
        this.variableNames = ['x', 'dy'];
        this.outputShape = convInfo.filterShape;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + convInfo.batchSize + "; b++) {\n          for (int yR = 0; yR < " + convInfo.outHeight + "; yR++) {\n            int xR = wR + yR * " + strideHeight + " - " + padTop + ";\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + convInfo.outWidth + "; yC++) {\n              int xC = wC + yC * " + strideWidth + " - " + padLeft + ";\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return Conv2DDerFilterProgram;
}();
exports.Conv2DDerFilterProgram = Conv2DDerFilterProgram;

var Conv2DDerInputProgram = function () {
    function Conv2DDerInputProgram(convInfo) {
        this.variableNames = ['dy', 'W'];
        this.outputShape = convInfo.inShape;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + filterHeight + " - 1 - wR;\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + filterWidth + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + convInfo.outChannels + "; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return Conv2DDerInputProgram;
}();
exports.Conv2DDerInputProgram = Conv2DDerInputProgram;
//# sourceMappingURL=conv_backprop_gpu.js.map
},{}],"015I":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var DepthwiseConv2DDerFilterProgram = function () {
    function DepthwiseConv2DDerFilterProgram(convInfo) {
        this.variableNames = ['x', 'dy'];
        this.outputShape = convInfo.filterShape;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        var channelMul = convInfo.outChannels / convInfo.inChannels;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + channelMul + " + dm;\n\n        float dotProd = 0.0;\n\n        // TODO: Vec4 over the batch size\n        for (int b = 0; b < " + convInfo.batchSize + "; b++) {\n          for (int yR = 0; yR < " + convInfo.outHeight + "; yR++) {\n            int xR = wR + yR * " + strideHeight + " - " + padTop + ";\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + convInfo.outWidth + "; yC++) {\n              int xC = wC + yC * " + strideWidth + " - " + padLeft + ";\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return DepthwiseConv2DDerFilterProgram;
}();
exports.DepthwiseConv2DDerFilterProgram = DepthwiseConv2DDerFilterProgram;

var DepthwiseConv2DDerInputProgram = function () {
    function DepthwiseConv2DDerInputProgram(convInfo) {
        this.variableNames = ['dy', 'W'];
        this.outputShape = convInfo.inShape;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var channelMul = convInfo.outChannels / convInfo.inChannels;
        this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + filterHeight + " - 1 - wR;\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + filterWidth + " - 1 - wC;\n\n            // TODO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + channelMul + "; dm++) {\n              int d2 = d1 * " + channelMul + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return DepthwiseConv2DDerInputProgram;
}();
exports.DepthwiseConv2DDerInputProgram = DepthwiseConv2DDerInputProgram;
//# sourceMappingURL=conv_backprop_gpu_depthwise.js.map
},{}],"31ux":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var Conv2DProgram = function () {
    function Conv2DProgram(convInfo) {
        this.variableNames = ['x', 'W'];
        this.outputShape = convInfo.outShape;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var dilationHeight = convInfo.dilationHeight;
        var dilationWidth = convInfo.dilationWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
        var inputDepthVec4Remainder = convInfo.inChannels % 4;
        this.userCode = "\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          int xR = xRCorner + wR * " + dilationHeight + ";\n\n          if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            int xC = xCCorner + wC * " + dilationWidth + ";\n\n            if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + inputDepthNearestVec4 + "; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if (" + (inputDepthVec4Remainder === 1) + ") {\n              dotProd +=\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + ") *\n                getW(wR, wC, " + inputDepthNearestVec4 + ", d2);\n            } else if (" + (inputDepthVec4Remainder === 2) + ") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + "),\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, " + inputDepthNearestVec4 + ", d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if (" + (inputDepthVec4Remainder === 3) + ") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + "),\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 1),\n                getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, " + inputDepthNearestVec4 + ", d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 1, d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return Conv2DProgram;
}();
exports.Conv2DProgram = Conv2DProgram;
//# sourceMappingURL=conv_gpu.js.map
},{}],"9Djx":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var DepthwiseConv2DProgram = function () {
    function DepthwiseConv2DProgram(convInfo) {
        this.variableNames = ['x', 'W'];
        this.outputShape = convInfo.outShape;
        var xNumRows = convInfo.inHeight;
        var xNumCols = convInfo.inWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var dilationHeight = convInfo.dilationHeight;
        var dilationWidth = convInfo.dilationWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var channelMul = convInfo.outChannels / convInfo.inChannels;
        this.userCode = "\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + channelMul + ";\n        int q = d2 - d1 * " + channelMul + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          int xR = xRCorner + wR * " + dilationHeight + ";\n\n          if (xR < 0 || xR >= " + xNumRows + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            int xC = xCCorner + wC * " + dilationWidth + ";\n\n            if (xC < 0 || xC >= " + xNumCols + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return DepthwiseConv2DProgram;
}();
exports.DepthwiseConv2DProgram = DepthwiseConv2DProgram;
//# sourceMappingURL=conv_gpu_depthwise.js.map
},{}],"v36e":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getUnpackedMatrixTextureShapeWidthHeight = getUnpackedMatrixTextureShapeWidthHeight;
exports.getUnpackedArraySizeFromMatrixSize = getUnpackedArraySizeFromMatrixSize;
exports.getColorMatrixTextureShapeWidthHeight = getColorMatrixTextureShapeWidthHeight;
exports.getMatrixSizeFromUnpackedArraySize = getMatrixSizeFromUnpackedArraySize;
exports.encodeMatrixToUnpackedArray = encodeMatrixToUnpackedArray;
exports.encodeFloatArray = encodeFloatArray;
exports.decodeToFloatArray = decodeToFloatArray;
exports.decodeMatrixFromUnpackedArray = decodeMatrixFromUnpackedArray;
exports.decodeMatrixFromUnpackedColorRGBAArray = decodeMatrixFromUnpackedColorRGBAArray;
exports.getPackedMatrixTextureShapeWidthHeight = getPackedMatrixTextureShapeWidthHeight;
exports.getPackedRGBAArraySizeFromMatrixShape = getPackedRGBAArraySizeFromMatrixShape;
exports.encodeMatrixToPackedRGBA = encodeMatrixToPackedRGBA;
exports.decodeMatrixFromPackedRGBA = decodeMatrixFromPackedRGBA;
var TextureType = exports.TextureType = undefined;
(function (TextureType) {
    TextureType[TextureType["FLOAT"] = 0] = "FLOAT";
    TextureType[TextureType["UNSIGNED_BYTE"] = 1] = "UNSIGNED_BYTE";
})(TextureType || (exports.TextureType = TextureType = {}));
function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
    return [columns, rows];
}
function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
    return matrixSize * channelsPerTexture;
}
function getColorMatrixTextureShapeWidthHeight(rows, columns) {
    return [columns * 4, rows];
}
function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {
    if (unpackedSize % channelsPerTexture !== 0) {
        throw new Error("unpackedSize (" + unpackedSize + ") must be a multiple of " + ("" + channelsPerTexture));
    }
    return unpackedSize / channelsPerTexture;
}
function encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture) {
    var requiredSize = getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture);
    if (unpackedArray.length < requiredSize) {
        throw new Error("unpackedArray length (" + unpackedArray.length + ") must be >= " + ("" + requiredSize));
    }
    var dst = 0;
    for (var src = 0; src < matrix.length; ++src) {
        unpackedArray[dst] = matrix[src];
        dst += channelsPerTexture;
    }
}
var FLOAT_MAX = exports.FLOAT_MAX = 20000;
var FLOAT_MIN = exports.FLOAT_MIN = -FLOAT_MAX;
var FLOAT_RANGE = (FLOAT_MAX - FLOAT_MIN) / 255;
var FLOAT_DELTAS = [1, 1 / 255, 1 / (255 * 255), 1 / (255 * 255 * 255)];
var FLOAT_POWERS = [1, 255, 255 * 255];
var BYTE_NAN_VALUE = exports.BYTE_NAN_VALUE = 0;
function encodeFloatArray(floatArray) {
    var uintArray = new Uint8Array(floatArray.length * 4);
    var _loop_1 = function (i) {
        var value = floatArray[i / 4];
        if (isNaN(value)) {
            uintArray[i] = BYTE_NAN_VALUE;
            uintArray[i + 1] = BYTE_NAN_VALUE;
            uintArray[i + 2] = BYTE_NAN_VALUE;
            uintArray[i + 3] = BYTE_NAN_VALUE;
            return "continue";
        }
        var normalizedValue = (value - FLOAT_MIN) / FLOAT_RANGE;
        var enc = FLOAT_POWERS.map(function (pow) {
            return pow * normalizedValue;
        });
        var buckets = enc.map(function (value) {
            return Math.floor(value % 1 * 255);
        });
        uintArray[i] = Math.floor(normalizedValue);
        uintArray[i + 1] = buckets[0];
        uintArray[i + 2] = buckets[1];
        uintArray[i + 3] = buckets[2];
    };
    for (var i = 0; i < uintArray.length; i += 4) {
        _loop_1(i);
    }
    return uintArray;
}
function decodeToFloatArray(uintArray) {
    var floatArray = new Float32Array(uintArray.length / 4);
    var _loop_2 = function (i) {
        if (uintArray[i] === BYTE_NAN_VALUE && uintArray[i + 1] === BYTE_NAN_VALUE && uintArray[i + 2] === BYTE_NAN_VALUE && uintArray[i + 3] === BYTE_NAN_VALUE) {
            floatArray[i / 4] = NaN;
            return "continue";
        }
        var dot = 0;
        FLOAT_DELTAS.forEach(function (delta, j) {
            dot += delta * uintArray[i + j];
        });
        var value = dot * FLOAT_RANGE + FLOAT_MIN;
        floatArray[i / 4] = value;
    };
    for (var i = 0; i < uintArray.length; i += 4) {
        _loop_2(i);
    }
    return floatArray;
}
function decodeMatrixFromUnpackedArray(unpackedArray, matrix, channelsPerTexture) {
    var requiredSize = getMatrixSizeFromUnpackedArraySize(unpackedArray.length, channelsPerTexture);
    if (matrix.length < requiredSize) {
        throw new Error("matrix length (" + matrix.length + ") must be >= " + requiredSize);
    }
    var dst = 0;
    for (var src = 0; src < unpackedArray.length; src += channelsPerTexture) {
        matrix[dst++] = unpackedArray[src];
    }
}
function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {
    var requiredSize = unpackedArray.length * channels / 4;
    if (matrix.length < requiredSize) {
        throw new Error("matrix length (" + matrix.length + ") must be >= " + requiredSize);
    }
    var dst = 0;
    for (var src = 0; src < unpackedArray.length; src += 4) {
        for (var c = 0; c < channels; c++) {
            matrix[dst++] = unpackedArray[src + c];
        }
    }
}
function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
    return [Math.ceil(columns / 2), Math.ceil(rows / 2)];
}
function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns),
        w = _a[0],
        h = _a[1];
    return w * h * 4;
}
function encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA) {
    var requiredSize = getPackedRGBAArraySizeFromMatrixShape(rows, columns);
    if (packedRGBA.length < requiredSize) {
        throw new Error("packedRGBA length (" + packedRGBA.length + ") must be >= " + requiredSize);
    }
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns),
        textureWidth = _a[0],
        textureHeight = _a[1];
    var oddWidth = columns % 2 === 1;
    var oddHeight = rows % 2 === 1;
    var widthInFullBlocks = Math.floor(columns / 2);
    var heightInFullBlocks = Math.floor(rows / 2);
    {
        var dstStride = oddWidth ? 4 : 0;
        var oneRow = columns;
        var dst = 0;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            var matrixSrcRow = blockY * 2 * columns;
            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
                var matrixSrcCol = blockX * 2;
                var src = matrixSrcRow + matrixSrcCol;
                packedRGBA[dst] = matrix[src];
                packedRGBA[dst + 1] = matrix[src + 1];
                packedRGBA[dst + 2] = matrix[src + oneRow];
                packedRGBA[dst + 3] = matrix[src + oneRow + 1];
                dst += 4;
            }
            dst += dstStride;
        }
    }
    if (oddWidth) {
        var src = columns - 1;
        var dst = (textureWidth - 1) * 4;
        var srcStride = 2 * columns;
        var dstStride = textureWidth * 4;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            packedRGBA[dst] = matrix[src];
            packedRGBA[dst + 2] = matrix[src + columns];
            src += srcStride;
            dst += dstStride;
        }
    }
    if (oddHeight) {
        var src = (rows - 1) * columns;
        var dst = (textureHeight - 1) * textureWidth * 4;
        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
            packedRGBA[dst++] = matrix[src++];
            packedRGBA[dst++] = matrix[src++];
            dst += 2;
        }
    }
    if (oddWidth && oddHeight) {
        packedRGBA[packedRGBA.length - 4] = matrix[matrix.length - 1];
    }
    return packedRGBA;
}
function decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix) {
    var requiredSize = rows * columns;
    if (requiredSize < matrix.length) {
        throw new Error("matrix length (" + matrix.length + ") must be >= " + requiredSize);
    }
    var oddWidth = columns % 2 === 1;
    var oddHeight = rows % 2 === 1;
    var widthInFullBlocks = Math.floor(columns / 2);
    var heightInFullBlocks = Math.floor(rows / 2);
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns),
        textureWidth = _a[0],
        textureHeight = _a[1];
    {
        var srcStride = oddWidth ? 4 : 0;
        var dstStride = columns + (oddWidth ? 1 : 0);
        var src = 0;
        var dstRow1 = 0;
        var dstRow2 = columns;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
                matrix[dstRow1++] = packedRGBA[src++];
                matrix[dstRow1++] = packedRGBA[src++];
                matrix[dstRow2++] = packedRGBA[src++];
                matrix[dstRow2++] = packedRGBA[src++];
            }
            src += srcStride;
            dstRow1 += dstStride;
            dstRow2 += dstStride;
        }
    }
    if (oddWidth) {
        var src = (textureWidth - 1) * 4;
        var dst = columns - 1;
        var srcStride = textureWidth * 4;
        var dstStride = 2 * columns;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            matrix[dst] = packedRGBA[src];
            matrix[dst + columns] = packedRGBA[src + 2];
            src += srcStride;
            dst += dstStride;
        }
    }
    if (oddHeight) {
        var src = (textureHeight - 1) * textureWidth * 4;
        var dst = (rows - 1) * columns;
        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
            matrix[dst++] = packedRGBA[src++];
            matrix[dst++] = packedRGBA[src++];
            src += 2;
        }
    }
    if (oddWidth && oddHeight) {
        matrix[matrix.length - 1] = packedRGBA[packedRGBA.length - 4];
    }
    return matrix;
}
//# sourceMappingURL=tex_util.js.map
},{}],"pTbo":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.makeShader = makeShader;
exports.getCoordsDataType = getCoordsDataType;

var _environment = require('../../environment');

var _util = require('../../util');

var util = _interopRequireWildcard(_util);

var _broadcast_util = require('../../ops/broadcast_util');

var broadcast_util = _interopRequireWildcard(_broadcast_util);

var _tex_util = require('./tex_util');

var tex_util = _interopRequireWildcard(_tex_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function makeShader(inputsInfo, outputShape, userCode, broadcast) {
    var sampleSnippet = getSampleSnippet();
    var setOutputSnippet = getSetOutputSnippet();
    var inputPrefixSnippet = inputsInfo.map(function (x) {
        return "uniform sampler2D " + x.name + ";";
    }).join('\n');
    var inputSamplingSnippet = inputsInfo.map(function (x) {
        return getInputSamplingSnippet(x, outputShape, broadcast);
    }).join('\n');
    var outTexShape = outputShape.texShape;
    var outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);
    var source = [SHADER_PREFIX, sampleSnippet, setOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode].join('\n');
    return source;
}
function getSampleSnippet() {
    return _environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ? FLOAT_TEXTURE_SAMPLE_SNIPPET : UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET;
}
function getSetOutputSnippet() {
    return _environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ? FLOAT_TEXTURE_SETOUTPUT_SNIPPET : UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET;
}
function getSamplerFromInInfo(inInfo) {
    var shape = inInfo.shapeInfo.logicalShape;
    switch (shape.length) {
        case 0:
            return getSamplerScalar(inInfo);
        case 1:
            return getSampler1D(inInfo);
        case 2:
            return getSampler2D(inInfo);
        case 3:
            return getSampler3D(inInfo);
        case 4:
            return getSampler4D(inInfo);
        default:
            throw new Error(shape.length + "-D input sampling" + " is not yet supported");
    }
}
function getInputSamplingSnippet(inInfo, outShapeInfo, broadcast) {
    var res = getSamplerFlat(inInfo);
    res += getSamplerFromInInfo(inInfo);
    if (broadcast || util.arraysEqual(inInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape)) {
        res += getSamplerAtOutputCoords(inInfo, outShapeInfo, broadcast);
    }
    return res;
}
function getOutputSamplingSnippet(outShape, outTexShape) {
    switch (outShape.length) {
        case 0:
            return getOutputScalarCoords();
        case 1:
            return getOutput1DCoords(outShape, outTexShape);
        case 2:
            return getOutput2DCoords(outShape, outTexShape);
        case 3:
            return getOutput3DCoords(outShape, outTexShape);
        case 4:
            return getOutput4DCoords(outShape, outTexShape);
        default:
            throw new Error(outShape.length + "-D output sampling is not yet supported");
    }
}
var SAMPLE_1D_SNIPPET = "\nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var SAMPLE_2D_SNIPPET = "\nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\n  int index = row * numC + col;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var SAMPLE_3D_SNIPPET = "\nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\n    int stride1, int row, int col, int depth) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var SAMPLE_4D_SNIPPET = "\nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int row, int col, int depth,\n    int depth2) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET = "\n  uniform float NaN;\n\n  const vec4 floatDeltas = vec4(\n      1.0,\n      1.0 / 255.0,\n      1.0 / (255.0 * 255.0),\n      1.0 / (255.0 * 255.0 * 255.0)\n  );\n  const float minValue = " + tex_util.FLOAT_MIN + ".0;\n  const float maxValue = " + tex_util.FLOAT_MAX + ".0;\n  const float range = (maxValue - minValue) / 255.0;\n  const vec2 dotRange = vec2(1.0, range);\n\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    vec4 sampleValue = texture2D(textureSampler, uv);\n    if (all(equal(sampleValue, vec4(" + tex_util.BYTE_NAN_VALUE + ")))) {\n      return NaN;\n    }\n\n    vec4 encValue = floor(sampleValue * 255.0 + 0.5);\n    float decodedValue = dot(encValue, floatDeltas);\n    return dot(vec2(minValue, decodedValue), dotRange);\n  }\n";
var UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET = "\n  const vec4 floatPowers = vec4(\n    1.0,\n    255.0,\n    255.0 * 255.0,\n    255.0 * 255.0 * 255.0\n  );\n  const vec2 recipRange = vec2(1.0/range);\n  const vec2 recipRange255 = vec2(1.0/(maxValue - minValue));\n\n  void setOutput(float decodedValue) {\n    if (isNaN(decodedValue)) {\n      gl_FragColor = vec4(" + tex_util.BYTE_NAN_VALUE + ");\n      return;\n    }\n\n    float a = dot(vec2(decodedValue, -minValue), recipRange);\n    float b = fract(a) * 255.0;\n    float c = fract(b) * 255.0;\n    float d = fract(c) * 255.0;\n    gl_FragColor = floor(vec4(a, b, c, d)) / 255.0;\n\n    // TODO(dsmilkov): Version above gets better accuracy but probably slower\n    // than the version below. Benchmark to determine if the accuracy is worth\n    // the cost.\n\n    // float normValue = dot(vec2(decodedValue, -minValue), recipRange255);\n    // vec4 f = normValue * floatPowers;\n    // gl_FragColor = floor(fract(f) * 255.0) / 255.0;\n  }\n";
var FLOAT_TEXTURE_SAMPLE_SNIPPET = "\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    return texture2D(textureSampler, uv).r;\n  }\n";
var FLOAT_TEXTURE_SETOUTPUT_SNIPPET = "\n  void setOutput(float val) {\n    gl_FragColor = vec4(val, 0, 0, 0);\n  }\n";
var SHADER_PREFIX = "\n  precision highp float;\n  precision highp int;\n  varying vec2 resultUV;\n  const vec2 halfCR = vec2(0.5, 0.5);\n\n  bool isNaN(float val) {\n    float v1 = val * val;\n    float v2 = val * val;\n    return v1 == v2 ? false : true;\n  }\n\n  bool hasNaN(vec4 values) {\n    vec4 v1 = values * values;\n    vec4 v2 = values * values;\n    return any(notEqual(v1, v2));\n  }\n\n  float getNaN(vec4 values) {\n    return dot(vec4(1), values);\n  }\n\n  int round(float value) {\n    return int(floor(value + 0.5));\n  }\n\n  int imod(int x, int y) {\n    return x - y * (x / y);\n  }\n\n  //Based on the work of Dave Hoskins\n  //https://www.shadertoy.com/view/4djSRW\n  #define HASHSCALE1 443.8975\n  float random(float seed){\n    vec2 p = resultUV * seed;\n    vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n  }\n\n  " + SAMPLE_1D_SNIPPET + "\n  " + SAMPLE_2D_SNIPPET + "\n  " + SAMPLE_3D_SNIPPET + "\n  " + SAMPLE_4D_SNIPPET + "\n";
function getOutputScalarCoords() {
    return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
}
function getOutput1DCoords(shape, texShape) {
    if (texShape[0] === 1) {
        return "\n      int getOutputCoords() {\n        return int(resultUV.x * " + texShape[1] + ".0);\n      }\n    ";
    }
    if (texShape[1] === 1) {
        return "\n      int getOutputCoords() {\n        return int(resultUV.y * " + texShape[0] + ".0);\n      }\n    ";
    }
    return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      return resTexRC.x * " + texShape[1] + " + resTexRC.y;\n    }\n  ";
}
function getOutput3DCoords(shape, texShape) {
    var stride0 = shape[1] * shape[2];
    var stride1 = shape[2];
    return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n      int r = index / " + stride0 + ";\n      index -= r * " + stride0 + ";\n      int c = index / " + stride1 + ";\n      int d = index - c * " + stride1 + ";\n      return ivec3(r, c, d);\n    }\n  ";
}
function getOutput4DCoords(shape, texShape) {
    var stride2 = shape[3];
    var stride1 = shape[2] * stride2;
    var stride0 = shape[1] * stride1;
    return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n\n      int r = index / " + stride0 + ";\n      index -= r * " + stride0 + ";\n\n      int c = index / " + stride1 + ";\n      index -= c * " + stride1 + ";\n\n      int d = index / " + stride2 + ";\n      int d2 = index - d * " + stride2 + ";\n\n      return ivec4(r, c, d, d2);\n    }\n  ";
}
function getOutput2DCoords(shape, texShape) {
    if (util.arraysEqual(shape, texShape)) {
        return "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + texShape[0] + ", " + texShape[1] + "));\n      }\n    ";
    }
    if (shape[1] === 1) {
        return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + texShape[0] + ", " + texShape[1] + "));\n        int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";
    }
    if (shape[0] === 1) {
        return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + texShape[0] + ", " + texShape[1] + "));\n        int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";
    }
    return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n      int r = index / " + shape[1] + ";\n      int c = index - r * " + shape[1] + ";\n      return ivec2(r, c);\n    }\n  ";
}
function getSamplerScalar(inputInfo) {
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    return "\n    float " + funcName + "() {\n      return sampleTexture(" + texName + ", halfCR);\n    }\n  ";
}
function getSampler1D(inputInfo) {
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    return "\n    float " + funcName + "(int index) {\n      return " + funcName + "Flat(index);\n    }\n  ";
}
function getSampler2D(inputInfo) {
    var shape = inputInfo.shapeInfo.logicalShape;
    var texShape = inputInfo.shapeInfo.texShape;
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    var texNumR = texShape[0];
    var texNumC = texShape[1];
    if (util.arraysEqual(shape, texShape)) {
        return "\n    float " + funcName + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + texNumC + ".0, " + texNumR + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
    }
    var _a = util.squeezeShape(shape),
        newShape = _a.newShape,
        keptDims = _a.keptDims;
    var squeezedShape = newShape;
    if (squeezedShape.length < shape.length) {
        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
        var params = ['row', 'col'];
        return "\n      " + getSamplerFromInInfo(newInputInfo) + "\n      float " + funcName + "(int row, int col) {\n        return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n      }\n    ";
    }
    if (texNumC === 1) {
        return "\n    float " + funcName + "(int row, int col) {\n      int index = row * " + shape[1] + " + col;\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / " + texNumR + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
    }
    if (texNumR === 1) {
        return "\n    float " + funcName + "(int row, int col) {\n      int index = row * " + shape[1] + " + col;\n      vec2 uv = vec2((float(index) + 0.5) / " + texNumC + ".0, 0.5);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
    }
    return "\n  float " + funcName + "(int row, int col) {\n    vec2 uv = UVfrom2D(" + texNumR + ", " + texNumC + ", " + shape[1] + ", row, col);\n    return sampleTexture(" + texName + ", uv);\n  }\n";
}
function getSampler3D(inputInfo) {
    var texShape = inputInfo.shapeInfo.texShape;
    var shape = inputInfo.shapeInfo.logicalShape;
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    var texNumR = texShape[0];
    var texNumC = texShape[1];
    var stride0 = shape[1] * shape[2];
    var stride1 = shape[2];
    var _a = util.squeezeShape(shape),
        newShape = _a.newShape,
        keptDims = _a.keptDims;
    var squeezedShape = newShape;
    if (squeezedShape.length < shape.length) {
        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
        var params = ['row', 'col', 'depth'];
        return "\n        " + getSamplerFromInInfo(newInputInfo) + "\n        float " + funcName + "(int row, int col, int depth) {\n          return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n        }\n      ";
    }
    if (texNumC === stride0) {
        return "\n        float " + funcName + "(int row, int col, int depth) {\n          int texR = row;\n          int texC = col * " + stride1 + " + depth;\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + texNumC + ".0, " + texNumR + ".0);\n          return sampleTexture(" + texName + ", uv);\n        }\n      ";
    }
    if (texNumC === stride1) {
        return "\n    float " + funcName + "(int row, int col, int depth) {\n      int texR = row * " + shape[1] + " + col;\n      int texC = depth;\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + texNumC + ".0, " + texNumR + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
    }
    return "\n      float " + funcName + "(int row, int col, int depth) {\n        vec2 uv = UVfrom3D(\n            " + texNumR + ", " + texNumC + ", " + stride0 + ", " + stride1 + ", row, col, depth);\n        return sampleTexture(" + texName + ", uv);\n      }\n  ";
}
function getSampler4D(inputInfo) {
    var shape = inputInfo.shapeInfo.logicalShape;
    var texShape = inputInfo.shapeInfo.texShape;
    var texName = inputInfo.name;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    var texNumR = texShape[0];
    var texNumC = texShape[1];
    var stride2 = shape[3];
    var stride1 = shape[2] * stride2;
    var stride0 = shape[1] * stride1;
    var _a = util.squeezeShape(shape),
        newShape = _a.newShape,
        keptDims = _a.keptDims;
    if (newShape.length < shape.length) {
        var newInputInfo = squeezeInputInfo(inputInfo, newShape);
        var params = ['row', 'col', 'depth', 'depth2'];
        return "\n      " + getSamplerFromInInfo(newInputInfo) + "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n      }\n    ";
    }
    if (texNumC === stride0) {
        return "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        int texR = row;\n        int texC = col * " + stride1 + " + depth * " + stride2 + " + depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
    }
    if (texNumC === stride2) {
        return "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        int texR = row * " + shape[1] * shape[2] + " + col * " + shape[2] + " + depth;\n        int texC = depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
    }
    return "\n    float " + funcName + "(int row, int col, int depth, int depth2) {\n      vec2 uv = UVfrom4D(" + texNumR + ", " + texNumC + ", " + stride0 + ", " + stride1 + ",\n          " + stride2 + ", row, col, depth, depth2);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
}
function getSamplerFlat(inputInfo) {
    var texName = inputInfo.name;
    var texShape = inputInfo.shapeInfo.texShape;
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1) + 'Flat';
    var tNumR = texShape[0];
    var tNumC = texShape[1];
    if (tNumC === 1 && tNumR === 1) {
        return "\n      float " + funcName + "(int index) {\n        return sampleTexture(" + texName + ", halfCR);\n      }\n    ";
    }
    if (tNumC === 1) {
        return "\n      float " + funcName + "(int index) {\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / " + tNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
    }
    if (tNumR === 1) {
        return "\n      float " + funcName + "(int index) {\n        vec2 uv = vec2((float(index) + 0.5) / " + tNumC + ".0, 0.5);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
    }
    return "\n    float " + funcName + "(int index) {\n      vec2 uv = UVfrom1D(" + tNumR + ", " + tNumC + ", index);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
}
function getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName) {
    var inRank = inputInfo.shapeInfo.logicalShape.length;
    var outRank = outShapeInfo.logicalShape.length;
    var type = 'int';
    if (outRank === 2) {
        type = 'ivec2';
    } else if (outRank === 3) {
        type = 'ivec3';
    } else if (outRank === 4) {
        type = 'ivec4';
    }
    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
    var rankDiff = outRank - inRank;
    var coordsSnippet;
    if (inRank === 0) {
        coordsSnippet = '';
    } else if (outRank < 2 && broadcastDims.length >= 1) {
        coordsSnippet = 'coords = 0;';
    } else {
        coordsSnippet = broadcastDims.map(function (d) {
            return "coords[" + (d + rankDiff) + "] = 0;";
        }).join('\n');
    }
    var unpackedCoordsSnippet = '';
    if (outRank < 2 && inRank > 0) {
        unpackedCoordsSnippet = 'coords';
    } else {
        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {
            return "coords[" + (i + rankDiff) + "]";
        }).join(', ');
    }
    return "\n    float " + funcName + "() {\n      " + type + " coords = getOutputCoords();\n      " + coordsSnippet + "\n      return get" + texFuncSnippet + "(" + unpackedCoordsSnippet + ");\n    }\n  ";
}
function getSamplerAtOutputCoords(inputInfo, outShapeInfo, supportsBroadcasting) {
    var inTexShape = inputInfo.shapeInfo.texShape;
    var texName = inputInfo.name;
    var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
    var funcName = 'get' + texFuncSnippet + 'AtOutCoords';
    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
    var inRank = inputInfo.shapeInfo.logicalShape.length;
    var outRank = outShapeInfo.logicalShape.length;
    var doBroadcast = supportsBroadcasting && (outRank > inRank || broadcastDims.length > 0);
    var broadcastOverOuter = broadcast_util.broadcastDimsAreOuter(broadcastDims);
    if (doBroadcast && !broadcastOverOuter) {
        return getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName);
    }
    var outTexShape = outShapeInfo.texShape;
    if (util.arraysEqual(inTexShape, outTexShape)) {
        return "\n      float " + funcName + "() {\n        return sampleTexture(" + texName + ", resultUV);\n      }\n    ";
    }
    var inSize = util.sizeFromShape(inTexShape);
    var broadcastSnippet = '';
    if (doBroadcast && broadcastOverOuter) {
        broadcastSnippet = "\n        int mainPart = index / " + inSize + ";\n        index -= mainPart * " + inSize + ";\n      ";
    }
    return "\n    float " + funcName + "() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + outTexShape[0] + ", " + outTexShape[1] + "));\n      int index = resTexRC.x * " + outTexShape[1] + " + resTexRC.y;\n      " + broadcastSnippet + "\n      int texR = index / " + inTexShape[1] + ";\n      int texC = index - texR * " + inTexShape[1] + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) /\n                 vec2(" + inTexShape[1] + ".0, " + inTexShape[0] + ".0);\n\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
}
function getCoordsDataType(rank) {
    if (rank <= 1) {
        return 'int';
    } else if (rank === 2) {
        return 'ivec2';
    } else if (rank === 3) {
        return 'ivec3';
    } else if (rank === 4) {
        return 'ivec4';
    } else {
        throw Error("GPU for rank " + rank + " is not yet supported");
    }
}
function squeezeInputInfo(inInfo, squeezedShape) {
    var newInputInfo = JSON.parse(JSON.stringify(inInfo));
    newInputInfo.shapeInfo.logicalShape = squeezedShape;
    return newInputInfo;
}
function getSqueezedParams(params, keptDims) {
    return keptDims.map(function (d) {
        return params[d];
    }).join(', ');
}
//# sourceMappingURL=shader_compiler.js.map
},{"../../environment":"CAkW","../../util":"lDaM","../../ops/broadcast_util":"lcGM","./tex_util":"v36e"}],"DRov":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CumSumProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var CumSumProgram = function () {
    function CumSumProgram(shape, exclusive, reverse) {
        this.variableNames = ['x'];
        this.outputShape = shape;
        var rank = shape.length;
        var finalDim = shape[shape.length - 1];
        var comparator = reverse ? '<' : '>';
        this.userCode = "\n      int getIndex(int i) {\n        " + (reverse ? "return " + finalDim + " -i - 1;" : 'return i;') + "\n      }\n\n      void main() {\n        " + (0, _shader_compiler.getCoordsDataType)(rank) + " coords = getOutputCoords();\n        int end = " + getFinalCoord(rank, 'coords') + ";\n        float val = 0.0;\n        for (int i = " + finalDim + " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " + comparator + " end) {\n            continue;\n          }\n          if (idx == end && " + exclusive + ") {\n            continue;\n          }\n          " + getFinalCoord(rank, 'coords') + " = idx;\n          val += getX(" + getCoords(rank, 'coords') + ");\n        }\n        setOutput(val);\n      }\n    ";
    }
    return CumSumProgram;
}();
exports.CumSumProgram = CumSumProgram;

function getCoords(rank, name) {
    if (rank === 1) {
        return "" + name;
    } else if (rank === 2) {
        return name + ".x, " + name + ".y";
    } else if (rank === 3) {
        return name + ".x, " + name + ".y, " + name + ".z";
    } else if (rank === 4) {
        return name + ".x, " + name + ".y, " + name + ".z, " + name + ".w";
    } else {
        throw Error("Cumulative sum for rank " + rank + " is not yet supported");
    }
}
function getFinalCoord(rank, name) {
    if (rank === 1) {
        return "" + name;
    } else if (rank === 2) {
        return name + ".y";
    } else if (rank === 3) {
        return name + ".z";
    } else if (rank === 4) {
        return name + ".w";
    } else {
        throw Error("Cumulative sum for rank " + rank + " is not yet supported");
    }
}
//# sourceMappingURL=cumsum_gpu.js.map
},{"./shader_compiler":"pTbo"}],"Di0Q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var FromPixelsProgram = function () {
    function FromPixelsProgram(outputShape) {
        this.variableNames = ['A'];
        var height = outputShape[0],
            width = outputShape[1];
        this.outputShape = outputShape;
        this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + width + ".0, " + height + ".0);\n\n        vec4 values = texture2D(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
    }
    return FromPixelsProgram;
}();
exports.FromPixelsProgram = FromPixelsProgram;
//# sourceMappingURL=from_pixels_gpu.js.map
},{}],"sa4G":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GatherProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var GatherProgram = function () {
    function GatherProgram(aShape, indicesLength, axis) {
        this.variableNames = ['A', 'indices'];
        var outputShape = aShape.slice();
        outputShape[axis] = indicesLength;
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        var dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
        var sourceCoords = getSourceCoords(aShape, axis);
        this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        setOutput(getA(" + sourceCoords + "));\n      }\n    ";
    }
    return GatherProgram;
}();
exports.GatherProgram = GatherProgram;

function getSourceCoords(aShape, axis) {
    var rank = aShape.length;
    if (rank > 4) {
        throw Error("Gather for rank " + rank + " is not yet supported");
    }
    if (rank === 1) {
        return "int(getIndices(resRC))";
    }
    var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
    var sourceCoords = [];
    for (var i = 0; i < aShape.length; i++) {
        if (i === axis) {
            sourceCoords.push("int(getIndices(" + currentCoords[i] + "))");
        } else {
            sourceCoords.push("" + currentCoords[i]);
        }
    }
    return sourceCoords.join();
}
//# sourceMappingURL=gather_gpu.js.map
},{"./shader_compiler":"pTbo"}],"7OCh":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createWebGLRenderingContext = createWebGLRenderingContext;
exports.createWebGLRenderingContextFromCanvas = createWebGLRenderingContextFromCanvas;
exports.callAndCheck = callAndCheck;
exports.enableDebugWebGLErrorChecking = enableDebugWebGLErrorChecking;
exports.checkWebGLError = checkWebGLError;
exports.getWebGLErrorMessage = getWebGLErrorMessage;
exports.getExtensionOrThrow = getExtensionOrThrow;
exports.createVertexShader = createVertexShader;
exports.createFragmentShader = createFragmentShader;
exports.createProgram = createProgram;
exports.linkProgram = linkProgram;
exports.validateProgram = validateProgram;
exports.createStaticVertexBuffer = createStaticVertexBuffer;
exports.createStaticIndexBuffer = createStaticIndexBuffer;
exports.queryMaxTextureSize = queryMaxTextureSize;
exports.getChannelsPerTexture = getChannelsPerTexture;
exports.createTexture = createTexture;
exports.validateTextureSize = validateTextureSize;
exports.createFramebuffer = createFramebuffer;
exports.bindVertexBufferToProgramAttribute = bindVertexBufferToProgramAttribute;
exports.bindTextureUnit = bindTextureUnit;
exports.unbindTextureUnit = unbindTextureUnit;
exports.getProgramUniformLocationOrThrow = getProgramUniformLocationOrThrow;
exports.getProgramUniformLocation = getProgramUniformLocation;
exports.bindTextureToProgramUniformSampler = bindTextureToProgramUniformSampler;
exports.bindCanvasToFramebuffer = bindCanvasToFramebuffer;
exports.bindColorTextureToFramebuffer = bindColorTextureToFramebuffer;
exports.unbindColorTextureFromFramebuffer = unbindColorTextureFromFramebuffer;
exports.validateFramebuffer = validateFramebuffer;
exports.getFramebufferErrorMessage = getFramebufferErrorMessage;
exports.getTextureShapeFromLogicalShape = getTextureShapeFromLogicalShape;

var _util = require('../../util');

var util = _interopRequireWildcard(_util);

var _environment = require('../../environment');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var MAX_TEXTURE_SIZE = null;
function createWebGLRenderingContext(attributes) {
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = 1;
    return createWebGLRenderingContextFromCanvas(canvas, attributes);
}
function createWebGLRenderingContextFromCanvas(canvas, attributes) {
    var gl;
    var webglVersion = _environment.ENV.get('WEBGL_VERSION');
    if (webglVersion === 2) {
        gl = canvas.getContext('webgl2', attributes);
    } else if (webglVersion === 1) {
        gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);
    }
    if (webglVersion === 0 || gl == null) {
        throw new Error('This browser does not support WebGL.');
    }
    return gl;
}
function callAndCheck(gl, func) {
    var returnValue = func();
    checkWebGLError(gl);
    return returnValue;
}
var webGLDebugErrorCheckingEnabled = false;
function enableDebugWebGLErrorChecking(enabled) {
    webGLDebugErrorCheckingEnabled = enabled;
}
function checkWebGLError(gl) {
    if (webGLDebugErrorCheckingEnabled) {
        var error = gl.getError();
        if (error !== gl.NO_ERROR) {
            throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));
        }
    }
}
function getWebGLErrorMessage(gl, status) {
    switch (status) {
        case gl.NO_ERROR:
            return 'NO_ERROR';
        case gl.INVALID_ENUM:
            return 'INVALID_ENUM';
        case gl.INVALID_VALUE:
            return 'INVALID_VALUE';
        case gl.INVALID_OPERATION:
            return 'INVALID_OPERATION';
        case gl.INVALID_FRAMEBUFFER_OPERATION:
            return 'INVALID_FRAMEBUFFER_OPERATION';
        case gl.OUT_OF_MEMORY:
            return 'OUT_OF_MEMORY';
        case gl.CONTEXT_LOST_WEBGL:
            return 'CONTEXT_LOST_WEBGL';
        default:
            return "Unknown error code " + status;
    }
}
function getExtensionOrThrow(gl, extensionName) {
    return throwIfNull(gl, function () {
        return gl.getExtension(extensionName);
    }, 'Extension "' + extensionName + '" not supported on this browser.');
}
function createVertexShader(gl, vertexShaderSource) {
    var vertexShader = throwIfNull(gl, function () {
        return gl.createShader(gl.VERTEX_SHADER);
    }, 'Unable to create vertex WebGLShader.');
    callAndCheck(gl, function () {
        return gl.shaderSource(vertexShader, vertexShaderSource);
    });
    callAndCheck(gl, function () {
        return gl.compileShader(vertexShader);
    });
    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
        console.log(gl.getShaderInfoLog(vertexShader));
        throw new Error('Failed to compile vertex shader.');
    }
    return vertexShader;
}
function createFragmentShader(gl, fragmentShaderSource) {
    var fragmentShader = throwIfNull(gl, function () {
        return gl.createShader(gl.FRAGMENT_SHADER);
    }, 'Unable to create fragment WebGLShader.');
    callAndCheck(gl, function () {
        return gl.shaderSource(fragmentShader, fragmentShaderSource);
    });
    callAndCheck(gl, function () {
        return gl.compileShader(fragmentShader);
    });
    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));
        throw new Error('Failed to compile fragment shader.');
    }
    return fragmentShader;
}
var lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;
function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {
    var lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);
    if (lineNumberRegexResult == null) {
        console.log("Couldn't parse line number in error: " + shaderInfoLog);
        console.log(shaderSource);
        return;
    }
    var lineNumber = +lineNumberRegexResult[1];
    var shaderLines = shaderSource.split('\n');
    var pad = shaderLines.length.toString().length + 2;
    var linesWithLineNumbers = shaderLines.map(function (line, lineNumber) {
        return util.rightPad((lineNumber + 1).toString(), pad) + line;
    });
    var maxLineLength = 0;
    for (var i = 0; i < linesWithLineNumbers.length; i++) {
        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);
    }
    var beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);
    var errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);
    var afterErrorLines = linesWithLineNumbers.slice(lineNumber);
    console.log(beforeErrorLines.join('\n'));
    console.log(shaderInfoLog.split('\n')[0]);
    console.log("%c " + util.rightPad(errorLine[0], maxLineLength), 'border:1px solid red; background-color:#e3d2d2; color:#a61717');
    console.log(afterErrorLines.join('\n'));
}
function createProgram(gl) {
    return throwIfNull(gl, function () {
        return gl.createProgram();
    }, 'Unable to create WebGLProgram.');
}
function linkProgram(gl, program) {
    callAndCheck(gl, function () {
        return gl.linkProgram(program);
    });
    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
        console.log(gl.getProgramInfoLog(program));
        throw new Error('Failed to link vertex and fragment shaders.');
    }
}
function validateProgram(gl, program) {
    callAndCheck(gl, function () {
        return gl.validateProgram(program);
    });
    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
        console.log(gl.getProgramInfoLog(program));
        throw new Error('Shader program validation failed.');
    }
}
function createStaticVertexBuffer(gl, data) {
    var buffer = throwIfNull(gl, function () {
        return gl.createBuffer();
    }, 'Unable to create WebGLBuffer');
    callAndCheck(gl, function () {
        return gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    });
    callAndCheck(gl, function () {
        return gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
    });
    return buffer;
}
function createStaticIndexBuffer(gl, data) {
    var buffer = throwIfNull(gl, function () {
        return gl.createBuffer();
    }, 'Unable to create WebGLBuffer');
    callAndCheck(gl, function () {
        return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
    });
    callAndCheck(gl, function () {
        return gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);
    });
    return buffer;
}
function queryMaxTextureSize(gl) {
    if (MAX_TEXTURE_SIZE != null) {
        return MAX_TEXTURE_SIZE;
    }
    MAX_TEXTURE_SIZE = callAndCheck(gl, function () {
        return gl.getParameter(gl.MAX_TEXTURE_SIZE);
    });
    return MAX_TEXTURE_SIZE;
}
function getChannelsPerTexture() {
    if (!_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        return 4;
    }
    if (_environment.ENV.get('WEBGL_VERSION') === 2) {
        return 1;
    }
    return 4;
}
function createTexture(gl) {
    return throwIfNull(gl, function () {
        return gl.createTexture();
    }, 'Unable to create WebGLTexture.');
}
function validateTextureSize(gl, width, height) {
    var maxTextureSize = queryMaxTextureSize(gl);
    if (width <= 0 || height <= 0) {
        var requested = "[" + width + "x" + height + "]";
        throw new Error('Requested texture size ' + requested + ' is invalid.');
    }
    if (width > maxTextureSize || height > maxTextureSize) {
        var requested = "[" + width + "x" + height + "]";
        var max = "[" + maxTextureSize + "x" + maxTextureSize + "]";
        throw new Error('Requested texture size ' + requested + ' greater than WebGL maximum on this browser / GPU ' + max + '.');
    }
}
function createFramebuffer(gl) {
    return throwIfNull(gl, function () {
        return gl.createFramebuffer();
    }, 'Unable to create WebGLFramebuffer.');
}
function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
    var loc = gl.getAttribLocation(program, attribute);
    if (loc === -1) {
        return false;
    }
    callAndCheck(gl, function () {
        return gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    });
    callAndCheck(gl, function () {
        return gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes);
    });
    callAndCheck(gl, function () {
        return gl.enableVertexAttribArray(loc);
    });
    return true;
}
function bindTextureUnit(gl, texture, textureUnit) {
    validateTextureUnit(gl, textureUnit);
    callAndCheck(gl, function () {
        return gl.activeTexture(gl.TEXTURE0 + textureUnit);
    });
    callAndCheck(gl, function () {
        return gl.bindTexture(gl.TEXTURE_2D, texture);
    });
}
function unbindTextureUnit(gl, textureUnit) {
    validateTextureUnit(gl, textureUnit);
    callAndCheck(gl, function () {
        return gl.activeTexture(gl.TEXTURE0 + textureUnit);
    });
    callAndCheck(gl, function () {
        return gl.bindTexture(gl.TEXTURE_2D, null);
    });
}
function getProgramUniformLocationOrThrow(gl, program, uniformName) {
    return throwIfNull(gl, function () {
        return gl.getUniformLocation(program, uniformName);
    }, 'uniform "' + uniformName + '" not present in program.');
}
function getProgramUniformLocation(gl, program, uniformName) {
    return gl.getUniformLocation(program, uniformName);
}
function bindTextureToProgramUniformSampler(gl, program, texture, uniformSamplerLocation, textureUnit) {
    callAndCheck(gl, function () {
        return bindTextureUnit(gl, texture, textureUnit);
    });
    callAndCheck(gl, function () {
        return gl.uniform1i(uniformSamplerLocation, textureUnit);
    });
}
function bindCanvasToFramebuffer(gl) {
    callAndCheck(gl, function () {
        return gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    });
    callAndCheck(gl, function () {
        return gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    });
    callAndCheck(gl, function () {
        return gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
    });
}
function bindColorTextureToFramebuffer(gl, texture, framebuffer) {
    callAndCheck(gl, function () {
        return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    });
    callAndCheck(gl, function () {
        return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    });
}
function unbindColorTextureFromFramebuffer(gl, framebuffer) {
    callAndCheck(gl, function () {
        return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    });
    callAndCheck(gl, function () {
        return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
    });
}
function validateFramebuffer(gl) {
    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    if (status !== gl.FRAMEBUFFER_COMPLETE) {
        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));
    }
}
function getFramebufferErrorMessage(gl, status) {
    switch (status) {
        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
        case gl.FRAMEBUFFER_UNSUPPORTED:
            return 'FRAMEBUFFER_UNSUPPORTED';
        default:
            return "unknown error " + status;
    }
}
function throwIfNull(gl, returnTOrNull, failureMessage) {
    var tOrNull = callAndCheck(gl, function () {
        return returnTOrNull();
    });
    if (tOrNull == null) {
        throw new Error(failureMessage);
    }
    return tOrNull;
}
function validateTextureUnit(gl, textureUnit) {
    var maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
    var glTextureUnit = textureUnit + gl.TEXTURE0;
    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
        var textureUnitRange = "[gl.TEXTURE0, gl.TEXTURE" + maxTextureUnit + "]";
        throw new Error("textureUnit must be in " + textureUnitRange + ".");
    }
}
function getTextureShapeFromLogicalShape(gl, logShape) {
    if (logShape.length !== 2) {
        var squeezeResult = util.squeezeShape(logShape);
        logShape = squeezeResult.newShape;
    }
    var maxTexSize = queryMaxTextureSize(gl);
    var size = util.sizeFromShape(logShape);
    if (logShape.length <= 1 && size <= maxTexSize) {
        return [size, 1];
    } else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) {
        return logShape;
    } else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) {
        return [logShape[0], logShape[1] * logShape[2]];
    } else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {
        return [logShape[0], logShape[1] * logShape[2] * logShape[3]];
    } else {
        return util.sizeToSquarishShape(size);
    }
}
//# sourceMappingURL=webgl_util.js.map
},{"../../util":"lDaM","../../environment":"CAkW"}],"Fhof":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getWebGLContextAttributes = getWebGLContextAttributes;
exports.createWebGLContext = createWebGLContext;
exports.createVertexShader = createVertexShader;
exports.createVertexBuffer = createVertexBuffer;
exports.createIndexBuffer = createIndexBuffer;
exports.createMatrixTexture = createMatrixTexture;
exports.createColorMatrixTexture = createColorMatrixTexture;
exports.createPackedMatrixTexture = createPackedMatrixTexture;
exports.bindVertexProgramAttributeStreams = bindVertexProgramAttributeStreams;
exports.uploadPixelDataToTexture = uploadPixelDataToTexture;
exports.uploadMatrixToTexture = uploadMatrixToTexture;
exports.uploadMatrixToPackedTexture = uploadMatrixToPackedTexture;
exports.downloadMatrixFromOutputTextureAsync = downloadMatrixFromOutputTextureAsync;
exports.downloadMatrixFromOutputTexture = downloadMatrixFromOutputTexture;
exports.downloadMatrixFromRGBAColorTexture = downloadMatrixFromRGBAColorTexture;
exports.downloadMatrixFromPackedOutputTexture = downloadMatrixFromPackedOutputTexture;

var _environment = require("../../environment");

var _tex_util = require("./tex_util");

var tex_util = _interopRequireWildcard(_tex_util);

var _webgl_util = require("./webgl_util");

var webgl_util = _interopRequireWildcard(_webgl_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function getWebGLContextAttributes() {
    return {
        alpha: false,
        antialias: false,
        premultipliedAlpha: false,
        preserveDrawingBuffer: false,
        depth: false,
        stencil: false,
        failIfMajorPerformanceCaveat: true
    };
}
function createWebGLContext(canvas) {
    var attributes = getWebGLContextAttributes();
    var gl;
    if (canvas != null) {
        gl = webgl_util.createWebGLRenderingContextFromCanvas(canvas, attributes);
    } else {
        gl = webgl_util.createWebGLRenderingContext(attributes);
    }
    webgl_util.callAndCheck(gl, function () {
        return gl.disable(gl.DEPTH_TEST);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.disable(gl.STENCIL_TEST);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.disable(gl.BLEND);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.disable(gl.DITHER);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.disable(gl.POLYGON_OFFSET_FILL);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.disable(gl.SAMPLE_COVERAGE);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.enable(gl.SCISSOR_TEST);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.enable(gl.CULL_FACE);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.cullFace(gl.BACK);
    });
    return gl;
}
function createVertexShader(gl) {
    var vertexShaderSource = "\n    precision highp float;\n    attribute vec3 clipSpacePos;\n    attribute vec2 uv;\n    varying vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }";
    return webgl_util.createVertexShader(gl, vertexShaderSource);
}
function createVertexBuffer(gl) {
    var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
    return webgl_util.createStaticVertexBuffer(gl, vertexArray);
}
function createIndexBuffer(gl) {
    var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);
    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);
}
function getTextureInternalFormat(gl, numChannels) {
    if (!_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        return gl.RGBA;
    }
    if (_environment.ENV.get('WEBGL_VERSION') === 2) {
        if (numChannels === 4) {
            return gl.RGBA32F;
        }
        return gl.R32F;
    }
    return gl.RGBA;
}
function getTextureFormat(gl, numChannels) {
    if (!_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        return gl.RGBA;
    }
    if (_environment.ENV.get('WEBGL_VERSION') === 2) {
        if (numChannels === 4) {
            return gl.RGBA;
        }
        return gl.RED;
    }
    return gl.RGBA;
}
function getTextureType(gl) {
    if (!_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        return gl.UNSIGNED_BYTE;
    }
    return gl.FLOAT;
}
function createAndConfigureTexture(gl, width, height, numChannels) {
    webgl_util.validateTextureSize(gl, width, height);
    var texture = webgl_util.createTexture(gl);
    var tex2d = gl.TEXTURE_2D;
    var internalFormat = getTextureInternalFormat(gl, numChannels);
    var format = getTextureFormat(gl, numChannels);
    webgl_util.callAndCheck(gl, function () {
        return gl.bindTexture(tex2d, texture);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, format, getTextureType(gl), null);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.bindTexture(gl.TEXTURE_2D, null);
    });
    return texture;
}
function createMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),
        width = _a[0],
        height = _a[1];
    var numChannels = 1;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
function createColorMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getColorMatrixTextureShapeWidthHeight(rows, columns),
        width = _a[0],
        height = _a[1];
    var numChannels = 4;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
function createPackedMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),
        width = _a[0],
        height = _a[1];
    var numChannels = 4;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {
    var posOffset = 0;
    var uvOffset = 3 * 4;
    var stride = 3 * 4 + 2 * 4;
    webgl_util.callAndCheck(gl, function () {
        return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    });
    var success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);
    return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);
}
function uploadPixelDataToTexture(gl, texture, pixels) {
    webgl_util.callAndCheck(gl, function () {
        return gl.bindTexture(gl.TEXTURE_2D, texture);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.bindTexture(gl.TEXTURE_2D, null);
    });
}
function uploadDataToTexture(gl, texture, width, height, data, numChannels) {
    var textureFormat = getTextureFormat(gl, numChannels);
    webgl_util.validateTextureSize(gl, width, height);
    webgl_util.callAndCheck(gl, function () {
        return gl.bindTexture(gl.TEXTURE_2D, texture);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, textureFormat, getTextureType(gl), data);
    });
    webgl_util.callAndCheck(gl, function () {
        return gl.bindTexture(gl.TEXTURE_2D, null);
    });
}
function uploadMatrixToTexture(gl, texture, rows, columns, matrix, numChannels) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),
        w = _a[0],
        h = _a[1];
    var unpackedArray;
    if (_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {
        var channelsPerTexture = numChannels === 1 ? webgl_util.getChannelsPerTexture() : numChannels;
        if (channelsPerTexture === 1) {
            unpackedArray = matrix;
        } else {
            unpackedArray = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture));
            tex_util.encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture);
        }
    } else {
        unpackedArray = tex_util.encodeFloatArray(matrix);
    }
    uploadDataToTexture(gl, texture, w, h, unpackedArray, numChannels);
}
function uploadMatrixToPackedTexture(gl, texture, rows, columns, matrix) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),
        w = _a[0],
        h = _a[1];
    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));
    tex_util.encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA);
    var numChannels = 4;
    uploadDataToTexture(gl, texture, w, h, packedRGBA, numChannels);
}
function getDownloadTargetArrayBuffer(rows, columns, channelsPerTexture) {
    var isFloatTexture = _environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');
    var downloadTarget;
    if (isFloatTexture) {
        downloadTarget = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, channelsPerTexture));
    } else {
        downloadTarget = new Uint8Array(rows * columns * channelsPerTexture);
    }
    return downloadTarget;
}
function decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel) {
    var isFloatTexture = _environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');
    if (isFloatTexture) {
        var matrix = new Float32Array(rows * columns);
        tex_util.decodeMatrixFromUnpackedArray(downloadTarget, matrix, channelsPerPixel);
        return matrix;
    } else {
        return tex_util.decodeToFloatArray(downloadTarget);
    }
}
function downloadMatrixFromOutputTextureAsync(gl, getBufferSubDataAsyncExtension, rows, columns) {
    return __awaiter(this, void 0, void 0, function () {
        var gl2, channelsPerPixel, downloadTarget, bufferSizeBytes, buffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    gl2 = gl;
                    channelsPerPixel = 4;
                    downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);
                    bufferSizeBytes = downloadTarget instanceof Float32Array ? downloadTarget.length * 4 : downloadTarget;
                    buffer = gl.createBuffer();
                    webgl_util.callAndCheck(gl, function () {
                        return gl.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
                    });
                    webgl_util.callAndCheck(gl, function () {
                        return gl.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl.STATIC_DRAW);
                    });
                    webgl_util.callAndCheck(gl, function () {
                        return gl2.readPixels(0, 0, columns, rows, gl.RGBA, getTextureType(gl), 0);
                    });
                    return [4, getBufferSubDataAsyncExtension.getBufferSubDataAsync(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget)];
                case 1:
                    _a.sent();
                    return [2, decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel)];
            }
        });
    });
}
function downloadMatrixFromOutputTexture(gl, rows, columns) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),
        w = _a[0],
        h = _a[1];
    var channelsPerPixel = 4;
    var downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);
    webgl_util.callAndCheck(gl, function () {
        return gl.readPixels(0, 0, w, h, gl.RGBA, getTextureType(gl), downloadTarget);
    });
    return decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel);
}
function downloadMatrixFromRGBAColorTexture(gl, rows, columns, channels) {
    var size = rows * columns * 4;
    var downloadTarget = new Uint8Array(size);
    webgl_util.callAndCheck(gl, function () {
        return gl.readPixels(0, 0, columns, rows, gl.RGBA, gl.UNSIGNED_BYTE, downloadTarget);
    });
    var packedRGBA = new Float32Array(size);
    for (var i = 0; i < downloadTarget.length; i++) {
        packedRGBA[i] = downloadTarget[i];
    }
    var matrix = new Float32Array(rows * columns * channels);
    tex_util.decodeMatrixFromUnpackedColorRGBAArray(packedRGBA, matrix, channels);
    return matrix;
}
function downloadMatrixFromPackedOutputTexture(gl, rows, columns) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),
        w = _a[0],
        h = _a[1];
    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));
    webgl_util.callAndCheck(gl, function () {
        return gl.readPixels(0, 0, w, h, gl.RGBA, getTextureType(gl), packedRGBA);
    });
    var matrix = new Float32Array(rows * columns);
    return tex_util.decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix);
}
//# sourceMappingURL=gpgpu_util.js.map
},{"../../environment":"CAkW","./tex_util":"v36e","./webgl_util":"7OCh"}],"a4ii":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GPGPUContext = undefined;

var _environment = require("../../environment");

var _util = require("../../util");

var util = _interopRequireWildcard(_util);

var _gpgpu_util = require("./gpgpu_util");

var gpgpu_util = _interopRequireWildcard(_gpgpu_util);

var _tex_util = require("./tex_util");

var tex_util = _interopRequireWildcard(_tex_util);

var _webgl_util = require("./webgl_util");

var webgl_util = _interopRequireWildcard(_webgl_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var GPGPUContext = function () {
    function GPGPUContext(gl) {
        this.outputTexture = null;
        this.program = null;
        this.disposed = false;
        this.autoDebugValidate = false;
        this.vertexAttrsAreBound = false;
        if (gl != null) {
            this.gl = gl;
        } else {
            this.gl = gpgpu_util.createWebGLContext();
        }
        if (_environment.ENV.get('WEBGL_VERSION') === 1) {
            this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, 'OES_texture_float');
            this.colorBufferFloatExtension = this.gl.getExtension('WEBGL_color_buffer_float');
        } else {
            this.colorBufferFloatExtension = webgl_util.getExtensionOrThrow(this.gl, 'EXT_color_buffer_float');
        }
        this.loseContextExtension = webgl_util.getExtensionOrThrow(this.gl, 'WEBGL_lose_context');
        if (_environment.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) {
            this.getBufferSubDataAsyncExtension = this.gl.getExtension('WEBGL_get_buffer_sub_data_async');
        }
        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);
        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);
        this.framebuffer = webgl_util.createFramebuffer(this.gl);
    }
    GPGPUContext.prototype.dispose = function () {
        var _this = this;
        if (this.disposed) {
            return;
        }
        if (this.program != null) {
            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');
        }
        if (this.outputTexture != null) {
            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');
        }
        var gl = this.gl;
        webgl_util.callAndCheck(gl, function () {
            return gl.finish();
        });
        webgl_util.callAndCheck(gl, function () {
            return gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        });
        webgl_util.callAndCheck(gl, function () {
            return gl.deleteFramebuffer(_this.framebuffer);
        });
        webgl_util.callAndCheck(gl, function () {
            return gl.bindBuffer(gl.ARRAY_BUFFER, null);
        });
        webgl_util.callAndCheck(gl, function () {
            return gl.deleteBuffer(_this.vertexBuffer);
        });
        webgl_util.callAndCheck(gl, function () {
            return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        });
        webgl_util.callAndCheck(gl, function () {
            return gl.deleteBuffer(_this.indexBuffer);
        });
        this.loseContextExtension.loseContext();
        this.disposed = true;
    };
    GPGPUContext.prototype.enableAutomaticDebugValidation = function (enabled) {
        this.autoDebugValidate = enabled;
        webgl_util.enableDebugWebGLErrorChecking(enabled);
    };
    GPGPUContext.prototype.createMatrixTexture = function (rows, columns) {
        this.throwIfDisposed();
        return gpgpu_util.createMatrixTexture(this.gl, rows, columns);
    };
    GPGPUContext.prototype.uploadPixelDataToTexture = function (texture, pixels) {
        this.throwIfDisposed();
        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);
    };
    GPGPUContext.prototype.createPackedMatrixTexture = function (rows, columns) {
        this.throwIfDisposed();
        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns);
    };
    GPGPUContext.prototype.deleteMatrixTexture = function (texture) {
        var _this = this;
        this.throwIfDisposed();
        if (this.outputTexture === texture) {
            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
            this.outputTexture = null;
        }
        webgl_util.callAndCheck(this.gl, function () {
            return _this.gl.deleteTexture(texture);
        });
    };
    GPGPUContext.prototype.uploadMatrixToTexture = function (texture, rows, columns, matrix) {
        this.throwIfDisposed();
        var numChannels = 1;
        return gpgpu_util.uploadMatrixToTexture(this.gl, texture, rows, columns, matrix, numChannels);
    };
    GPGPUContext.prototype.uploadMatrixToPackedTexture = function (texture, rows, columns, matrix) {
        this.throwIfDisposed();
        return gpgpu_util.uploadMatrixToPackedTexture(this.gl, texture, rows, columns, matrix);
    };
    GPGPUContext.prototype.downloadMatrixFromTexture = function (texture, rows, columns) {
        var _this = this;
        return this.downloadMatrixDriver(texture, function () {
            return gpgpu_util.downloadMatrixFromOutputTexture(_this.gl, rows, columns);
        });
    };
    GPGPUContext.prototype.downloadMatrixFromTextureAsync = function (texture, rows, columns) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.getBufferSubDataAsyncExtension == null) {
                    throw new Error("Cannot download matrix from output texture asynchronously, " + "WEBGL_get_buffer_sub_data_async is not enabled.");
                }
                return [2, this.downloadMatrixDriverAsync(texture, function () {
                    return gpgpu_util.downloadMatrixFromOutputTextureAsync(_this.gl, _this.getBufferSubDataAsyncExtension, rows, columns);
                })];
            });
        });
    };
    GPGPUContext.prototype.downloadMatrixFromRGBAColorTexture = function (texture, rows, columns, channels) {
        var _this = this;
        return this.downloadMatrixDriver(texture, function () {
            return gpgpu_util.downloadMatrixFromRGBAColorTexture(_this.gl, rows, columns, channels);
        });
    };
    GPGPUContext.prototype.downloadMatrixFromPackedTexture = function (texture, rows, columns) {
        var _this = this;
        return this.downloadMatrixDriver(texture, function () {
            return gpgpu_util.downloadMatrixFromPackedOutputTexture(_this.gl, rows, columns);
        });
    };
    GPGPUContext.prototype.createProgram = function (fragmentShaderSource) {
        this.throwIfDisposed();
        var gl = this.gl;
        var fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);
        var vertexShader = gpgpu_util.createVertexShader(gl);
        var program = webgl_util.createProgram(gl);
        webgl_util.callAndCheck(gl, function () {
            return gl.attachShader(program, vertexShader);
        });
        webgl_util.callAndCheck(gl, function () {
            return gl.attachShader(program, fragmentShader);
        });
        webgl_util.linkProgram(gl, program);
        if (this.autoDebugValidate) {
            webgl_util.validateProgram(gl, program);
        }
        if (!this.vertexAttrsAreBound) {
            this.setProgram(program);
            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);
        }
        return program;
    };
    GPGPUContext.prototype.deleteProgram = function (program) {
        var _this = this;
        this.throwIfDisposed();
        if (program === this.program) {
            this.program = null;
        }
        if (program != null) {
            webgl_util.callAndCheck(this.gl, function () {
                return _this.gl.deleteProgram(program);
            });
        }
    };
    GPGPUContext.prototype.setProgram = function (program) {
        var _this = this;
        this.throwIfDisposed();
        this.program = program;
        if (this.program != null && this.autoDebugValidate) {
            webgl_util.validateProgram(this.gl, this.program);
        }
        webgl_util.callAndCheck(this.gl, function () {
            return _this.gl.useProgram(program);
        });
    };
    GPGPUContext.prototype.getUniformLocation = function (program, uniformName, shouldThrow) {
        if (shouldThrow === void 0) {
            shouldThrow = true;
        }
        this.throwIfDisposed();
        if (shouldThrow) {
            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);
        } else {
            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);
        }
    };
    GPGPUContext.prototype.getAttributeLocation = function (program, attribute) {
        var _this = this;
        this.throwIfDisposed();
        return webgl_util.callAndCheck(this.gl, function () {
            return _this.gl.getAttribLocation(program, attribute);
        });
    };
    GPGPUContext.prototype.getUniformLocationNoThrow = function (program, uniformName) {
        this.throwIfDisposed();
        return this.gl.getUniformLocation(program, uniformName);
    };
    GPGPUContext.prototype.setInputMatrixTexture = function (inputMatrixTexture, uniformLocation, textureUnit) {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        webgl_util.bindTextureToProgramUniformSampler(this.gl, this.program, inputMatrixTexture, uniformLocation, textureUnit);
    };
    GPGPUContext.prototype.setOutputMatrixTexture = function (outputMatrixTexture, rows, columns) {
        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
    };
    GPGPUContext.prototype.setOutputPackedMatrixTexture = function (outputPackedMatrixTexture, rows, columns) {
        this.throwIfDisposed();
        var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),
            width = _a[0],
            height = _a[1];
        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
    };
    GPGPUContext.prototype.setOutputMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {
        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
    };
    GPGPUContext.prototype.setOutputPackedMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {
        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
    };
    GPGPUContext.prototype.debugValidate = function () {
        if (this.program != null) {
            webgl_util.validateProgram(this.gl, this.program);
        }
        webgl_util.validateFramebuffer(this.gl);
    };
    GPGPUContext.prototype.executeProgram = function () {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        var gl = this.gl;
        if (this.autoDebugValidate) {
            this.debugValidate();
        }
        webgl_util.callAndCheck(gl, function () {
            return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
        });
    };
    GPGPUContext.prototype.blockUntilAllProgramsCompleted = function () {
        var _this = this;
        this.throwIfDisposed();
        webgl_util.callAndCheck(this.gl, function () {
            return _this.gl.finish();
        });
    };
    GPGPUContext.prototype.getQueryTimerExtension = function () {
        if (this.disjointQueryTimerExtension == null) {
            this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, _environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');
        }
        return this.disjointQueryTimerExtension;
    };
    GPGPUContext.prototype.getQueryTimerExtensionWebGL2 = function () {
        return this.getQueryTimerExtension();
    };
    GPGPUContext.prototype.getQueryTimerExtensionWebGL1 = function () {
        return this.getQueryTimerExtension();
    };
    GPGPUContext.prototype.runQuery = function (queryFn) {
        var query = this.beginQuery();
        queryFn();
        this.endQuery();
        return this.pollQueryTime(query);
    };
    GPGPUContext.prototype.beginQuery = function () {
        if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
            var gl2 = this.gl;
            var ext_1 = this.getQueryTimerExtensionWebGL2();
            var query_1 = gl2.createQuery();
            gl2.beginQuery(ext_1.TIME_ELAPSED_EXT, query_1);
            return query_1;
        }
        var ext = this.getQueryTimerExtensionWebGL1();
        var query = ext.createQueryEXT();
        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);
        return query;
    };
    GPGPUContext.prototype.endQuery = function () {
        if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
            var gl2 = this.gl;
            var ext_2 = this.getQueryTimerExtensionWebGL2();
            gl2.endQuery(ext_2.TIME_ELAPSED_EXT);
            return;
        }
        var ext = this.getQueryTimerExtensionWebGL1();
        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);
    };
    GPGPUContext.prototype.isQueryAvailable = function (query, queryTimerVersion) {
        if (queryTimerVersion === 0) {
            return true;
        }
        if (queryTimerVersion === 2) {
            var gl2 = this.gl;
            var ext = this.getQueryTimerExtensionWebGL2();
            var available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);
            var disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
            return available && !disjoint;
        } else {
            var ext = this.getQueryTimerExtensionWebGL1();
            var available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);
            var disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
            return available && !disjoint;
        }
    };
    GPGPUContext.prototype.pollQueryTime = function (query) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var resolveWithWarning = function () {
                console.warn('Disjoint query timer never available.');
                resolve(-1);
            };
            var queryTimerVersion = _environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION');
            util.repeatedTry(function () {
                return _this.isQueryAvailable(query, queryTimerVersion);
            }).then(function () {
                return resolve(_this.getQueryTime(query, queryTimerVersion));
            }).catch(resolveWithWarning);
        });
    };
    GPGPUContext.prototype.getQueryTime = function (query, queryTimerVersion) {
        if (queryTimerVersion === 0) {
            return null;
        }
        if (queryTimerVersion === 2) {
            var gl2 = this.gl;
            var timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);
            return timeElapsedNanos / 1000000;
        } else {
            var ext = this.getQueryTimerExtensionWebGL1();
            var timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);
            return timeElapsedNanos / 1000000;
        }
    };
    GPGPUContext.prototype.downloadMatrixDriverSetup = function (texture) {
        this.throwIfDisposed();
        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);
        if (this.autoDebugValidate) {
            webgl_util.validateFramebuffer(this.gl);
        }
    };
    GPGPUContext.prototype.downloadMatrixDriverTeardown = function () {
        if (this.outputTexture != null) {
            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);
            if (this.autoDebugValidate) {
                webgl_util.validateFramebuffer(this.gl);
            }
        } else {
            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
        }
    };
    GPGPUContext.prototype.downloadMatrixDriver = function (texture, downloadAndDecode) {
        this.downloadMatrixDriverSetup(texture);
        var result = downloadAndDecode();
        this.downloadMatrixDriverTeardown();
        return result;
    };
    GPGPUContext.prototype.downloadMatrixDriverAsync = function (texture, downloadAndDecode) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.downloadMatrixDriverSetup(texture);
                        return [4, downloadAndDecode()];
                    case 1:
                        result = _a.sent();
                        this.downloadMatrixDriverTeardown();
                        return [2, result];
                }
            });
        });
    };
    GPGPUContext.prototype.setOutputMatrixTextureDriver = function (outputMatrixTextureMaybePacked, width, height) {
        this.throwIfDisposed();
        var gl = this.gl;
        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);
        if (this.autoDebugValidate) {
            webgl_util.validateFramebuffer(gl);
        }
        this.outputTexture = outputMatrixTextureMaybePacked;
        webgl_util.callAndCheck(gl, function () {
            return gl.viewport(0, 0, width, height);
        });
        webgl_util.callAndCheck(gl, function () {
            return gl.scissor(0, 0, width, height);
        });
    };
    GPGPUContext.prototype.setOutputMatrixWriteRegionDriver = function (x, y, width, height) {
        var _this = this;
        this.throwIfDisposed();
        webgl_util.callAndCheck(this.gl, function () {
            return _this.gl.scissor(x, y, width, height);
        });
    };
    GPGPUContext.prototype.throwIfDisposed = function () {
        if (this.disposed) {
            throw new Error('Attempted to use disposed GPGPUContext.');
        }
    };
    GPGPUContext.prototype.throwIfNoProgram = function () {
        if (this.program == null) {
            throw new Error('No GPU program is currently set.');
        }
    };
    return GPGPUContext;
}();
exports.GPGPUContext = GPGPUContext;
//# sourceMappingURL=gpgpu_context.js.map
},{"../../environment":"CAkW","../../util":"lDaM","./gpgpu_util":"Fhof","./tex_util":"v36e","./webgl_util":"7OCh"}],"MWs3":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.compileProgram = compileProgram;
exports.runProgram = runProgram;
exports.makeShaderKey = makeShaderKey;

var _environment = require('../../environment');

var _util = require('../../util');

var util = _interopRequireWildcard(_util);

var _shader_compiler = require('./shader_compiler');

var shader_compiler = _interopRequireWildcard(_shader_compiler);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var NAN_UNIFORM_NAME = 'NaN';
function shouldUploadNaNUniform() {
    return !_environment.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');
}
function compileProgram(gpgpu, program, inputs, output) {
    var userCode = program.userCode;
    var inputInfos = inputs.map(function (input, i) {
        var shapeInfo = {
            logicalShape: input.tensor.shape,
            texShape: input.texData.texShape
        };
        return { name: program.variableNames[i], shapeInfo: shapeInfo };
    });
    var inShapeInfos = inputInfos.map(function (x) {
        return x.shapeInfo;
    });
    var outShapeInfo = {
        logicalShape: output.tensor.shape,
        texShape: output.texData.texShape
    };
    var source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.supportsBroadcasting === true);
    var webGLProgram = gpgpu.createProgram(source);
    var uniformLocations = {};
    for (var i = 0; i < program.variableNames.length; i++) {
        var uniformName = program.variableNames[i];
        uniformLocations[uniformName] = gpgpu.getUniformLocation(webGLProgram, uniformName);
    }
    if (shouldUploadNaNUniform()) {
        var throwIfNaNUniformIsNotUsed = false;
        uniformLocations[NAN_UNIFORM_NAME] = gpgpu.getUniformLocation(webGLProgram, NAN_UNIFORM_NAME, throwIfNaNUniformIsNotUsed);
    }
    return {
        program: program,
        source: source,
        webGLProgram: webGLProgram,
        uniformLocations: uniformLocations,
        gpgpu: gpgpu,
        inShapeInfos: inShapeInfos,
        outShapeInfo: outShapeInfo
    };
}
function validateBinaryAndProgram(shapeInfos, inputs) {
    if (shapeInfos.length !== inputs.length) {
        throw Error("Binary was compiled with " + shapeInfos.length + " inputs, but " + ("was executed with " + inputs.length + " inputs"));
    }
    shapeInfos.forEach(function (s, i) {
        var shapeA = s.logicalShape;
        var texShapeA = s.texShape;
        var shapeB = inputs[i].tensor.shape;
        var texShapeB = inputs[i].texData.texShape;
        if (!util.arraysEqual(shapeA, shapeB)) {
            throw Error("Binary was compiled with different shapes than " + ("the current args. Shapes " + shapeA + " and " + shapeB + " must match"));
        }
        if (!util.arraysEqual(texShapeA, texShapeB)) {
            throw Error("Binary was compiled with different texture shapes than the" + (" current args. Shape " + texShapeA + " and " + texShapeB + " must match"));
        }
    });
}
function runProgram(binary, inputs, output, customSetup) {
    validateBinaryAndProgram(binary.inShapeInfos, inputs);
    validateBinaryAndProgram([binary.outShapeInfo], [output]);
    var outTex = output.texData.texture;
    var outTexShape = output.texData.texShape;
    var gpgpu = binary.gpgpu;
    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
    gpgpu.setProgram(binary.webGLProgram);
    inputs.forEach(function (input, i) {
        var tex = input.texData.texture;
        var variableName = binary.program.variableNames[i];
        var variableUniformLocation = binary.uniformLocations[variableName];
        gpgpu.setInputMatrixTexture(tex, variableUniformLocation, i);
    });
    if (shouldUploadNaNUniform()) {
        gpgpu.gl.uniform1f(binary.uniformLocations[NAN_UNIFORM_NAME], NaN);
    }
    if (customSetup != null) {
        customSetup(gpgpu, binary.webGLProgram);
    }
    gpgpu.executeProgram();
}
function makeShaderKey(program, inputs, output) {
    var keyInputs = '';
    inputs.concat(output).forEach(function (x) {
        keyInputs += x.tensor.shape + "_" + x.texData.texShape;
    });
    var keyUserCode = program.userCode;
    var keyBroadcast = (program.supportsBroadcasting === true).toString();
    var key = program.constructor.name;
    key += '_' + keyBroadcast + '_' + keyInputs + '_' + keyUserCode;
    return key;
}
//# sourceMappingURL=gpgpu_math.js.map
},{"../../environment":"CAkW","../../util":"lDaM","./shader_compiler":"pTbo"}],"m/Rw":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WhereProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var WhereProgram = function () {
    function WhereProgram(cRank, shape, rank) {
        this.variableNames = ['c', 'a', 'b'];
        this.outputShape = shape;
        var cCoords;
        var abCoords;
        if (rank > 4) {
            throw Error("Where for rank " + rank + " is not yet supported");
        }
        if (rank === 1) {
            abCoords = "resRC";
            cCoords = "resRC";
        } else {
            var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
            var cCoordVars = [];
            var abCoordVars = [];
            for (var i = 0; i < shape.length; i++) {
                abCoordVars.push("" + currentCoords[i]);
                if (i < cRank) {
                    cCoordVars.push("" + currentCoords[i]);
                }
            }
            cCoords = cCoordVars.join();
            abCoords = abCoordVars.join();
        }
        var dtype = (0, _shader_compiler.getCoordsDataType)(rank);
        this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        float cVal = getC(" + cCoords + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + abCoords + "));\n        } else {\n          setOutput(getB(" + abCoords + "));\n        }\n      }\n    ";
    }
    return WhereProgram;
}();
exports.WhereProgram = WhereProgram;
//# sourceMappingURL=logical_gpu.js.map
},{"./shader_compiler":"pTbo"}],"tVfz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var LRNProgram = function () {
    function LRNProgram(xShape, radius, bias, alpha, beta) {
        this.variableNames = ['x'];
        this.outputShape = [];
        var rad = radius;
        var maxD = xShape[3] - 1;
        this.outputShape = xShape;
        var powOperator;
        var basis = "float(" + bias + ") + float(" + alpha + ") * sum";
        if (beta === 0.5) {
            powOperator = "inversesqrt(" + basis + ")";
        } else if (beta === 1.0) {
            powOperator = "1.0/(" + basis + ")";
        } else {
            powOperator = "exp(log(" + basis + ") * float(-" + beta + "));";
        }
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + rad + "; j <= " + rad + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + maxD + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + powOperator + ";\n        setOutput(val);\n      }\n    ";
    }
    return LRNProgram;
}();
exports.LRNProgram = LRNProgram;
//# sourceMappingURL=lrn_gpu.js.map
},{}],"Nk+K":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var MaxPool2DBackpropProgram = function () {
    function MaxPool2DBackpropProgram(convInfo) {
        this.variableNames = ['dy', 'maxPos'];
        this.outputShape = convInfo.inShape;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var lastIndex = filterHeight * filterWidth - 1;
        this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + lastIndex + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + filterWidth + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }
    return MaxPool2DBackpropProgram;
}();
exports.MaxPool2DBackpropProgram = MaxPool2DBackpropProgram;
//# sourceMappingURL=max_pool_backprop_gpu.js.map
},{}],"aN5F":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var MatMulProgram = function () {
    function MatMulProgram(aShape, bShape, transposeA, transposeB) {
        if (transposeA === void 0) {
            transposeA = false;
        }
        if (transposeB === void 0) {
            transposeB = false;
        }
        this.variableNames = ['matrixA', 'matrixB'];
        var outerShapeA = transposeA ? aShape[1] : aShape[0];
        var outerShapeB = transposeB ? bShape[0] : bShape[1];
        var sharedDim = transposeA ? aShape[0] : aShape[1];
        this.outputShape = [outerShapeA, outerShapeB];
        var aSnippetFromOffset = function (vec4Offset, indexVar) {
            return transposeA ? indexVar + " + " + vec4Offset + ", aRow" : "aRow, " + indexVar + " + " + vec4Offset;
        };
        var bSnippetFromOffset = function (vec4Offset, indexVar) {
            return transposeB ? "bCol, " + indexVar + " + " + vec4Offset : indexVar + " + " + vec4Offset + ", bCol";
        };
        var sharedDimNearestVec4 = Math.floor(sharedDim / 4) * 4;
        var sharedDimVec4Remainder = sharedDim % 4;
        this.userCode = " float dotARowBCol(int aRow, int bCol) {\n      float result = 0.0;\n      for (int i = 0; i < " + sharedDimNearestVec4 + "; i += 4) {\n        vec4 a = vec4(\n          getMatrixA(" + aSnippetFromOffset(0, 'i') + "),\n          getMatrixA(" + aSnippetFromOffset(1, 'i') + "),\n          getMatrixA(" + aSnippetFromOffset(2, 'i') + "),\n          getMatrixA(" + aSnippetFromOffset(3, 'i') + ")\n        );\n        vec4 b = vec4(\n          getMatrixB(" + bSnippetFromOffset(0, 'i') + "),\n          getMatrixB(" + bSnippetFromOffset(1, 'i') + "),\n          getMatrixB(" + bSnippetFromOffset(2, 'i') + "),\n          getMatrixB(" + bSnippetFromOffset(3, 'i') + ")\n        );\n\n        result += dot(a, b);\n      }\n\n      if (" + (sharedDimVec4Remainder === 1) + ") {\n        result += getMatrixA(" + aSnippetFromOffset(0, sharedDimNearestVec4) + ") *\n          getMatrixB(" + bSnippetFromOffset(0, sharedDimNearestVec4) + ");\n      } else if (" + (sharedDimVec4Remainder === 2) + ") {\n        vec2 a = vec2(\n          getMatrixA(" + aSnippetFromOffset(0, sharedDimNearestVec4) + "),\n          getMatrixA(" + aSnippetFromOffset(1, sharedDimNearestVec4) + ")\n        );\n        vec2 b = vec2(\n          getMatrixB(" + bSnippetFromOffset(0, sharedDimNearestVec4) + "),\n          getMatrixB(" + bSnippetFromOffset(1, sharedDimNearestVec4) + ")\n        );\n        result += dot(a, b);\n      } else if (" + (sharedDimVec4Remainder === 3) + ") {\n        vec3 a = vec3(\n          getMatrixA(" + aSnippetFromOffset(0, sharedDimNearestVec4) + "),\n          getMatrixA(" + aSnippetFromOffset(1, sharedDimNearestVec4) + "),\n          getMatrixA(" + aSnippetFromOffset(2, sharedDimNearestVec4) + ")\n        );\n        vec3 b = vec3(\n          getMatrixB(" + bSnippetFromOffset(0, sharedDimNearestVec4) + "),\n          getMatrixB(" + bSnippetFromOffset(1, sharedDimNearestVec4) + "),\n          getMatrixB(" + bSnippetFromOffset(2, sharedDimNearestVec4) + ")\n        );\n        result += dot(a, b);\n      }\n\n      return result;\n    }\n\n    void main() {\n      ivec2 resRC = getOutputCoords();\n      setOutput(dotARowBCol(resRC.x, resRC.y));\n    }\n    ";
    }
    return MatMulProgram;
}();
exports.MatMulProgram = MatMulProgram;
//# sourceMappingURL=mulmat_gpu.js.map
},{}],"DcF5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var MultinomialProgram = function () {
    function MultinomialProgram(batchSize, numOutcomes, numSamples) {
        this.variableNames = ['probs'];
        this.outputShape = [batchSize, numSamples];
        this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (numOutcomes - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (numOutcomes - 1) + "));\n      }\n    ";
    }
    MultinomialProgram.prototype.getCustomSetupFunc = function (seed) {
        var _this = this;
        return function (gpgpu, webGLProgram) {
            if (_this.seedLoc == null) {
                _this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');
            }
            gpgpu.gl.uniform1f(_this.seedLoc, seed);
        };
    };
    return MultinomialProgram;
}();
exports.MultinomialProgram = MultinomialProgram;
//# sourceMappingURL=multinomial_gpu.js.map
},{}],"WY+B":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var OneHotProgram = function () {
    function OneHotProgram(numIndices, depth, onValue, offValue) {
        this.variableNames = ['indices'];
        this.outputShape = [numIndices, depth];
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + offValue + "), float(" + onValue + "),\n                      float(index == coords.y)));\n      }\n    ";
    }
    return OneHotProgram;
}();
exports.OneHotProgram = OneHotProgram;
//# sourceMappingURL=onehot_gpu.js.map
},{}],"ZCDt":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PadProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var PadProgram = function () {
    function PadProgram(xShape, paddings, constantValue) {
        this.variableNames = ['x'];
        this.outputShape = paddings.map(function (p, i) {
            return p[0] + xShape[i] + p[1];
        });
        var rank = xShape.length;
        var type = (0, _shader_compiler.getCoordsDataType)(rank);
        var start = paddings.map(function (p) {
            return p[0];
        }).join(',');
        var end = paddings.map(function (p, i) {
            return p[0] + xShape[i];
        }).join(',');
        var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);
        if (rank === 1) {
            this.userCode = "\n        int start = " + start + ";\n        int end = " + end + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + constantValue + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
            return;
        }
        this.userCode = "\n      " + type + " start = " + type + "(" + start + ");\n      " + type + " end = " + type + "(" + end + ");\n\n      void main() {\n        " + type + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + constantValue + "));\n        } else {\n          " + type + " coords = outC - start;\n          setOutput(getX(" + unpackedCoords + "));\n        }\n      }\n    ";
    }
    return PadProgram;
}();
exports.PadProgram = PadProgram;
//# sourceMappingURL=pad_gpu.js.map
},{"./shader_compiler":"pTbo"}],"HXdI":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var Pool2DProgram = function () {
    function Pool2DProgram(convInfo, poolType, computePositions) {
        this.variableNames = ['x'];
        if (poolType === 'avg' && computePositions) {
            throw new Error('Cannot compute positions for average pool.');
        }
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        this.outputShape = convInfo.outShape;
        var isAvgPool = poolType === 'avg';
        var initializationValue = '0.0';
        if (!isAvgPool) {
            initializationValue = '-1.0 / 0.0';
        }
        if (computePositions) {
            var compareOp_1 = '>=';
            this.userCode = "\n        const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n        const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + filterHeight + "; wR++) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + filterWidth + "; wC++) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value " + compareOp_1 + " currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + filterWidth + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
            return;
        }
        var compareOp = 'max';
        var returnValue = poolType + "(" + poolType + "(" + poolType + "(" + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
        if (poolType === 'avg') {
            returnValue = "avgValue / count";
        }
        var filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
        var filterWidthVec4Remainder = filterWidth % 4;
        var updateSnippet = "\n      if (" + isAvgPool + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = " + compareOp + "(values, minMaxValue);\n      }\n    ";
        this.userCode = "\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n      const float initializationValue = " + initializationValue + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + initializationValue + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidthNearestVec4 + "; wC += 4) {\n            int xC = xCCorner + wC;\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              getValue(batch, xR, xC + 3, d)\n            );\n\n            " + updateSnippet + "\n          }\n\n          int xC = xCCorner + " + filterWidthNearestVec4 + ";\n          if (" + (filterWidthVec4Remainder === 1) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          } else if (" + (filterWidthVec4Remainder === 2) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          } else if (" + (filterWidthVec4Remainder === 3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          }\n        }\n        setOutput(" + returnValue + ");\n      }\n    ";
    }
    return Pool2DProgram;
}();
exports.Pool2DProgram = Pool2DProgram;
//# sourceMappingURL=pool_gpu.js.map
},{}],"d20b":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var ReduceProgram = function () {
    function ReduceProgram(reduceInfo, reduceType) {
        this.variableNames = ['x'];
        var windowSize = reduceInfo.windowSize;
        var batchSize = reduceInfo.batchSize;
        var inSize = reduceInfo.inSize;
        var outSize = Math.ceil(inSize / windowSize);
        this.outputShape = [batchSize, outSize];
        var isReduceSum = reduceType === 'sum';
        var initializationValue = '0.0';
        if (!isReduceSum) {
            if (reduceType === 'min') {
                initializationValue = '1.0 / 0.0';
            } else {
                initializationValue = '-1.0 / 0.0';
            }
        }
        var compareOp = reduceType === 'min' ? 'min' : 'max';
        var returnValue = reduceType + "(" + reduceType + "(" + reduceType + "(" + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
        if (reduceType === 'sum') {
            returnValue = "sumValue";
        }
        var windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
        var windowSizeVec4Remainder = windowSize % 4;
        var updateSnippet = "\n      if (" + isReduceSum + ") {\n        sumValue += dot(values, ones);\n      } else {\n        minMaxValue = " + compareOp + "(values, minMaxValue);\n      }\n    ";
        var checkOutOfBounds = '';
        if (inSize % windowSize > 0) {
            checkOutOfBounds = "\n        if (inIdx < 0 || inIdx >= " + inSize + ") {\n          return initializationValue;\n        }\n      ";
        }
        this.userCode = "\n      const float initializationValue = " + initializationValue + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + checkOutOfBounds + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + windowSize + ";\n\n        vec4 minMaxValue = vec4(" + initializationValue + ");\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + windowSizeNearestVec4 + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + updateSnippet + "\n        }\n\n        int inIdx = inOffset + " + windowSizeNearestVec4 + ";\n        if (" + (windowSizeVec4Remainder === 1) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n          " + updateSnippet + "\n        } else if (" + (windowSizeVec4Remainder === 2) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n          " + updateSnippet + "\n        } else if (" + (windowSizeVec4Remainder === 3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n          " + updateSnippet + "\n        }\n        setOutput(" + returnValue + ");\n      }\n    ";
    }
    return ReduceProgram;
}();
exports.ReduceProgram = ReduceProgram;
//# sourceMappingURL=reduce_gpu.js.map
},{}],"nldf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var ResizeBilinearBackpropProgram = function () {
    function ResizeBilinearBackpropProgram(dy, x, alignCorners) {
        this.variableNames = ['dy'];
        this.outputShape = [];
        this.outputShape = x.shape;
        var _a = x.shape,
            xHeight = _a[1],
            xWidth = _a[2];
        var _b = dy.shape,
            yHeight = _b[1],
            yWidth = _b[2];
        var effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
        var effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
        var heightScale = effectiveXSize[0] / effectiveYSize[0];
        var widthScale = effectiveXSize[1] / effectiveYSize[1];
        var invHeightScale = 1 / heightScale;
        var invWidthScale = 1 / widthScale;
        var winHeight = Math.ceil(invHeightScale) * 2 + 2;
        var winWidth = Math.ceil(invWidthScale) * 2 + 2;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + heightScale + ");\n        const float widthScale = float(" + widthScale + ");\n\n        const float invHeightScale = float(" + invHeightScale + ");\n        const float invWidthScale = float(" + invWidthScale + ");\n\n        const int winHeight = int(" + winHeight + ");\n        const int winWidth = int(" + winWidth + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + yHeight + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + yWidth + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (xHeight - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (xWidth - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
    }
    return ResizeBilinearBackpropProgram;
}();
exports.ResizeBilinearBackpropProgram = ResizeBilinearBackpropProgram;
//# sourceMappingURL=resize_bilinear_backprop_gpu.js.map
},{}],"5WTK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var ResizeBilinearProgram = function () {
    function ResizeBilinearProgram(inputShape, newHeight, newWidth, alignCorners) {
        this.variableNames = ['A'];
        this.outputShape = [];
        var batch = inputShape[0],
            oldHeight = inputShape[1],
            oldWidth = inputShape[2],
            depth = inputShape[3];
        this.outputShape = [batch, newHeight, newWidth, depth];
        var effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
        var effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + effectiveInSize[0] / effectiveOutSize[0] + ",\n          " + effectiveInSize[1] / effectiveOutSize[1] + ");\n      const vec2 inputShapeRC = vec2(" + oldHeight + ".0, " + oldWidth + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
    }
    return ResizeBilinearProgram;
}();
exports.ResizeBilinearProgram = ResizeBilinearProgram;
//# sourceMappingURL=resize_bilinear_gpu.js.map
},{}],"/BwM":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var ResizeNearestNeighborProgram = function () {
    function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners) {
        this.variableNames = ['A'];
        this.outputShape = [];
        var batch = inputShape[0],
            oldHeight = inputShape[1],
            oldWidth = inputShape[2],
            depth = inputShape[3];
        this.outputShape = [batch, newHeight, newWidth, depth];
        var effectiveInSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];
        var effectiveOutSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];
        var roundBase = alignCorners ? '0.5' : '0.0';
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + effectiveInSize[0] / effectiveOutSize[0] + ",\n          " + effectiveInSize[1] / effectiveOutSize[1] + ");\n      const vec2 inputShapeRC = vec2(" + oldHeight + ".0, " + oldWidth + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + roundBase + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
    }
    return ResizeNearestNeighborProgram;
}();
exports.ResizeNearestNeighborProgram = ResizeNearestNeighborProgram;
//# sourceMappingURL=resize_nearest_neighbor_gpu.js.map
},{}],"3AFy":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReverseProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var ReverseProgram = function () {
    function ReverseProgram(xShape, axis) {
        this.variableNames = ['x'];
        var rank = xShape.length;
        if (rank > 4) {
            throw new Error("WebGL backend: Reverse of rank-" + rank + " tensor is not yet supported");
        }
        this.outputShape = xShape;
        if (rank === 1) {
            this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + xShape[0] + " - coord - 1));\n        }\n      ";
            return;
        }
        var getInCoord = function (i) {
            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
                return xShape[i] + " - coords[" + i + "] - 1";
            }
            return "coords[" + i + "]";
        };
        var inCoords = xShape.map(function (_, i) {
            return getInCoord(i);
        }).join(',');
        var type = (0, _shader_compiler.getCoordsDataType)(rank);
        this.userCode = "\n      void main() {\n        " + type + " coords = getOutputCoords();\n        setOutput(getX(" + inCoords + "));\n      }\n    ";
    }
    return ReverseProgram;
}();
exports.ReverseProgram = ReverseProgram;
//# sourceMappingURL=reverse_gpu.js.map
},{"./shader_compiler":"pTbo"}],"YY39":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SliceProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var SliceProgram = function () {
    function SliceProgram(destSize) {
        this.variableNames = ['source'];
        this.outputShape = destSize;
        this.rank = destSize.length;
        var dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
        var sourceCoords = getCoords(this.rank);
        this.userCode = "\n      uniform " + dtype + " start;\n\n      void main() {\n        " + dtype + " sourceLoc = start + getOutputCoords();\n        setOutput(getSource(" + sourceCoords + "));\n      }\n    ";
    }
    SliceProgram.prototype.getCustomSetupFunc = function (start) {
        var _this = this;
        if (start.length !== this.rank) {
            throw Error("The rank (" + this.rank + ") of the program must match the " + ("length of start (" + start.length + ")"));
        }
        return function (gpgpu, webGLProgram) {
            if (_this.startLoc == null) {
                _this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');
                if (_this.startLoc == null) {
                    return;
                }
            }
            if (_this.rank === 1) {
                gpgpu.gl.uniform1i(_this.startLoc, start[0]);
            } else if (_this.rank === 2) {
                gpgpu.gl.uniform2i(_this.startLoc, start[0], start[1]);
            } else if (_this.rank === 3) {
                gpgpu.gl.uniform3i(_this.startLoc, start[0], start[1], start[2]);
            } else if (_this.rank === 4) {
                gpgpu.gl.uniform4i(_this.startLoc, start[0], start[1], start[2], start[3]);
            } else {
                throw Error("Slicing for rank " + _this.rank + " is not yet supported");
            }
        };
    };
    return SliceProgram;
}();
exports.SliceProgram = SliceProgram;

function getCoords(rank) {
    if (rank === 1) {
        return 'sourceLoc';
    } else if (rank === 2) {
        return 'sourceLoc.x, sourceLoc.y';
    } else if (rank === 3) {
        return 'sourceLoc.x, sourceLoc.y, sourceLoc.z';
    } else if (rank === 4) {
        return 'sourceLoc.x, sourceLoc.y, sourceLoc.z, sourceLoc.w';
    } else {
        throw Error("Slicing for rank " + rank + " is not yet supported");
    }
}
//# sourceMappingURL=slice_gpu.js.map
},{"./shader_compiler":"pTbo"}],"bLeL":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StridedSliceProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var StridedSliceProgram = function () {
    function StridedSliceProgram(begin, strides, shape) {
        this.variableNames = ['x'];
        this.outputShape = shape;
        this.rank = shape.length;
        var dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
        var newCoords = '';
        if (this.rank === 1) {
            newCoords = 'coords * strides + begin';
        } else {
            newCoords = shape.map(function (_, i) {
                return "coords[" + i + "] * strides[" + i + "] + begin[" + i + "]";
            }).join(',');
        }
        this.userCode = "\n      " + dtype + " begin = " + dtype + "(" + begin + ");\n      " + dtype + " strides = " + dtype + "(" + strides + ");\n\n      void main() {\n        " + dtype + " coords = getOutputCoords();\n        setOutput(getX(" + newCoords + "));\n      }\n    ";
    }
    return StridedSliceProgram;
}();
exports.StridedSliceProgram = StridedSliceProgram;
//# sourceMappingURL=strided_slice_gpu.js.map
},{"./shader_compiler":"pTbo"}],"eFBx":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextureManager = undefined;

var _tex_util = require('./tex_util');

var TextureManager = function () {
    function TextureManager(gpgpu) {
        this.gpgpu = gpgpu;
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
        this.freeTextures = {};
        this.logEnabled = false;
        this.allocatedTextures = [];
        this.usedTextureCount = {};
    }
    TextureManager.prototype.acquireTexture = function (shapeRC, texType) {
        if (texType === void 0) {
            texType = _tex_util.TextureType.FLOAT;
        }
        var shapeKey = getKeyFromTextureShape(shapeRC, texType);
        if (!(shapeKey in this.freeTextures)) {
            this.freeTextures[shapeKey] = [];
        }
        if (!(shapeKey in this.usedTextureCount)) {
            this.usedTextureCount[shapeKey] = 0;
        }
        this.usedTextureCount[shapeKey]++;
        if (this.freeTextures[shapeKey].length > 0) {
            this.numFreeTextures--;
            this.numUsedTextures++;
            this.log();
            return this.freeTextures[shapeKey].shift();
        }
        this.numUsedTextures++;
        this.log();
        var newTexture = this.gpgpu.createMatrixTexture(shapeRC[0], shapeRC[1]);
        this.allocatedTextures.push(newTexture);
        return newTexture;
    };
    TextureManager.prototype.releaseTexture = function (texture, shape, texType) {
        if (texType === void 0) {
            texType = _tex_util.TextureType.FLOAT;
        }
        var shapeKey = getKeyFromTextureShape(shape, texType);
        if (!(shapeKey in this.freeTextures)) {
            this.freeTextures[shapeKey] = [];
        }
        this.freeTextures[shapeKey].push(texture);
        this.numFreeTextures++;
        this.numUsedTextures--;
        this.usedTextureCount[shapeKey]--;
        this.log();
    };
    TextureManager.prototype.log = function () {
        if (!this.logEnabled) {
            return;
        }
        var total = this.numFreeTextures + this.numUsedTextures;
        console.log('Free/Used', this.numFreeTextures + " / " + this.numUsedTextures, "(" + total + ")");
    };
    TextureManager.prototype.getNumUsedTextures = function () {
        return this.numUsedTextures;
    };
    TextureManager.prototype.getNumFreeTextures = function () {
        return this.numFreeTextures;
    };
    TextureManager.prototype.dispose = function () {
        var _this = this;
        if (this.allocatedTextures == null) {
            return;
        }
        this.allocatedTextures.forEach(function (texture) {
            _this.gpgpu.deleteMatrixTexture(texture);
        });
        this.freeTextures = null;
        this.allocatedTextures = null;
        this.usedTextureCount = null;
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
    };
    return TextureManager;
}();
exports.TextureManager = TextureManager;

function getKeyFromTextureShape(shapeRowsCol, texType) {
    return shapeRowsCol[0] + "_" + shapeRowsCol[1] + "_" + texType;
}
//# sourceMappingURL=texture_manager.js.map
},{"./tex_util":"v36e"}],"sy5W":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TileProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var TileProgram = function () {
    function TileProgram(aShape, reps) {
        this.variableNames = ['A'];
        var outputShape = new Array(aShape.length);
        for (var i = 0; i < outputShape.length; i++) {
            outputShape[i] = aShape[i] * reps[i];
        }
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        var dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
        var sourceCoords = getSourceCoords(aShape);
        this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        setOutput(getA(" + sourceCoords + "));\n      }\n    ";
    }
    return TileProgram;
}();
exports.TileProgram = TileProgram;

function getSourceCoords(aShape) {
    var rank = aShape.length;
    if (rank > 4) {
        throw Error("Tile for rank " + rank + " is not yet supported");
    }
    if (rank === 1) {
        return "imod(resRC, " + aShape[0] + ")";
    }
    var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
    var sourceCoords = [];
    for (var i = 0; i < aShape.length; i++) {
        sourceCoords.push("imod(" + currentCoords[i] + ", " + aShape[i] + ")");
    }
    return sourceCoords.join();
}
//# sourceMappingURL=tile_gpu.js.map
},{"./shader_compiler":"pTbo"}],"djry":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransposeProgram = undefined;

var _shader_compiler = require('./shader_compiler');

var TransposeProgram = function () {
    function TransposeProgram(aShape, newDim) {
        this.variableNames = ['A'];
        var outputShape = new Array(aShape.length);
        for (var i = 0; i < outputShape.length; i++) {
            outputShape[i] = aShape[newDim[i]];
        }
        this.outputShape = outputShape;
        this.rank = outputShape.length;
        var dtype = (0, _shader_compiler.getCoordsDataType)(this.rank);
        var switched = getSwitchedCoords(newDim);
        this.userCode = "\n    void main() {\n      " + dtype + " resRC = getOutputCoords();\n      setOutput(getA(" + switched + "));\n    }\n    ";
    }
    return TransposeProgram;
}();
exports.TransposeProgram = TransposeProgram;

function getSwitchedCoords(newDim) {
    var rank = newDim.length;
    if (rank > 4) {
        throw Error("Transpose for rank " + rank + " is not yet supported");
    }
    var originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
    var switchedCoords = new Array(rank);
    for (var i = 0; i < newDim.length; i++) {
        switchedCoords[newDim[i]] = originalOrder[i];
    }
    return switchedCoords.join();
}
//# sourceMappingURL=transpose_gpu.js.map
},{"./shader_compiler":"pTbo"}],"b40Z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var ERF_P = exports.ERF_P = 0.3275911;
var ERF_A1 = exports.ERF_A1 = 0.254829592;
var ERF_A2 = exports.ERF_A2 = -0.284496736;
var ERF_A3 = exports.ERF_A3 = 1.421413741;
var ERF_A4 = exports.ERF_A4 = -1.453152027;
var ERF_A5 = exports.ERF_A5 = 1.061405429;
//# sourceMappingURL=erf_util.js.map
},{}],"7sz/":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TO_INT = exports.LOGICAL_NOT = exports.RECIPROCAL = exports.SQUARE = exports.ERF = exports.ATANH = exports.ACOSH = exports.ASINH = exports.TANH = exports.COSH = exports.SINH = exports.ATAN = exports.ACOS = exports.ASIN = exports.TAN = exports.COS = exports.SIN = exports.SOFTPLUS = exports.SIGMOID = exports.RSQRT = exports.SQRT = exports.LOG1P = exports.LOG = exports.EXPM1 = exports.EXP = exports.ROUND = exports.SIGN = exports.FLOOR = exports.CEIL = exports.NEG = exports.SELU = exports.ELU = exports.RELU = exports.ABS = exports.UnaryOpProgram = undefined;
exports.STEP = STEP;

var _erf_util = require('../../ops/erf_util');

var erf_util = _interopRequireWildcard(_erf_util);

var _selu_util = require('../../ops/selu_util');

var selu_util = _interopRequireWildcard(_selu_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var UnaryOpProgram = function () {
    function UnaryOpProgram(aShape, opSnippet) {
        this.variableNames = ['A'];
        this.outputShape = aShape;
        this.userCode = "\n      float unaryOperation(float x) {\n        " + opSnippet + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
    }
    return UnaryOpProgram;
}();
exports.UnaryOpProgram = UnaryOpProgram;

var CHECK_NAN_SNIPPET = "if (isNaN(x)) return x;";
var ABS = exports.ABS = "return abs(x);";
var RELU = exports.RELU = CHECK_NAN_SNIPPET + "\n  return (x < 0.0) ? 0.0 : x;\n";
var ELU = exports.ELU = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var SELU = exports.SELU = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + selu_util.SELU_SCALEALPHA + ";\n  float scale = " + selu_util.SELU_SCALE + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";
function STEP(alpha) {
    if (alpha === void 0) {
        alpha = 0.0;
    }
    return CHECK_NAN_SNIPPET + ("\n    return x > 0.0 ? 1.0 : float(" + alpha + ");\n  ");
}
var NEG = exports.NEG = "return -x;";
var CEIL = exports.CEIL = "return ceil(x);";
var FLOOR = exports.FLOOR = "return floor(x);";
var SIGN = exports.SIGN = "\n  if (isNaN(x)) { return 0.0; }\n  return sign(x);\n";
var ROUND = exports.ROUND = "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n";
var EXP = exports.EXP = "return exp(x);";
var EXPM1 = exports.EXPM1 = "return exp(x) - 1.0;";
var LOG = exports.LOG = "return log(x);";
var LOG1P = exports.LOG1P = "return log(1.0 + x);";
var SQRT = exports.SQRT = "return sqrt(x);";
var RSQRT = exports.RSQRT = "return inversesqrt(x);";
var SIGMOID = exports.SIGMOID = "return 1.0 / (1.0 + exp(-1.0 * x));";
var SOFTPLUS = exports.SOFTPLUS = "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n";
var SIN = exports.SIN = "return sin(x);";
var COS = exports.COS = "return cos(x);";
var TAN = exports.TAN = "return tan(x);";
var ASIN = exports.ASIN = "return asin(x);";
var ACOS = exports.ACOS = "return acos(x);";
var ATAN = exports.ATAN = CHECK_NAN_SNIPPET + "\n  return atan(x);\n";
var SINH = exports.SINH = "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n";
var COSH = exports.COSH = "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n";
var TANH = exports.TANH = "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n";
var ASINH = exports.ASINH = "return log(x + sqrt(x * x + 1.0));";
var ACOSH = exports.ACOSH = "return log(x + sqrt(x * x - 1.0));";
var ATANH = exports.ATANH = "return (log(1.0 + x) - log(1.0 - x)) / 2.0;";
var ERF = exports.ERF = "\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = " + erf_util.ERF_P + ";\n  float a1 = " + erf_util.ERF_A1 + ";\n  float a2 = " + erf_util.ERF_A2 + ";\n  float a3 = " + erf_util.ERF_A3 + ";\n  float a4 = " + erf_util.ERF_A4 + ";\n  float a5 = " + erf_util.ERF_A5 + ";\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n";
var SQUARE = exports.SQUARE = "return x * x;";
var RECIPROCAL = exports.RECIPROCAL = "return 1.0 / x;";
var LOGICAL_NOT = exports.LOGICAL_NOT = "return float(!(x >= 1.0));";
var TO_INT = exports.TO_INT = "return float(int(x));";
//# sourceMappingURL=unaryop_gpu.js.map
},{"../../ops/erf_util":"b40Z","../../ops/selu_util":"XOGQ"}],"Dfu8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MathBackendWebGL = undefined;

var _environment = require("../environment");

var _axis_util = require("../ops/axis_util");

var axis_util = _interopRequireWildcard(_axis_util);

var _ops = require("../ops/ops");

var ops = _interopRequireWildcard(_ops);

var _reduce_util = require("../ops/reduce_util");

var reduce_util = _interopRequireWildcard(_reduce_util);

var _slice_util = require("../ops/slice_util");

var _tensor = require("../tensor");

var _types = require("../types");

var types = _interopRequireWildcard(_types);

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _backend_util = require("./backend_util");

var backend_util = _interopRequireWildcard(_backend_util);

var _argminmax_gpu = require("./webgl/argminmax_gpu");

var _avg_pool_backprop_gpu = require("./webgl/avg_pool_backprop_gpu");

var _batchnorm_gpu = require("./webgl/batchnorm_gpu");

var _binaryop_gpu = require("./webgl/binaryop_gpu");

var binaryop_gpu = _interopRequireWildcard(_binaryop_gpu);

var _clip_gpu = require("./webgl/clip_gpu");

var _concat_gpu = require("./webgl/concat_gpu");

var _conv_backprop_gpu = require("./webgl/conv_backprop_gpu");

var _conv_backprop_gpu_depthwise = require("./webgl/conv_backprop_gpu_depthwise");

var _conv_gpu = require("./webgl/conv_gpu");

var _conv_gpu_depthwise = require("./webgl/conv_gpu_depthwise");

var _cumsum_gpu = require("./webgl/cumsum_gpu");

var _from_pixels_gpu = require("./webgl/from_pixels_gpu");

var _gather_gpu = require("./webgl/gather_gpu");

var _gpgpu_context = require("./webgl/gpgpu_context");

var _gpgpu_math = require("./webgl/gpgpu_math");

var gpgpu_math = _interopRequireWildcard(_gpgpu_math);

var _gpgpu_util = require("./webgl/gpgpu_util");

var gpgpu_util = _interopRequireWildcard(_gpgpu_util);

var _logical_gpu = require("./webgl/logical_gpu");

var _lrn_gpu = require("./webgl/lrn_gpu");

var _max_pool_backprop_gpu = require("./webgl/max_pool_backprop_gpu");

var _mulmat_gpu = require("./webgl/mulmat_gpu");

var _multinomial_gpu = require("./webgl/multinomial_gpu");

var _onehot_gpu = require("./webgl/onehot_gpu");

var _pad_gpu = require("./webgl/pad_gpu");

var _pool_gpu = require("./webgl/pool_gpu");

var _reduce_gpu = require("./webgl/reduce_gpu");

var _resize_bilinear_backprop_gpu = require("./webgl/resize_bilinear_backprop_gpu");

var _resize_bilinear_gpu = require("./webgl/resize_bilinear_gpu");

var _resize_nearest_neighbor_gpu = require("./webgl/resize_nearest_neighbor_gpu");

var _reverse_gpu = require("./webgl/reverse_gpu");

var _slice_gpu = require("./webgl/slice_gpu");

var _strided_slice_gpu = require("./webgl/strided_slice_gpu");

var _tex_util = require("./webgl/tex_util");

var _texture_manager = require("./webgl/texture_manager");

var _tile_gpu = require("./webgl/tile_gpu");

var _transpose_gpu = require("./webgl/transpose_gpu");

var _unaryop_gpu = require("./webgl/unaryop_gpu");

var unary_op = _interopRequireWildcard(_unaryop_gpu);

var _webgl_util = require("./webgl/webgl_util");

var webgl_util = _interopRequireWildcard(_webgl_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var MathBackendWebGL = function () {
    function MathBackendWebGL(gpgpu, delayedStorage) {
        if (delayedStorage === void 0) {
            delayedStorage = true;
        }
        this.gpgpu = gpgpu;
        this.delayedStorage = delayedStorage;
        this.texData = new WeakMap();
        this.uploadWaitMs = 0;
        this.downloadWaitMs = 0;
        this.binaryCache = {};
        this.disposed = false;
        if (_environment.ENV.get('WEBGL_VERSION') < 1) {
            throw new Error('WebGL is not supported on this device');
        }
        if (typeof document !== 'undefined') {
            this.canvas = document.createElement('canvas');
        }
        if (gpgpu == null) {
            this.gpgpu = new _gpgpu_context.GPGPUContext(gpgpu_util.createWebGLContext(this.canvas));
            this.gpgpuCreatedLocally = true;
        } else {
            this.gpgpuCreatedLocally = false;
        }
        this.textureManager = new _texture_manager.TextureManager(this.gpgpu);
    }
    MathBackendWebGL.prototype.register = function (dataId, shape, dtype) {
        if (this.texData.has(dataId)) {
            throw new Error('Data buffer is already registered');
        }
        this.texData.set(dataId, {
            shape: shape,
            dtype: dtype,
            values: null,
            texture: null,
            texShape: null,
            texType: _tex_util.TextureType.FLOAT
        });
    };
    MathBackendWebGL.prototype.fromPixels = function (pixels, numChannels) {
        if (pixels == null) {
            throw new Error('MathBackendWebGL.writePixels(): pixels can not be null');
        }
        var texShape = [pixels.height, pixels.width];
        var outShape = [pixels.height, pixels.width, numChannels];
        if (pixels instanceof HTMLVideoElement) {
            if (this.fromPixelsCanvas == null) {
                if (typeof document === 'undefined') {
                    throw new Error('Can\'t read pixels from HTMLImageElement outside the browser.');
                }
                if (document.readyState !== 'complete') {
                    throw new Error('The DOM is not ready yet. Please call tf.fromPixels() ' + 'once the DOM is ready. One way to do that is to add an event ' + 'listener for `DOMContentLoaded` on the document object');
                }
                this.fromPixelsCanvas = document.createElement('canvas');
            }
            this.fromPixelsCanvas.width = pixels.width;
            this.fromPixelsCanvas.height = pixels.height;
            this.fromPixelsCanvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);
            pixels = this.fromPixelsCanvas;
        }
        var tempPixelArray = _tensor.Tensor.make(texShape, {}, 'int32');
        this.texData.get(tempPixelArray.dataId).texType = _tex_util.TextureType.UNSIGNED_BYTE;
        this.gpgpu.uploadPixelDataToTexture(this.getTexture(tempPixelArray.dataId), pixels);
        var program = new _from_pixels_gpu.FromPixelsProgram(outShape);
        var res = this.compileAndRun(program, [tempPixelArray]);
        tempPixelArray.dispose();
        return res;
    };
    MathBackendWebGL.prototype.write = function (dataId, values) {
        if (values == null) {
            throw new Error('MathBackendWebGL.write(): values can not be null');
        }
        this.throwIfNoData(dataId);
        var texData = this.texData.get(dataId);
        var texture = texData.texture,
            texShape = texData.texShape,
            texType = texData.texType;
        if (texture != null) {
            this.textureManager.releaseTexture(texture, texShape, texType);
            texData.texture = null;
            texData.texShape = null;
        }
        texData.values = values;
        if (!this.delayedStorage) {
            this.uploadToGPU(dataId);
        }
    };
    MathBackendWebGL.prototype.readSync = function (dataId) {
        this.throwIfNoData(dataId);
        var texData = this.texData.get(dataId);
        var texture = texData.texture,
            values = texData.values,
            texShape = texData.texShape;
        if (values != null) {
            this.cacheOnCPU(dataId);
            return values;
        }
        var shouldTimeProgram = this.activeTimers != null;
        var start;
        if (shouldTimeProgram) {
            start = performance.now();
        }
        var float32Values = this.gpgpu.downloadMatrixFromTexture(texture, texShape[0], texShape[1]);
        if (shouldTimeProgram) {
            this.downloadWaitMs += performance.now() - start;
        }
        this.cacheOnCPU(dataId, float32Values);
        return texData.values;
    };
    MathBackendWebGL.prototype.read = function (dataId) {
        return __awaiter(this, void 0, void 0, function () {
            var texData, texture, values, texShape, float32Values;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.throwIfNoData(dataId);
                        texData = this.texData.get(dataId);
                        texture = texData.texture, values = texData.values, texShape = texData.texShape;
                        if (values != null) {
                            this.cacheOnCPU(dataId);
                            return [2, values];
                        }
                        if (!_environment.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) return [3, 2];
                        return [4, this.gpgpu.downloadMatrixFromTextureAsync(texture, texShape[0], texShape[1])];
                    case 1:
                        float32Values = _a.sent();
                        this.cacheOnCPU(dataId, float32Values);
                        return [2, texData.values];
                    case 2:
                        if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 0) {
                            return [2, this.readSync(dataId)];
                        }
                        return [4, this.gpgpu.runQuery(function () {})];
                    case 3:
                        _a.sent();
                        return [2, this.readSync(dataId)];
                }
            });
        });
    };
    MathBackendWebGL.prototype.time = function (f) {
        return __awaiter(this, void 0, void 0, function () {
            var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimers, kernelMs, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oldActiveTimers = this.activeTimers;
                        newActiveTimers = [];
                        outerMostTime = false;
                        if (this.programTimersStack == null) {
                            this.programTimersStack = newActiveTimers;
                            outerMostTime = true;
                        } else {
                            this.activeTimers.push(newActiveTimers);
                        }
                        this.activeTimers = newActiveTimers;
                        f();
                        flattenedActiveTimers = util.flatten(this.activeTimers);
                        this.activeTimers = oldActiveTimers;
                        if (outerMostTime) {
                            this.programTimersStack = null;
                        }
                        return [4, Promise.all(flattenedActiveTimers).then(function (results) {
                            var sum = 0;
                            results.forEach(function (result) {
                                return sum += result;
                            });
                            return sum;
                        })];
                    case 1:
                        kernelMs = _a.sent();
                        res = {
                            uploadWaitMs: this.uploadWaitMs,
                            downloadWaitMs: this.downloadWaitMs,
                            kernelMs: kernelMs,
                            wallMs: null
                        };
                        this.uploadWaitMs = 0;
                        this.downloadWaitMs = 0;
                        return [2, res];
                }
            });
        });
    };
    MathBackendWebGL.prototype.memory = function () {
        return { unreliable: false };
    };
    MathBackendWebGL.prototype.startTimer = function () {
        if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
            return this.gpgpu.beginQuery();
        }
        return { startMs: performance.now(), endMs: null };
    };
    MathBackendWebGL.prototype.endTimer = function (query) {
        if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
            this.gpgpu.endQuery();
            return query;
        }
        query.endMs = performance.now();
        return query;
    };
    MathBackendWebGL.prototype.getQueryTime = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var timerQuery;
            return __generator(this, function (_a) {
                if (_environment.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
                    return [2, this.gpgpu.pollQueryTime(query)];
                }
                timerQuery = query;
                return [2, timerQuery.endMs - timerQuery.startMs];
            });
        });
    };
    MathBackendWebGL.prototype.disposeData = function (dataId) {
        if (this.texData.has(dataId)) {
            var _a = this.texData.get(dataId),
                texture = _a.texture,
                texShape = _a.texShape,
                texType = _a.texType;
            if (texture != null) {
                this.textureManager.releaseTexture(texture, texShape, texType);
            }
            this.texData.delete(dataId);
        }
    };
    MathBackendWebGL.prototype.getTexture = function (dataId) {
        this.uploadToGPU(dataId);
        return this.texData.get(dataId).texture;
    };
    MathBackendWebGL.prototype.getTextureData = function (dataId) {
        this.uploadToGPU(dataId);
        return this.texData.get(dataId);
    };
    MathBackendWebGL.prototype.getGPGPUContext = function () {
        return this.gpgpu;
    };
    MathBackendWebGL.prototype.getCanvas = function () {
        return this.canvas;
    };
    MathBackendWebGL.prototype.slice = function (x, begin, size) {
        var program = new _slice_gpu.SliceProgram(size);
        var customSetup = program.getCustomSetupFunc(begin);
        return this.compileAndRun(program, [x], null, customSetup);
    };
    MathBackendWebGL.prototype.stridedSlice = function (x, begin, end, strides, beginMask, endMask) {
        var _a = (0, _slice_util.getStridedSlicedInfo)(x.shape, begin, end, strides, beginMask, endMask),
            beginIndex = _a[0],
            size = _a[1];
        if (size.some(function (axis) {
            return axis === 0;
        })) {
            return ops.tensor([], size);
        }
        var program = new _strided_slice_gpu.StridedSliceProgram(beginIndex, strides, size);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.reverse = function (x, axis) {
        var program = new _reverse_gpu.ReverseProgram(x.shape, axis);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.concat = function (a, b) {
        var program = new _concat_gpu.ConcatProgram(a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.neg = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.NEG);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.matMul = function (a, b, transposeA, transposeB) {
        var program = new _mulmat_gpu.MatMulProgram(a.shape, b.shape, transposeA, transposeB);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.multiply = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {
        var inputs = [x, mean, variance];
        var offsetShape = null;
        if (offset != null) {
            offsetShape = offset.shape;
            inputs.push(offset);
        }
        var scaleShape = null;
        if (scale != null) {
            scaleShape = scale.shape;
            inputs.push(scale);
        }
        var program = new _batchnorm_gpu.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
        return this.compileAndRun(program, inputs);
    };
    MathBackendWebGL.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {
        var program = new _lrn_gpu.LRNProgram(x.shape, radius, bias, alpha, beta);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.tile = function (x, reps) {
        var program = new _tile_gpu.TileProgram(x.shape, reps);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.pad = function (x, paddings, constantValue) {
        var program = new _pad_gpu.PadProgram(x.shape, paddings, constantValue);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.transpose = function (x, perm) {
        var program = new _transpose_gpu.TransposeProgram(x.shape, perm);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.gather = function (x, indices, axis) {
        var program = new _gather_gpu.GatherProgram(x.shape, indices.size, axis);
        return this.compileAndRun(program, [x, indices]);
    };
    MathBackendWebGL.prototype.reduce = function (x, reduceType, dtype) {
        var batchSize = x.shape[0];
        var inSize = x.shape[1];
        var windowSize = reduce_util.computeOptimalWindowSize(inSize);
        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };
        var program = new _reduce_gpu.ReduceProgram(reduceInfo, reduceType);
        var _a = program.outputShape,
            rows = _a[0],
            cols = _a[1];
        var output = this.makeOutputArray([rows, cols], dtype);
        this.compileAndRun(program, [x], output);
        if (output.shape[1] === 1) {
            return output;
        }
        return this.reduce(output, reduceType, dtype);
    };
    MathBackendWebGL.prototype.argReduce = function (x, reduceType, bestIndicesA) {
        if (bestIndicesA === void 0) {
            bestIndicesA = null;
        }
        var batchSize = x.shape[0];
        var inSize = x.shape[1];
        if (bestIndicesA != null) {
            batchSize = bestIndicesA.shape[0];
            inSize = bestIndicesA.shape[1];
        }
        var windowSize = reduce_util.computeOptimalWindowSize(inSize);
        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };
        var program = new _argminmax_gpu.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);
        var _a = program.outputShape,
            rows = _a[0],
            cols = _a[1];
        var output = this.makeOutputArray([rows, cols], 'int32');
        var inputs = [x];
        if (bestIndicesA != null) {
            inputs.push(bestIndicesA);
        }
        this.compileAndRun(program, inputs, output);
        if (output.shape[1] === 1) {
            return output;
        }
        return this.argReduce(x, reduceType, output);
    };
    MathBackendWebGL.prototype.sum = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        var outputDType = types.sumOutType(x.dtype);
        return this.reduce(a2D, 'sum', outputDType).reshape(outShape);
    };
    MathBackendWebGL.prototype.argMin = function (x, axis) {
        var axes = [axis];
        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        return this.argReduce(a2D, 'min').reshape(outShape);
    };
    MathBackendWebGL.prototype.argMax = function (x, axis) {
        var axes = [axis];
        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        return this.argReduce(a2D, 'max').reshape(outShape);
    };
    MathBackendWebGL.prototype.cumsum = function (x, axis, exclusive, reverse) {
        if (axis !== x.rank - 1) {
            throw new Error("WebGL cumsum shader expects an inner-most axis=" + (x.rank - 1) + " " + ("but got axis=" + axis));
        }
        var program = new _cumsum_gpu.CumSumProgram(x.shape, exclusive, reverse);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.equal = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.notEqual = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.less = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.lessEqual = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.greater = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.greaterEqual = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.logicalNot = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.logicalAnd = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.logicalOr = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, 'bool');
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.where = function (condition, a, b, dtype) {
        var program = new _logical_gpu.WhereProgram(condition.rank, a.shape, a.rank);
        var output = this.makeOutputArray(program.outputShape, dtype);
        return this.compileAndRun(program, [condition, a, b], output);
    };
    MathBackendWebGL.prototype.topKValues = function (x, k) {
        throw new Error('topKValues GPU not yet implemented!');
    };
    MathBackendWebGL.prototype.topKIndices = function (x, k) {
        throw new Error('topKIndices GPU not yet implemented!');
    };
    MathBackendWebGL.prototype.min = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);
    };
    MathBackendWebGL.prototype.minimum = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.mod = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.max = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var inSize = util.sizeFromShape(reduceShape);
        var a2D = x.as2D(-1, inSize);
        return this.reduce(a2D, 'max', a2D.dtype).reshape(outShape);
    };
    MathBackendWebGL.prototype.maximum = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.squaredDifference = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.divide = function (a, b) {
        var op;
        var outputDtype;
        if (a.dtype === 'int32' && b.dtype === 'int32') {
            op = binaryop_gpu.INT_DIV;
            outputDtype = 'int32';
        } else {
            op = binaryop_gpu.DIV;
            outputDtype = 'float32';
        }
        var program = new _binaryop_gpu.BinaryOpProgram(op, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, outputDtype);
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.add = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.subtract = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.pow = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);
        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));
        return this.compileAndRun(program, [a, b], output);
    };
    MathBackendWebGL.prototype.ceil = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.CEIL);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.floor = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.FLOOR);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.sign = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SIGN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.round = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ROUND);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.exp = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.EXP);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.expm1 = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.EXPM1);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.log = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.LOG);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.log1p = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.LOG1P);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.sqrt = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SQRT);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.rsqrt = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.RSQRT);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.square = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SQUARE);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.reciprocal = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.RECIPROCAL);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.relu = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.RELU);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.elu = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ELU);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.eluDer = function (dy, y) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);
        return this.compileAndRun(program, [dy, y]);
    };
    MathBackendWebGL.prototype.selu = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SELU);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.int = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.TO_INT);
        var output = this.makeOutputArray(program.outputShape, 'int32');
        return this.compileAndRun(program, [x], output);
    };
    MathBackendWebGL.prototype.clip = function (x, min, max) {
        var program = new _clip_gpu.ClipProgram(x.shape, min, max);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.abs = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ABS);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.sigmoid = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SIGMOID);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.softplus = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SOFTPLUS);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.sin = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SIN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.cos = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.COS);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.tan = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.TAN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.asin = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ASIN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.acos = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ACOS);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.atan = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ATAN);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.atan2 = function (a, b) {
        var program = new _binaryop_gpu.BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);
        return this.compileAndRun(program, [a, b]);
    };
    MathBackendWebGL.prototype.sinh = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.SINH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.cosh = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.COSH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.tanh = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.TANH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.asinh = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ASINH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.acosh = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ACOSH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.atanh = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ATANH);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.erf = function (x) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.ERF);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.step = function (x, alpha) {
        var program = new _unaryop_gpu.UnaryOpProgram(x.shape, unary_op.STEP(alpha));
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.conv2d = function (x, filter, convInfo) {
        var program = new _conv_gpu.Conv2DProgram(convInfo);
        return this.compileAndRun(program, [x, filter]);
    };
    MathBackendWebGL.prototype.conv2dDerInput = function (dy, filter, convInfo) {
        var program = new _conv_backprop_gpu.Conv2DDerInputProgram(convInfo);
        return this.compileAndRun(program, [dy, filter]);
    };
    MathBackendWebGL.prototype.conv2dDerFilter = function (x, dy, convInfo) {
        var program = new _conv_backprop_gpu.Conv2DDerFilterProgram(convInfo);
        return this.compileAndRun(program, [x, dy]);
    };
    MathBackendWebGL.prototype.depthwiseConv2D = function (x, filter, convInfo) {
        var program = new _conv_gpu_depthwise.DepthwiseConv2DProgram(convInfo);
        return this.compileAndRun(program, [x, filter]);
    };
    MathBackendWebGL.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {
        var program = new _conv_backprop_gpu_depthwise.DepthwiseConv2DDerInputProgram(convInfo);
        return this.compileAndRun(program, [dy, filter]);
    };
    MathBackendWebGL.prototype.depthwiseConv2DDerFilter = function (x, dy, convInfo) {
        var program = new _conv_backprop_gpu_depthwise.DepthwiseConv2DDerFilterProgram(convInfo);
        return this.compileAndRun(program, [x, dy]);
    };
    MathBackendWebGL.prototype.maxPool = function (x, convInfo) {
        var program = new _pool_gpu.Pool2DProgram(convInfo, 'max', false);
        var output = this.makeOutputArray(program.outputShape, x.dtype);
        return this.compileAndRun(program, [x], output);
    };
    MathBackendWebGL.prototype.avgPool = function (x, convInfo) {
        var program = new _pool_gpu.Pool2DProgram(convInfo, 'avg', false);
        var output = this.makeOutputArray(program.outputShape, 'float32');
        return this.compileAndRun(program, [x], output);
    };
    MathBackendWebGL.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {
        var getPositions = true;
        var maxPoolPositionsProgram = new _pool_gpu.Pool2DProgram(convInfo, 'max', getPositions);
        var maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);
        var maxPoolBackPropProgram = new _max_pool_backprop_gpu.MaxPool2DBackpropProgram(convInfo);
        var output = this.makeOutputArray(maxPoolBackPropProgram.outputShape, x.dtype);
        var result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], output);
        maxPoolPositions.dispose();
        return result;
    };
    MathBackendWebGL.prototype.avgPoolBackprop = function (dy, x, convInfo) {
        var avgPoolBackpropProgram = new _avg_pool_backprop_gpu.AvgPool2DBackpropProgram(convInfo);
        var output = this.makeOutputArray(avgPoolBackpropProgram.outputShape, x.dtype);
        return this.compileAndRun(avgPoolBackpropProgram, [dy], output);
    };
    MathBackendWebGL.prototype.cast = function (x, dtype) {
        return backend_util.castTensor(x, dtype, this);
    };
    MathBackendWebGL.prototype.reshape = function (x, shape) {
        return backend_util.reshapeTensor(x, shape);
    };
    MathBackendWebGL.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {
        var program = new _resize_bilinear_gpu.ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {
        var program = new _resize_bilinear_backprop_gpu.ResizeBilinearBackpropProgram(dy, x, alignCorners);
        return this.compileAndRun(program, [dy]);
    };
    MathBackendWebGL.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {
        var program = new _resize_nearest_neighbor_gpu.ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);
        return this.compileAndRun(program, [x]);
    };
    MathBackendWebGL.prototype.multinomial = function (logits, normalized, numSamples, seed) {
        var probs = normalized ? logits : ops.softmax(logits);
        var batchSize = probs.shape[0];
        var numOutcomes = probs.shape[1];
        var program = new _multinomial_gpu.MultinomialProgram(batchSize, numOutcomes, numSamples);
        var output = this.makeOutputArray(program.outputShape, 'int32');
        var customSetup = program.getCustomSetupFunc(seed);
        return this.compileAndRun(program, [probs], output, customSetup);
    };
    MathBackendWebGL.prototype.oneHot = function (indices, depth, onValue, offValue) {
        var program = new _onehot_gpu.OneHotProgram(indices.size, depth, onValue, offValue);
        return this.compileAndRun(program, [indices]);
    };
    MathBackendWebGL.prototype.makeOutputArray = function (shape, dtype) {
        return _tensor.Tensor.make(shape, {}, dtype);
    };
    MathBackendWebGL.prototype.compileAndRun = function (program, inputs, output, customSetup) {
        var _this = this;
        if (output == null) {
            output = this.makeOutputArray(program.outputShape, inputs[0].dtype);
        }
        var inputsData = inputs.map(function (input) {
            _this.uploadToGPU(input.dataId);
            return { tensor: input, texData: _this.texData.get(input.dataId) };
        });
        this.uploadToGPU(output.dataId);
        var outputData = {
            tensor: output,
            texData: this.texData.get(output.dataId)
        };
        var key = gpgpu_math.makeShaderKey(program, inputsData, outputData);
        var binary = this.getAndSaveBinary(key, function () {
            return gpgpu_math.compileProgram(_this.gpgpu, program, inputsData, outputData);
        });
        var shouldTimeProgram = this.activeTimers != null;
        var query;
        if (shouldTimeProgram) {
            query = this.startTimer();
        }
        gpgpu_math.runProgram(binary, inputsData, outputData, customSetup);
        if (shouldTimeProgram) {
            query = this.endTimer(query);
            this.activeTimers.push(this.getQueryTime(query));
        }
        return output;
    };
    MathBackendWebGL.prototype.getAndSaveBinary = function (key, getBinary) {
        if (!(key in this.binaryCache)) {
            this.binaryCache[key] = getBinary();
        }
        return this.binaryCache[key];
    };
    MathBackendWebGL.prototype.getTextureManager = function () {
        return this.textureManager;
    };
    MathBackendWebGL.prototype.dispose = function () {
        if (this.disposed) {
            return;
        }
        for (var key in this.binaryCache) {
            this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);
        }
        this.textureManager.dispose();
        this.canvas.remove();
        if (this.fromPixelsCanvas != null) {
            this.fromPixelsCanvas.remove();
        }
        if (this.gpgpuCreatedLocally) {
            this.gpgpu.dispose();
        }
        this.disposed = true;
    };
    MathBackendWebGL.prototype.throwIfNoData = function (dataId) {
        if (!this.texData.has(dataId)) {
            throw new Error("WebGL backend: No data found for this tensor. " + "Did you change your backend in the middle of the program? " + "New backends can't use Tensors created with previous backends");
        }
    };
    MathBackendWebGL.prototype.uploadToGPU = function (dataId) {
        this.throwIfNoData(dataId);
        var texData = this.texData.get(dataId);
        var shape = texData.shape,
            values = texData.values,
            texture = texData.texture,
            dtype = texData.dtype,
            texType = texData.texType;
        if (texture != null) {
            return;
        }
        var shouldTimeProgram = this.activeTimers != null;
        var start;
        if (shouldTimeProgram) {
            start = performance.now();
        }
        var texShape = webgl_util.getTextureShapeFromLogicalShape(this.gpgpu.gl, shape);
        texData.texShape = texShape;
        var newTexture = this.textureManager.acquireTexture(texShape, texType);
        texData.texture = newTexture;
        if (values != null) {
            this.gpgpu.uploadMatrixToTexture(newTexture, texShape[0], texShape[1], typedArrayToFloat32(values, dtype));
            texData.values = null;
            if (shouldTimeProgram) {
                this.uploadWaitMs += performance.now() - start;
            }
        }
    };
    MathBackendWebGL.prototype.cacheOnCPU = function (dataId, float32Values) {
        var dontKeepCopyOnGPU = this.delayedStorage;
        var texData = this.texData.get(dataId);
        var texture = texData.texture,
            texShape = texData.texShape,
            dtype = texData.dtype,
            texType = texData.texType;
        if (dontKeepCopyOnGPU && texture != null) {
            this.textureManager.releaseTexture(texture, texShape, texType);
            texData.texture = null;
            texData.texShape = null;
        }
        if (float32Values != null) {
            texData.values = float32ToTypedArray(float32Values, dtype);
        }
    };
    return MathBackendWebGL;
}();
exports.MathBackendWebGL = MathBackendWebGL;

_environment.ENV.registerBackend('webgl', function () {
    return new MathBackendWebGL();
}, 2);
function float32ToTypedArray(a, dtype) {
    if (dtype === 'float32') {
        return a;
    } else if (dtype === 'int32' || dtype === 'bool') {
        var result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);
        for (var i = 0; i < result.length; ++i) {
            result[i] = Math.round(a[i]);
        }
        return result;
    } else {
        throw new Error("Unknown dtype " + dtype);
    }
}
function typedArrayToFloat32(a, dtype) {
    return a instanceof Float32Array ? a : new Float32Array(a);
}
//# sourceMappingURL=backend_webgl.js.map
},{"../environment":"CAkW","../ops/axis_util":"61IY","../ops/ops":"bzyr","../ops/reduce_util":"axmJ","../ops/slice_util":"EpsS","../tensor":"Xe78","../types":"q15R","../util":"lDaM","./backend_util":"1Fpp","./webgl/argminmax_gpu":"XE9t","./webgl/avg_pool_backprop_gpu":"RHxD","./webgl/batchnorm_gpu":"k/dr","./webgl/binaryop_gpu":"N1Gy","./webgl/clip_gpu":"sRt9","./webgl/concat_gpu":"GNMJ","./webgl/conv_backprop_gpu":"sdaQ","./webgl/conv_backprop_gpu_depthwise":"015I","./webgl/conv_gpu":"31ux","./webgl/conv_gpu_depthwise":"9Djx","./webgl/cumsum_gpu":"DRov","./webgl/from_pixels_gpu":"Di0Q","./webgl/gather_gpu":"sa4G","./webgl/gpgpu_context":"a4ii","./webgl/gpgpu_math":"MWs3","./webgl/gpgpu_util":"Fhof","./webgl/logical_gpu":"m/Rw","./webgl/lrn_gpu":"tVfz","./webgl/max_pool_backprop_gpu":"Nk+K","./webgl/mulmat_gpu":"aN5F","./webgl/multinomial_gpu":"DcF5","./webgl/onehot_gpu":"WY+B","./webgl/pad_gpu":"ZCDt","./webgl/pool_gpu":"HXdI","./webgl/reduce_gpu":"d20b","./webgl/resize_bilinear_backprop_gpu":"nldf","./webgl/resize_bilinear_gpu":"5WTK","./webgl/resize_nearest_neighbor_gpu":"/BwM","./webgl/reverse_gpu":"3AFy","./webgl/slice_gpu":"YY39","./webgl/strided_slice_gpu":"bLeL","./webgl/tex_util":"v36e","./webgl/texture_manager":"eFBx","./webgl/tile_gpu":"sy5W","./webgl/transpose_gpu":"djry","./webgl/unaryop_gpu":"7sz/","./webgl/webgl_util":"7OCh"}],"qatl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MathBackendCPU = undefined;

var _seedrandom = require("seedrandom");

var seedrandom = _interopRequireWildcard(_seedrandom);

var _environment = require("../environment");

var _axis_util = require("../ops/axis_util");

var axis_util = _interopRequireWildcard(_axis_util);

var _broadcast_util = require("../ops/broadcast_util");

var broadcast_util = _interopRequireWildcard(_broadcast_util);

var _concat_util = require("../ops/concat_util");

var concat_util = _interopRequireWildcard(_concat_util);

var _erf_util = require("../ops/erf_util");

var erf_util = _interopRequireWildcard(_erf_util);

var _ops = require("../ops/ops");

var ops = _interopRequireWildcard(_ops);

var _selu_util = require("../ops/selu_util");

var selu_util = _interopRequireWildcard(_selu_util);

var _slice_util = require("../ops/slice_util");

var _tensor = require("../tensor");

var _types = require("../types");

var types = _interopRequireWildcard(_types);

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _backend_util = require("./backend_util");

var backend_util = _interopRequireWildcard(_backend_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var MathBackendCPU = function () {
    function MathBackendCPU() {
        this.data = new WeakMap();
        if (typeof document !== 'undefined') {
            this.canvas = document.createElement('canvas');
        }
    }
    MathBackendCPU.prototype.register = function (dataId, shape, dtype) {
        if (this.data.has(dataId)) {
            throw new Error("Data buffer is already registered");
        }
        this.data.set(dataId, null);
    };
    MathBackendCPU.prototype.write = function (dataId, values) {
        if (values == null) {
            throw new Error('MathBackendCPU.write(): values can not be null');
        }
        this.throwIfNoData(dataId);
        this.data.set(dataId, values);
    };
    MathBackendCPU.prototype.fromPixels = function (pixels, numChannels) {
        if (pixels == null) {
            throw new Error('MathBackendCPU.writePixels(): pixels can not be null');
        }
        var vals;
        if (pixels instanceof ImageData) {
            vals = pixels.data;
        } else if (pixels instanceof HTMLCanvasElement) {
            vals = pixels.getContext('2d').getImageData(0, 0, pixels.width, pixels.height).data;
        } else if (pixels instanceof HTMLImageElement || pixels instanceof HTMLVideoElement) {
            if (this.canvas == null) {
                throw new Error('Can\'t read pixels from HTMLImageElement outside ' + 'the browser.');
            }
            this.canvas.width = pixels.width;
            this.canvas.height = pixels.height;
            this.canvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);
            vals = this.canvas.getContext('2d').getImageData(0, 0, pixels.width, pixels.height).data;
        } else {
            throw new Error("pixels is of unknown type: " + pixels.constructor.name);
        }
        var values;
        if (numChannels === 4) {
            values = new Int32Array(vals);
        } else {
            var numPixels = pixels.width * pixels.height;
            values = new Int32Array(numPixels * numChannels);
            for (var i = 0; i < numPixels; i++) {
                for (var channel = 0; channel < numChannels; ++channel) {
                    values[i * numChannels + channel] = vals[i * 4 + channel];
                }
            }
        }
        var outShape = [pixels.height, pixels.width, numChannels];
        return (0, _ops.tensor3d)(values, outShape, 'int32');
    };
    MathBackendCPU.prototype.read = function (dataId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.readSync(dataId)];
            });
        });
    };
    MathBackendCPU.prototype.readSync = function (dataId) {
        this.throwIfNoData(dataId);
        return this.data.get(dataId);
    };
    MathBackendCPU.prototype.disposeData = function (dataId) {
        if (this.data.has(dataId)) {
            this.data.delete(dataId);
        }
    };
    MathBackendCPU.prototype.time = function (f) {
        return __awaiter(this, void 0, void 0, function () {
            var start, kernelMs;
            return __generator(this, function (_a) {
                start = performance.now();
                f();
                kernelMs = performance.now() - start;
                return [2, { kernelMs: kernelMs }];
            });
        });
    };
    MathBackendCPU.prototype.memory = function () {
        return {
            unreliable: true
        };
    };
    MathBackendCPU.prototype.throwIfNoData = function (dataId) {
        if (!this.data.has(dataId)) {
            throw new Error("CPU backend: No data found for this tensor. " + "Did you change your backend in the middle of the program? " + "New backends can't use Tensors created with previous backends");
        }
    };
    MathBackendCPU.prototype.slice = function (x, begin, size) {
        var buffer = ops.buffer(size, x.dtype);
        for (var i = 0; i < buffer.size; ++i) {
            var loc = buffer.indexToLoc(i);
            var xLoc = loc.map(function (idx, j) {
                return idx + begin[j];
            });
            buffer.set.apply(buffer, [x.get.apply(x, xLoc)].concat(loc));
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.stridedSlice = function (x, begin, end, strides, beginMask, endMask) {
        var _a = (0, _slice_util.getStridedSlicedInfo)(x.shape, begin, end, strides, beginMask, endMask),
            beginIndex = _a[0],
            size = _a[1];
        if (size.some(function (axis) {
            return axis === 0;
        })) {
            return ops.tensor([], size);
        }
        var buffer = ops.buffer(size, x.dtype);
        for (var i = 0; i < buffer.size; i++) {
            var loc = buffer.indexToLoc(i);
            var newLoc = new Array(loc.length);
            for (var j = 0; j < newLoc.length; j++) {
                newLoc[j] = loc[j] * strides[j] + beginIndex[j];
            }
            buffer.set.apply(buffer, [x.get.apply(x, newLoc)].concat(loc));
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.reverse = function (x, axis) {
        var buffer = ops.buffer(x.shape, x.dtype);
        var xBuffer = x.buffer();
        var _loop_1 = function (i) {
            var outLoc = buffer.indexToLoc(i);
            var inLoc = outLoc.slice();
            axis.forEach(function (ax) {
                return inLoc[ax] = x.shape[ax] - 1 - inLoc[ax];
            });
            buffer.set.apply(buffer, [xBuffer.get.apply(xBuffer, inLoc)].concat(outLoc));
        };
        for (var i = 0; i < buffer.size; i++) {
            _loop_1(i);
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.concat = function (a, b) {
        var outShape = concat_util.computeOutShape(a.shape, b.shape, 1);
        var buffer = ops.buffer(outShape, a.dtype);
        if (a.shape[0] === 1 && b.shape[0] === 1) {
            var aVals = a.dataSync();
            var bVals = b.dataSync();
            var vals = buffer.values;
            vals.set(aVals, 0);
            vals.set(bVals, a.size);
            return buffer.toTensor();
        }
        for (var i = 0; i < outShape[0]; ++i) {
            for (var j = 0; j < a.shape[1]; ++j) {
                buffer.set(a.get(i, j), i, j);
            }
            for (var j = 0; j < b.shape[1]; ++j) {
                buffer.set(b.get(i, j), i, j + a.shape[1]);
            }
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.neg = function (x) {
        return this.multiply(ops.scalar(-1), x);
    };
    MathBackendCPU.prototype.add = function (a, b) {
        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) {
            return aValue + bValue;
        });
    };
    MathBackendCPU.prototype.subtract = function (a, b) {
        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) {
            return aValue - bValue;
        });
    };
    MathBackendCPU.prototype.pow = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) {
            return Math.pow(aValue, bValue);
        });
    };
    MathBackendCPU.prototype.matMul = function (a, b, transposeA, transposeB) {
        var sharedDim = transposeA ? a.shape[0] : a.shape[1];
        var leftDim = transposeA ? a.shape[1] : a.shape[0];
        var rightDim = transposeB ? b.shape[0] : b.shape[1];
        var aValues = a.dataSync();
        var bValues = b.dataSync();
        var _a = transposeA ? [1, a.strides[0]] : [a.strides[0], 1],
            aOuterStep = _a[0],
            aInnerStep = _a[1];
        var _b = transposeB ? [b.strides[0], 1] : [1, b.strides[0]],
            bOuterStep = _b[0],
            bInnerStep = _b[1];
        var aOuterEnd = leftDim * aOuterStep;
        var bOuterEnd = rightDim * bOuterStep;
        var result = new Float32Array(leftDim * rightDim);
        var resultIndex = 0;
        for (var aOuter = 0; aOuter < aOuterEnd; aOuter += aOuterStep) {
            for (var bOuter = 0; bOuter < bOuterEnd; bOuter += bOuterStep) {
                var aInner = aOuter;
                var bInner = bOuter;
                var sum = 0;
                for (var k = 0; k < sharedDim; ++k) {
                    sum += aValues[aInner] * bValues[bInner];
                    aInner += aInnerStep;
                    bInner += bInnerStep;
                }
                result[resultIndex++] = sum;
            }
        }
        return ops.tensor2d(result, [leftDim, rightDim]);
    };
    MathBackendCPU.prototype.multiply = function (a, b) {
        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) {
            return aValue * bValue;
        });
    };
    MathBackendCPU.prototype.divide = function (a, b) {
        var op;
        var outputDtype;
        if (a.dtype === 'int32' && b.dtype === 'int32') {
            outputDtype = 'int32';
            op = function (a, b) {
                return Math.floor(a / b);
            };
        } else {
            outputDtype = 'float32';
            op = function (a, b) {
                return a / b;
            };
        }
        return this.broadcastedBinaryOp(a, b, outputDtype, op);
    };
    MathBackendCPU.prototype.sum = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var resultDtype = types.upcastType(x.dtype, 'int32');
        var result = ops.zeros(outShape, resultDtype);
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var sum = 0;
            for (var j = 0; j < reduceSize; ++j) {
                sum += aVals[offset + j];
            }
            vals[i] = sum;
        }
        return result;
    };
    MathBackendCPU.prototype.argMin = function (x, axis) {
        var axes = [axis];
        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var result = ops.zeros(outShape, 'int32');
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var min = aVals[offset];
            var minIndex = 0;
            for (var j = 0; j < reduceSize; ++j) {
                var value = aVals[offset + j];
                if (value < min) {
                    min = value;
                    minIndex = j;
                }
            }
            vals[i] = minIndex;
        }
        return result;
    };
    MathBackendCPU.prototype.argMax = function (x, axis) {
        var axes = [axis];
        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var result = ops.zeros(outShape, 'int32');
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var max = aVals[offset];
            var maxIndex = 0;
            for (var j = 0; j < reduceSize; ++j) {
                var value = aVals[offset + j];
                if (value > max) {
                    max = value;
                    maxIndex = j;
                }
            }
            vals[i] = maxIndex;
        }
        return result;
    };
    MathBackendCPU.prototype.cumsum = function (x, axis, exclusive, reverse) {
        if (axis !== x.rank - 1) {
            throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (x.rank - 1) + " " + ("but got axis=" + axis));
        }
        var resultDtype = types.upcastType(x.dtype, 'int32');
        var result = ops.zeros(x.shape, resultDtype);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        var finalDim = x.shape[x.rank - 1];
        var indexAdjuster = reverse ? function (i, j) {
            return i + finalDim - j - 1;
        } : function (i, j) {
            return i + j;
        };
        for (var i = 0; i < aVals.length; i += finalDim) {
            for (var j = 0; j < finalDim; j++) {
                var idx = indexAdjuster(i, j);
                if (j === 0) {
                    vals[idx] = exclusive ? 0 : aVals[idx];
                } else {
                    var prevIdx = indexAdjuster(i, j - 1);
                    vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];
                }
            }
        }
        return result;
    };
    MathBackendCPU.prototype.equal = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal === bVal ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.notEqual = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal !== bVal ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.less = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal < bVal ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.lessEqual = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal <= bVal ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.greater = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal > bVal ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.greaterEqual = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal >= bVal ? 1 : 0;
        });
    };
    MathBackendCPU.prototype.logicalNot = function (x) {
        var values = x.dataSync();
        var newValues = new Int32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = values[i] ? 0 : 1;
        }
        return _tensor.Tensor.make(x.shape, { values: newValues }, 'bool');
    };
    MathBackendCPU.prototype.logicalAnd = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal && bVal;
        });
    };
    MathBackendCPU.prototype.logicalOr = function (a, b) {
        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {
            return aVal || bVal;
        });
    };
    MathBackendCPU.prototype.where = function (condition, a, b, dtype) {
        var values = condition.dataSync();
        var aValues = a.dataSync();
        var bValues = b.dataSync();
        var result = ops.zeros(a.shape, dtype);
        var newValues = result.dataSync();
        var index = 0;
        var offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ? 1 : a.shape[1];
        for (var i = 0; i < values.length; i++) {
            for (var j = 0; j < offset; j++) {
                if (values[i] === 1) {
                    newValues[index++] = aValues[i];
                } else {
                    newValues[index++] = bValues[i];
                }
            }
        }
        return result;
    };
    MathBackendCPU.prototype.topKValues = function (x, k) {
        return this.topK(x, k).values;
    };
    MathBackendCPU.prototype.topKIndices = function (x, k) {
        return this.topK(x, k).indices;
    };
    MathBackendCPU.prototype.topK = function (x, k) {
        var values = x.dataSync();
        var valuesAndIndices = [];
        for (var i = 0; i < values.length; i++) {
            valuesAndIndices.push({ value: values[i], index: i });
        }
        valuesAndIndices.sort(function (a, b) {
            return b.value - a.value;
        });
        var topkValues = util.getTypedArrayFromDType(x.dtype, k);
        var topkIndices = new Int32Array(k);
        for (var i = 0; i < k; i++) {
            topkValues[i] = valuesAndIndices[i].value;
            topkIndices[i] = valuesAndIndices[i].index;
        }
        return {
            values: ops.tensor1d(topkValues, x.dtype),
            indices: ops.tensor1d(topkIndices, 'int32')
        };
    };
    MathBackendCPU.prototype.min = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var result = ops.zeros(outShape, x.dtype);
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var min = aVals[0];
            for (var j = 0; j < reduceSize; ++j) {
                var value = aVals[offset + j];
                if (value < min) {
                    min = value;
                }
            }
            vals[i] = min;
        }
        return result;
    };
    MathBackendCPU.prototype.minimum = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {
            return Math.min(aVal, bVal);
        });
    };
    MathBackendCPU.prototype.mod = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {
            var rem = aVal % bVal;
            if (aVal < 0 && bVal < 0 || aVal >= 0 && bVal >= 0) {
                return rem;
            } else {
                return (rem + bVal) % bVal;
            }
        });
    };
    MathBackendCPU.prototype.max = function (x, axes) {
        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);
        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),
            outShape = _a[0],
            reduceShape = _a[1];
        var result = ops.zeros(outShape, x.dtype);
        var reduceSize = util.sizeFromShape(reduceShape);
        var vals = result.dataSync();
        var aVals = x.dataSync();
        for (var i = 0; i < vals.length; ++i) {
            var offset = i * reduceSize;
            var max = aVals[offset];
            for (var j = 0; j < reduceSize; ++j) {
                var value = aVals[offset + j];
                if (value > max) {
                    max = value;
                }
            }
            vals[i] = max;
        }
        return result;
    };
    MathBackendCPU.prototype.maximum = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {
            return Math.max(aVal, bVal);
        });
    };
    MathBackendCPU.prototype.squaredDifference = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {
            var diff = aVal - bVal;
            return diff * diff;
        });
    };
    MathBackendCPU.prototype.ceil = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.ceil(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.floor = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.floor(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.sign = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            if (values[i] < 0) {
                newValues[i] = -1;
            } else if (values[i] > 0) {
                newValues[i] = 1;
            } else {
                newValues[i] = 0;
            }
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.round = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var base = Math.floor(values[i]);
            if (values[i] - base < 0.5) {
                newValues[i] = Math.floor(values[i]);
            } else if (values[i] - base > 0.5) {
                newValues[i] = Math.ceil(values[i]);
            } else {
                if (base % 2.0 === 0.0) {
                    newValues[i] = base;
                } else {
                    newValues[i] = base + 1.0;
                }
            }
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.exp = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.exp(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.expm1 = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.expm1(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.log = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = Math.log(value);
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.log1p = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = Math.log1p(value);
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.sqrt = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = Math.sqrt(value);
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.rsqrt = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = 1 / Math.sqrt(value);
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.square = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = value * value;
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.reciprocal = function (x) {
        var values = x.dataSync();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = 1 / values[i];
        }
        return _tensor.Tensor.make(x.shape, { values: newValues });
    };
    MathBackendCPU.prototype.relu = function (x) {
        var res = ops.zeros(x.shape, x.dtype);
        var resVals = res.dataSync();
        var inVals = x.dataSync();
        for (var i = 0; i < inVals.length; ++i) {
            resVals[i] = Math.max(0, inVals[i]);
        }
        return res;
    };
    MathBackendCPU.prototype.elu = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var v = values[i];
            if (v >= 0) {
                resultValues[i] = v;
            } else {
                resultValues[i] = Math.exp(v) - 1;
            }
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.eluDer = function (dy, y) {
        var resultValues = new Float32Array(y.size);
        var values = y.dataSync();
        var dyValues = dy.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var v = values[i];
            if (v >= 1) {
                resultValues[i] = dyValues[i];
            } else {
                resultValues[i] = dyValues[i] * (v + 1);
            }
        }
        return _tensor.Tensor.make(y.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.selu = function (x) {
        var scaleAlpha = selu_util.SELU_SCALEALPHA;
        var scale = selu_util.SELU_SCALE;
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var v = values[i];
            if (v >= 0) {
                resultValues[i] = scale * v;
            } else {
                resultValues[i] = scaleAlpha * (Math.exp(v) - 1);
            }
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.clip = function (x, min, max) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.min(max, Math.max(min, values[i]));
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.abs = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.abs(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.int = function (x) {
        var resultValues = new Int32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = values[i];
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues }, 'int32');
    };
    MathBackendCPU.prototype.sigmoid = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = 1 / (1 + Math.exp(-values[i]));
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.softplus = function (x) {
        var epsilon = 1.1920928955078125e-7;
        var threshold = Math.log(epsilon) + 2.0;
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var tooLarge = values[i] > -threshold;
            var tooSmall = values[i] < threshold;
            var expX = Math.exp(values[i]);
            var result = void 0;
            if (tooSmall) {
                result = expX;
            } else if (tooLarge) {
                result = values[i];
            } else {
                result = Math.log(1.0 + expX);
            }
            resultValues[i] = result;
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.sin = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.sin(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.cos = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.cos(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.tan = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.tan(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.asin = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.asin(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.acos = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.acos(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.atan = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.atan(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.atan2 = function (a, b) {
        return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) {
            return Math.atan2(aValue, bValue);
        });
    };
    MathBackendCPU.prototype.sinh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.sinh(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.cosh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.cosh(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.tanh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = util.tanh(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.asinh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.asinh(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.acosh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.acosh(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.atanh = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.atanh(values[i]);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.erf = function (x) {
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        var p = erf_util.ERF_P;
        var a1 = erf_util.ERF_A1;
        var a2 = erf_util.ERF_A2;
        var a3 = erf_util.ERF_A3;
        var a4 = erf_util.ERF_A4;
        var a5 = erf_util.ERF_A5;
        for (var i = 0; i < values.length; ++i) {
            var v = values[i];
            var t = 1.0 / (1.0 + p * v);
            resultValues[i] = 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-v * v);
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.step = function (x, alpha) {
        if (alpha === void 0) {
            alpha = 0;
        }
        var resultValues = new Float32Array(x.size);
        var values = x.dataSync();
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            if (isNaN(value)) {
                resultValues[i] = NaN;
            } else {
                resultValues[i] = value > 0 ? 1 : alpha;
            }
        }
        return _tensor.Tensor.make(x.shape, { values: resultValues });
    };
    MathBackendCPU.prototype.conv2d = function (x, filter, convInfo) {
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var dilationHeight = convInfo.dilationHeight;
        var dilationWidth = convInfo.dilationWidth;
        var padLeft = convInfo.padInfo.left;
        var padTop = convInfo.padInfo.top;
        var y = ops.buffer(convInfo.outShape, x.dtype);
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {
                for (var yR = 0; yR < convInfo.outHeight; ++yR) {
                    var xRCorner = yR * convInfo.strideHeight - padLeft;
                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {
                        var xCCorner = yC * convInfo.strideWidth - padTop;
                        var dotProd = 0;
                        for (var wR = 0; wR < filterHeight; wR++) {
                            var xR = xRCorner + wR * dilationHeight;
                            if (xR < 0 || xR >= convInfo.inHeight) {
                                continue;
                            }
                            for (var wC = 0; wC < filterWidth; wC++) {
                                var xC = xCCorner + wC * dilationWidth;
                                if (xC < 0 || xC >= convInfo.inWidth) {
                                    continue;
                                }
                                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {
                                    var pixel = x.get(b, xR, xC, d1);
                                    var weight = filter.get(wR, wC, d1, d2);
                                    dotProd += pixel * weight;
                                }
                            }
                        }
                        y.set(dotProd, b, yR, yC, d2);
                    }
                }
            }
        }
        return y.toTensor();
    };
    MathBackendCPU.prototype.conv2dDerInput = function (dy, filter, convInfo) {
        var dx = ops.buffer(convInfo.inShape, 'float32');
        var dxValues = dx.values;
        var _a = dx.strides,
            dxS0 = _a[0],
            dxS1 = _a[1],
            dxS2 = _a[2];
        var dyValues = dy.dataSync();
        var _b = dy.strides,
            dyS0 = _b[0],
            dyS1 = _b[1],
            dyS2 = _b[2];
        var fltValues = filter.dataSync();
        var _c = filter.strides,
            fltS0 = _c[0],
            fltS1 = _c[1],
            fltS2 = _c[2];
        var batchSize = convInfo.batchSize,
            filterHeight = convInfo.filterHeight,
            filterWidth = convInfo.filterWidth,
            inChannels = convInfo.inChannels,
            inHeight = convInfo.inHeight,
            inWidth = convInfo.inWidth,
            outChannels = convInfo.outChannels,
            outHeight = convInfo.outHeight,
            outWidth = convInfo.outWidth,
            strideHeight = convInfo.strideHeight,
            strideWidth = convInfo.strideWidth;
        var topPad = filterHeight - 1 - convInfo.padInfo.top;
        var leftPad = filterWidth - 1 - convInfo.padInfo.left;
        for (var b = 0; b < batchSize; ++b) {
            for (var d1 = 0; d1 < inChannels; ++d1) {
                for (var xR = 0; xR < inHeight; ++xR) {
                    var xRCorner = xR - topPad;
                    var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                    var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                    for (var xC = 0; xC < inWidth; ++xC) {
                        var xCCorner = xC - leftPad;
                        var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                        var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                        var dotProd = 0;
                        for (var yR = xRMin; yR < yRMax; ++yR) {
                            var wR = yR * strideHeight - xRCorner;
                            for (var yC = xCMin; yC < yCMax; ++yC) {
                                var wC = yC * strideWidth - xCCorner;
                                var dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;
                                var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
                                for (var d2 = 0; d2 < outChannels; ++d2) {
                                    var pixel = dyValues[dyOffset + d2];
                                    var weight = fltValues[fltOffset + d2];
                                    dotProd += pixel * weight;
                                }
                            }
                        }
                        dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;
                    }
                }
            }
        }
        return dx.toTensor();
    };
    MathBackendCPU.prototype.conv2dDerFilter = function (x, dy, convInfo) {
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var dW = ops.buffer(convInfo.filterShape, 'float32');
        var leftPad = convInfo.padInfo.left;
        var topPad = convInfo.padInfo.top;
        for (var wR = 0; wR < filterHeight; ++wR) {
            var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
            var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
            for (var wC = 0; wC < filterWidth; ++wC) {
                var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {
                    for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {
                        var dotProd = 0;
                        for (var b = 0; b < convInfo.batchSize; ++b) {
                            for (var yR = yRMin; yR < yRMax; ++yR) {
                                var xR = wR + yR * strideHeight - topPad;
                                for (var yC = yCMin; yC < yCMax; ++yC) {
                                    var xC = wC + yC * strideWidth - leftPad;
                                    dotProd += x.get(b, xR, xC, d1) * dy.get(b, yR, yC, d2);
                                }
                            }
                        }
                        dW.set(dotProd, wR, wC, d1, d2);
                    }
                }
            }
        }
        return dW.toTensor();
    };
    MathBackendCPU.prototype.depthwiseConv2D = function (x, filter, convInfo) {
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var dilationHeight = convInfo.dilationHeight;
        var dilationWidth = convInfo.dilationWidth;
        var padLeft = convInfo.padInfo.left;
        var padTop = convInfo.padInfo.top;
        var chMul = convInfo.outChannels / convInfo.inChannels;
        var y = ops.buffer(convInfo.outShape, x.dtype);
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {
                for (var yR = 0; yR < convInfo.outHeight; ++yR) {
                    var xRCorner = yR * convInfo.strideHeight - padLeft;
                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {
                        var xCCorner = yC * convInfo.strideWidth - padTop;
                        for (var q = 0; q < chMul; ++q) {
                            var dotProd = 0;
                            for (var wR = 0; wR < filterHeight; ++wR) {
                                var xR = xRCorner + wR * dilationHeight;
                                if (xR < 0 || xR >= convInfo.inHeight) {
                                    continue;
                                }
                                for (var wC = 0; wC < filterWidth; ++wC) {
                                    var xC = xCCorner + wC * dilationWidth;
                                    if (xC < 0 || xC >= convInfo.inWidth) {
                                        continue;
                                    }
                                    var pixel = x.get(b, xR, xC, d1);
                                    var weight = filter.get(wR, wC, d1, q);
                                    dotProd += pixel * weight;
                                }
                            }
                            y.set(dotProd, b, yR, yC, d1 * chMul + q);
                        }
                    }
                }
            }
        }
        return y.toTensor();
    };
    MathBackendCPU.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {
        var dx = ops.buffer(convInfo.inShape, 'float32');
        var dxValues = dx.values;
        var _a = dx.strides,
            dxS0 = _a[0],
            dxS1 = _a[1],
            dxS2 = _a[2];
        var dyValues = dy.dataSync();
        var _b = dy.strides,
            dyS0 = _b[0],
            dyS1 = _b[1],
            dyS2 = _b[2];
        var fltValues = filter.dataSync();
        var _c = filter.strides,
            fltS0 = _c[0],
            fltS1 = _c[1],
            fltS2 = _c[2];
        var batchSize = convInfo.batchSize,
            filterHeight = convInfo.filterHeight,
            filterWidth = convInfo.filterWidth,
            inChannels = convInfo.inChannels,
            inHeight = convInfo.inHeight,
            inWidth = convInfo.inWidth,
            outChannels = convInfo.outChannels,
            outHeight = convInfo.outHeight,
            outWidth = convInfo.outWidth,
            strideHeight = convInfo.strideHeight,
            strideWidth = convInfo.strideWidth;
        var topPad = filterHeight - 1 - convInfo.padInfo.top;
        var leftPad = filterWidth - 1 - convInfo.padInfo.left;
        var chMul = outChannels / inChannels;
        for (var b = 0; b < batchSize; ++b) {
            for (var d1 = 0; d1 < inChannels; ++d1) {
                for (var xR = 0; xR < inHeight; ++xR) {
                    var xRCorner = xR - topPad;
                    var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
                    var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
                    for (var xC = 0; xC < inWidth; ++xC) {
                        var xCCorner = xC - leftPad;
                        var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
                        var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
                        var dotProd = 0;
                        for (var yR = xRMin; yR < yRMax; ++yR) {
                            var wR = yR * strideHeight - xRCorner;
                            for (var yC = xCMin; yC < yCMax; ++yC) {
                                var wC = yC * strideWidth - xCCorner;
                                var dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;
                                var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
                                for (var dm = 0; dm < chMul; ++dm) {
                                    var d2 = d1 * chMul + dm;
                                    var pixel = dyValues[dyOffset + d2];
                                    var weight = fltValues[fltOffset + dm];
                                    dotProd += pixel * weight;
                                }
                            }
                        }
                        dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;
                    }
                }
            }
        }
        return dx.toTensor();
    };
    MathBackendCPU.prototype.depthwiseConv2DDerFilter = function (x, dy, convInfo) {
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var dW = ops.buffer(convInfo.filterShape, 'float32');
        var leftPad = convInfo.padInfo.left;
        var topPad = convInfo.padInfo.top;
        var chMul = convInfo.outChannels / convInfo.inChannels;
        for (var wR = 0; wR < filterHeight; ++wR) {
            var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
            var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
            for (var wC = 0; wC < filterWidth; ++wC) {
                var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
                var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
                for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {
                    var d1 = Math.trunc(d2 / chMul);
                    var dm = d2 % chMul;
                    var dotProd = 0;
                    for (var b = 0; b < convInfo.batchSize; ++b) {
                        for (var yR = yRMin; yR < yRMax; ++yR) {
                            var xR = wR + yR * strideHeight - topPad;
                            for (var yC = yCMin; yC < yCMax; ++yC) {
                                var xC = wC + yC * strideWidth - leftPad;
                                dotProd += x.get(b, xR, xC, d1) * dy.get(b, yR, yC, d2);
                            }
                        }
                    }
                    dW.set(dotProd, wR, wC, d1, dm);
                }
            }
        }
        return dW.toTensor();
    };
    MathBackendCPU.prototype.tile = function (x, reps) {
        var newShape = new Array(x.rank);
        for (var i = 0; i < newShape.length; i++) {
            newShape[i] = x.shape[i] * reps[i];
        }
        var result = ops.buffer(newShape, x.dtype);
        var xBuf = x.buffer();
        for (var i = 0; i < result.values.length; ++i) {
            var newLoc = result.indexToLoc(i);
            var originalLoc = new Array(x.rank);
            for (var i_1 = 0; i_1 < originalLoc.length; i_1++) {
                originalLoc[i_1] = newLoc[i_1] % x.shape[i_1];
            }
            var originalIndex = xBuf.locToIndex(originalLoc);
            result.values[i] = xBuf.values[originalIndex];
        }
        return result.toTensor();
    };
    MathBackendCPU.prototype.pad = function (x, paddings, constantValue) {
        var outShape = paddings.map(function (p, i) {
            return p[0] + x.shape[i] + p[1];
        });
        var start = paddings.map(function (p) {
            return p[0];
        });
        var xBuffer = x.buffer();
        var buffer = ops.buffer(outShape, x.dtype);
        if (constantValue !== 0) {
            buffer.values.fill(constantValue);
        }
        for (var i = 0; i < x.size; i++) {
            var coords = xBuffer.indexToLoc(i);
            var outCoords = coords.map(function (c, i) {
                return c + start[i];
            });
            buffer.set.apply(buffer, [x.get.apply(x, coords)].concat(outCoords));
        }
        return buffer.toTensor();
    };
    MathBackendCPU.prototype.transpose = function (x, perm) {
        var newShape = new Array(x.rank);
        for (var i = 0; i < newShape.length; i++) {
            newShape[i] = x.shape[perm[i]];
        }
        var values = x.dataSync();
        var result = (0, _ops.buffer)(newShape, x.dtype);
        var xBuf = x.buffer();
        for (var i = 0; i < x.size; ++i) {
            var loc = xBuf.indexToLoc(i);
            var newLoc = new Array(loc.length);
            for (var i_2 = 0; i_2 < newLoc.length; i_2++) {
                newLoc[i_2] = loc[perm[i_2]];
            }
            var newIndex = result.locToIndex(newLoc);
            result.values[newIndex] = values[i];
        }
        return result.toTensor();
    };
    MathBackendCPU.prototype.gather = function (x, indices, axis) {
        var newShape = x.shape.slice();
        var indicesValues = indices.dataSync();
        newShape[axis] = indicesValues.length;
        var result = (0, _ops.buffer)(newShape, x.dtype);
        var xBuf = x.buffer();
        for (var i = 0; i < result.size; ++i) {
            var newLoc = result.indexToLoc(i);
            var originalLoc = newLoc.slice();
            originalLoc[axis] = indicesValues[newLoc[axis]];
            var originalIndex = xBuf.locToIndex(originalLoc);
            result.values[i] = xBuf.values[originalIndex];
        }
        return result.toTensor();
    };
    MathBackendCPU.prototype.pool = function (x, convInfo, poolType) {
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var y = ops.buffer(convInfo.outShape, 'float32');
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d = 0; d < convInfo.inChannels; ++d) {
                for (var yR = 0; yR < convInfo.outHeight; ++yR) {
                    var xRCorner = yR * strideHeight - padTop;
                    var xRMin = Math.max(0, xRCorner);
                    var xRMax = Math.min(convInfo.inHeight, filterHeight + xRCorner);
                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {
                        var xCCorner = yC * strideWidth - padLeft;
                        var xCMin = Math.max(0, xCCorner);
                        var xCMax = Math.min(convInfo.inWidth, filterWidth + xCCorner);
                        var minMaxValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
                        var avgValue = 0;
                        var count = 0;
                        for (var xR = xRMin; xR < xRMax; ++xR) {
                            for (var xC = xCMin; xC < xCMax; ++xC) {
                                var pixel = x.get(b, xR, xC, d);
                                if (poolType === 'max' && pixel > minMaxValue) {
                                    minMaxValue = pixel;
                                } else if (poolType === 'avg') {
                                    avgValue += pixel;
                                    count++;
                                }
                            }
                            if (isNaN(minMaxValue)) {
                                break;
                            }
                        }
                        y.set(poolType === 'avg' ? avgValue / count : minMaxValue, b, yR, yC, d);
                    }
                }
            }
        }
        return y.toTensor();
    };
    MathBackendCPU.prototype.maxPool = function (x, convInfo) {
        return this.pool(x, convInfo, 'max');
    };
    MathBackendCPU.prototype.maxPoolPositions = function (x, convInfo) {
        var maxPositions = ops.buffer(convInfo.outShape, 'int32');
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var padTop = convInfo.padInfo.top;
        var padLeft = convInfo.padInfo.left;
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d = 0; d < convInfo.inChannels; ++d) {
                for (var yR = 0; yR < convInfo.outHeight; ++yR) {
                    var xRCorner = yR * strideHeight - padTop;
                    var xRMin = Math.max(0, xRCorner);
                    var xRMax = Math.min(convInfo.inHeight, filterHeight + xRCorner);
                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {
                        var xCCorner = yC * strideWidth - padLeft;
                        var xCMin = Math.max(0, xCCorner);
                        var xCMax = Math.min(convInfo.inWidth, filterWidth + xCCorner);
                        var maxValue = Number.NEGATIVE_INFINITY;
                        var maxPosition = -1;
                        for (var xR = xRMin; xR < xRMax; ++xR) {
                            var wR = xR - xRCorner;
                            for (var xC = xCMin; xC < xCMax; ++xC) {
                                var wC = xC - xCCorner;
                                var pixel = x.get(b, xR, xC, d);
                                if (pixel > maxValue) {
                                    maxValue = pixel;
                                    maxPosition = wR * filterWidth + wC;
                                }
                            }
                        }
                        maxPositions.set(maxPosition, b, yR, yC, d);
                    }
                }
            }
        }
        return maxPositions.toTensor();
    };
    MathBackendCPU.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {
        var maxPositions = this.maxPoolPositions(x, convInfo);
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var dx = ops.buffer(x.shape, 'float32');
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d = 0; d < convInfo.inChannels; ++d) {
                for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {
                    for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {
                        var dyRCorner = dxR - padTop;
                        var dyCCorner = dxC - padLeft;
                        var dotProd = 0;
                        for (var wR = 0; wR < filterHeight; ++wR) {
                            var dyR = (dyRCorner + wR) / strideHeight;
                            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {
                                continue;
                            }
                            for (var wC = 0; wC < filterWidth; ++wC) {
                                var dyC = (dyCCorner + wC) / strideWidth;
                                if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {
                                    continue;
                                }
                                var maxPos = filterHeight * filterWidth - 1 - maxPositions.get(b, dyR, dyC, d);
                                var curPos = wR * filterWidth + wC;
                                var mask = maxPos === curPos ? 1 : 0;
                                if (mask === 0) {
                                    continue;
                                }
                                var pixel = dy.get(b, dyR, dyC, d);
                                dotProd += pixel * mask;
                            }
                        }
                        dx.set(dotProd, b, dxR, dxC, d);
                    }
                }
            }
        }
        return dx.toTensor();
    };
    MathBackendCPU.prototype.avgPoolBackprop = function (dy, x, convInfo) {
        var strideHeight = convInfo.strideHeight;
        var strideWidth = convInfo.strideWidth;
        var filterHeight = convInfo.filterHeight;
        var filterWidth = convInfo.filterWidth;
        var padLeft = filterWidth - 1 - convInfo.padInfo.left;
        var padTop = filterHeight - 1 - convInfo.padInfo.top;
        var dx = ops.buffer(x.shape, 'float32');
        var avgMultiplier = 1 / (filterHeight * filterWidth);
        for (var b = 0; b < convInfo.batchSize; ++b) {
            for (var d = 0; d < convInfo.inChannels; ++d) {
                for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {
                    for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {
                        var dyRCorner = dxR - padTop;
                        var dyCCorner = dxC - padLeft;
                        var dotProd = 0;
                        for (var wR = 0; wR < filterHeight; ++wR) {
                            var dyR = (dyRCorner + wR) / strideHeight;
                            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {
                                continue;
                            }
                            for (var wC = 0; wC < filterWidth; ++wC) {
                                var dyC = (dyCCorner + wC) / strideWidth;
                                if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {
                                    continue;
                                }
                                var pixel = dy.get(b, dyR, dyC, d);
                                dotProd += pixel;
                            }
                        }
                        dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);
                    }
                }
            }
        }
        return dx.toTensor();
    };
    MathBackendCPU.prototype.cast = function (x, dtype) {
        return backend_util.castTensor(x, dtype, this);
    };
    MathBackendCPU.prototype.reshape = function (x, shape) {
        return backend_util.reshapeTensor(x, shape);
    };
    MathBackendCPU.prototype.avgPool = function (x, convInfo) {
        return this.pool(x, convInfo, 'avg').toFloat();
    };
    MathBackendCPU.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {
        var _a = x.shape,
            batch = _a[0],
            oldHeight = _a[1],
            oldWidth = _a[2],
            numChannels = _a[3];
        var output = ops.buffer([batch, newHeight, newWidth, numChannels], x.dtype);
        var effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
        var effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
        for (var b = 0; b < batch; b++) {
            for (var r = 0; r < newHeight; r++) {
                for (var c = 0; c < newWidth; c++) {
                    for (var d = 0; d < numChannels; d++) {
                        var sourceFracRow = effectiveInputSize[0] * r / effectiveOutputSize[0];
                        var sourceFracCol = effectiveInputSize[1] * c / effectiveOutputSize[1];
                        var sourceRowFloor = Math.floor(sourceFracRow);
                        var sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));
                        var sourceColFloor = Math.floor(sourceFracCol);
                        var sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));
                        var topLeft = x.get(b, sourceRowFloor, sourceColFloor, d);
                        var bottomLeft = x.get(b, sourceRowCeil, sourceColFloor, d);
                        var topRight = x.get(b, sourceRowFloor, sourceColCeil, d);
                        var bottomRight = x.get(b, sourceRowCeil, sourceColCeil, d);
                        var rowFrac = sourceFracRow - sourceRowFloor;
                        var colFrac = sourceFracCol - sourceColFloor;
                        var top_1 = topLeft + (topRight - topLeft) * colFrac;
                        var bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;
                        var newValue = top_1 + (bottom - top_1) * rowFrac;
                        output.set(newValue, b, r, c, d);
                    }
                }
            }
        }
        return output.toTensor();
    };
    MathBackendCPU.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {
        var _a = x.shape,
            batch = _a[0],
            xHeight = _a[1],
            xWidth = _a[2],
            depth = _a[3];
        var _b = dy.shape,
            yHeight = _b[1],
            yWidth = _b[2];
        var output = ops.buffer([batch, xHeight, xWidth, depth], x.dtype);
        var effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
        var effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
        var heightScale = effectiveXSize[0] / effectiveYSize[0];
        var widthScale = effectiveXSize[1] / effectiveYSize[1];
        for (var b = 0; b < batch; b++) {
            for (var r = 0; r < yHeight; r++) {
                var dxR = r * heightScale;
                var topDxRIndex = Math.floor(dxR);
                var bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);
                var dxRLerp = dxR - topDxRIndex;
                var inverseDxRLerp = 1.0 - dxRLerp;
                for (var c = 0; c < yWidth; c++) {
                    var dxC = c * widthScale;
                    var leftDxCIndex = Math.floor(dxC);
                    var rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);
                    var dxCLerp = dxC - leftDxCIndex;
                    var inverseDxCLerp = 1.0 - dxCLerp;
                    for (var d = 0; d < depth; d++) {
                        var dyVal = dy.get(b, r, c, d);
                        var topLeft = output.get(b, topDxRIndex, leftDxCIndex, d);
                        topLeft += dyVal * inverseDxRLerp * inverseDxCLerp;
                        output.set(topLeft, b, topDxRIndex, leftDxCIndex, d);
                        var topRight = output.get(b, topDxRIndex, rightDxCIndex, d);
                        topRight += dyVal * inverseDxRLerp * dxCLerp;
                        output.set(topRight, b, topDxRIndex, rightDxCIndex, d);
                        var bottomLeft = output.get(b, bottomDxRIndex, leftDxCIndex, d);
                        bottomLeft += dyVal * dxRLerp * inverseDxCLerp;
                        output.set(bottomLeft, b, bottomDxRIndex, leftDxCIndex, d);
                        var bottomRight = output.get(b, bottomDxRIndex, rightDxCIndex, d);
                        bottomRight += dyVal * dxRLerp * dxCLerp;
                        output.set(bottomRight, b, bottomDxRIndex, rightDxCIndex, d);
                    }
                }
            }
        }
        return output.toTensor();
    };
    MathBackendCPU.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {
        var _a = x.shape,
            batch = _a[0],
            oldHeight = _a[1],
            oldWidth = _a[2],
            numChannels = _a[3];
        var output = ops.buffer([batch, newHeight, newWidth, numChannels], x.dtype);
        var effectiveInputSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];
        var effectiveOutputSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];
        for (var b = 0; b < batch; b++) {
            for (var r = 0; r < newHeight; r++) {
                for (var c = 0; c < newWidth; c++) {
                    for (var d = 0; d < numChannels; d++) {
                        var sourceFracRow = effectiveInputSize[0] * r / effectiveOutputSize[0];
                        var sourceFracCol = effectiveInputSize[1] * c / effectiveOutputSize[1];
                        var sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));
                        var sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));
                        var newValue = x.get(b, sourceNearestRow, sourceNearestCol, d);
                        output.set(newValue, b, r, c, d);
                    }
                }
            }
        }
        return output.toTensor();
    };
    MathBackendCPU.prototype.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {
        var xValues = x.dataSync();
        var meanValues = mean.dataSync();
        var varianceValues = variance.dataSync();
        var scaleValues = scale ? scale.dataSync() : new Float32Array([1]);
        var offsetValues = offset ? offset.dataSync() : new Float32Array([0]);
        var outValues = new Float32Array(xValues.length);
        for (var i = 0; i < xValues.length; i++) {
            outValues[i] = offsetValues[i % offsetValues.length] + (xValues[i] - meanValues[i % meanValues.length]) * scaleValues[i % scaleValues.length] / Math.sqrt(varianceValues[i % varianceValues.length] + varianceEpsilon);
        }
        return (0, _ops.tensor4d)(outValues, x.shape);
    };
    MathBackendCPU.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {
        var output = ops.buffer(x.shape, 'float32');
        var rad = radius;
        var maxD = output.shape[3] - 1;
        function sumAcrossChannels(b, r, c, d) {
            var sum = 0.0;
            for (var j = Math.max(0, d - rad); j <= Math.min(d + rad, maxD); j++) {
                var z = x.get(b, r, c, j);
                sum += z * z;
            }
            return sum;
        }
        for (var b = 0; b < output.shape[0]; b++) {
            for (var r = 0; r <= output.shape[1]; r++) {
                for (var c = 0; c < output.shape[2]; c++) {
                    for (var d = 0; d < output.shape[3]; d++) {
                        var sum = sumAcrossChannels(b, r, c, d);
                        var val = x.get(b, r, c, d) * Math.pow(bias + alpha * sum, -beta);
                        output.set(val, b, r, c, d);
                    }
                }
            }
        }
        return output.toTensor();
    };
    MathBackendCPU.prototype.multinomial = function (logits, normalized, numSamples, seed) {
        var probabilities = normalized ? logits : ops.softmax(logits);
        var batchSize = probabilities.shape[0];
        var numEvents = probabilities.shape[1];
        var res = ops.zeros([batchSize, numSamples], 'int32');
        var resVals = res.dataSync();
        var probVals = probabilities.dataSync();
        for (var b = 0; b < batchSize; ++b) {
            var offset = b * numEvents;
            var cdf = new Float32Array(numEvents - 1);
            cdf[0] = probVals[offset];
            for (var event_1 = 1; event_1 < cdf.length; ++event_1) {
                cdf[event_1] = cdf[event_1 - 1] + probVals[offset + event_1];
            }
            var random = seedrandom.alea(seed.toString());
            var outOffset = b * numSamples;
            for (var sampleId = 0; sampleId < numSamples; ++sampleId) {
                var r = random();
                resVals[outOffset + sampleId] = cdf.length;
                for (var event_2 = 0; event_2 < cdf.length; event_2++) {
                    if (r < cdf[event_2]) {
                        resVals[outOffset + sampleId] = event_2;
                        break;
                    }
                }
            }
        }
        return res;
    };
    MathBackendCPU.prototype.oneHot = function (indices, depth, onValue, offValue) {
        var res = new Float32Array(indices.size * depth);
        res.fill(offValue);
        for (var event_3 = 0; event_3 < indices.size; ++event_3) {
            res[event_3 * depth + indices.get(event_3)] = onValue;
        }
        return ops.tensor2d(res, [indices.size, depth]);
    };
    MathBackendCPU.prototype.broadcastedBinaryOp = function (a, b, dtype, op) {
        var newShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);
        var result = ops.buffer(newShape, dtype);
        var aValues = a.dataSync();
        var bValues = b.dataSync();
        var aBroadcastDims = broadcast_util.getBroadcastDims(a.shape, newShape);
        var bBroadcastDims = broadcast_util.getBroadcastDims(b.shape, newShape);
        var aBuf = a.buffer();
        var bBuf = b.buffer();
        var _loop_2 = function (i) {
            var loc = result.indexToLoc(i);
            var aLoc = loc.slice(-a.rank);
            aBroadcastDims.forEach(function (d) {
                return aLoc[d] = 0;
            });
            var aIndex = aBuf.locToIndex(aLoc);
            var bLoc = loc.slice(-b.rank);
            bBroadcastDims.forEach(function (d) {
                return bLoc[d] = 0;
            });
            var bIndex = bBuf.locToIndex(bLoc);
            result.values[i] = op(aValues[aIndex], bValues[bIndex]);
        };
        for (var i = 0; i < result.values.length; ++i) {
            _loop_2(i);
        }
        return result.toTensor();
    };
    MathBackendCPU.prototype.dispose = function () {};
    return MathBackendCPU;
}();
exports.MathBackendCPU = MathBackendCPU;

_environment.ENV.registerBackend('cpu', function () {
    return new MathBackendCPU();
}, 1);
//# sourceMappingURL=backend_cpu.js.map
},{"seedrandom":"/xt2","../environment":"CAkW","../ops/axis_util":"61IY","../ops/broadcast_util":"lcGM","../ops/concat_util":"NP2Z","../ops/erf_util":"b40Z","../ops/ops":"bzyr","../ops/selu_util":"XOGQ","../ops/slice_util":"EpsS","../tensor":"Xe78","../types":"q15R","../util":"lDaM","./backend_util":"1Fpp"}],"P4k1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrowserUtil = undefined;

var _doc = require("./doc");

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var BrowserUtil = function () {
    function BrowserUtil() {}
    BrowserUtil.nextFrame = function () {
        return new Promise(function (resolve) {
            return requestAnimationFrame(function () {
                return resolve();
            });
        });
    };
    __decorate([(0, _doc.doc)({ heading: 'Performance', subheading: 'Timing' })], BrowserUtil, "nextFrame", null);
    return BrowserUtil;
}();
exports.BrowserUtil = BrowserUtil;
//# sourceMappingURL=browser_util.js.map
},{"./doc":"VkNo"}],"uvwn":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var DTYPE_VALUE_SIZE_MAP = exports.DTYPE_VALUE_SIZE_MAP = {
    'float32': 4,
    'int32': 4,
    'uint16': 2,
    'uint8': 1,
    'bool': 1
};
//# sourceMappingURL=types.js.map
},{}],"FPWg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.encodeWeights = encodeWeights;
exports.decodeWeights = decodeWeights;
exports.concatenateTypedArrays = concatenateTypedArrays;
exports.stringByteLength = stringByteLength;
exports.arrayBufferToBase64String = arrayBufferToBase64String;
exports.base64StringToArrayBuffer = base64StringToArrayBuffer;
exports.concatenateArrayBuffers = concatenateArrayBuffers;
exports.basename = basename;
exports.getModelArtifactsInfoForJSON = getModelArtifactsInfoForJSON;

var _array_ops = require("../ops/array_ops");

var _util = require("../util");

var _types = require("./types");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function encodeWeights(tensors) {
    return __awaiter(this, void 0, void 0, function () {
        var specs, dataPromises, name_1, t, tensorValues;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    specs = [];
                    dataPromises = [];
                    for (name_1 in tensors) {
                        t = tensors[name_1];
                        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool') {
                            throw new Error("Unsupported dtype in weight '" + name_1 + "': " + t.dtype);
                        }
                        specs.push({ name: name_1, shape: t.shape, dtype: t.dtype });
                        dataPromises.push(t.data());
                    }
                    return [4, Promise.all(dataPromises)];
                case 1:
                    tensorValues = _a.sent();
                    return [2, { data: concatenateTypedArrays(tensorValues), specs: specs }];
            }
        });
    });
}
function decodeWeights(buffer, specs) {
    var out = {};
    var offset = 0;
    for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
        var spec = specs_1[_i];
        var name_2 = spec.name;
        var dtype = spec.dtype;
        var shape = spec.shape;
        if (spec.quantization != null) {
            throw new Error("decodeWeights does not support quantization yet, but encountered " + ("weight '" + name_2 + " with quantization.'"));
        }
        var size = (0, _util.sizeFromShape)(shape);
        var value = void 0;
        if (dtype === 'float32') {
            value = _array_ops.ArrayOps.tensor(new Float32Array(buffer, offset, size), shape, 'float32');
        } else if (dtype === 'int32') {
            value = _array_ops.ArrayOps.tensor(new Int32Array(buffer, offset, size), shape, 'int32');
        } else if (dtype === 'bool') {
            value = _array_ops.ArrayOps.tensor(new Uint8Array(buffer, offset, size), shape, 'bool');
        } else {
            throw new Error("Unsupported dtype in weight '" + name_2 + "': " + dtype);
        }
        out[name_2] = value;
        offset += size * _types.DTYPE_VALUE_SIZE_MAP[dtype];
    }
    return out;
}
function concatenateTypedArrays(xs) {
    if (xs === null) {
        throw new Error("Invalid input value: " + JSON.stringify(xs));
    }
    var totalByteLength = 0;
    xs.forEach(function (x) {
        if (x instanceof Float32Array || x instanceof Int32Array) {
            totalByteLength += x.length * 4;
        } else if (x instanceof Uint8Array) {
            totalByteLength += x.length;
        } else {
            throw new Error("Unsupported TypedArray subtype: " + x.constructor.name);
        }
    });
    var y = new Uint8Array(totalByteLength);
    var offset = 0;
    xs.forEach(function (x) {
        y.set(new Uint8Array(x.buffer), offset);
        if (x instanceof Float32Array || x instanceof Int32Array) {
            offset += x.length * 4;
        } else {
            offset += x.length;
        }
    });
    return y.buffer;
}
function stringByteLength(str) {
    return new Blob([str]).size;
}
function arrayBufferToBase64String(buffer) {
    return btoa(String.fromCharCode.apply(null, new Uint8Array(buffer)));
}
function base64StringToArrayBuffer(str) {
    var s = atob(str);
    var buffer = new Uint8Array(s.length);
    for (var i = 0; i < s.length; ++i) {
        buffer.set([s.charCodeAt(i)], i);
    }
    return buffer.buffer;
}
function concatenateArrayBuffers(buffers) {
    var totalByteLength = 0;
    buffers.forEach(function (buffer) {
        totalByteLength += buffer.byteLength;
    });
    var temp = new Uint8Array(totalByteLength);
    var offset = 0;
    buffers.forEach(function (buffer) {
        temp.set(new Uint8Array(buffer), offset);
        offset += buffer.byteLength;
    });
    return temp.buffer;
}
function basename(path) {
    var SEPARATOR = '/';
    path = path.trim();
    while (path.endsWith(SEPARATOR)) {
        path = path.slice(0, path.length - 1);
    }
    var items = path.split(SEPARATOR);
    return items[items.length - 1];
}
function getModelArtifactsInfoForJSON(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
        throw new Error('Expected JSON model topology, received ArrayBuffer.');
    }
    return {
        dateSaved: new Date(),
        modelTopologyType: 'JSON',
        modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
        weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
        weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength
    };
}
//# sourceMappingURL=io_utils.js.map
},{"../ops/array_ops":"2sZK","../util":"lDaM","./types":"uvwn"}],"pxfX":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var IORouterRegistry = function () {
    function IORouterRegistry() {
        this.saveRouters = [];
        this.loadRouters = [];
    }
    IORouterRegistry.getInstance = function () {
        if (IORouterRegistry.instance == null) {
            IORouterRegistry.instance = new IORouterRegistry();
        }
        return IORouterRegistry.instance;
    };
    IORouterRegistry.registerSaveRouter = function (saveRouter) {
        IORouterRegistry.getInstance().saveRouters.push(saveRouter);
    };
    IORouterRegistry.registerLoadRouter = function (loadRouter) {
        IORouterRegistry.getInstance().loadRouters.push(loadRouter);
    };
    IORouterRegistry.getSaveHandlers = function (url) {
        return IORouterRegistry.getHandlers(url, 'save');
    };
    IORouterRegistry.getLoadHandlers = function (url) {
        return IORouterRegistry.getHandlers(url, 'load');
    };
    IORouterRegistry.getHandlers = function (url, handlerType) {
        var validHandlers = [];
        var routers = handlerType === 'load' ? this.getInstance().loadRouters : this.getInstance().saveRouters;
        routers.forEach(function (router) {
            var handler = router(url);
            if (handler !== null) {
                validHandlers.push(handler);
            }
        });
        return validHandlers;
    };
    return IORouterRegistry;
}();
exports.IORouterRegistry = IORouterRegistry;
//# sourceMappingURL=router_registry.js.map
},{}],"utLb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModelManagement = exports.ModelStoreManagerRegistry = undefined;

var _doc = require("../doc");

var _util = require("../util");

var _router_registry = require("./router_registry");

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var URL_SCHEME_SUFFIX = '://';
var ModelStoreManagerRegistry = function () {
    function ModelStoreManagerRegistry() {
        this.managers = {};
    }
    ModelStoreManagerRegistry.getInstance = function () {
        if (ModelStoreManagerRegistry.instance == null) {
            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
        }
        return ModelStoreManagerRegistry.instance;
    };
    ModelStoreManagerRegistry.registerManager = function (scheme, manager) {
        (0, _util.assert)(scheme != null, 'scheme must not be undefined or null.');
        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {
            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
        }
        (0, _util.assert)(scheme.length > 0, 'scheme must not be an empty string.');
        var registry = ModelStoreManagerRegistry.getInstance();
        (0, _util.assert)(registry.managers[scheme] == null, "A model store manager is already registered for scheme '" + scheme + "'.");
        registry.managers[scheme] = manager;
    };
    ModelStoreManagerRegistry.getManager = function (scheme) {
        var manager = this.getInstance().managers[scheme];
        if (manager == null) {
            throw new Error("Cannot find model manager for scheme '" + scheme + "'");
        }
        return manager;
    };
    ModelStoreManagerRegistry.getSchemes = function () {
        return Object.keys(this.getInstance().managers);
    };
    return ModelStoreManagerRegistry;
}();
exports.ModelStoreManagerRegistry = ModelStoreManagerRegistry;

function parseURL(url) {
    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {
        throw new Error("The url string provided does not contain a scheme. " + "Supported schemes are: " + ("" + ModelStoreManagerRegistry.getSchemes().join(',')));
    }
    return {
        scheme: url.split(URL_SCHEME_SUFFIX)[0],
        path: url.split(URL_SCHEME_SUFFIX)[1]
    };
}
function cloneModelInternal(sourceURL, destURL, deleteSource) {
    if (deleteSource === void 0) {
        deleteSource = false;
    }
    return __awaiter(this, void 0, void 0, function () {
        var loadHandlers, loadHandler, saveHandlers, saveHandler, sourceScheme, sourcePath, sameMedium, modelArtifacts, saveResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, _util.assert)(sourceURL !== destURL, "Old path and new path are the same: '" + sourceURL + "'");
                    loadHandlers = _router_registry.IORouterRegistry.getLoadHandlers(sourceURL);
                    (0, _util.assert)(loadHandlers.length > 0, "Copying failed because no load handler is found for source URL " + sourceURL + ".");
                    (0, _util.assert)(loadHandlers.length < 2, "Copying failed because more than one (" + loadHandlers.length + ") " + ("load handlers for source URL " + sourceURL + "."));
                    loadHandler = loadHandlers[0];
                    saveHandlers = _router_registry.IORouterRegistry.getSaveHandlers(destURL);
                    (0, _util.assert)(saveHandlers.length > 0, "Copying failed because no save handler is found for destination URL " + (destURL + "."));
                    (0, _util.assert)(saveHandlers.length < 2, "Copying failed because more than one (" + loadHandlers.length + ") " + ("save handlers for destination URL " + destURL + "."));
                    saveHandler = saveHandlers[0];
                    sourceScheme = parseURL(sourceURL).scheme;
                    sourcePath = parseURL(sourceURL).path;
                    sameMedium = sourceScheme === parseURL(sourceURL).scheme;
                    return [4, loadHandler.load()];
                case 1:
                    modelArtifacts = _a.sent();
                    if (!(deleteSource && sameMedium)) return [3, 3];
                    return [4, ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    return [4, saveHandler.save(modelArtifacts)];
                case 4:
                    saveResult = _a.sent();
                    if (!(deleteSource && !sameMedium)) return [3, 6];
                    return [4, ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath)];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6:
                    return [2, saveResult.modelArtifactsInfo];
            }
        });
    });
}
var ModelManagement = function () {
    function ModelManagement() {}
    ModelManagement.listModels = function () {
        return __awaiter(this, void 0, void 0, function () {
            var schemes, out, _i, schemes_1, scheme, schemeOut, path, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        schemes = ModelStoreManagerRegistry.getSchemes();
                        out = {};
                        _i = 0, schemes_1 = schemes;
                        _a.label = 1;
                    case 1:
                        if (!(_i < schemes_1.length)) return [3, 4];
                        scheme = schemes_1[_i];
                        return [4, ModelStoreManagerRegistry.getManager(scheme).listModels()];
                    case 2:
                        schemeOut = _a.sent();
                        for (path in schemeOut) {
                            url = scheme + URL_SCHEME_SUFFIX + path;
                            out[url] = schemeOut[path];
                        }
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        return [2, out];
                }
            });
        });
    };
    ModelManagement.removeModel = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var schemeAndPath, manager;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        schemeAndPath = parseURL(url);
                        manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
                        return [4, manager.removeModel(schemeAndPath.path)];
                    case 1:
                        return [2, _a.sent()];
                }
            });
        });
    };
    ModelManagement.copyModel = function (sourceURL, destURL) {
        return __awaiter(this, void 0, void 0, function () {
            var deleteSource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deleteSource = false;
                        return [4, cloneModelInternal(sourceURL, destURL, deleteSource)];
                    case 1:
                        return [2, _a.sent()];
                }
            });
        });
    };
    ModelManagement.moveModel = function (sourceURL, destURL) {
        return __awaiter(this, void 0, void 0, function () {
            var deleteSource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deleteSource = true;
                        return [4, cloneModelInternal(sourceURL, destURL, deleteSource)];
                    case 1:
                        return [2, _a.sent()];
                }
            });
        });
    };
    __decorate([(0, _doc.doc)({ heading: 'Models', subheading: 'Management' })], ModelManagement, "listModels", null);
    __decorate([(0, _doc.doc)({ heading: 'Models', subheading: 'Management' })], ModelManagement, "removeModel", null);
    __decorate([(0, _doc.doc)({ heading: 'Models', subheading: 'Management' })], ModelManagement, "copyModel", null);
    __decorate([(0, _doc.doc)({ heading: 'Models', subheading: 'Management' })], ModelManagement, "moveModel", null);
    return ModelManagement;
}();
exports.ModelManagement = ModelManagement;
//# sourceMappingURL=model_management.js.map
},{"../doc":"VkNo","../util":"lDaM","./router_registry":"pxfX"}],"L5oR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrowserIndexedDBManager = exports.indexedDBRouter = exports.BrowserIndexedDB = undefined;
exports.deleteDatabase = deleteDatabase;
exports.browserIndexedDB = browserIndexedDB;

var _environment = require("../environment");

var _io_utils = require("./io_utils");

var _model_management = require("./model_management");

var _router_registry = require("./router_registry");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var DATABASE_NAME = 'tensorflowjs';
var DATABASE_VERSION = 1;
var MODEL_STORE_NAME = 'models_store';
var INFO_STORE_NAME = 'model_info_store';
function deleteDatabase() {
    return __awaiter(this, void 0, void 0, function () {
        var idbFactory;
        return __generator(this, function (_a) {
            idbFactory = getIndexedDBFactory();
            return [2, new Promise(function (resolve, reject) {
                var deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);
                deleteRequest.onsuccess = function () {
                    return resolve();
                };
                deleteRequest.onerror = function (error) {
                    return reject(error);
                };
            })];
        });
    });
}
function getIndexedDBFactory() {
    if (!_environment.ENV.get('IS_BROWSER')) {
        throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');
    }
    var theWindow = window;
    var factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;
    if (factory == null) {
        throw new Error('The current browser does not appear to support IndexedDB.');
    }
    return factory;
}
function setUpDatabase(openRequest) {
    var db = openRequest.result;
    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });
    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });
}
var BrowserIndexedDB = function () {
    function BrowserIndexedDB(modelPath) {
        this.indexedDB = getIndexedDBFactory();
        if (modelPath == null || !modelPath) {
            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');
        }
        this.modelPath = modelPath;
    }
    BrowserIndexedDB.prototype.save = function (modelArtifacts) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                    throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');
                }
                return [2, this.databaseAction(this.modelPath, modelArtifacts)];
            });
        });
    };
    BrowserIndexedDB.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.databaseAction(this.modelPath)];
            });
        });
    };
    BrowserIndexedDB.prototype.databaseAction = function (modelPath, modelArtifacts) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = function () {
                return setUpDatabase(openRequest);
            };
            openRequest.onsuccess = function () {
                var db = openRequest.result;
                if (modelArtifacts == null) {
                    var modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');
                    var modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                    var getRequest_1 = modelStore.get(_this.modelPath);
                    getRequest_1.onsuccess = function () {
                        if (getRequest_1.result == null) {
                            db.close();
                            return reject(new Error("Cannot find model with path '" + _this.modelPath + "' " + "in IndexedDB."));
                        } else {
                            resolve(getRequest_1.result.modelArtifacts);
                        }
                    };
                    getRequest_1.onerror = function (error) {
                        db.close();
                        return reject(getRequest_1.error);
                    };
                    modelTx.oncomplete = function () {
                        return db.close();
                    };
                } else {
                    var modelArtifactsInfo_1 = (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts);
                    var infoTx_1 = db.transaction(INFO_STORE_NAME, 'readwrite');
                    var infoStore_1 = infoTx_1.objectStore(INFO_STORE_NAME);
                    var putInfoRequest_1 = infoStore_1.put({ modelPath: _this.modelPath, modelArtifactsInfo: modelArtifactsInfo_1 });
                    var modelTx_1;
                    putInfoRequest_1.onsuccess = function () {
                        modelTx_1 = db.transaction(MODEL_STORE_NAME, 'readwrite');
                        var modelStore = modelTx_1.objectStore(MODEL_STORE_NAME);
                        var putModelRequest = modelStore.put({
                            modelPath: _this.modelPath,
                            modelArtifacts: modelArtifacts,
                            modelArtifactsInfo: modelArtifactsInfo_1
                        });
                        putModelRequest.onsuccess = function () {
                            return resolve({ modelArtifactsInfo: modelArtifactsInfo_1 });
                        };
                        putModelRequest.onerror = function (error) {
                            infoStore_1 = infoTx_1.objectStore(INFO_STORE_NAME);
                            var deleteInfoRequest = infoStore_1.delete(_this.modelPath);
                            deleteInfoRequest.onsuccess = function () {
                                db.close();
                                return reject(putModelRequest.error);
                            };
                            deleteInfoRequest.onerror = function (error) {
                                db.close();
                                return reject(putModelRequest.error);
                            };
                        };
                    };
                    putInfoRequest_1.onerror = function (error) {
                        db.close();
                        return reject(putInfoRequest_1.error);
                    };
                    infoTx_1.oncomplete = function () {
                        if (modelTx_1 == null) {
                            db.close();
                        } else {
                            modelTx_1.oncomplete = function () {
                                return db.close();
                            };
                        }
                    };
                }
            };
            openRequest.onerror = function (error) {
                return reject(openRequest.error);
            };
        });
    };
    BrowserIndexedDB.URL_SCHEME = 'indexeddb://';
    return BrowserIndexedDB;
}();
exports.BrowserIndexedDB = BrowserIndexedDB;
var indexedDBRouter = exports.indexedDBRouter = function (url) {
    if (!_environment.ENV.get('IS_BROWSER')) {
        return null;
    } else {
        if (url.startsWith(BrowserIndexedDB.URL_SCHEME)) {
            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
        } else {
            return null;
        }
    }
};
_router_registry.IORouterRegistry.registerSaveRouter(indexedDBRouter);
_router_registry.IORouterRegistry.registerLoadRouter(indexedDBRouter);
function browserIndexedDB(modelPath) {
    return new BrowserIndexedDB(modelPath);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;
}
var BrowserIndexedDBManager = function () {
    function BrowserIndexedDBManager() {
        this.indexedDB = getIndexedDBFactory();
    }
    BrowserIndexedDBManager.prototype.listModels = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) {
                    var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                    openRequest.onupgradeneeded = function () {
                        return setUpDatabase(openRequest);
                    };
                    openRequest.onsuccess = function () {
                        var db = openRequest.result;
                        var tx = db.transaction(INFO_STORE_NAME, 'readonly');
                        var store = tx.objectStore(INFO_STORE_NAME);
                        var getAllInfoRequest = store.getAll();
                        getAllInfoRequest.onsuccess = function () {
                            var out = {};
                            for (var _i = 0, _a = getAllInfoRequest.result; _i < _a.length; _i++) {
                                var item = _a[_i];
                                out[item.modelPath] = item.modelArtifactsInfo;
                            }
                            resolve(out);
                        };
                        getAllInfoRequest.onerror = function (error) {
                            db.close();
                            return reject(getAllInfoRequest.error);
                        };
                        tx.oncomplete = function () {
                            return db.close();
                        };
                    };
                    openRequest.onerror = function (error) {
                        return reject(openRequest.error);
                    };
                })];
            });
        });
    };
    BrowserIndexedDBManager.prototype.removeModel = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                path = maybeStripScheme(path);
                return [2, new Promise(function (resolve, reject) {
                    var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                    openRequest.onupgradeneeded = function () {
                        return setUpDatabase(openRequest);
                    };
                    openRequest.onsuccess = function () {
                        var db = openRequest.result;
                        var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
                        var infoStore = infoTx.objectStore(INFO_STORE_NAME);
                        var getInfoRequest = infoStore.get(path);
                        var modelTx;
                        getInfoRequest.onsuccess = function () {
                            if (getInfoRequest.result == null) {
                                db.close();
                                return reject(new Error("Cannot find model with path '" + path + "' " + "in IndexedDB."));
                            } else {
                                var deleteInfoRequest = infoStore.delete(path);
                                var deleteModelData_1 = function () {
                                    modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
                                    var modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                                    var deleteModelRequest = modelStore.delete(path);
                                    deleteModelRequest.onsuccess = function () {
                                        return resolve(getInfoRequest.result.modelArtifactsInfo);
                                    };
                                    deleteModelRequest.onerror = function (error) {
                                        return reject(getInfoRequest.error);
                                    };
                                };
                                deleteInfoRequest.onsuccess = deleteModelData_1;
                                deleteInfoRequest.onerror = function (error) {
                                    deleteModelData_1();
                                    db.close();
                                    return reject(getInfoRequest.error);
                                };
                            }
                        };
                        getInfoRequest.onerror = function (error) {
                            db.close();
                            return reject(getInfoRequest.error);
                        };
                        infoTx.oncomplete = function () {
                            if (modelTx == null) {
                                db.close();
                            } else {
                                modelTx.oncomplete = function () {
                                    return db.close();
                                };
                            }
                        };
                    };
                    openRequest.onerror = function (error) {
                        return reject(openRequest.error);
                    };
                })];
            });
        });
    };
    return BrowserIndexedDBManager;
}();
exports.BrowserIndexedDBManager = BrowserIndexedDBManager;

if (_environment.ENV.get('IS_BROWSER')) {
    try {
        _model_management.ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());
    } catch (err) {}
}
//# sourceMappingURL=indexed_db.js.map
},{"../environment":"CAkW","./io_utils":"FPWg","./model_management":"utLb","./router_registry":"pxfX"}],"Nety":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrowserLocalStorageManager = exports.localStorageRouter = exports.BrowserLocalStorage = undefined;
exports.purgeLocalStorageArtifacts = purgeLocalStorageArtifacts;
exports.browserLocalStorage = browserLocalStorage;

var _environment = require("../environment");

var _util = require("../util");

var _io_utils = require("./io_utils");

var _model_management = require("./model_management");

var _router_registry = require("./router_registry");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var PATH_SEPARATOR = '/';
var PATH_PREFIX = 'tensorflowjs_models';
var INFO_SUFFIX = 'info';
var MODEL_TOPOLOGY_SUFFIX = 'model_topology';
var WEIGHT_SPECS_SUFFIX = 'weight_specs';
var WEIGHT_DATA_SUFFIX = 'weight_data';
function purgeLocalStorageArtifacts() {
    if (!_environment.ENV.get('IS_BROWSER') || typeof window.localStorage === 'undefined') {
        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');
    }
    var LS = window.localStorage;
    var purgedModelPaths = [];
    for (var i = 0; i < LS.length; ++i) {
        var key = LS.key(i);
        var prefix = PATH_PREFIX + PATH_SEPARATOR;
        if (key.startsWith(prefix) && key.length > prefix.length) {
            LS.removeItem(key);
            var modelName = getModelPathFromKey(key);
            if (purgedModelPaths.indexOf(modelName) === -1) {
                purgedModelPaths.push(modelName);
            }
        }
    }
    return purgedModelPaths;
}
function getModelKeys(path) {
    return {
        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),
        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR)
    };
}
function getModelPathFromKey(key) {
    var items = key.split(PATH_SEPARATOR);
    if (items.length < 3) {
        throw new Error("Invalid key format: " + key);
    }
    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;
}
var BrowserLocalStorage = function () {
    function BrowserLocalStorage(modelPath) {
        if (!_environment.ENV.get('IS_BROWSER') || typeof window.localStorage === 'undefined') {
            throw new Error('The current environment does not support local storage.');
        }
        this.LS = window.localStorage;
        if (modelPath == null || !modelPath) {
            throw new Error('For local storage, modelPath must not be null, undefined or empty.');
        }
        this.modelPath = modelPath;
        this.keys = getModelKeys(this.modelPath);
    }
    BrowserLocalStorage.prototype.save = function (modelArtifacts) {
        return __awaiter(this, void 0, void 0, function () {
            var topology, weightSpecs, modelArtifactsInfo, key;
            return __generator(this, function (_a) {
                if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                    throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');
                } else {
                    topology = JSON.stringify(modelArtifacts.modelTopology);
                    weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
                    modelArtifactsInfo = (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts);
                    try {
                        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
                        this.LS.setItem(this.keys.topology, topology);
                        this.LS.setItem(this.keys.weightSpecs, weightSpecs);
                        this.LS.setItem(this.keys.weightData, (0, _io_utils.arrayBufferToBase64String)(modelArtifacts.weightData));
                        return [2, { modelArtifactsInfo: modelArtifactsInfo }];
                    } catch (err) {
                        for (key in this.keys) {
                            this.LS.removeItem(this.keys[key]);
                        }
                        throw new Error("Failed to save model '" + this.modelPath + "' to local storage: " + "size quota being exceeded is a possible cause of this failure: " + ("modelTopologyBytes=" + modelArtifactsInfo.modelTopologyBytes + ", ") + ("weightSpecsBytes=" + modelArtifactsInfo.weightSpecsBytes + ", ") + ("weightDataBytes=" + modelArtifactsInfo.weightDataBytes + "."));
                    }
                }
                return [2];
            });
        });
    };
    BrowserLocalStorage.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var info, out, topology, weightSpecs, weightDataBase64;
            return __generator(this, function (_a) {
                info = JSON.parse(this.LS.getItem(this.keys.info));
                if (info == null) {
                    throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
                }
                if (info.modelTopologyType !== 'JSON') {
                    throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');
                }
                out = {};
                topology = JSON.parse(this.LS.getItem(this.keys.topology));
                if (topology == null) {
                    throw new Error("In local storage, the topology of model '" + this.modelPath + "' " + "is missing.");
                }
                out.modelTopology = topology;
                weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
                if (weightSpecs == null) {
                    throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' " + "are missing.");
                }
                out.weightSpecs = weightSpecs;
                weightDataBase64 = this.LS.getItem(this.keys.weightData);
                if (weightDataBase64 == null) {
                    throw new Error("In local storage, the binary weight values of model " + ("'" + this.modelPath + "' are missing."));
                }
                out.weightData = (0, _io_utils.base64StringToArrayBuffer)(weightDataBase64);
                return [2, out];
            });
        });
    };
    BrowserLocalStorage.URL_SCHEME = 'localstorage://';
    return BrowserLocalStorage;
}();
exports.BrowserLocalStorage = BrowserLocalStorage;
var localStorageRouter = exports.localStorageRouter = function (url) {
    if (!_environment.ENV.get('IS_BROWSER')) {
        return null;
    } else {
        if (url.startsWith(BrowserLocalStorage.URL_SCHEME)) {
            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
        } else {
            return null;
        }
    }
};
_router_registry.IORouterRegistry.registerSaveRouter(localStorageRouter);
_router_registry.IORouterRegistry.registerLoadRouter(localStorageRouter);
function browserLocalStorage(modelPath) {
    return new BrowserLocalStorage(modelPath);
}
var BrowserLocalStorageManager = function () {
    function BrowserLocalStorageManager() {
        (0, _util.assert)(_environment.ENV.get('IS_BROWSER'), 'Current environment is not a web browser');
        (0, _util.assert)(typeof window.localStorage !== 'undefined', 'Current browser does not appear to support localStorage');
        this.LS = window.localStorage;
    }
    BrowserLocalStorageManager.prototype.listModels = function () {
        return __awaiter(this, void 0, void 0, function () {
            var out, prefix, suffix, i, key, modelPath;
            return __generator(this, function (_a) {
                out = {};
                prefix = PATH_PREFIX + PATH_SEPARATOR;
                suffix = PATH_SEPARATOR + INFO_SUFFIX;
                for (i = 0; i < this.LS.length; ++i) {
                    key = this.LS.key(i);
                    if (key.startsWith(prefix) && key.endsWith(suffix)) {
                        modelPath = getModelPathFromKey(key);
                        out[modelPath] = JSON.parse(this.LS.getItem(key));
                    }
                }
                return [2, out];
            });
        });
    };
    BrowserLocalStorageManager.prototype.removeModel = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var keys, info;
            return __generator(this, function (_a) {
                path = maybeStripScheme(path);
                keys = getModelKeys(path);
                if (this.LS.getItem(keys.info) == null) {
                    throw new Error("Cannot find model at path '" + path + "'");
                }
                info = JSON.parse(this.LS.getItem(keys.info));
                this.LS.removeItem(keys.info);
                this.LS.removeItem(keys.topology);
                this.LS.removeItem(keys.weightSpecs);
                this.LS.removeItem(keys.weightData);
                return [2, info];
            });
        });
    };
    return BrowserLocalStorageManager;
}();
exports.BrowserLocalStorageManager = BrowserLocalStorageManager;

if (_environment.ENV.get('IS_BROWSER')) {
    try {
        _model_management.ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());
    } catch (err) {}
}
//# sourceMappingURL=local_storage.js.map
},{"../environment":"CAkW","../util":"lDaM","./io_utils":"FPWg","./model_management":"utLb","./router_registry":"pxfX"}],"Q6Se":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.browserDownloadsRouter = exports.BrowserDownloads = undefined;
exports.browserDownloads = browserDownloads;
exports.browserFiles = browserFiles;

var _environment = require("../environment");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var DEFAULT_FILE_NAME_PREFIX = 'model';
var DEFAULT_JSON_EXTENSION_NAME = '.json';
var DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';
var BrowserDownloads = function () {
    function BrowserDownloads(fileNamePrefix) {
        if (!_environment.ENV.get('IS_BROWSER')) {
            throw new Error('triggerDownloads() cannot proceed because the current environment ' + 'is not a browser.');
        }
        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {
            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
        }
        if (fileNamePrefix == null || fileNamePrefix.length === 0) {
            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
        }
        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
        this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
    }
    BrowserDownloads.prototype.save = function (modelArtifacts) {
        return __awaiter(this, void 0, void 0, function () {
            var weightsURL, weightsManifest, modelTopologyAndWeightManifest, modelTopologyAndWeightManifestURL, jsonAnchor, weightDataAnchor;
            return __generator(this, function (_a) {
                weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));
                if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                    throw new Error('DownloadTrigger.save() does not support saving model topology ' + 'in binary formats yet.');
                } else {
                    weightsManifest = [{
                        paths: ['./' + this.weightDataFileName],
                        weights: modelArtifacts.weightSpecs
                    }];
                    modelTopologyAndWeightManifest = {
                        modelTopology: modelArtifacts.modelTopology,
                        weightsManifest: weightsManifest
                    };
                    modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));
                    jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;
                    jsonAnchor.download = this.modelTopologyFileName;
                    jsonAnchor.href = modelTopologyAndWeightManifestURL;
                    jsonAnchor.click();
                    if (modelArtifacts.weightData != null) {
                        weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;
                        weightDataAnchor.download = this.weightDataFileName;
                        weightDataAnchor.href = weightsURL;
                        weightDataAnchor.click();
                    }
                    return [2, { modelArtifactsInfo: (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts) }];
                }
                return [2];
            });
        });
    };
    BrowserDownloads.URL_SCHEME = 'downloads://';
    return BrowserDownloads;
}();
exports.BrowserDownloads = BrowserDownloads;

var BrowserFiles = function () {
    function BrowserFiles(files) {
        if (files == null || files.length < 1) {
            throw new Error("When calling browserFiles, at least 1 file is required, " + ("but received " + files));
        }
        this.files = files;
    }
    BrowserFiles.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var jsonFile, weightFiles;
            return __generator(this, function (_a) {
                jsonFile = this.files[0];
                weightFiles = this.files.slice(1);
                return [2, new Promise(function (resolve, reject) {
                    var jsonReader = new FileReader();
                    jsonReader.onload = function (event) {
                        var modelJSON = JSON.parse(event.target.result);
                        var modelTopology = modelJSON.modelTopology;
                        if (modelTopology == null) {
                            reject(new Error("modelTopology field is missing from file " + jsonFile.name));
                            return;
                        }
                        if (weightFiles.length === 0) {
                            resolve({ modelTopology: modelTopology });
                        }
                        var weightsManifest = modelJSON.weightsManifest;
                        if (weightsManifest == null) {
                            reject(new Error("weightManifest field is missing from file " + jsonFile.name));
                            return;
                        }
                        var pathToFile;
                        try {
                            pathToFile = _this.checkManifestAndWeightFiles(weightsManifest, weightFiles);
                        } catch (err) {
                            reject(err);
                            return;
                        }
                        var weightSpecs = [];
                        var paths = [];
                        var perFileBuffers = [];
                        weightsManifest.forEach(function (weightsGroup) {
                            weightsGroup.paths.forEach(function (path) {
                                paths.push(path);
                                perFileBuffers.push(null);
                            });
                            weightSpecs.push.apply(weightSpecs, weightsGroup.weights);
                        });
                        weightsManifest.forEach(function (weightsGroup) {
                            weightsGroup.paths.forEach(function (path) {
                                var weightFileReader = new FileReader();
                                weightFileReader.onload = function (event) {
                                    var weightData = event.target.result;
                                    var index = paths.indexOf(path);
                                    perFileBuffers[index] = weightData;
                                    if (perFileBuffers.indexOf(null) === -1) {
                                        resolve({
                                            modelTopology: modelTopology,
                                            weightSpecs: weightSpecs,
                                            weightData: (0, _io_utils.concatenateArrayBuffers)(perFileBuffers)
                                        });
                                    }
                                };
                                weightFileReader.onerror = function (error) {
                                    reject("Failed to weights data from file of path '" + path + "'.");
                                    return;
                                };
                                weightFileReader.readAsArrayBuffer(pathToFile[path]);
                            });
                        });
                    };
                    jsonReader.onerror = function (error) {
                        reject("Failed to read model topology and weights manifest JSON " + ("from file '" + jsonFile.name + "'. BrowserFiles supports loading ") + "Keras-style tf.Model artifacts only.");
                        return;
                    };
                    jsonReader.readAsText(jsonFile);
                })];
            });
        });
    };
    BrowserFiles.prototype.checkManifestAndWeightFiles = function (manifest, files) {
        var basenames = [];
        var fileNames = files.map(function (file) {
            return (0, _io_utils.basename)(file.name);
        });
        var pathToFile = {};
        for (var _i = 0, manifest_1 = manifest; _i < manifest_1.length; _i++) {
            var group = manifest_1[_i];
            group.paths.forEach(function (path) {
                var pathBasename = (0, _io_utils.basename)(path);
                if (basenames.indexOf(pathBasename) !== -1) {
                    throw new Error("Duplicate file basename found in weights manifest: " + ("'" + pathBasename + "'"));
                }
                basenames.push(pathBasename);
                if (fileNames.indexOf(pathBasename) === -1) {
                    throw new Error("Weight file with basename '" + pathBasename + "' is not provided.");
                } else {
                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];
                }
            });
        }
        if (basenames.length !== files.length) {
            throw new Error("Mismatch in the number of files in weights manifest " + ("(" + basenames.length + ") and the number of weight files provided ") + ("(" + files.length + ")."));
        }
        return pathToFile;
    };
    return BrowserFiles;
}();
var browserDownloadsRouter = exports.browserDownloadsRouter = function (url) {
    if (!_environment.ENV.get('IS_BROWSER')) {
        return null;
    } else {
        if (url.startsWith(BrowserDownloads.URL_SCHEME)) {
            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
        } else {
            return null;
        }
    }
};
_router_registry.IORouterRegistry.registerSaveRouter(browserDownloadsRouter);
function browserDownloads(fileNamePrefix) {
    if (fileNamePrefix === void 0) {
        fileNamePrefix = 'model';
    }
    return new BrowserDownloads(fileNamePrefix);
}
function browserFiles(files) {
    return new BrowserFiles(files);
}
//# sourceMappingURL=browser_files.js.map
},{"../environment":"CAkW","./io_utils":"FPWg","./router_registry":"pxfX"}],"vIAO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadWeightsAsArrayBuffer = loadWeightsAsArrayBuffer;
exports.loadWeights = loadWeights;

var _ops = require("../ops/ops");

var _util = require("../util");

var util = _interopRequireWildcard(_util);

var _types = require("./types");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function loadWeightsAsArrayBuffer(fetchURLs, requestOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var requests, responses, buffers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requests = fetchURLs.map(function (fetchURL) {
                        return fetch(fetchURL, requestOptions);
                    });
                    return [4, Promise.all(requests)];
                case 1:
                    responses = _a.sent();
                    return [4, Promise.all(responses.map(function (response) {
                        return response.arrayBuffer();
                    }))];
                case 2:
                    buffers = _a.sent();
                    return [2, buffers];
            }
        });
    });
}
function loadWeights(manifest, filePathPrefix, weightNames, requestOptions) {
    if (filePathPrefix === void 0) {
        filePathPrefix = '';
    }
    return __awaiter(this, void 0, void 0, function () {
        var groupIndicesToFetchMap, groupWeightsToFetch, weightsFound, allManifestWeightNames, weightsNotFound, groupIndicesToFetch, fetchUrls, buffers, weightsTensorMap, bufferIndexOffset;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    groupIndicesToFetchMap = manifest.map(function () {
                        return false;
                    });
                    groupWeightsToFetch = {};
                    weightsFound = weightNames != null ? weightNames.map(function () {
                        return false;
                    }) : [];
                    allManifestWeightNames = [];
                    manifest.forEach(function (manifestGroupConfig, groupIndex) {
                        var groupOffset = 0;
                        manifestGroupConfig.weights.forEach(function (weightsEntry) {
                            var rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;
                            var weightsBytes = _types.DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);
                            var enqueueWeightsForFetchingFn = function () {
                                groupIndicesToFetchMap[groupIndex] = true;
                                if (groupWeightsToFetch[groupIndex] == null) {
                                    groupWeightsToFetch[groupIndex] = [];
                                }
                                groupWeightsToFetch[groupIndex].push({
                                    manifestEntry: weightsEntry,
                                    groupOffset: groupOffset,
                                    sizeBytes: weightsBytes
                                });
                            };
                            if (weightNames != null) {
                                weightNames.forEach(function (weightName, weightIndex) {
                                    if (weightName === weightsEntry.name) {
                                        enqueueWeightsForFetchingFn();
                                        weightsFound[weightIndex] = true;
                                    }
                                });
                            } else {
                                enqueueWeightsForFetchingFn();
                            }
                            allManifestWeightNames.push(weightsEntry.name);
                            groupOffset += weightsBytes;
                        });
                    });
                    if (!weightsFound.every(function (found) {
                        return found;
                    })) {
                        weightsNotFound = weightNames.filter(function (weight, i) {
                            return !weightsFound[i];
                        });
                        throw new Error("Could not find weights in manifest with names: " + (weightsNotFound.join(', ') + ". \n") + "Manifest JSON has weights with names: " + (allManifestWeightNames.join(', ') + "."));
                    }
                    groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {
                        if (shouldFetch) {
                            accumulator.push(i);
                        }
                        return accumulator;
                    }, []);
                    fetchUrls = [];
                    groupIndicesToFetch.forEach(function (i) {
                        manifest[i].paths.forEach(function (filepath) {
                            var fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;
                            fetchUrls.push(fetchUrl);
                        });
                    });
                    return [4, loadWeightsAsArrayBuffer(fetchUrls, requestOptions)];
                case 1:
                    buffers = _a.sent();
                    weightsTensorMap = {};
                    bufferIndexOffset = 0;
                    groupIndicesToFetch.forEach(function (i) {
                        var numBuffers = manifest[i].paths.length;
                        var groupBytes = 0;
                        for (var i_1 = 0; i_1 < numBuffers; i_1++) {
                            groupBytes += buffers[bufferIndexOffset + i_1].byteLength;
                        }
                        var groupBuffer = new ArrayBuffer(groupBytes);
                        var groupByteBuffer = new Uint8Array(groupBuffer);
                        var groupBufferOffset = 0;
                        for (var i_2 = 0; i_2 < numBuffers; i_2++) {
                            var buffer = new Uint8Array(buffers[bufferIndexOffset + i_2]);
                            groupByteBuffer.set(buffer, groupBufferOffset);
                            groupBufferOffset += buffer.byteLength;
                        }
                        var weightsEntries = groupWeightsToFetch[i];
                        weightsEntries.forEach(function (weightsEntry) {
                            var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
                            var typedArray;
                            var dtype = weightsEntry.manifestEntry.dtype;
                            if ('quantization' in weightsEntry.manifestEntry) {
                                var quantization_1 = weightsEntry.manifestEntry.quantization;
                                if (quantization_1.dtype !== 'uint8' && quantization_1.dtype !== 'uint16') {
                                    throw new Error("Weight " + weightsEntry.manifestEntry.name + " has unknown " + ("quantization dtype " + quantization_1.dtype + "."));
                                }
                                var quantizedArray = quantization_1.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);
                                if (dtype === 'float32') {
                                    typedArray = Float32Array.from(quantizedArray, function (v) {
                                        return v * quantization_1.scale + quantization_1.min;
                                    });
                                } else if (dtype === 'int32') {
                                    typedArray = Int32Array.from(quantizedArray, function (v) {
                                        return Math.round(v * quantization_1.scale + quantization_1.min);
                                    });
                                } else {
                                    throw new Error("Weight " + weightsEntry.manifestEntry.name + " has a dtype not " + ("supported by quantization: " + dtype));
                                }
                            } else {
                                if (dtype === 'float32') {
                                    typedArray = new Float32Array(byteBuffer);
                                } else if (dtype === 'int32') {
                                    typedArray = new Int32Array(byteBuffer);
                                } else {
                                    throw new Error("Weight " + weightsEntry.manifestEntry.name + " has unknown dtype " + (dtype + "."));
                                }
                            }
                            var weightName = weightsEntry.manifestEntry.name;
                            if (weightsTensorMap[weightName] != null) {
                                throw new Error("Duplicate weight with name " + weightName + ". " + "Please make sure weights names are unique in the manifest JSON.");
                            }
                            weightsTensorMap[weightName] = (0, _ops.tensor)(typedArray, weightsEntry.manifestEntry.shape, weightsEntry.manifestEntry.dtype);
                        });
                        bufferIndexOffset += numBuffers;
                    });
                    return [2, weightsTensorMap];
            }
        });
    });
}
//# sourceMappingURL=weights_loader.js.map
},{"../ops/ops":"bzyr","../util":"lDaM","./types":"uvwn"}],"ioOe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.httpRequestRouter = exports.BrowserHTTPRequest = undefined;
exports.browserHTTPRequest = browserHTTPRequest;

var _environment = require("../environment");

var _util = require("../util");

var _io_utils = require("./io_utils");

var _router_registry = require("./router_registry");

var _weights_loader = require("./weights_loader");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var BrowserHTTPRequest = function () {
    function BrowserHTTPRequest(path, requestInit) {
        this.DEFAULT_METHOD = 'POST';
        if (!_environment.ENV.get('IS_BROWSER')) {
            throw new Error('browserHTTPRequest is not supported outside the web browser.');
        }
        (0, _util.assert)(path != null && path.length > 0, 'URL path for browserHTTPRequest must not be null, undefined or ' + 'empty.');
        this.path = path;
        if (requestInit != null && requestInit.body != null) {
            throw new Error('requestInit is expected to have no pre-existing body, but has one.');
        }
        this.requestInit = requestInit || {};
    }
    BrowserHTTPRequest.prototype.save = function (modelArtifacts) {
        return __awaiter(this, void 0, void 0, function () {
            var init, weightsManifest, modelTopologyAndWeightManifest, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');
                        }
                        init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
                        init.body = new FormData();
                        weightsManifest = [{
                            paths: ['./model.weights.bin'],
                            weights: modelArtifacts.weightSpecs
                        }];
                        modelTopologyAndWeightManifest = {
                            modelTopology: modelArtifacts.modelTopology,
                            weightsManifest: weightsManifest
                        };
                        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }), 'model.json');
                        if (modelArtifacts.weightData != null) {
                            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }), 'model.weights.bin');
                        }
                        return [4, fetch(this.path, init)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2, {
                                modelArtifactsInfo: (0, _io_utils.getModelArtifactsInfoForJSON)(modelArtifacts),
                                responses: [response]
                            }];
                        } else {
                            throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + (response.status + "."));
                        }
                        return [2];
                }
            });
        });
    };
    BrowserHTTPRequest.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modelConfigRequest, modelConfig, modelTopology, weightsManifest, weightSpecs, weightData, weightsManifest_1, _i, weightsManifest_2, entry, pathPrefix_1, fetchURLs_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        return [4, fetch(this.path, this.requestInit)];
                    case 1:
                        modelConfigRequest = _b.sent();
                        return [4, modelConfigRequest.json()];
                    case 2:
                        modelConfig = _b.sent();
                        modelTopology = modelConfig['modelTopology'];
                        weightsManifest = modelConfig['weightsManifest'];
                        if (modelTopology == null && weightsManifest == null) {
                            throw new Error("The JSON from HTTP path " + this.path + " contains neither model " + "topology or manifest for weights.");
                        }
                        if (!(weightsManifest != null)) return [3, 4];
                        weightsManifest_1 = modelConfig['weightsManifest'];
                        weightSpecs = [];
                        for (_i = 0, weightsManifest_2 = weightsManifest_1; _i < weightsManifest_2.length; _i++) {
                            entry = weightsManifest_2[_i];
                            weightSpecs.push.apply(weightSpecs, entry.weights);
                        }
                        pathPrefix_1 = this.path.substring(0, this.path.lastIndexOf('/'));
                        if (!pathPrefix_1.endsWith('/')) {
                            pathPrefix_1 = pathPrefix_1 + '/';
                        }
                        fetchURLs_1 = [];
                        weightsManifest_1.forEach(function (weightsGroup) {
                            weightsGroup.paths.forEach(function (path) {
                                fetchURLs_1.push(pathPrefix_1 + path);
                            });
                        });
                        _a = _io_utils.concatenateArrayBuffers;
                        return [4, (0, _weights_loader.loadWeightsAsArrayBuffer)(fetchURLs_1, this.requestInit)];
                    case 3:
                        weightData = _a.apply(void 0, [_b.sent()]);
                        _b.label = 4;
                    case 4:
                        return [2, { modelTopology: modelTopology, weightSpecs: weightSpecs, weightData: weightData }];
                }
            });
        });
    };
    BrowserHTTPRequest.URL_SCHEMES = ['http://', 'https://'];
    return BrowserHTTPRequest;
}();
exports.BrowserHTTPRequest = BrowserHTTPRequest;
var httpRequestRouter = exports.httpRequestRouter = function (url) {
    if (!_environment.ENV.get('IS_BROWSER')) {
        return null;
    } else {
        for (var _i = 0, _a = BrowserHTTPRequest.URL_SCHEMES; _i < _a.length; _i++) {
            var scheme = _a[_i];
            if (url.startsWith(scheme)) {
                return browserHTTPRequest(url);
            }
        }
        return null;
    }
};
_router_registry.IORouterRegistry.registerSaveRouter(httpRequestRouter);
function browserHTTPRequest(path, requestInit) {
    return new BrowserHTTPRequest(path, requestInit);
}
//# sourceMappingURL=browser_http.js.map
},{"../environment":"CAkW","../util":"lDaM","./io_utils":"FPWg","./router_registry":"pxfX","./weights_loader":"vIAO"}],"pyLe":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeModel = exports.registerSaveRouter = exports.registerLoadRouter = exports.moveModel = exports.loadWeights = exports.listModels = exports.getSaveHandlers = exports.getModelArtifactsInfoForJSON = exports.getLoadHandlers = exports.encodeWeights = exports.decodeWeights = exports.copyModel = exports.browserHTTPRequest = exports.browserFiles = undefined;

require('./indexed_db');

require('./local_storage');

var _browser_files = require('./browser_files');

var _browser_http = require('./browser_http');

var _io_utils = require('./io_utils');

var _model_management = require('./model_management');

var _router_registry = require('./router_registry');

var _weights_loader = require('./weights_loader');

var registerSaveRouter = _router_registry.IORouterRegistry.registerSaveRouter;
var registerLoadRouter = _router_registry.IORouterRegistry.registerLoadRouter;
var getSaveHandlers = _router_registry.IORouterRegistry.getSaveHandlers;
var getLoadHandlers = _router_registry.IORouterRegistry.getLoadHandlers;
var copyModel = _model_management.ModelManagement.copyModel;
var listModels = _model_management.ModelManagement.listModels;
var moveModel = _model_management.ModelManagement.moveModel;
var removeModel = _model_management.ModelManagement.removeModel;
exports.browserFiles = _browser_files.browserFiles;
exports.browserHTTPRequest = _browser_http.browserHTTPRequest;
exports.copyModel = copyModel;
exports.decodeWeights = _io_utils.decodeWeights;
exports.encodeWeights = _io_utils.encodeWeights;
exports.getLoadHandlers = getLoadHandlers;
exports.getModelArtifactsInfoForJSON = _io_utils.getModelArtifactsInfoForJSON;
exports.getSaveHandlers = getSaveHandlers;
exports.listModels = listModels;
exports.loadWeights = _weights_loader.loadWeights;
exports.moveModel = moveModel;
exports.registerLoadRouter = registerLoadRouter;
exports.registerSaveRouter = registerSaveRouter;
exports.removeModel = removeModel;
//# sourceMappingURL=io.js.map
},{"./indexed_db":"L5oR","./local_storage":"Nety","./browser_files":"Q6Se","./browser_http":"ioOe","./io_utils":"FPWg","./model_management":"utLb","./router_registry":"pxfX","./weights_loader":"vIAO"}],"BRyN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var Serializable = function () {
    function Serializable() {}
    Serializable.prototype.getClassName = function () {
        return this.constructor.className;
    };
    Serializable.fromConfig = function (cls, config) {
        return new cls(config);
    };
    return Serializable;
}();
exports.Serializable = Serializable;

var SerializationMap = function () {
    function SerializationMap() {
        this.classNameMap = {};
    }
    SerializationMap.getMap = function () {
        if (SerializationMap.instance == null) {
            SerializationMap.instance = new SerializationMap();
        }
        return SerializationMap.instance;
    };
    SerializationMap.register = function (cls) {
        this.getMap().classNameMap[cls.className] = [cls, cls.fromConfig];
    };
    return SerializationMap;
}();
exports.SerializationMap = SerializationMap;
//# sourceMappingURL=serialization.js.map
},{}],"6PEx":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TEST_EPSILON = exports.ALL_ENVS = exports.CPU_ENVS = exports.WEBGL_ENVS = undefined;
exports.expectArraysClose = expectArraysClose;
exports.expectPromiseToFail = expectPromiseToFail;
exports.expectArraysEqual = expectArraysEqual;
exports.expectNumbersClose = expectNumbersClose;
exports.expectValuesInRange = expectValuesInRange;

var _tensor = require('./tensor');

var _util = require('./util');

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var WEBGL_ENVS = exports.WEBGL_ENVS = {
    'BACKEND': 'test-webgl'
};
var CPU_ENVS = exports.CPU_ENVS = {
    'BACKEND': 'test-cpu'
};
var ALL_ENVS = exports.ALL_ENVS = {};
var TEST_EPSILON = exports.TEST_EPSILON = 1e-3;
function expectArraysClose(actual, expected, epsilon) {
    if (epsilon === void 0) {
        epsilon = TEST_EPSILON;
    }
    if (!(actual instanceof _tensor.Tensor) && !(expected instanceof _tensor.Tensor)) {
        var aType = actual.constructor.name;
        var bType = expected.constructor.name;
        if (aType !== bType) {
            throw new Error("Arrays are of different type actual: " + aType + " " + ("vs expected: " + bType));
        }
    } else if (actual instanceof _tensor.Tensor && expected instanceof _tensor.Tensor) {
        if (actual.dtype !== expected.dtype) {
            throw new Error("Arrays are of different type actual: " + actual.dtype + " " + ("vs expected: " + expected.dtype + "."));
        }
        if (!util.arraysEqual(actual.shape, expected.shape)) {
            throw new Error("Arrays are of different shape actual: " + actual.shape + " " + ("vs expected: " + expected.shape + "."));
        }
    }
    var actualValues;
    var expectedValues;
    if (actual instanceof _tensor.Tensor) {
        actualValues = actual.dataSync();
    } else {
        actualValues = actual;
    }
    if (expected instanceof _tensor.Tensor) {
        expectedValues = expected.dataSync();
    } else {
        expectedValues = expected;
    }
    if (actualValues.length !== expectedValues.length) {
        throw new Error("Arrays have different lengths actual: " + actualValues.length + " vs " + ("expected: " + expectedValues.length + ".\n") + ("Actual:   " + actualValues + ".\n") + ("Expected: " + expectedValues + "."));
    }
    for (var i = 0; i < expectedValues.length; ++i) {
        var a = actualValues[i];
        var e = expectedValues[i];
        if (!areClose(a, Number(e), epsilon)) {
            throw new Error("Arrays differ: actual[" + i + "] = " + a + ", expected[" + i + "] = " + e + ".\n" + ("Actual:   " + actualValues + ".\n") + ("Expected: " + expectedValues + "."));
        }
    }
}
function expectPromiseToFail(fn, done) {
    fn().then(function () {
        return done.fail();
    }, function () {
        return done();
    });
}
function expectArraysEqual(actual, expected) {
    return expectArraysClose(actual, expected, 0);
}
function expectNumbersClose(a, e, epsilon) {
    if (epsilon === void 0) {
        epsilon = TEST_EPSILON;
    }
    if (!areClose(a, e, epsilon)) {
        throw new Error("Numbers differ: actual === " + a + ", expected === " + e);
    }
}
function areClose(a, e, epsilon) {
    if (isNaN(a) && isNaN(e)) {
        return true;
    }
    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {
        return false;
    }
    return true;
}
function expectValuesInRange(actual, low, high) {
    var actualVals;
    if (actual instanceof _tensor.Tensor) {
        actualVals = actual.dataSync();
    } else {
        actualVals = actual;
    }
    for (var i = 0; i < actualVals.length; i++) {
        if (actualVals[i] < low || actualVals[i] > high) {
            throw new Error("Value out of range:" + actualVals[i] + " low: " + low + ", high: " + high);
        }
    }
}
//# sourceMappingURL=test_util.js.map
},{"./tensor":"Xe78","./util":"lDaM"}],"hhq7":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var version = '0.11.4';
exports.version = version;
//# sourceMappingURL=version.js.map
},{}],"1vuC":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webgl_util = exports.gpgpu_util = exports.GPGPUContext = exports.MathBackendWebGL = undefined;

var _backend_webgl = require('./kernels/backend_webgl');

Object.defineProperty(exports, 'MathBackendWebGL', {
  enumerable: true,
  get: function () {
    return _backend_webgl.MathBackendWebGL;
  }
});

var _gpgpu_context = require('./kernels/webgl/gpgpu_context');

Object.defineProperty(exports, 'GPGPUContext', {
  enumerable: true,
  get: function () {
    return _gpgpu_context.GPGPUContext;
  }
});

var _webgl_util = require('./kernels/webgl/webgl_util');

var webgl_util = _interopRequireWildcard(_webgl_util);

var _gpgpu_util = require('./kernels/webgl/gpgpu_util');

var gpgpu_util = _interopRequireWildcard(_gpgpu_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.gpgpu_util = gpgpu_util;
exports.webgl_util = webgl_util;
//# sourceMappingURL=webgl.js.map
},{"./kernels/webgl/webgl_util":"7OCh","./kernels/webgl/gpgpu_util":"Fhof","./kernels/backend_webgl":"Dfu8","./kernels/webgl/gpgpu_context":"a4ii"}],"1vmU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Optimizer = undefined;

var _doc = require("../doc");

var _globals = require("../globals");

var _serialization = require("../serialization");

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var Optimizer = function (_super) {
    __extends(Optimizer, _super);
    function Optimizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Optimizer.prototype.minimize = function (f, returnCost, varList) {
        if (returnCost === void 0) {
            returnCost = false;
        }
        var _a = this.computeGradients(f, varList),
            value = _a.value,
            grads = _a.grads;
        this.applyGradients(grads);
        var varNames = Object.keys(grads);
        varNames.forEach(function (varName) {
            return grads[varName].dispose();
        });
        if (returnCost) {
            return value;
        } else {
            value.dispose();
            return null;
        }
    };
    Optimizer.prototype.computeGradients = function (f, varList) {
        return (0, _globals.variableGrads)(f, varList);
    };
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Optimizers' })], Optimizer.prototype, "minimize", null);
    Optimizer = __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Classes', namespace: 'train' })], Optimizer);
    return Optimizer;
}(_serialization.Serializable);
exports.Optimizer = Optimizer;
//# sourceMappingURL=optimizer.js.map
},{"../doc":"VkNo","../globals":"AeC1","../serialization":"BRyN"}],"2/1I":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AdadeltaOptimizer = undefined;

var _environment = require('../environment');

var _globals = require('../globals');

var _ops = require('../ops/ops');

var _serialization = require('../serialization');

var _optimizer = require('./optimizer');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var AdadeltaOptimizer = function (_super) {
    __extends(AdadeltaOptimizer, _super);
    function AdadeltaOptimizer(learningRate, rho, epsilon) {
        if (epsilon === void 0) {
            epsilon = 1e-8;
        }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.rho = rho;
        _this.epsilon = epsilon;
        _this.accumulatedGrads = {};
        _this.accumulatedUpdates = {};
        _this.c = (0, _globals.keep)((0, _ops.scalar)(-learningRate));
        _this.epsilonScalar = (0, _globals.keep)((0, _ops.scalar)(epsilon));
        _this.rhoScalar = (0, _globals.keep)((0, _ops.scalar)(rho));
        _this.oneMinusRho = (0, _globals.keep)((0, _ops.scalar)(1 - rho));
        return _this;
    }
    AdadeltaOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var _loop_1 = function (variableName) {
            var value = _environment.ENV.engine.registeredVariables[variableName];
            if (this_1.accumulatedGrads[variableName] == null) {
                var trainable_1 = false;
                (0, _globals.tidy)(function () {
                    _this.accumulatedGrads[variableName] = (0, _ops.zerosLike)(value).variable(trainable_1);
                });
            }
            if (this_1.accumulatedUpdates[variableName] == null) {
                var trainable_2 = false;
                (0, _globals.tidy)(function () {
                    _this.accumulatedUpdates[variableName] = (0, _ops.zerosLike)(value).variable(trainable_2);
                });
            }
            var gradient = variableGradients[variableName];
            var accumulatedGrad = this_1.accumulatedGrads[variableName];
            var accumulatedUpdate = this_1.accumulatedUpdates[variableName];
            (0, _globals.tidy)(function () {
                var newAccumulatedGrad = _this.rhoScalar.mul(accumulatedGrad).add(_this.oneMinusRho.mul(gradient.square()));
                var updates = accumulatedUpdate.add(_this.epsilonScalar).sqrt().div(accumulatedGrad.add(_this.epsilonScalar).sqrt()).mul(gradient);
                var newAccumulatedUpdate = _this.rhoScalar.mul(accumulatedUpdate).add(_this.oneMinusRho.mul(updates.square()));
                _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);
                _this.accumulatedUpdates[variableName].assign(newAccumulatedUpdate);
                var newValue = _this.c.mul(updates).add(value);
                value.assign(newValue);
            });
        };
        var this_1 = this;
        for (var variableName in variableGradients) {
            _loop_1(variableName);
        }
    };
    AdadeltaOptimizer.prototype.dispose = function () {
        var _this = this;
        this.c.dispose();
        this.epsilonScalar.dispose();
        this.rhoScalar.dispose();
        this.oneMinusRho.dispose();
        if (this.accumulatedUpdates != null) {
            Object.keys(this.accumulatedUpdates).forEach(function (name) {
                return _this.accumulatedUpdates[name].dispose();
            });
            Object.keys(this.accumulatedGrads).forEach(function (name) {
                return _this.accumulatedGrads[name].dispose();
            });
        }
    };
    AdadeltaOptimizer.prototype.getConfig = function () {
        return {
            learningRate: this.learningRate,
            rho: this.rho,
            epsilon: this.epsilon
        };
    };
    AdadeltaOptimizer.fromConfig = function (cls, config) {
        return new cls(config.learningRate, config.rho, config.epsilon);
    };
    AdadeltaOptimizer.className = 'AdadeltaOptimizer';
    return AdadeltaOptimizer;
}(_optimizer.Optimizer);
exports.AdadeltaOptimizer = AdadeltaOptimizer;

_serialization.SerializationMap.register(AdadeltaOptimizer);
//# sourceMappingURL=adadelta_optimizer.js.map
},{"../environment":"CAkW","../globals":"AeC1","../ops/ops":"bzyr","../serialization":"BRyN","./optimizer":"1vmU"}],"+FNj":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AdagradOptimizer = undefined;

var _environment = require('../environment');

var _globals = require('../globals');

var _ops = require('../ops/ops');

var _serialization = require('../serialization');

var _optimizer = require('./optimizer');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var AdagradOptimizer = function (_super) {
    __extends(AdagradOptimizer, _super);
    function AdagradOptimizer(learningRate, initialAccumulatorValue) {
        if (initialAccumulatorValue === void 0) {
            initialAccumulatorValue = 0.1;
        }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.initialAccumulatorValue = initialAccumulatorValue;
        _this.accumulatedGrads = {};
        _this.c = (0, _globals.keep)((0, _ops.scalar)(-learningRate));
        _this.epsilon = (0, _globals.keep)((0, _ops.scalar)(1e-8));
        return _this;
    }
    AdagradOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var _loop_1 = function (variableName) {
            var value = _environment.ENV.engine.registeredVariables[variableName];
            if (this_1.accumulatedGrads[variableName] == null) {
                var trainable_1 = false;
                (0, _globals.tidy)(function () {
                    _this.accumulatedGrads[variableName] = (0, _ops.fill)(value.shape, _this.initialAccumulatorValue).variable(trainable_1);
                });
            }
            var gradient = variableGradients[variableName];
            var accumulatedGrad = this_1.accumulatedGrads[variableName];
            (0, _globals.tidy)(function () {
                var newAccumulatedGrad = accumulatedGrad.add(gradient.square());
                _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);
                var newValue = _this.c.mul(gradient.div(newAccumulatedGrad.add(_this.epsilon).sqrt())).add(value);
                value.assign(newValue);
            });
        };
        var this_1 = this;
        for (var variableName in variableGradients) {
            _loop_1(variableName);
        }
    };
    AdagradOptimizer.prototype.dispose = function () {
        var _this = this;
        this.epsilon.dispose();
        this.c.dispose();
        if (this.accumulatedGrads != null) {
            Object.keys(this.accumulatedGrads).forEach(function (name) {
                return _this.accumulatedGrads[name].dispose();
            });
        }
    };
    AdagradOptimizer.prototype.getConfig = function () {
        return {
            learningRate: this.learningRate,
            initialAccumulatorValue: this.initialAccumulatorValue
        };
    };
    AdagradOptimizer.fromConfig = function (cls, config) {
        return new cls(config.learningRate, config.initialAccumulatorValue);
    };
    AdagradOptimizer.className = 'AdagradOptimizer';
    return AdagradOptimizer;
}(_optimizer.Optimizer);
exports.AdagradOptimizer = AdagradOptimizer;

_serialization.SerializationMap.register(AdagradOptimizer);
//# sourceMappingURL=adagrad_optimizer.js.map
},{"../environment":"CAkW","../globals":"AeC1","../ops/ops":"bzyr","../serialization":"BRyN","./optimizer":"1vmU"}],"KUxF":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AdamOptimizer = undefined;

var _environment = require('../environment');

var _globals = require('../globals');

var _ops = require('../ops/ops');

var _serialization = require('../serialization');

var _optimizer = require('./optimizer');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var AdamOptimizer = function (_super) {
    __extends(AdamOptimizer, _super);
    function AdamOptimizer(learningRate, beta1, beta2, epsilon) {
        if (epsilon === void 0) {
            epsilon = 1e-8;
        }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.beta1 = beta1;
        _this.beta2 = beta2;
        _this.epsilon = epsilon;
        _this.accumulatedFirstMoment = {};
        _this.accumulatedSecondMoment = {};
        _this.c = (0, _globals.keep)((0, _ops.scalar)(-learningRate));
        _this.epsScalar = (0, _globals.keep)((0, _ops.scalar)(epsilon));
        _this.beta1Scalar = (0, _globals.keep)((0, _ops.scalar)(beta1));
        _this.beta2Scalar = (0, _globals.keep)((0, _ops.scalar)(beta2));
        (0, _globals.tidy)(function () {
            _this.accBeta1 = (0, _ops.scalar)(beta1).variable();
            _this.accBeta2 = (0, _ops.scalar)(beta2).variable();
        });
        _this.oneMinusBeta1 = (0, _globals.keep)((0, _ops.scalar)(1 - beta1));
        _this.oneMinusBeta2 = (0, _globals.keep)((0, _ops.scalar)(1 - beta2));
        _this.one = (0, _globals.keep)((0, _ops.scalar)(1));
        return _this;
    }
    AdamOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        (0, _globals.tidy)(function () {
            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);
            var oneMinusAccBeta2 = _this.one.sub(_this.accBeta2);
            for (var variableName in variableGradients) {
                var value = _environment.ENV.engine.registeredVariables[variableName];
                if (_this.accumulatedFirstMoment[variableName] == null) {
                    var trainable = false;
                    _this.accumulatedFirstMoment[variableName] = (0, _ops.zerosLike)(value).variable(trainable);
                }
                if (_this.accumulatedSecondMoment[variableName] == null) {
                    var trainable = false;
                    _this.accumulatedSecondMoment[variableName] = (0, _ops.zerosLike)(value).variable(trainable);
                }
                var gradient = variableGradients[variableName];
                var firstMoment = _this.accumulatedFirstMoment[variableName];
                var secondMoment = _this.accumulatedSecondMoment[variableName];
                var newFirstMoment = _this.beta1Scalar.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));
                var newSecondMoment = _this.beta2Scalar.mul(secondMoment).add(_this.oneMinusBeta2.mul(gradient.square()));
                var biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);
                var biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);
                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);
                _this.accumulatedSecondMoment[variableName].assign(newSecondMoment);
                var newValue = _this.c.mul(biasCorrectedFirstMoment.div(_this.epsScalar.add(biasCorrectedSecondMoment.sqrt()))).add(value);
                value.assign(newValue);
            }
            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1Scalar));
            _this.accBeta2.assign(_this.accBeta2.mul(_this.beta2Scalar));
        });
    };
    AdamOptimizer.prototype.dispose = function () {
        var _this = this;
        this.c.dispose();
        this.epsScalar.dispose();
        this.beta1Scalar.dispose();
        this.beta2Scalar.dispose();
        this.accBeta1.dispose();
        this.accBeta2.dispose();
        this.oneMinusBeta1.dispose();
        this.oneMinusBeta2.dispose();
        this.one.dispose();
        if (this.accumulatedFirstMoment != null) {
            Object.keys(this.accumulatedFirstMoment).forEach(function (name) {
                return _this.accumulatedFirstMoment[name].dispose();
            });
        }
        if (this.accumulatedSecondMoment != null) {
            Object.keys(this.accumulatedSecondMoment).forEach(function (name) {
                return _this.accumulatedSecondMoment[name].dispose();
            });
        }
    };
    AdamOptimizer.prototype.getConfig = function () {
        return {
            learningRate: this.learningRate,
            beta1: this.beta1,
            beta2: this.beta2,
            epsilon: this.epsilon
        };
    };
    AdamOptimizer.fromConfig = function (cls, config) {
        return new cls(config.learningRate, config.beta1, config.beta2, config.epsilon);
    };
    AdamOptimizer.className = 'AdamOptimizer';
    return AdamOptimizer;
}(_optimizer.Optimizer);
exports.AdamOptimizer = AdamOptimizer;

_serialization.SerializationMap.register(AdamOptimizer);
//# sourceMappingURL=adam_optimizer.js.map
},{"../environment":"CAkW","../globals":"AeC1","../ops/ops":"bzyr","../serialization":"BRyN","./optimizer":"1vmU"}],"OI6F":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AdamaxOptimizer = undefined;

var _environment = require('../environment');

var _globals = require('../globals');

var _ops = require('../ops/ops');

var _serialization = require('../serialization');

var _optimizer = require('./optimizer');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var AdamaxOptimizer = function (_super) {
    __extends(AdamaxOptimizer, _super);
    function AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay) {
        if (epsilon === void 0) {
            epsilon = 1e-8;
        }
        if (decay === void 0) {
            decay = 0.0;
        }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.beta1 = beta1;
        _this.beta2 = beta2;
        _this.epsilon = epsilon;
        _this.decay = decay;
        _this.accumulatedFirstMoment = {};
        _this.accumulatedWeightedInfNorm = {};
        _this.c = (0, _globals.keep)((0, _ops.scalar)(-learningRate));
        _this.epsScalar = (0, _globals.keep)((0, _ops.scalar)(epsilon));
        _this.beta1Scalar = (0, _globals.keep)((0, _ops.scalar)(beta1));
        _this.beta2Scalar = (0, _globals.keep)((0, _ops.scalar)(beta2));
        _this.decayScalar = (0, _globals.keep)((0, _ops.scalar)(decay));
        (0, _globals.tidy)(function () {
            _this.iteration = (0, _ops.scalar)(0).variable();
            _this.accBeta1 = (0, _ops.scalar)(beta1).variable();
        });
        _this.oneMinusBeta1 = (0, _globals.keep)((0, _ops.scalar)(1 - beta1));
        _this.one = (0, _globals.keep)((0, _ops.scalar)(1));
        return _this;
    }
    AdamaxOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        (0, _globals.tidy)(function () {
            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);
            var lr = _this.c.div(_this.one.add(_this.decayScalar.mul(_this.iteration)));
            for (var variableName in variableGradients) {
                var value = _environment.ENV.engine.registeredVariables[variableName];
                if (_this.accumulatedFirstMoment[variableName] == null) {
                    var trainable = false;
                    _this.accumulatedFirstMoment[variableName] = (0, _ops.zerosLike)(value).variable(trainable);
                }
                if (_this.accumulatedWeightedInfNorm[variableName] == null) {
                    var trainable = false;
                    _this.accumulatedWeightedInfNorm[variableName] = (0, _ops.zerosLike)(value).variable(trainable);
                }
                var gradient = variableGradients[variableName];
                var firstMoment = _this.accumulatedFirstMoment[variableName];
                var weightedInfNorm = _this.accumulatedWeightedInfNorm[variableName];
                var newFirstMoment = _this.beta1Scalar.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));
                var ut0 = _this.beta2Scalar.mul(weightedInfNorm);
                var ut1 = gradient.abs();
                var newWeightedInfNorm = ut0.maximum(ut1);
                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);
                _this.accumulatedWeightedInfNorm[variableName].assign(newWeightedInfNorm);
                var newValue = lr.div(oneMinusAccBeta1).mul(newFirstMoment.div(_this.epsScalar.add(newWeightedInfNorm))).add(value);
                value.assign(newValue);
            }
            _this.iteration.assign(_this.iteration.add(_this.one));
            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1Scalar));
        });
    };
    AdamaxOptimizer.prototype.dispose = function () {
        var _this = this;
        this.c.dispose();
        this.epsScalar.dispose();
        this.accBeta1.dispose();
        this.beta1Scalar.dispose();
        this.beta2Scalar.dispose();
        this.oneMinusBeta1.dispose();
        this.decayScalar.dispose();
        this.iteration.dispose();
        this.one.dispose();
        if (this.accumulatedFirstMoment != null) {
            Object.keys(this.accumulatedFirstMoment).forEach(function (name) {
                return _this.accumulatedFirstMoment[name].dispose();
            });
        }
        if (this.accumulatedWeightedInfNorm != null) {
            Object.keys(this.accumulatedWeightedInfNorm).forEach(function (name) {
                return _this.accumulatedWeightedInfNorm[name].dispose();
            });
        }
    };
    AdamaxOptimizer.prototype.getConfig = function () {
        return {
            learningRate: this.learningRate,
            beta1: this.beta1,
            beta2: this.beta2,
            epsilon: this.epsilon,
            decay: this.decay
        };
    };
    AdamaxOptimizer.fromConfig = function (cls, config) {
        return new cls(config.learningRate, config.beta1, config.beta2, config.epsilon, config.decay);
    };
    AdamaxOptimizer.className = 'AdamaxOptimizer';
    return AdamaxOptimizer;
}(_optimizer.Optimizer);
exports.AdamaxOptimizer = AdamaxOptimizer;

_serialization.SerializationMap.register(AdamaxOptimizer);
//# sourceMappingURL=adamax_optimizer.js.map
},{"../environment":"CAkW","../globals":"AeC1","../ops/ops":"bzyr","../serialization":"BRyN","./optimizer":"1vmU"}],"NW5L":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SGDOptimizer = undefined;

var _environment = require('../environment');

var _globals = require('../globals');

var _ops = require('../ops/ops');

var _serialization = require('../serialization');

var _optimizer = require('./optimizer');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var SGDOptimizer = function (_super) {
    __extends(SGDOptimizer, _super);
    function SGDOptimizer(learningRate) {
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.setLearningRate(learningRate);
        return _this;
    }
    SGDOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var varNames = Object.keys(variableGradients);
        varNames.forEach(function (varName) {
            var gradient = variableGradients[varName];
            var value = _environment.ENV.engine.registeredVariables[varName];
            (0, _globals.tidy)(function () {
                var newValue = _this.c.mul(gradient).add(value);
                value.assign(newValue);
            });
        });
    };
    SGDOptimizer.prototype.setLearningRate = function (learningRate) {
        this.learningRate = learningRate;
        if (this.c != null) {
            this.c.dispose();
        }
        this.c = (0, _globals.keep)((0, _ops.scalar)(-learningRate));
    };
    SGDOptimizer.prototype.dispose = function () {
        this.c.dispose();
    };
    SGDOptimizer.prototype.getConfig = function () {
        return { learningRate: this.learningRate };
    };
    SGDOptimizer.fromConfig = function (cls, config) {
        return new cls(config.learningRate);
    };
    SGDOptimizer.className = 'SGDOptimizer';
    return SGDOptimizer;
}(_optimizer.Optimizer);
exports.SGDOptimizer = SGDOptimizer;

_serialization.SerializationMap.register(SGDOptimizer);
//# sourceMappingURL=sgd_optimizer.js.map
},{"../environment":"CAkW","../globals":"AeC1","../ops/ops":"bzyr","../serialization":"BRyN","./optimizer":"1vmU"}],"61QD":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MomentumOptimizer = undefined;

var _environment = require('../environment');

var _globals = require('../globals');

var _ops = require('../ops/ops');

var _serialization = require('../serialization');

var _sgd_optimizer = require('./sgd_optimizer');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var MomentumOptimizer = function (_super) {
    __extends(MomentumOptimizer, _super);
    function MomentumOptimizer(learningRate, momentum, useNesterov) {
        if (useNesterov === void 0) {
            useNesterov = false;
        }
        var _this = _super.call(this, learningRate) || this;
        _this.learningRate = learningRate;
        _this.momentum = momentum;
        _this.useNesterov = useNesterov;
        _this.m = (0, _ops.scalar)(_this.momentum);
        _this.accumulations = {};
        return _this;
    }
    MomentumOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var _loop_1 = function (variableName) {
            var value = _environment.ENV.engine.registeredVariables[variableName];
            if (this_1.accumulations[variableName] == null) {
                var trainable_1 = false;
                (0, _globals.tidy)(function () {
                    _this.accumulations[variableName] = (0, _ops.zerosLike)(value).variable(trainable_1);
                });
            }
            var accumulation = this_1.accumulations[variableName];
            var gradient = variableGradients[variableName];
            (0, _globals.tidy)(function () {
                var newValue;
                var newAccumulation = _this.m.mul(accumulation).add(gradient);
                if (_this.useNesterov) {
                    newValue = _this.c.mul(gradient.add(newAccumulation.mul(_this.m))).add(value);
                } else {
                    newValue = _this.c.mul(newAccumulation).add(value);
                }
                _this.accumulations[variableName].assign(newAccumulation);
                value.assign(newValue);
            });
        };
        var this_1 = this;
        for (var variableName in variableGradients) {
            _loop_1(variableName);
        }
    };
    MomentumOptimizer.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.m.dispose();
        if (this.accumulations != null) {
            for (var variableName in this.accumulations) {
                this.accumulations[variableName].dispose();
            }
        }
    };
    MomentumOptimizer.prototype.setMomentum = function (momentum) {
        this.momentum = momentum;
    };
    MomentumOptimizer.prototype.getConfig = function () {
        return {
            learningRate: this.learningRate,
            momentum: this.momentum,
            useNesterov: this.useNesterov
        };
    };
    MomentumOptimizer.fromConfig = function (cls, config) {
        return new cls(config.learningRate, config.momentum, config.useNesterov);
    };
    MomentumOptimizer.className = 'MomentumOptimizer';
    return MomentumOptimizer;
}(_sgd_optimizer.SGDOptimizer);
exports.MomentumOptimizer = MomentumOptimizer;

_serialization.SerializationMap.register(MomentumOptimizer);
//# sourceMappingURL=momentum_optimizer.js.map
},{"../environment":"CAkW","../globals":"AeC1","../ops/ops":"bzyr","../serialization":"BRyN","./sgd_optimizer":"NW5L"}],"CTtV":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RMSPropOptimizer = undefined;

var _environment = require('../environment');

var _globals = require('../globals');

var _ops = require('../ops/ops');

var _serialization = require('../serialization');

var _optimizer = require('./optimizer');

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var RMSPropOptimizer = function (_super) {
    __extends(RMSPropOptimizer, _super);
    function RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered) {
        if (decay === void 0) {
            decay = 0.9;
        }
        if (momentum === void 0) {
            momentum = 0.0;
        }
        if (epsilon === void 0) {
            epsilon = 1e-8;
        }
        if (centered === void 0) {
            centered = false;
        }
        var _this = _super.call(this) || this;
        _this.learningRate = learningRate;
        _this.decay = decay;
        _this.momentum = momentum;
        _this.epsilon = epsilon;
        _this.accumulatedMeanSquares = {};
        _this.accumulatedMeanGrads = {};
        _this.accumulatedMoments = {};
        _this.c = (0, _globals.keep)((0, _ops.scalar)(learningRate));
        _this.epsilonScalar = (0, _globals.keep)((0, _ops.scalar)(epsilon));
        _this.decayScalar = (0, _globals.keep)((0, _ops.scalar)(decay));
        _this.momentumScalar = (0, _globals.keep)((0, _ops.scalar)(momentum));
        _this.oneMinusDecay = (0, _globals.keep)((0, _ops.scalar)(1 - decay));
        _this.centered = centered;
        return _this;
    }
    RMSPropOptimizer.prototype.applyGradients = function (variableGradients) {
        var _this = this;
        var _loop_1 = function (variableName) {
            var value = _environment.ENV.engine.registeredVariables[variableName];
            if (this_1.accumulatedMeanSquares[variableName] == null) {
                var trainable_1 = false;
                (0, _globals.tidy)(function () {
                    _this.accumulatedMeanSquares[variableName] = (0, _ops.zerosLike)(value).variable(trainable_1);
                });
            }
            if (this_1.accumulatedMeanGrads[variableName] == null && this_1.centered) {
                var trainable_2 = false;
                (0, _globals.tidy)(function () {
                    _this.accumulatedMeanGrads[variableName] = (0, _ops.zerosLike)(value).variable(trainable_2);
                });
            }
            if (this_1.accumulatedMoments[variableName] == null) {
                var trainable_3 = false;
                (0, _globals.tidy)(function () {
                    _this.accumulatedMoments[variableName] = (0, _ops.zerosLike)(value).variable(trainable_3);
                });
            }
            var accumulatedMeanSquare = this_1.accumulatedMeanSquares[variableName];
            var accumulatedMeanGrad = this_1.accumulatedMeanGrads[variableName];
            var accumulatedMoments = this_1.accumulatedMoments[variableName];
            var gradient = variableGradients[variableName];
            (0, _globals.tidy)(function () {
                var newAccumulatedMeanSquare = _this.decayScalar.mul(accumulatedMeanSquare).add(_this.oneMinusDecay.mul(gradient.square()));
                if (_this.centered) {
                    var newAccumulatedMeanGrad = _this.decayScalar.mul(accumulatedMeanGrad).add(_this.oneMinusDecay.mul(gradient));
                    var newAccumulatedMoments = _this.momentumScalar.mul(accumulatedMoments).add(_this.c.mul(gradient).div(newAccumulatedMeanSquare.sub(newAccumulatedMeanGrad.square().add(_this.epsilonScalar)).sqrt()));
                    _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare);
                    _this.accumulatedMeanGrads[variableName].assign(newAccumulatedMeanGrad);
                    _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);
                    var newValue = value.sub(newAccumulatedMoments);
                    value.assign(newValue);
                } else {
                    var newAccumulatedMeanSquare_1 = _this.decayScalar.mul(accumulatedMeanSquare).add(_this.oneMinusDecay.mul(gradient.square()));
                    var newAccumulatedMoments = _this.momentumScalar.mul(accumulatedMoments).add(_this.c.mul(gradient).div(newAccumulatedMeanSquare_1.add(_this.epsilonScalar).sqrt()));
                    _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare_1);
                    _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);
                    var newValue = value.sub(newAccumulatedMoments);
                    value.assign(newValue);
                }
            });
        };
        var this_1 = this;
        for (var variableName in variableGradients) {
            _loop_1(variableName);
        }
    };
    RMSPropOptimizer.prototype.dispose = function () {
        var _this = this;
        this.c.dispose();
        this.epsilonScalar.dispose();
        this.decayScalar.dispose();
        this.momentumScalar.dispose();
        this.oneMinusDecay.dispose();
        if (this.accumulatedMeanSquares != null) {
            Object.keys(this.accumulatedMeanSquares).forEach(function (name) {
                return _this.accumulatedMeanSquares[name].dispose();
            });
        }
        if (this.accumulatedMeanGrads != null && this.centered) {
            Object.keys(this.accumulatedMeanGrads).forEach(function (name) {
                return _this.accumulatedMeanGrads[name].dispose();
            });
        }
        if (this.accumulatedMoments != null) {
            Object.keys(this.accumulatedMoments).forEach(function (name) {
                return _this.accumulatedMoments[name].dispose();
            });
        }
    };
    RMSPropOptimizer.prototype.getConfig = function () {
        return {
            learningRate: this.learningRate,
            decay: this.decay,
            momentum: this.momentum,
            epsilon: this.epsilon,
            centered: this.centered
        };
    };
    RMSPropOptimizer.fromConfig = function (cls, config) {
        return new cls(config.learningRate, config.decay, config.momentum, config.epsilon, config.centered);
    };
    RMSPropOptimizer.className = 'RMSPropOptimizer';
    return RMSPropOptimizer;
}(_optimizer.Optimizer);
exports.RMSPropOptimizer = RMSPropOptimizer;

_serialization.SerializationMap.register(RMSPropOptimizer);
//# sourceMappingURL=rmsprop_optimizer.js.map
},{"../environment":"CAkW","../globals":"AeC1","../ops/ops":"bzyr","../serialization":"BRyN","./optimizer":"1vmU"}],"QTfh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OptimizerConstructors = undefined;

var _doc = require("../doc");

var _adadelta_optimizer = require("./adadelta_optimizer");

var _adagrad_optimizer = require("./adagrad_optimizer");

var _adam_optimizer = require("./adam_optimizer");

var _adamax_optimizer = require("./adamax_optimizer");

var _momentum_optimizer = require("./momentum_optimizer");

var _rmsprop_optimizer = require("./rmsprop_optimizer");

var _sgd_optimizer = require("./sgd_optimizer");

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var OptimizerConstructors = function () {
    function OptimizerConstructors() {}
    OptimizerConstructors.sgd = function (learningRate) {
        return new _sgd_optimizer.SGDOptimizer(learningRate);
    };
    OptimizerConstructors.momentum = function (learningRate, momentum, useNesterov) {
        if (useNesterov === void 0) {
            useNesterov = false;
        }
        return new _momentum_optimizer.MomentumOptimizer(learningRate, momentum, useNesterov);
    };
    OptimizerConstructors.rmsprop = function (learningRate, decay, momentum, epsilon, centered) {
        if (decay === void 0) {
            decay = .9;
        }
        if (momentum === void 0) {
            momentum = 0.0;
        }
        if (epsilon === void 0) {
            epsilon = 1e-8;
        }
        if (centered === void 0) {
            centered = false;
        }
        return new _rmsprop_optimizer.RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered);
    };
    OptimizerConstructors.adam = function (learningRate, beta1, beta2, epsilon) {
        if (learningRate === void 0) {
            learningRate = 0.001;
        }
        if (beta1 === void 0) {
            beta1 = 0.9;
        }
        if (beta2 === void 0) {
            beta2 = 0.999;
        }
        if (epsilon === void 0) {
            epsilon = 1e-8;
        }
        return new _adam_optimizer.AdamOptimizer(learningRate, beta1, beta2, epsilon);
    };
    OptimizerConstructors.adadelta = function (learningRate, rho, epsilon) {
        if (learningRate === void 0) {
            learningRate = .001;
        }
        if (rho === void 0) {
            rho = .95;
        }
        if (epsilon === void 0) {
            epsilon = 1e-8;
        }
        return new _adadelta_optimizer.AdadeltaOptimizer(learningRate, rho, epsilon);
    };
    OptimizerConstructors.adamax = function (learningRate, beta1, beta2, epsilon, decay) {
        if (learningRate === void 0) {
            learningRate = 0.002;
        }
        if (beta1 === void 0) {
            beta1 = 0.9;
        }
        if (beta2 === void 0) {
            beta2 = 0.999;
        }
        if (epsilon === void 0) {
            epsilon = 1e-8;
        }
        if (decay === void 0) {
            decay = 0.0;
        }
        return new _adamax_optimizer.AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);
    };
    OptimizerConstructors.adagrad = function (learningRate, initialAccumulatorValue) {
        if (initialAccumulatorValue === void 0) {
            initialAccumulatorValue = 0.1;
        }
        return new _adagrad_optimizer.AdagradOptimizer(learningRate, initialAccumulatorValue);
    };
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, "sgd", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, "momentum", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, "rmsprop", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, "adam", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, "adadelta", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, "adamax", null);
    __decorate([(0, _doc.doc)({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, "adagrad", null);
    return OptimizerConstructors;
}();
exports.OptimizerConstructors = OptimizerConstructors;
//# sourceMappingURL=optimizer_constructors.js.map
},{"../doc":"VkNo","./adadelta_optimizer":"2/1I","./adagrad_optimizer":"+FNj","./adam_optimizer":"KUxF","./adamax_optimizer":"OI6F","./momentum_optimizer":"61QD","./rmsprop_optimizer":"CTtV","./sgd_optimizer":"NW5L"}],"orsw":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.train = undefined;

var _adadelta_optimizer = require('./optimizers/adadelta_optimizer');

var _adagrad_optimizer = require('./optimizers/adagrad_optimizer');

var _adam_optimizer = require('./optimizers/adam_optimizer');

var _adamax_optimizer = require('./optimizers/adamax_optimizer');

var _momentum_optimizer = require('./optimizers/momentum_optimizer');

var _optimizer_constructors = require('./optimizers/optimizer_constructors');

var _rmsprop_optimizer = require('./optimizers/rmsprop_optimizer');

var _sgd_optimizer = require('./optimizers/sgd_optimizer');

[_momentum_optimizer.MomentumOptimizer, _sgd_optimizer.SGDOptimizer, _adadelta_optimizer.AdadeltaOptimizer, _adagrad_optimizer.AdagradOptimizer, _rmsprop_optimizer.RMSPropOptimizer, _adamax_optimizer.AdamaxOptimizer, _adam_optimizer.AdamOptimizer];
var train = exports.train = {
    sgd: _optimizer_constructors.OptimizerConstructors.sgd,
    momentum: _optimizer_constructors.OptimizerConstructors.momentum,
    adadelta: _optimizer_constructors.OptimizerConstructors.adadelta,
    adagrad: _optimizer_constructors.OptimizerConstructors.adagrad,
    rmsprop: _optimizer_constructors.OptimizerConstructors.rmsprop,
    adamax: _optimizer_constructors.OptimizerConstructors.adamax,
    adam: _optimizer_constructors.OptimizerConstructors.adam
};
//# sourceMappingURL=train.js.map
},{"./optimizers/adadelta_optimizer":"2/1I","./optimizers/adagrad_optimizer":"+FNj","./optimizers/adam_optimizer":"KUxF","./optimizers/adamax_optimizer":"OI6F","./optimizers/momentum_optimizer":"61QD","./optimizers/optimizer_constructors":"QTfh","./optimizers/rmsprop_optimizer":"CTtV","./optimizers/sgd_optimizer":"NW5L"}],"Ppj4":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webgl = exports.util = exports.test_util = exports.serialization = exports.io = exports.environment = exports.nextFrame = exports.doc = exports.version_core = exports.memory = exports.disposeVariables = exports.getBackend = exports.setBackend = exports.Environment = exports.ENV = exports.Reduction = exports.Rank = exports.Variable = exports.variable = exports.TensorBuffer = exports.Tensor = exports.SGDOptimizer = exports.RMSPropOptimizer = exports.Optimizer = exports.MomentumOptimizer = exports.AdamaxOptimizer = exports.AdamOptimizer = exports.AdagradOptimizer = exports.AdadeltaOptimizer = undefined;

var _adadelta_optimizer = require('./optimizers/adadelta_optimizer');

Object.defineProperty(exports, 'AdadeltaOptimizer', {
  enumerable: true,
  get: function () {
    return _adadelta_optimizer.AdadeltaOptimizer;
  }
});

var _adagrad_optimizer = require('./optimizers/adagrad_optimizer');

Object.defineProperty(exports, 'AdagradOptimizer', {
  enumerable: true,
  get: function () {
    return _adagrad_optimizer.AdagradOptimizer;
  }
});

var _adam_optimizer = require('./optimizers/adam_optimizer');

Object.defineProperty(exports, 'AdamOptimizer', {
  enumerable: true,
  get: function () {
    return _adam_optimizer.AdamOptimizer;
  }
});

var _adamax_optimizer = require('./optimizers/adamax_optimizer');

Object.defineProperty(exports, 'AdamaxOptimizer', {
  enumerable: true,
  get: function () {
    return _adamax_optimizer.AdamaxOptimizer;
  }
});

var _momentum_optimizer = require('./optimizers/momentum_optimizer');

Object.defineProperty(exports, 'MomentumOptimizer', {
  enumerable: true,
  get: function () {
    return _momentum_optimizer.MomentumOptimizer;
  }
});

var _optimizer = require('./optimizers/optimizer');

Object.defineProperty(exports, 'Optimizer', {
  enumerable: true,
  get: function () {
    return _optimizer.Optimizer;
  }
});

var _rmsprop_optimizer = require('./optimizers/rmsprop_optimizer');

Object.defineProperty(exports, 'RMSPropOptimizer', {
  enumerable: true,
  get: function () {
    return _rmsprop_optimizer.RMSPropOptimizer;
  }
});

var _sgd_optimizer = require('./optimizers/sgd_optimizer');

Object.defineProperty(exports, 'SGDOptimizer', {
  enumerable: true,
  get: function () {
    return _sgd_optimizer.SGDOptimizer;
  }
});

var _tensor = require('./tensor');

Object.defineProperty(exports, 'Tensor', {
  enumerable: true,
  get: function () {
    return _tensor.Tensor;
  }
});
Object.defineProperty(exports, 'TensorBuffer', {
  enumerable: true,
  get: function () {
    return _tensor.TensorBuffer;
  }
});
Object.defineProperty(exports, 'variable', {
  enumerable: true,
  get: function () {
    return _tensor.variable;
  }
});
Object.defineProperty(exports, 'Variable', {
  enumerable: true,
  get: function () {
    return _tensor.Variable;
  }
});

var _types = require('./types');

Object.defineProperty(exports, 'Rank', {
  enumerable: true,
  get: function () {
    return _types.Rank;
  }
});

var _ops = require('./ops/ops');

Object.keys(_ops).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ops[key];
    }
  });
});

var _loss_ops = require('./ops/loss_ops');

Object.defineProperty(exports, 'Reduction', {
  enumerable: true,
  get: function () {
    return _loss_ops.Reduction;
  }
});

var _train = require('./train');

Object.keys(_train).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _train[key];
    }
  });
});

var _globals = require('./globals');

Object.keys(_globals).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _globals[key];
    }
  });
});

var _environment = require('./environment');

Object.defineProperty(exports, 'ENV', {
  enumerable: true,
  get: function () {
    return _environment.ENV;
  }
});
Object.defineProperty(exports, 'Environment', {
  enumerable: true,
  get: function () {
    return _environment.Environment;
  }
});

var _doc = require('./doc');

Object.defineProperty(exports, 'doc', {
  enumerable: true,
  get: function () {
    return _doc.doc;
  }
});

require('./kernels/backend_webgl');

require('./kernels/backend_cpu');

var _browser_util = require('./browser_util');

var environment = _interopRequireWildcard(_environment);

var _io = require('./io/io');

var io = _interopRequireWildcard(_io);

var _serialization = require('./serialization');

var serialization = _interopRequireWildcard(_serialization);

var _test_util = require('./test_util');

var test_util = _interopRequireWildcard(_test_util);

var _util = require('./util');

var util = _interopRequireWildcard(_util);

var _version = require('./version');

var _webgl = require('./webgl');

var webgl = _interopRequireWildcard(_webgl);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var setBackend = exports.setBackend = _environment.Environment.setBackend;
var getBackend = exports.getBackend = _environment.Environment.getBackend;
var disposeVariables = exports.disposeVariables = _environment.Environment.disposeVariables;
var memory = exports.memory = _environment.Environment.memory;
exports.version_core = _version.version;
var nextFrame = exports.nextFrame = _browser_util.BrowserUtil.nextFrame;
exports.environment = environment;
exports.io = io;
exports.serialization = serialization;
exports.test_util = test_util;
exports.util = util;
exports.webgl = webgl;
//# sourceMappingURL=index.js.map
},{"./kernels/backend_webgl":"Dfu8","./kernels/backend_cpu":"qatl","./browser_util":"P4k1","./environment":"CAkW","./io/io":"pyLe","./serialization":"BRyN","./test_util":"6PEx","./util":"lDaM","./version":"hhq7","./webgl":"1vuC","./optimizers/adadelta_optimizer":"2/1I","./optimizers/adagrad_optimizer":"+FNj","./optimizers/adam_optimizer":"KUxF","./optimizers/adamax_optimizer":"OI6F","./optimizers/momentum_optimizer":"61QD","./optimizers/optimizer":"1vmU","./optimizers/rmsprop_optimizer":"CTtV","./optimizers/sgd_optimizer":"NW5L","./tensor":"Xe78","./types":"q15R","./ops/ops":"bzyr","./ops/loss_ops":"gHYy","./train":"orsw","./globals":"AeC1","./doc":"VkNo"}],"WwMz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var AttributeError = function (_super) {
    __extends(AttributeError, _super);
    function AttributeError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, AttributeError.prototype);
        return _this;
    }
    return AttributeError;
}(Error);
exports.AttributeError = AttributeError;

var RuntimeError = function (_super) {
    __extends(RuntimeError, _super);
    function RuntimeError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, RuntimeError.prototype);
        return _this;
    }
    return RuntimeError;
}(Error);
exports.RuntimeError = RuntimeError;

var ValueError = function (_super) {
    __extends(ValueError, _super);
    function ValueError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ValueError.prototype);
        return _this;
    }
    return ValueError;
}(Error);
exports.ValueError = ValueError;

var NotImplementedError = function (_super) {
    __extends(NotImplementedError, _super);
    function NotImplementedError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, NotImplementedError.prototype);
        return _this;
    }
    return NotImplementedError;
}(Error);
exports.NotImplementedError = NotImplementedError;

var AssertionError = function (_super) {
    __extends(AssertionError, _super);
    function AssertionError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, AssertionError.prototype);
        return _this;
    }
    return AssertionError;
}(Error);
exports.AssertionError = AssertionError;

var IndexError = function (_super) {
    __extends(IndexError, _super);
    function IndexError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, IndexError.prototype);
        return _this;
    }
    return IndexError;
}(Error);
exports.IndexError = IndexError;
//# sourceMappingURL=errors.js.map
},{}],"Uv0q":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.pyListRepeat = pyListRepeat;
exports.assert = assert;
exports.count = count;
exports.singletonOrArray = singletonOrArray;
exports.toList = toList;
exports.objectListUid = objectListUid;
exports.isArrayOfShapes = isArrayOfShapes;
exports.normalizeShapeList = normalizeShapeList;
exports.toSnakeCase = toSnakeCase;
exports.toCamelCase = toCamelCase;
exports.serializeKerasObject = serializeKerasObject;
exports.deserializeKerasObject = deserializeKerasObject;
exports.getExactlyOneTensor = getExactlyOneTensor;
exports.getExactlyOneShape = getExactlyOneShape;
exports.numberCompare = numberCompare;
exports.reverseNumberCompare = reverseNumberCompare;
exports.stringToDType = stringToDType;
exports.stringsEqual = stringsEqual;
exports.unique = unique;
exports.isObjectEmpty = isObjectEmpty;
exports.checkStringTypeUnionValue = checkStringTypeUnionValue;

var _errors = require('../errors');

var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};
function pyListRepeat(value, numValues) {
    if (Array.isArray(value)) {
        var newArray = [];
        for (var i = 0; i < numValues; i++) {
            newArray = newArray.concat(value);
        }
        return newArray;
    } else {
        var newArray = new Array(numValues);
        newArray.fill(value);
        return newArray;
    }
}
function assert(val, message) {
    if (!val) {
        throw new _errors.AssertionError(message);
    }
}
function count(array, refernce) {
    var counter = 0;
    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var item = array_1[_i];
        if (item === refernce) {
            counter++;
        }
    }
    return counter;
}
function singletonOrArray(xs) {
    if (xs.length === 1) {
        return xs[0];
    }
    return xs;
}
function toList(x) {
    if (Array.isArray(x)) {
        return x;
    }
    return [x];
}
function objectListUid(objs) {
    var objectList = toList(objs);
    var retVal = '';
    for (var _i = 0, objectList_1 = objectList; _i < objectList_1.length; _i++) {
        var obj = objectList_1[_i];
        if (obj.id == null) {
            throw new _errors.ValueError("Object " + obj + " passed to objectListUid without an id");
        }
        if (retVal !== '') {
            retVal = retVal + ', ';
        }
        retVal = retVal + Math.abs(obj.id);
    }
    return retVal;
}
function isArrayOfShapes(x) {
    return Array.isArray(x) && Array.isArray(x[0]);
}
function normalizeShapeList(x) {
    if (x.length === 0) {
        return [];
    }
    if (!Array.isArray(x[0])) {
        return [x];
    }
    return x;
}
function toSnakeCase(name) {
    var intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');
    var insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
    if (insecure[0] !== '_') {
        return insecure;
    }
    return 'private' + insecure;
}
function toCamelCase(identifier) {
    if (identifier.length <= 1) {
        return identifier;
    }
    if (identifier.indexOf('_') === -1) {
        return identifier;
    }
    return identifier.replace(/[_]+(\w|$)/g, function (m, p1) {
        return p1.toUpperCase();
    });
}
var _GLOBAL_CUSTOM_OBJECTS = {};
function serializeKerasObject(instance) {
    if (instance === null || instance === undefined) {
        return null;
    }
    return { className: instance.getClassName(), config: instance.getConfig() };
}
function deserializeKerasObject(identifier, moduleObjects, customObjects, printableModuleName) {
    if (moduleObjects === void 0) {
        moduleObjects = {};
    }
    if (customObjects === void 0) {
        customObjects = {};
    }
    if (printableModuleName === void 0) {
        printableModuleName = 'object';
    }
    if (typeof identifier === 'string') {
        var functionName = identifier;
        var fn = void 0;
        if (functionName in customObjects) {
            fn = customObjects[functionName];
        } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {
            fn = _GLOBAL_CUSTOM_OBJECTS[functionName];
        } else {
            fn = moduleObjects[functionName];
            if (fn == null) {
                throw new _errors.ValueError("Unknown " + printableModuleName + ": " + identifier);
            }
        }
        return fn;
    } else {
        var config = identifier;
        if (config.className == null || config.config == null) {
            throw new _errors.ValueError(printableModuleName + ": Improper config format: " + (JSON.stringify(config) + ".\n") + "'className' and 'config' must set.");
        }
        var className = config.className;
        var cls = void 0,
            fromConfig = void 0;
        if (className in customObjects) {
            _a = customObjects.get(className), cls = _a[0], fromConfig = _a[1];
        } else if (className in _GLOBAL_CUSTOM_OBJECTS) {
            _b = _GLOBAL_CUSTOM_OBJECTS.className, cls = _b[0], fromConfig = _b[1];
        } else if (className in moduleObjects) {
            _c = moduleObjects[className], cls = _c[0], fromConfig = _c[1];
        }
        if (cls == null) {
            throw new _errors.ValueError("Unknown " + printableModuleName + ": " + className);
        }
        if (fromConfig != null) {
            var customObjectsCombined = {};
            for (var _i = 0, _d = Object.keys(_GLOBAL_CUSTOM_OBJECTS); _i < _d.length; _i++) {
                var key = _d[_i];
                customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];
            }
            for (var _e = 0, _f = Object.keys(customObjects); _e < _f.length; _e++) {
                var key = _f[_e];
                customObjectsCombined[key] = customObjects[key];
            }
            var nestedConfig = config.config;
            nestedConfig.customObjects = customObjectsCombined;
            var backupCustomObjects = __assign({}, _GLOBAL_CUSTOM_OBJECTS);
            for (var _g = 0, _h = Object.keys(customObjects); _g < _h.length; _g++) {
                var key = _h[_g];
                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];
            }
            var returnObj = fromConfig(cls, config.config);
            _GLOBAL_CUSTOM_OBJECTS = __assign({}, backupCustomObjects);
            return returnObj;
        } else {
            var backupCustomObjects = __assign({}, _GLOBAL_CUSTOM_OBJECTS);
            for (var _j = 0, _k = Object.keys(customObjects); _j < _k.length; _j++) {
                var key = _k[_j];
                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];
            }
            var returnObj = new cls(config.config);
            _GLOBAL_CUSTOM_OBJECTS = __assign({}, backupCustomObjects);
            return returnObj;
        }
    }
    var _a, _b, _c;
}
function getExactlyOneTensor(xs) {
    var x;
    if (Array.isArray(xs)) {
        if (xs.length !== 1) {
            throw new _errors.ValueError("Expected Tensor length to be 1; got " + xs.length);
        }
        x = xs[0];
    } else {
        x = xs;
    }
    return x;
}
function getExactlyOneShape(shapes) {
    if (Array.isArray(shapes) && Array.isArray(shapes[0])) {
        if (shapes.length === 1) {
            shapes = shapes;
            return shapes[0];
        } else {
            throw new _errors.ValueError("Expected exactly 1 Shape; got " + shapes.length);
        }
    } else {
        return shapes;
    }
}
function numberCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
function reverseNumberCompare(a, b) {
    return -1 * numberCompare(a, b);
}
function stringToDType(dtype) {
    switch (dtype) {
        case 'float32':
            return 'float32';
        default:
            throw new _errors.ValueError("Invalid dtype: " + dtype);
    }
}
function stringsEqual(xs, ys) {
    if (xs == null || ys == null) {
        return xs === ys;
    }
    if (xs.length !== ys.length) {
        return false;
    }
    for (var i = 0; i < xs.length; ++i) {
        if (xs[i] !== ys[i]) {
            return false;
        }
    }
    return true;
}
function unique(xs) {
    if (xs == null) {
        return xs;
    }
    var out = [];
    for (var _i = 0, xs_1 = xs; _i < xs_1.length; _i++) {
        var x = xs_1[_i];
        if (out.indexOf(x) === -1) {
            out.push(x);
        }
    }
    return out;
}
function isObjectEmpty(obj) {
    if (obj == null) {
        throw new _errors.ValueError("Invalid value in obj: " + JSON.stringify(obj));
    }
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            return false;
        }
    }
    return true;
}
function checkStringTypeUnionValue(values, label, value) {
    if (value == null) {
        return;
    }
    if (values.indexOf(value) < 0) {
        throw new _errors.ValueError(value + " is not a valid " + label + ".  Valid values are " + values + " or null/undefined.");
    }
}
//# sourceMappingURL=generic_utils.js.map
},{"../errors":"WwMz"}],"uF+p":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VALID_POOL_MODE_VALUES = exports.VALID_PADDING_MODE_VALUES = exports.VALID_DATA_FORMAT_VALUES = undefined;
exports.checkDataFormat = checkDataFormat;
exports.checkPaddingMode = checkPaddingMode;
exports.checkPoolMode = checkPoolMode;
exports.nameScope = nameScope;
exports.getScopedTensorName = getScopedTensorName;
exports.getUniqueTensorName = getUniqueTensorName;
exports.isValidTensorName = isValidTensorName;

var _generic_utils = require('./utils/generic_utils');

var nameMap = new Map();
var VALID_DATA_FORMAT_VALUES = exports.VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast'];
function checkDataFormat(value) {
    (0, _generic_utils.checkStringTypeUnionValue)(VALID_DATA_FORMAT_VALUES, 'DataFormat', value);
}
var VALID_PADDING_MODE_VALUES = exports.VALID_PADDING_MODE_VALUES = ['valid', 'same', 'causal'];
function checkPaddingMode(value) {
    (0, _generic_utils.checkStringTypeUnionValue)(VALID_PADDING_MODE_VALUES, 'PaddingMode', value);
}
var VALID_POOL_MODE_VALUES = exports.VALID_POOL_MODE_VALUES = ['max', 'avg'];
function checkPoolMode(value) {
    (0, _generic_utils.checkStringTypeUnionValue)(VALID_POOL_MODE_VALUES, 'PoolMode', value);
}
var _nameScopeStack = [];
var _nameScopeDivider = '/';
function nameScope(name, fn) {
    _nameScopeStack.push(name);
    try {
        var val = fn();
        _nameScopeStack.pop();
        return val;
    } catch (e) {
        _nameScopeStack.pop();
        throw e;
    }
}
function currentNameScopePrefix() {
    if (_nameScopeStack.length === 0) {
        return '';
    } else {
        return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
    }
}
function getScopedTensorName(tensorName) {
    if (!isValidTensorName(tensorName)) {
        throw new Error('Not a valid tensor name: \'' + tensorName + '\'');
    }
    return currentNameScopePrefix() + tensorName;
}
function getUniqueTensorName(scopedName) {
    if (!isValidTensorName(scopedName)) {
        throw new Error('Not a valid tensor name: \'' + scopedName + '\'');
    }
    if (!nameMap.has(scopedName)) {
        nameMap.set(scopedName, 0);
    }
    var index = nameMap.get(scopedName);
    nameMap.set(scopedName, nameMap.get(scopedName) + 1);
    if (index > 0) {
        var result = scopedName + '_' + index;
        nameMap.set(result, 1);
        return result;
    } else {
        return scopedName;
    }
}
var tensorNameRegex = new RegExp(/^[A-Za-z][A-Za-z0-9\._\/]*$/);
function isValidTensorName(name) {
    return name.match(tensorNameRegex) ? true : false;
}
//# sourceMappingURL=common.js.map
},{"./utils/generic_utils":"Uv0q"}],"42TA":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isInteger = isInteger;
exports.arrayProd = arrayProd;
exports.min = min;
exports.max = max;
exports.sum = sum;
exports.mean = mean;
exports.variance = variance;
exports.median = median;
exports.range = range;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _errors = require('../errors');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function isInteger(x) {
    return x === parseInt(x.toString(), 10);
}
function arrayProd(array, begin, end) {
    if (begin == null) {
        begin = 0;
    }
    if (end == null) {
        end = array.length;
    }
    var prod = 1;
    for (var i = begin; i < end; ++i) {
        prod *= array[i];
    }
    return prod;
}
function toArray1D(array) {
    array = Array.isArray(array) ? new Float32Array(array) : array;
    return (0, _tfjsCore.tensor1d)(array);
}
function min(array) {
    return tfc.min(toArray1D(array)).dataSync()[0];
}
function max(array) {
    return tfc.max(toArray1D(array)).dataSync()[0];
}
function sum(array) {
    return tfc.sum(toArray1D(array)).dataSync()[0];
}
function mean(array) {
    return sum(array) / array.length;
}
function variance(array) {
    var demeaned = tfc.sub(toArray1D(array), (0, _tfjsCore.scalar)(mean(array)));
    var sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];
    return sumSquare / array.length;
}
function median(array) {
    var arraySorted = array.slice().sort(function (a, b) {
        return a - b;
    });
    var lowIdx = Math.floor((arraySorted.length - 1) / 2);
    var highIdx = Math.ceil((arraySorted.length - 1) / 2);
    if (lowIdx === highIdx) {
        return arraySorted[lowIdx];
    }
    return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;
}
function range(begin, end) {
    if (end < begin) {
        throw new _errors.ValueError("end (" + end + ") < begin (" + begin + ") is forbidden.");
    }
    var out = [];
    for (var i = begin; i < end; ++i) {
        out.push(i);
    }
    return out;
}
//# sourceMappingURL=math_utils.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../errors":"WwMz"}],"qCW+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SymbolicTensor = undefined;
exports.getNextUniqueTensorId = getNextUniqueTensorId;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _common = require("./common");

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var _nextUniqueTensorId = 0;
function getNextUniqueTensorId() {
    return _nextUniqueTensorId++;
}
var SymbolicTensor = function () {
    function SymbolicTensor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {
        this.dtype = dtype;
        this.shape = shape;
        this.sourceLayer = sourceLayer;
        this.inputs = inputs;
        this.callArgs = callArgs;
        this.outputTensorIndex = outputTensorIndex;
        this.id = getNextUniqueTensorId();
        if (name != null) {
            this.originalName = (0, _common.getScopedTensorName)(name);
            this.name = (0, _common.getUniqueTensorName)(this.originalName);
        }
        this.rank = shape.length;
    }
    SymbolicTensor = __decorate([(0, _tfjsCore.doc)({ heading: 'Models', 'subheading': 'Classes' })], SymbolicTensor);
    return SymbolicTensor;
}();
exports.SymbolicTensor = SymbolicTensor;
//# sourceMappingURL=types.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./common":"uF+p"}],"uVg5":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LayerVariable = undefined;
exports.variable = variable;
exports.zerosVariable = zerosVariable;
exports.zerosLike = zerosLike;
exports.onesVariable = onesVariable;
exports.onesLike = onesLike;
exports.eyeVariable = eyeVariable;
exports.randomUniformVariable = randomUniformVariable;
exports.truncatedNormalVariable = truncatedNormalVariable;
exports.randomNormalVariable = randomNormalVariable;
exports.update = update;
exports.updateAdd = updateAdd;
exports.updateSub = updateSub;
exports.batchGetValue = batchGetValue;
exports.batchSetValue = batchSetValue;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require('./backend/tfjs_backend');

var _common = require('./common');

var _errors = require('./errors');

var _types = require('./types');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';
var LayerVariable = function () {
    function LayerVariable(val, dtype, name, trainable, constraint) {
        if (dtype === void 0) {
            dtype = 'float32';
        }
        if (name === void 0) {
            name = DEFAULT_VARIABLE_NAME_PREFIX;
        }
        if (trainable === void 0) {
            trainable = true;
        }
        if (constraint === void 0) {
            constraint = null;
        }
        this.dtype = dtype == null ? 'float32' : dtype;
        this.shape = val.shape;
        this.id = (0, _types.getNextUniqueTensorId)();
        name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;
        this.originalName = (0, _common.getScopedTensorName)(name);
        this.name = (0, _common.getUniqueTensorName)(this.originalName);
        this.trainable = trainable;
        this.constraint = constraint;
        this.val = tfc.variable(val, this.trainable, this.name, this.dtype);
    }
    LayerVariable.prototype.read = function () {
        return this.val;
    };
    LayerVariable.prototype.write = function (newVal) {
        checkShapesMatch(this.val, newVal);
        this.val.assign(newVal);
        if (this.constraint != null) {
            this.val.assign(this.constraint.apply(this.val));
        }
        return this;
    };
    return LayerVariable;
}();
exports.LayerVariable = LayerVariable;

function checkShapesMatch(x, y) {
    if (x.shape.toString() !== y.shape.toString()) {
        throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' + JSON.stringify(y.shape));
    }
}
function variable(x, dtype, name, constraint) {
    return new LayerVariable(x, dtype, name, true, constraint);
}
function zerosVariable(shape, dtype, name) {
    return new LayerVariable(tfc.zeros(shape), dtype, name);
}
function zerosLike(x, dtype, name) {
    return new LayerVariable(tfc.zerosLike(x), dtype, name);
}
function onesVariable(shape, dtype, name) {
    var allocated = tfc.ones(shape);
    return new LayerVariable(allocated, dtype, name);
}
function onesLike(x, dtype, name) {
    var allocated = tfc.onesLike(x);
    return new LayerVariable(allocated, dtype, name);
}
function eyeVariable(size, dtype, name) {
    return new LayerVariable(tfc.eye(size), dtype, name);
}
function randomUniformVariable(shape, minval, maxval, dtype, seed, name) {
    if (name === void 0) {
        name = 'randomUniform';
    }
    return new LayerVariable(tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);
}
function truncatedNormalVariable(shape, mean, stddev, dtype, seed, name) {
    if (mean === void 0) {
        mean = 0.0;
    }
    if (stddev === void 0) {
        stddev = 1.0;
    }
    if (name === void 0) {
        name = 'truncatedNormal';
    }
    if (dtype === 'bool') {
        throw new _errors.NotImplementedError("randomNormal does not support dType bool.");
    }
    return new LayerVariable(tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);
}
function randomNormalVariable(shape, mean, stddev, dtype, seed, name) {
    if (mean === void 0) {
        mean = 0.0;
    }
    if (stddev === void 0) {
        stddev = 1.0;
    }
    if (name === void 0) {
        name = 'randomNormal';
    }
    if (dtype === 'bool') {
        throw new _errors.NotImplementedError("randomNormalVariable does not support dType bool.");
    }
    return new LayerVariable((0, _tfjs_backend.randomNormal)(shape, mean, stddev, dtype, seed), dtype, name);
}
function update(x, xNew) {
    return x.write(xNew);
}
function updateAdd(x, increment) {
    return x.write(tfc.add(x.read(), increment));
}
function updateSub(x, decrement) {
    return x.write(tfc.sub(x.read(), decrement));
}
function batchGetValue(xs) {
    return xs.map(function (x) {
        return x.read();
    });
}
function batchSetValue(variablesAndValues) {
    variablesAndValues.map(function (variableAndValue) {
        var variable = variableAndValue[0];
        variable.write(variableAndValue[1]);
    });
}
//# sourceMappingURL=variables.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./common":"uF+p","./errors":"WwMz","./types":"qCW+"}],"G+d8":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.epsilon = epsilon;
exports.setEpsilon = setEpsilon;
exports.imageDataFormat = imageDataFormat;
var _epsilon = 1e-7;
function epsilon() {
    return _epsilon;
}
function setEpsilon(e) {
    _epsilon = e;
}
function imageDataFormat() {
    return 'channelsLast';
}
//# sourceMappingURL=common.js.map
},{}],"yoLG":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.epsilon = undefined;
exports.disposeScalarCache = disposeScalarCache;
exports.setBackend = setBackend;
exports.getBackend = getBackend;
exports.getScalar = getScalar;
exports.isBackendSymbolic = isBackendSymbolic;
exports.shape = shape;
exports.intShape = intShape;
exports.dtype = dtype;
exports.countParams = countParams;
exports.cast = cast;
exports.expandDims = expandDims;
exports.repeat = repeat;
exports.flatten = flatten;
exports.batchFlatten = batchFlatten;
exports.sliceAlongFirstAxis = sliceAlongFirstAxis;
exports.sliceAlongLastAxis = sliceAlongLastAxis;
exports.sliceAlongAxis = sliceAlongAxis;
exports.concatenate = concatenate;
exports.concatAlongFirstAxis = concatAlongFirstAxis;
exports.tile = tile;
exports.identity = identity;
exports.eyeVariable = eyeVariable;
exports.scalarTimesArray = scalarTimesArray;
exports.scalarPlusArray = scalarPlusArray;
exports.randomNormal = randomNormal;
exports.dot = dot;
exports.sign = sign;
exports.qr = qr;
exports.oneHot = oneHot;
exports.gather = gather;
exports.square = square;
exports.pow = pow;
exports.biasAdd = biasAdd;
exports.elu = elu;
exports.softsign = softsign;
exports.dropout = dropout;
exports.nameScope = nameScope;
exports.floatx = floatx;
exports.getUid = getUid;
exports.hardSigmoid = hardSigmoid;
exports.inTrainPhase = inTrainPhase;
exports.gradients = gradients;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _common = require('../common');

var _errors = require('../errors');

var _math_utils = require('../utils/math_utils');

var math_utils = _interopRequireWildcard(_math_utils);

var _variables = require('../variables');

var _common2 = require('./common');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var backend = 'webgl';
var DEFAULT_DTYPE = 'float32';
function disposeScalarCache() {
    for (var typeKey in scalarCache) {
        for (var key in scalarCache[typeKey]) {
            scalarCache[typeKey][key].dispose();
            delete scalarCache[typeKey][key];
        }
    }
}
function setBackend(requestedBackend) {
    tfc.setBackend(requestedBackend);
    backend = requestedBackend;
    disposeScalarCache();
}
function getBackend() {
    return backend;
}
var scalarCache = {
    float32: {},
    int32: {}
};
function getScalar(value, dtype) {
    if (dtype === undefined) {
        dtype = DEFAULT_DTYPE;
    }
    if (scalarCache[dtype][value] == null) {
        scalarCache[dtype][value] = (0, _tfjsCore.scalar)(value, dtype);
        tfc.keep(scalarCache[dtype][value]);
    }
    return scalarCache[dtype][value];
}
var epsilon = exports.epsilon = _common2.epsilon;
function isBackendSymbolic() {
    return false;
}
function shape(x) {
    return x.shape;
}
function intShape(x) {
    return x.shape;
}
function dtype(x) {
    return x instanceof _tfjsCore.Tensor ? DEFAULT_DTYPE : x.dtype;
}
function countParams(x) {
    var shape = x.shape;
    if (shape.length > 0) {
        return shape.reduce(function (a, b) {
            return a * b;
        });
    } else {
        return 1;
    }
}
function cast(x, dtype) {
    return x.asType(dtype);
}
function expandDims(x, axis) {
    if (axis === void 0) {
        axis = -1;
    }
    var outShape = shape(x).slice();
    if (axis < 0) {
        axis = outShape.length + axis + 1;
    }
    outShape.splice(axis, 0, 1);
    return x.reshape(outShape);
}
function repeat(x, n) {
    return (0, _tfjsCore.tidy)(function () {
        if (x.shape.length !== 2) {
            throw new _errors.ValueError("repeat() expects a rank-2 tensor, but received a " + ("rank-" + x.shape.length + " tensor."));
        }
        var y = expandDims(x, 1);
        return tile(y, [1, n, 1]);
    });
}
function flatten(x) {
    var newShape = [math_utils.arrayProd(x.shape)];
    return x.reshape(newShape);
}
function batchFlatten(x) {
    if (x.rank <= 1) {
        throw new _errors.ValueError("batchFlatten requires a minimum rank of 2. Got rank: " + x.rank + ".");
    }
    var newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];
    return x.reshape(newShape);
}
function sliceAlongFirstAxis(array, start, size) {
    return (0, _tfjsCore.tidy)(function () {
        switch (array.rank) {
            case 1:
                return tfc.slice1d(array, start, size);
            case 2:
                return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);
            case 3:
                return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);
            case 4:
                return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);
            default:
                throw new _errors.ValueError("sliceAlongFirstAxis() received an unsupported tensor rank: " + ("" + array.rank));
        }
    });
}
function sliceAlongLastAxis(array, start, size) {
    return (0, _tfjsCore.tidy)(function () {
        switch (array.rank) {
            case 1:
                return tfc.slice1d(array, start, size);
            case 2:
                return tfc.slice2d(array, [0, start], [array.shape[0], size]);
            case 3:
                return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);
            case 4:
                return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);
            default:
                throw new _errors.ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + ("" + array.rank));
        }
    });
}
function sliceAlongAxis(array, start, size, axis) {
    return (0, _tfjsCore.tidy)(function () {
        switch (array.rank) {
            case 1:
                return tfc.slice1d(array, start, size);
            case 2:
                switch (axis) {
                    case 1:
                        return sliceAlongFirstAxis(array, start, size);
                    case 2:
                        return sliceAlongLastAxis(array, start, size);
                    default:
                        throw new _errors.ValueError("The axis is not within the rank of the tensor " + ("" + axis));
                }
            case 3:
                switch (axis) {
                    case 1:
                        return sliceAlongFirstAxis(array, start, size);
                    case 2:
                        return tfc.slice3d(array, [0, start, 0], [array.shape[0], size, array.shape[2]]);
                    case 3:
                        return sliceAlongLastAxis(array, start, size);
                    default:
                        throw new _errors.ValueError("The axis is not within the rank of the tensor " + ("" + axis));
                }
            case 4:
                switch (axis) {
                    case 1:
                        return sliceAlongFirstAxis(array, start, size);
                    case 2:
                        return tfc.slice4d(array, [0, start, 0, 0], [array.shape[0], size, array.shape[2], array.shape[3]]);
                    case 3:
                        return tfc.slice4d(array, [0, 0, start, 0], [array.shape[0], array.shape[1], size, array.shape[3]]);
                    case 4:
                        return sliceAlongLastAxis(array, start, size);
                    default:
                        throw new _errors.ValueError("The axis is not within the rank of the tensor " + ("" + axis));
                }
            default:
                throw new _errors.ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + ("" + array.rank));
        }
    });
}
function concatenate(tensors, axis) {
    if (axis === void 0) {
        axis = -1;
    }
    var rank;
    if (axis < 0) {
        rank = tensors[0].rank;
        if (rank !== 0) {
            axis = rank;
        } else {
            axis = 0;
        }
    }
    if (axis === tensors[0].rank) {
        axis = -1;
    }
    return tfc.concat(tensors, axis);
}
function concatAlongFirstAxis(a, b) {
    switch (a.rank) {
        case 1:
            return tfc.concat1d([a, b]);
        case 2:
            return tfc.concat2d([a, b], 0);
        case 3:
            return tfc.concat3d([a, b], 0);
        case 4:
            return tfc.concat4d([a, b], 0);
        default:
            throw new _errors.ValueError('concatAlongFirstAxis() received an unsupported tensor rank: ' + a.rank);
    }
}
function tile(x, n) {
    if (!Array.isArray(n)) {
        n = [n];
    }
    if (x.rank !== n.length) {
        throw new _errors.ValueError("The length of input n (" + n.length + ") does not match " + ("the number of dimensions in input x (" + x.rank + ")"));
    }
    return tfc.tile(x, n);
}
function identity(x) {
    return x.clone();
}
function eyeVariable(size, dtype, name) {
    return new _variables.LayerVariable(tfc.eye(size, size, null, dtype), dtype, name);
}
function scalarTimesArray(c, x) {
    return tfc.mul(c, x);
}
function scalarPlusArray(c, x) {
    return tfc.add(c, x);
}
function randomNormal(shape, mean, stddev, dtype, seed) {
    if (mean === void 0) {
        mean = 0.0;
    }
    if (stddev === void 0) {
        stddev = 1.0;
    }
    return tfc.randomNormal(shape, mean, stddev, dtype, seed);
}
function dot(x, y) {
    if (y.rank !== 2) {
        throw new _errors.NotImplementedError("dot support for y other than rank 2 is not yet implemented: " + ("y shape = " + shape));
    } else {
        if (x.rank === 2) {
            return tfc.matMul(x, y);
        } else if (x.rank === 3) {
            var xShape0 = x.shape[0];
            var xShape1 = x.shape[1];
            var xShape2 = x.shape[2];
            x = x.reshape([xShape0 * xShape1, xShape2]);
            return tfc.matMul(x, y).reshape([xShape0, xShape1, y.shape[1]]);
        } else {
            throw new _errors.NotImplementedError("dot support for x of rank " + x.rank + " is not yet implemented: " + ("x shape = " + shape));
        }
    }
}
function sign(x) {
    return (0, _tfjsCore.tidy)(function () {
        var zerosLikeX = (0, _tfjsCore.zerosLike)(x);
        var onesLikeX = (0, _tfjsCore.onesLike)(x);
        return (0, _tfjsCore.where)(tfc.equal(x, zerosLikeX), zerosLikeX, (0, _tfjsCore.where)(tfc.greater(x, (0, _tfjsCore.zerosLike)(x)), onesLikeX, scalarTimesArray(getScalar(-1), onesLikeX)));
    });
}
function qr(x) {
    var _a = (0, _tfjsCore.tidy)(function () {
        if (x.shape.length !== 2) {
            throw new _errors.ValueError("qr() requires a 2D Tensor, but got a " + x.shape.length + "D Tensor.");
        }
        if (x.shape[0] < x.shape[1]) {
            throw new _errors.ValueError("qr() requires x.shape[0] >= x.shape[1], but got shape: [" + x.shape + "]");
        }
        var m = x.shape[0];
        var n = x.shape[1];
        var q = tfc.eye(m);
        var r = x.clone();
        var one2D = (0, _tfjsCore.tensor2d)([[1]], [1, 1]);
        var w = one2D.clone();
        var _loop_1 = function (j) {
            var rTemp = r;
            var wTemp = w;
            var qTemp = q;
            _a = (0, _tfjsCore.tidy)(function () {
                var rjEnd1 = r.slice([j, j], [m - j, 1]);
                var normX = tfc.norm(rjEnd1);
                var rjj = r.slice([j, j], [1, 1]);
                var s = tfc.neg(sign(rjj));
                var u1 = rjj.sub(tfc.mul(s, normX));
                var wPre = tfc.div(rjEnd1, u1);
                if (wPre.shape[0] === 1) {
                    w = one2D.clone();
                } else {
                    w = one2D.concat(wPre.slice([1, 0], [wPre.shape[0] - 1, wPre.shape[1]]), 0);
                }
                var tau = tfc.neg(tfc.div(tfc.matMul(s, u1), normX));
                var rjEndAll = r.slice([j, 0], [m - j, n]);
                var tauTimesW = tau.mul(w);
                if (j === 0) {
                    r = rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll)));
                } else {
                    r = r.slice([0, 0], [j, n]).concat(rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll))), 0);
                }
                var qAllJEnd = q.slice([0, j], [m, q.shape[1] - j]);
                if (j === 0) {
                    q = qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose()));
                } else {
                    q = q.slice([0, 0], [m, j]).concat(qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose())), 1);
                }
                return [w, r, q];
            }), w = _a[0], r = _a[1], q = _a[2];
            (0, _tfjsCore.dispose)([rTemp, wTemp, qTemp]);
            var _a;
        };
        for (var j = 0; j < n; ++j) {
            _loop_1(j);
        }
        return [q, r];
    }),
        qOuter = _a[0],
        rOuter = _a[1];
    return [qOuter, rOuter];
}
function oneHot(indices, numClasses) {
    return (0, _tfjsCore.tidy)(function () {
        if (indices.rank !== 1) {
            throw new Error('Only 1D one-hot tensors are supported in the ' + 'deeplearn backend, at present.');
        }
        indices = indices.toInt();
        return tfc.oneHot(indices, numClasses).toFloat();
    });
}
function gather(reference, indices, axis) {
    return (0, _tfjsCore.tidy)(function () {
        if (Array.isArray(indices)) {
            indices = (0, _tfjsCore.tensor1d)(indices, 'int32');
        } else {
            indices = indices.toInt();
        }
        return tfc.gather(reference, indices, axis);
    });
}
function square(x) {
    return tfc.mulStrict(x, x);
}
function pow(x, a) {
    return (0, _tfjsCore.tidy)(function () {
        if (typeof a === 'number') {
            a = (0, _tfjsCore.scalar)(Math.round(a), 'int32');
        }
        if (a.dtype !== 'int32') {
            throw new _errors.NotImplementedError("Non-int32 dtype (" + a.dtype + ") is not supported by pow() yet");
        }
        return tfc.pow(x, a);
    });
}
function biasAdd(x, bias, dataFormat) {
    return (0, _tfjsCore.tidy)(function () {
        if (dataFormat == null) {
            dataFormat = (0, _common2.imageDataFormat)();
        }
        (0, _common.checkDataFormat)(dataFormat);
        if (bias.rank !== 1 && bias.rank !== x.rank) {
            throw new _errors.ValueError('Unexpected bias dimensions: ' + bias.rank + '; expected it to be 1 or ' + x.rank);
        }
        var biasShape = bias.shape;
        var y;
        if (x.rank === 5) {
            if (dataFormat === 'channelsFirst') {
                if (biasShape.length === 1) {
                    y = x.add(bias.reshape([1, biasShape[0], 1, 1, 1]));
                } else {
                    y = x.add(bias.reshape([1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]));
                }
            } else if (dataFormat === 'channelsLast') {
                if (biasShape.length === 1) {
                    y = x.add(bias.reshape([1, 1, 1, 1, biasShape[0]]));
                } else {
                    y = x.add(bias.reshape([1].concat(biasShape)));
                }
            }
        } else if (x.rank === 4) {
            if (dataFormat === 'channelsFirst') {
                if (biasShape.length === 1) {
                    y = x.add(bias.reshape([1, biasShape[0], 1, 1]));
                } else {
                    y = x.add(bias.reshape([1, biasShape[2], biasShape[0], biasShape[1]]));
                }
            } else if (dataFormat === 'channelsLast') {
                if (biasShape.length === 1) {
                    y = x.add(bias.reshape([1, 1, 1, biasShape[0]]));
                } else {
                    y = x.add(bias.reshape([1].concat(biasShape)));
                }
            }
        } else if (x.rank === 3) {
            if (dataFormat === 'channelsFirst') {
                if (biasShape.length === 1) {
                    y = x.add(bias.reshape([1, biasShape[0], 1]));
                } else {
                    y = x.add(bias.reshape([1, biasShape[1], biasShape[0]]));
                }
            } else if (dataFormat === 'channelsLast') {
                if (biasShape.length === 1) {
                    y = x.add(bias.reshape([1, 1, biasShape[0]]));
                } else {
                    y = x.add(bias.reshape([1].concat(biasShape)));
                }
            }
        } else if (x.rank < 3) {
            y = x.add(bias);
        } else {
            throw new _errors.ValueError("Unsupported input rank by biasAdd: " + x.rank);
        }
        return y;
    });
}
function elu(x, alpha) {
    if (alpha === void 0) {
        alpha = 1;
    }
    if (alpha !== 1) {
        throw new _errors.NotImplementedError("Support for alpha values other than 1 (" + alpha + ") is not implemented " + "yet.");
    }
    return tfc.elu(x);
}
function softsign(x) {
    return (0, _tfjsCore.tidy)(function () {
        return tfc.div(x, tfc.add(getScalar(1), tfc.abs(x)));
    });
}
function dropout(x, level, noiseShape, seed) {
    return (0, _tfjsCore.tidy)(function () {
        if (noiseShape != null && !_tfjsCore.util.arraysEqual(x.shape, noiseShape)) {
            throw new _errors.NotImplementedError('Non-default noise shape is not implemented yet: ' + JSON.stringify(noiseShape));
        }
        if (seed != null) {
            throw new _errors.NotImplementedError('seed is not implemented for dropout yet.');
        }
        var multiplier = tfc.step(tfc.add(tfc.neg(level), tfc.randomUniform(x.shape, 0, 1, 'float32')));
        multiplier = tfc.mul(tfc.div(getScalar(1), tfc.sub(getScalar(1), level)), multiplier);
        return tfc.mul(x, multiplier);
    });
}
function nameScope(name, fn) {
    return (0, _common.nameScope)(name, fn);
}
function floatx() {
    return 'float32';
}
var _uidPrefixes = {};
function getUid(prefix) {
    if (prefix === void 0) {
        prefix = '';
    }
    if (!(prefix in _uidPrefixes)) {
        _uidPrefixes[prefix] = 0;
    }
    _uidPrefixes[prefix] += 1;
    return prefix + _uidPrefixes[prefix].toString();
}
function hardSigmoid(x) {
    return (0, _tfjsCore.tidy)(function () {
        var y = scalarPlusArray(getScalar(0.5), scalarTimesArray(getScalar(0.2), x));
        return tfc.clipByValue(y, 0, 1);
    });
}
function inTrainPhase(x, alt, training) {
    if (training === void 0) {
        training = false;
    }
    return training ? x() : alt();
}
function gradients(lossFn, variables) {
    var variableList = variables.map(function (variable) {
        return variable.read();
    });
    var valudAndGrads = (0, _tfjsCore.variableGrads)(lossFn, variableList);
    return variables.map(function (variable) {
        return valudAndGrads.grads[variable.name];
    });
}
//# sourceMappingURL=tfjs_backend.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../common":"uF+p","../errors":"WwMz","../utils/math_utils":"42TA","../variables":"uVg5","./common":"G+d8"}],"haqD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.MinMaxNorm = exports.NonNeg = exports.UnitNorm = exports.MaxNorm = exports.Constraint = undefined;
exports.serializeConstraint = serializeConstraint;
exports.deserializeConstraint = deserializeConstraint;
exports.getConstraint = getConstraint;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require("./backend/tfjs_backend");

var K = _interopRequireWildcard(_tfjs_backend);

var _generic_utils = require("./utils/generic_utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

function calcL2Norms(w, axis) {
    return (0, _tfjsCore.tidy)(function () {
        return tfc.sqrt(tfc.sum(K.square(w), axis, true));
    });
}
var Constraint = function (_super) {
    __extends(Constraint, _super);
    function Constraint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Constraint.prototype.getConfig = function () {
        return {};
    };
    Constraint = __decorate([(0, _tfjsCore.doc)({ heading: 'Constraints', subheading: 'Classes', namespace: 'constraints' })], Constraint);
    return Constraint;
}(_tfjsCore.serialization.Serializable);
exports.Constraint = Constraint;

var MaxNorm = function (_super) {
    __extends(MaxNorm, _super);
    function MaxNorm(config) {
        var _this = _super.call(this) || this;
        _this.defaultMaxValue = 2;
        _this.defaultAxis = 0;
        _this.maxValue = config.maxValue != null ? config.maxValue : _this.defaultMaxValue;
        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;
        return _this;
    }
    MaxNorm.prototype.apply = function (w) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var norms = calcL2Norms(w, _this.axis);
            var desired = tfc.clipByValue(norms, 0, _this.maxValue);
            return tfc.mul(w, tfc.div(desired, K.scalarPlusArray(K.getScalar(K.epsilon()), norms)));
        });
    };
    MaxNorm.prototype.getConfig = function () {
        return { maxValue: this.maxValue, axis: this.axis };
    };
    MaxNorm.className = 'MaxNorm';
    return MaxNorm;
}(Constraint);
exports.MaxNorm = MaxNorm;

_tfjsCore.serialization.SerializationMap.register(MaxNorm);
var UnitNorm = function (_super) {
    __extends(UnitNorm, _super);
    function UnitNorm(config) {
        var _this = _super.call(this) || this;
        _this.defaultAxis = 0;
        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;
        return _this;
    }
    UnitNorm.prototype.apply = function (w) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            return tfc.div(w, K.scalarPlusArray(K.getScalar(K.epsilon()), calcL2Norms(w, _this.axis)));
        });
    };
    UnitNorm.prototype.getConfig = function () {
        return { axis: this.axis };
    };
    UnitNorm.className = 'UnitNorm';
    return UnitNorm;
}(Constraint);
exports.UnitNorm = UnitNorm;

_tfjsCore.serialization.SerializationMap.register(UnitNorm);
var NonNeg = function (_super) {
    __extends(NonNeg, _super);
    function NonNeg() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NonNeg.prototype.apply = function (w) {
        return tfc.relu(w);
    };
    NonNeg.className = 'NonNeg';
    return NonNeg;
}(Constraint);
exports.NonNeg = NonNeg;

_tfjsCore.serialization.SerializationMap.register(NonNeg);
var MinMaxNorm = function (_super) {
    __extends(MinMaxNorm, _super);
    function MinMaxNorm(config) {
        var _this = _super.call(this) || this;
        _this.defaultMinValue = 0.0;
        _this.defaultMaxValue = 1.0;
        _this.defaultRate = 1.0;
        _this.defaultAxis = 0;
        _this.minValue = config.minValue != null ? config.minValue : _this.defaultMinValue;
        _this.maxValue = config.maxValue != null ? config.maxValue : _this.defaultMaxValue;
        _this.rate = config.rate != null ? config.rate : _this.defaultRate;
        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;
        return _this;
    }
    MinMaxNorm.prototype.apply = function (w) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var norms = calcL2Norms(w, _this.axis);
            var desired = tfc.add(K.scalarTimesArray(K.getScalar(_this.rate), tfc.clipByValue(norms, _this.minValue, _this.maxValue)), K.scalarTimesArray(K.getScalar(1.0 - _this.rate), norms));
            return tfc.mul(w, tfc.div(desired, K.scalarPlusArray(K.getScalar(K.epsilon()), norms)));
        });
    };
    MinMaxNorm.prototype.getConfig = function () {
        return {
            minValue: this.minValue,
            maxValue: this.maxValue,
            rate: this.rate,
            axis: this.axis
        };
    };
    MinMaxNorm.className = 'MinMaxNorm';
    return MinMaxNorm;
}(Constraint);
exports.MinMaxNorm = MinMaxNorm;

_tfjsCore.serialization.SerializationMap.register(MinMaxNorm);
var CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    'maxNorm': 'MaxNorm',
    'minMaxNorm': 'MinMaxNorm',
    'nonNeg': 'NonNeg',
    'unitNorm': 'UnitNorm'
};
function serializeConstraint(constraint) {
    return (0, _generic_utils.serializeKerasObject)(constraint);
}
function deserializeConstraint(config, customObjects) {
    if (customObjects === void 0) {
        customObjects = {};
    }
    return (0, _generic_utils.deserializeKerasObject)(config, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');
}
function getConstraint(identifier) {
    if (identifier == null) {
        return null;
    }
    if (typeof identifier === 'string') {
        var className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
        var config = { className: className, config: {} };
        return deserializeConstraint(config);
    } else if (identifier instanceof Constraint) {
        return identifier;
    } else {
        return deserializeConstraint(identifier);
    }
}
//# sourceMappingURL=constraints.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./utils/generic_utils":"Uv0q"}],"QEAU":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.deserialize = deserialize;

var _tfjsCore = require('@tensorflow/tfjs-core');

var _generic_utils = require('../utils/generic_utils');

function deserialize(config, customObjects) {
    if (customObjects === void 0) {
        customObjects = {};
    }
    return (0, _generic_utils.deserializeKerasObject)(config, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, customObjects, 'layer');
}
//# sourceMappingURL=serialization.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../utils/generic_utils":"Uv0q"}],"EA1F":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convertPythonicToTs = convertPythonicToTs;
exports.convertTsToPythonic = convertTsToPythonic;

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function isArrayItemInputOrOutputName(key, index, value) {
    return (key === 'inboundNodes' || key === 'outputLayers' || key === 'inputLayers') && index === 0 && typeof value === 'string';
}
function convertPythonicToTs(pythonicConfig, key) {
    if (pythonicConfig === null) {
        return null;
    } else if (typeof pythonicConfig === 'string') {
        return generic_utils.toCamelCase(pythonicConfig);
    } else if (typeof pythonicConfig === 'number' || typeof pythonicConfig === 'boolean') {
        return pythonicConfig;
    } else if (pythonicConfig instanceof Array) {
        var tsArray = [];
        var arrayLength = pythonicConfig.length;
        for (var i = 0; i < arrayLength; ++i) {
            var item = pythonicConfig[i];
            if (isArrayItemInputOrOutputName(key, i, item)) {
                tsArray.push(item);
            } else {
                tsArray.push(convertPythonicToTs(item, key));
            }
        }
        return tsArray;
    } else {
        var tsDict = {};
        for (var _i = 0, _a = Object.keys(pythonicConfig); _i < _a.length; _i++) {
            var pythonicKey = _a[_i];
            var pythonicValue = pythonicConfig[pythonicKey];
            if (pythonicKey === 'name' && typeof pythonicValue === 'string') {
                tsDict[pythonicKey] = pythonicValue;
            } else {
                var tsKey = generic_utils.toCamelCase(pythonicKey);
                tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);
            }
        }
        return tsDict;
    }
}
function convertTsToPythonic(tsConfig, key) {
    if (tsConfig === null || tsConfig === undefined) {
        return null;
    } else if (typeof tsConfig === 'string') {
        return generic_utils.toSnakeCase(tsConfig);
    } else if (typeof tsConfig === 'number' || typeof tsConfig === 'boolean') {
        return tsConfig;
    } else if (tsConfig instanceof Array) {
        var pyArray = [];
        var arrayLength = tsConfig.length;
        for (var i = 0; i < arrayLength; ++i) {
            var item = tsConfig[i];
            if (isArrayItemInputOrOutputName(key, i, item)) {
                pyArray.push(item);
            } else {
                pyArray.push(convertTsToPythonic(item, key));
            }
        }
        return pyArray;
    } else {
        var pyDict = {};
        for (var _i = 0, _a = Object.keys(tsConfig); _i < _a.length; _i++) {
            var tsKey = _a[_i];
            var tsValue = tsConfig[tsKey];
            var pyKey = generic_utils.toSnakeCase(tsKey);
            if ((tsKey === 'name' || tsKey === 'className') && typeof tsValue === 'string') {
                pyDict[pyKey] = tsValue;
            } else {
                pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);
            }
        }
        return pyDict;
    }
}
//# sourceMappingURL=serialization_utils.js.map
},{"../utils/generic_utils":"Uv0q"}],"bg5G":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var version = '0.6.4';
exports.version = version;
//# sourceMappingURL=version.js.map
},{}],"q4cr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Container = exports.InputLayer = exports.Layer = exports.Node = exports.InputSpec = undefined;
exports.Input = Input;
exports.getSourceInputs = getSourceInputs;
exports.loadWeightsFromNamedTensorMap = loadWeightsFromNamedTensorMap;
exports.loadWeightsFromJson = loadWeightsFromJson;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tfjs_backend = require("../backend/tfjs_backend");

var K = _interopRequireWildcard(_tfjs_backend);

var _errors = require("../errors");

var _serialization = require("../layers/serialization");

var _types = require("../types");

var _generic_utils = require("../utils/generic_utils");

var generic_utils = _interopRequireWildcard(_generic_utils);

var _serialization_utils = require("../utils/serialization_utils");

var _variables = require("../variables");

var _version = require("../version");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var InputSpec = function () {
    function InputSpec(config) {
        this.dtype = config.dtype;
        this.shape = config.shape;
        if (config.shape != null) {
            this.ndim = config.shape.length;
        } else {
            this.ndim = config.ndim;
        }
        this.maxNDim = config.maxNDim;
        this.minNDim = config.minNDim;
        this.axes = config.axes || {};
    }
    return InputSpec;
}();
exports.InputSpec = InputSpec;

var _nextNodeID = 0;
var Node = function () {
    function Node(config, callArgs) {
        this.callArgs = callArgs;
        this.id = _nextNodeID++;
        this.outboundLayer = config.outboundLayer;
        this.inboundLayers = config.inboundLayers;
        this.nodeIndices = config.nodeIndices;
        this.tensorIndices = config.tensorIndices;
        this.inputTensors = config.inputTensors;
        this.outputTensors = config.outputTensors;
        this.inputMasks = config.inputMasks;
        this.outputMasks = config.outputMasks;
        this.inputShapes = config.inputShapes;
        this.outputShapes = config.outputShapes;
        for (var _i = 0, _a = config.inboundLayers; _i < _a.length; _i++) {
            var layer = _a[_i];
            if (layer != null) {
                layer.outboundNodes.push(this);
            }
        }
        config.outboundLayer.inboundNodes.push(this);
    }
    Node.prototype.getConfig = function () {
        var inboundNames = [];
        for (var _i = 0, _a = this.inboundLayers; _i < _a.length; _i++) {
            var layer = _a[_i];
            if (layer != null) {
                inboundNames.push(layer.name);
            } else {
                inboundNames.push(null);
            }
        }
        return {
            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
            inboundLayers: inboundNames,
            nodeIndices: this.nodeIndices,
            tensorIndices: this.tensorIndices
        };
    };
    return Node;
}();
exports.Node = Node;

var _nextLayerID = 0;
var Layer = function (_super) {
    __extends(Layer, _super);
    function Layer(config) {
        var _this = _super.call(this) || this;
        _this._callHook = null;
        _this._addedWeightNames = [];
        _this._stateful = false;
        _this.id = _nextLayerID++;
        _this.activityRegularizer = null;
        _this.inputSpec = null;
        _this.supportsMasking = false;
        _this._trainableWeights = [];
        _this._nonTrainableWeights = [];
        _this._losses = [];
        _this._updates = [];
        _this._built = false;
        _this.inboundNodes = [];
        _this.outboundNodes = [];
        var name = config.name;
        if (!name) {
            var prefix = _this.getClassName();
            name = generic_utils.toSnakeCase(prefix) + '_' + K.getUid(prefix);
        }
        _this.name = name;
        _this.trainable = config.trainable == null ? true : config.trainable;
        _this.updatable = config.updatable == null ? true : config.updatable;
        if (config.inputShape != null || config.batchInputShape != null) {
            var batchInputShape = void 0;
            if (config.batchInputShape != null) {
                batchInputShape = config.batchInputShape;
            } else if (config.inputShape != null) {
                var batchSize = null;
                if (config.batchSize != null) {
                    batchSize = config.batchSize;
                }
                batchInputShape = [batchSize].concat(config.inputShape);
            }
            _this.batchInputShape = batchInputShape;
            var dtype = config.dtype;
            if (dtype == null) {
                dtype = config.inputDType;
            }
            if (dtype == null) {
                dtype = K.floatx();
            }
            _this.dtype = dtype;
        }
        if (config.weights != null) {
            _this.initialWeights = config.weights;
        } else {
            _this.initialWeights = null;
        }
        return _this;
    }
    Layer.nodeKey = function (layer, nodeIndex) {
        return layer.name + '_ib-' + nodeIndex.toString();
    };
    Layer.prototype.getNodeAtIndex = function (nodeIndex, attrName) {
        if (this.inboundNodes.length === 0) {
            throw new _errors.RuntimeError('The layer has never been called ' + ("and thus has no defined " + attrName + "."));
        }
        if (this.inboundNodes.length <= nodeIndex) {
            throw new _errors.ValueError("Asked to get " + attrName + " at node " + nodeIndex + ", " + ("but the layer has only " + this.inboundNodes.length + " inbound nodes."));
        }
        return this.inboundNodes[nodeIndex];
    };
    Layer.prototype.getInputAt = function (nodeIndex) {
        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'input').inputTensors);
    };
    Layer.prototype.getOutputAt = function (nodeIndex) {
        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'output').outputTensors);
    };
    Object.defineProperty(Layer.prototype, "input", {
        get: function () {
            if (this.inboundNodes.length > 1) {
                throw new _errors.AttributeError("Layer " + this.name + ' has multiple inbound nodes, ' + 'hence the notion of "layer input" ' + 'is ill-defined. ' + 'Use `getInputAt(nodeIndex)` instead.');
            } else if (this.inboundNodes.length === 0) {
                throw new _errors.AttributeError("Layer " + this.name + ' is not connected, no input to return.');
            }
            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'input').inputTensors);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "output", {
        get: function () {
            if (this.inboundNodes.length === 0) {
                throw new _errors.AttributeError("Layer " + this.name + ' has no inbound nodes.');
            }
            if (this.inboundNodes.length > 1) {
                throw new _errors.AttributeError("Layer " + this.name + ' has multiple inbound nodes, ' + 'hence the notion of "layer output" ' + 'is ill-defined. ' + 'Use `getOutputAt(nodeIndex)` instead.');
            }
            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'output').outputTensors);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "losses", {
        get: function () {
            return this._losses;
        },
        enumerable: true,
        configurable: true
    });
    Layer.prototype.calculateLosses = function () {
        return this.losses.map(function (lossFn) {
            return lossFn();
        });
    };
    Object.defineProperty(Layer.prototype, "updates", {
        get: function () {
            return this._updates;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "built", {
        get: function () {
            return this._built;
        },
        set: function (built) {
            this._built = built;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "trainableWeights", {
        get: function () {
            if (this.trainable) {
                return this._trainableWeights;
            } else {
                return [];
            }
        },
        set: function (weights) {
            this._trainableWeights = weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "nonTrainableWeights", {
        get: function () {
            if (!this.trainable) {
                return this._trainableWeights.concat(this._nonTrainableWeights);
            } else {
                return this._nonTrainableWeights;
            }
        },
        set: function (weights) {
            this._nonTrainableWeights = weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "weights", {
        get: function () {
            return this.trainableWeights.concat(this.nonTrainableWeights);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Layer.prototype, "stateful", {
        get: function () {
            return this._stateful;
        },
        enumerable: true,
        configurable: true
    });
    Layer.prototype.assertInputCompatibility = function (inputs) {
        inputs = generic_utils.toList(inputs);
        if (this.inputSpec == null || this.inputSpec.length === 0) {
            return;
        }
        var inputSpec = generic_utils.toList(this.inputSpec);
        if (inputs.length !== inputSpec.length) {
            throw new _errors.ValueError("Layer " + this.name + " expects " + inputSpec.length + " inputs, " + ("but it received " + inputs.length + " input tensors. ") + ("Input received: " + inputs));
        }
        for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {
            var x = inputs[inputIndex];
            var spec = inputSpec[inputIndex];
            if (spec == null) {
                continue;
            }
            var ndim = x.rank;
            if (spec.ndim != null) {
                if (ndim !== spec.ndim) {
                    throw new _errors.ValueError("Input " + inputIndex + " is incompatible with layer " + this.name + ": " + ("expected ndim=" + spec.ndim + ", found ndim=" + ndim));
                }
            }
            if (spec.maxNDim != null) {
                if (ndim > spec.maxNDim) {
                    throw new _errors.ValueError("Input " + inputIndex + " is incompatible with layer " + this.name + (": expected max_ndim=" + spec.maxNDim + ", found ndim=" + ndim));
                }
            }
            if (spec.minNDim != null) {
                if (ndim < spec.minNDim) {
                    throw new _errors.ValueError("Input " + inputIndex + " is incompatible with layer " + this.name + (": expected min_ndim=" + spec.minNDim + ", found ndim=" + ndim + "."));
                }
            }
            if (spec.dtype != null) {
                if (K.dtype(x) !== spec.dtype) {
                    var xDType = K.dtype(x);
                    throw new _errors.ValueError("Input " + inputIndex + " is incompatible with layer " + this.name + " " + (": expected dtype=" + spec.dtype + ", found dtype=" + xDType + "."));
                }
            }
            if (spec.axes) {
                var xShape = K.intShape(x);
                for (var key in spec.axes) {
                    var axis = Number(key);
                    var value = spec.axes[key];
                    var xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];
                    if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {
                        throw new _errors.ValueError("Input " + inputIndex + " is incompatible with layer " + (this.name + ": expected axis " + axis + " of input shape to ") + ("have value " + value + " but got shape " + xShape + "."));
                    }
                }
            }
            if (spec.shape != null) {
                var xShape = K.intShape(x);
                for (var i = 0; i < spec.shape.length; ++i) {
                    var specDim = spec.shape[i];
                    var dim = xShape[i];
                    if (specDim != null && dim != null) {
                        if (specDim !== dim) {
                            throw new _errors.ValueError("Input " + inputIndex + " is incompatible with layer " + (this.name + ": expected shape=" + spec.shape + ", ") + 'found shape=${xShape}.');
                        }
                    }
                }
            }
        }
    };
    Layer.prototype.call = function (inputs, kwargs) {
        return inputs;
    };
    Layer.prototype.invokeCallHook = function (inputs, kwargs) {
        if (this._callHook != null) {
            this._callHook(inputs, kwargs);
        }
    };
    Layer.prototype.setCallHook = function (callHook) {
        this._callHook = callHook;
    };
    Layer.prototype.clearCallHook = function () {
        this._callHook = null;
    };
    Layer.prototype.apply = function (inputs, kwargs) {
        var _this = this;
        kwargs = kwargs || {};
        var inputsList = generic_utils.toList(inputs);
        var allAreSymbolic = true;
        for (var _i = 0, inputsList_1 = inputsList; _i < inputsList_1.length; _i++) {
            var input = inputsList_1[_i];
            if (!(input instanceof _types.SymbolicTensor)) {
                allAreSymbolic = false;
                break;
            }
        }
        var noneAreSymbolic = true;
        for (var _a = 0, inputsList_2 = inputsList; _a < inputsList_2.length; _a++) {
            var input = inputsList_2[_a];
            if (input instanceof _types.SymbolicTensor) {
                noneAreSymbolic = false;
                break;
            }
        }
        if (allAreSymbolic === noneAreSymbolic) {
            throw new _errors.ValueError('Arguments to apply() must be all ' + 'SymbolicTensors or all Tensors');
        }
        return K.nameScope(this.name, function () {
            if (!_this.built) {
                _this.assertInputCompatibility(inputs);
                var inputShapes = [];
                for (var _i = 0, _a = generic_utils.toList(inputs); _i < _a.length; _i++) {
                    var xElem = _a[_i];
                    inputShapes.push(K.intShape(xElem));
                }
                _this.build(generic_utils.singletonOrArray(inputShapes));
                _this.built = true;
                if (_this.initialWeights) {
                    _this.setWeights(_this.initialWeights);
                }
            }
            _this.assertInputCompatibility(inputs);
            if (noneAreSymbolic) {
                var output = _this.call(inputs, kwargs);
                var outputList = generic_utils.toList(output);
                var outputListCopy = [];
                for (var _b = 0, outputList_1 = outputList; _b < outputList_1.length; _b++) {
                    var x = outputList_1[_b];
                    if (inputsList.indexOf(x) !== -1) {
                        x = K.identity(x);
                    }
                    outputListCopy.push(x);
                }
                output = generic_utils.singletonOrArray(outputListCopy);
                if (_this.activityRegularizer != null) {
                    throw new _errors.NotImplementedError('Layer invocation in the presence of activity ' + 'regularizer(s) is not supported yet.');
                }
                return output;
            } else {
                var inputShape = collectInputShape(inputs);
                var outputShape = _this.computeOutputShape(inputShape);
                var output = void 0;
                var outputDType_1 = guessOutputDType(inputs);
                if (outputShape != null && outputShape.length > 0 && Array.isArray(outputShape[0])) {
                    output = outputShape.map(function (shape, index) {
                        return new _types.SymbolicTensor(outputDType_1, shape, _this, generic_utils.toList(inputs), kwargs, _this.name, index);
                    });
                } else {
                    output = new _types.SymbolicTensor(outputDType_1, outputShape, _this, generic_utils.toList(inputs), kwargs, _this.name);
                }
                _this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);
                if (_this.activityRegularizer != null) {
                    throw new _errors.NotImplementedError('Layer invocation in the presence of activity ' + 'regularizer(s) is not supported yet.');
                }
                return output;
            }
        });
    };
    Layer.prototype.build = function (inputShape) {
        this.built = true;
    };
    Layer.prototype.getWeights = function (trainableOnly) {
        if (trainableOnly === void 0) {
            trainableOnly = false;
        }
        return (0, _variables.batchGetValue)(trainableOnly ? this.trainableWeights : this.weights);
    };
    Layer.prototype.setWeights = function (weights) {
        var _this = this;
        (0, _tfjsCore.tidy)(function () {
            var params = _this.weights;
            if (params.length !== weights.length) {
                throw new _errors.ValueError("You called setWeights(weights) on layer \"" + _this.name + "\" " + ("with a weight list of length " + weights.length + ", ") + ("but the layer was expecting " + params.length + " weights. ") + ("Provided weights: " + weights + "..."));
            }
            if (params.length === 0) {
                return;
            }
            var weightValueTuples = [];
            var paramValues = (0, _variables.batchGetValue)(params);
            for (var i = 0; i < paramValues.length; ++i) {
                var pv = paramValues[i];
                var p = params[i];
                var w = weights[i];
                if (!_tfjsCore.util.arraysEqual(pv.shape, w.shape)) {
                    throw new _errors.ValueError("Layer weight shape " + pv.shape + " " + ("not compatible with provided weight shape " + w.shape));
                }
                weightValueTuples.push([p, w]);
            }
            (0, _variables.batchSetValue)(weightValueTuples);
        });
    };
    Layer.prototype.addWeight = function (name, shape, dtype, initializer, regularizer, trainable, constraint) {
        if (this._addedWeightNames.indexOf(name) !== -1) {
            throw new _errors.ValueError("Duplicate weight name " + name + " for layer " + this.name);
        }
        this._addedWeightNames.push(name);
        if (dtype == null) {
            dtype = K.floatx();
        }
        var weight = new _variables.LayerVariable(initializer.apply(shape, dtype), dtype, name, trainable, constraint);
        if (regularizer != null) {
            this.addLoss(function () {
                return regularizer.apply(weight.read());
            });
        }
        if (trainable == null) {
            trainable = true;
        }
        if (trainable) {
            this._trainableWeights.push(weight);
        } else {
            this._nonTrainableWeights.push(weight);
        }
        return weight;
    };
    Layer.prototype.addLoss = function (losses) {
        if (losses == null || Array.isArray(losses) && losses.length === 0) {
            return;
        }
        losses = generic_utils.toList(losses);
        if (this._losses !== undefined && this._losses !== null) {
            (_a = this.losses).push.apply(_a, losses);
        }
        var _a;
    };
    Layer.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    Layer.prototype.computeMask = function (inputs, mask) {
        var _this = this;
        if (!this.supportsMasking) {
            if (mask != null) {
                if (Array.isArray(mask)) {
                    mask.forEach(function (maskElement) {
                        if (maskElement != null) {
                            throw new TypeError("Layer " + _this.name + " does not support masking," + 'but was passed an inputMask.');
                        }
                    });
                } else {
                    throw new TypeError("Layer " + this.name + " does not support masking," + 'but was passed an inputMask.');
                }
            }
            return null;
        }
        return mask;
    };
    Layer.prototype.addInboundNode = function (inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs) {
        if (kwargs === void 0) {
            kwargs = null;
        }
        var inputTensorList = generic_utils.toList(inputTensors);
        outputTensors = generic_utils.toList(outputTensors);
        inputMasks = generic_utils.toList(inputMasks);
        outputMasks = generic_utils.toList(outputMasks);
        inputShapes = generic_utils.normalizeShapeList(inputShapes);
        outputShapes = generic_utils.normalizeShapeList(outputShapes);
        var inboundLayers = [];
        var nodeIndices = [];
        var tensorIndices = [];
        for (var _i = 0, inputTensorList_1 = inputTensorList; _i < inputTensorList_1.length; _i++) {
            var x = inputTensorList_1[_i];
            inboundLayers.push(x.sourceLayer);
            nodeIndices.push(x.nodeIndex);
            tensorIndices.push(x.tensorIndex);
        }
        new Node({
            outboundLayer: this,
            inboundLayers: inboundLayers,
            nodeIndices: nodeIndices,
            tensorIndices: tensorIndices,
            inputTensors: inputTensorList,
            outputTensors: outputTensors,
            inputMasks: inputMasks,
            outputMasks: outputMasks,
            inputShapes: inputShapes,
            outputShapes: outputShapes
        }, kwargs);
        for (var i = 0; i < outputTensors.length; i++) {
            outputTensors[i].sourceLayer = this;
            outputTensors[i].nodeIndex = this.inboundNodes.length - 1;
            outputTensors[i].tensorIndex = i;
        }
    };
    Layer.prototype.getConfig = function () {
        var config = { name: this.name, trainable: this.trainable };
        if (this.batchInputShape != null) {
            config['batchInputShape'] = this.batchInputShape;
        }
        if (this.dtype != null) {
            config['dtype'] = this.dtype;
        }
        return config;
    };
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', 'subheading': 'Classes' })], Layer.prototype, "apply", null);
    Layer = __decorate([(0, _tfjsCore.doc)({ heading: 'Layers', subheading: 'Classes', namespace: 'layers' })], Layer);
    return Layer;
}(_tfjsCore.serialization.Serializable);
exports.Layer = Layer;

function collectInputShape(inputTensors) {
    inputTensors = generic_utils.toList(inputTensors);
    var shapes = [];
    for (var _i = 0, inputTensors_1 = inputTensors; _i < inputTensors_1.length; _i++) {
        var x = inputTensors_1[_i];
        shapes.push(K.intShape(x));
    }
    return generic_utils.singletonOrArray(shapes);
}
function guessOutputDType(inputTensors) {
    return 'float32';
}
var InputLayer = function (_super) {
    __extends(InputLayer, _super);
    function InputLayer(config) {
        var _this = _super.call(this, {
            dtype: config.dtype,
            name: config.name != null ? config.name : K.getUid('input').toString()
        }) || this;
        if (config.batchSize == null) {
            config.batchSize = null;
        }
        if (config.sparse == null) {
            config.sparse = false;
        }
        _this.trainable = false;
        _this.built = true;
        _this.sparse = config.sparse;
        if (config.inputShape != null && config.batchInputShape != null) {
            throw new _errors.ValueError('Only provide the inputShape OR ' + 'batchInputShape argument to inputLayer, not both at the same time.');
        }
        var batchInputShape = config.batchInputShape;
        if (batchInputShape == null) {
            if (config.inputShape == null) {
                throw new _errors.ValueError('An InputLayer should be passed either a ' + '`batchInputShape` or an `inputShape`.');
            } else {
                batchInputShape = [config.batchSize].concat(config.inputShape);
            }
        } else {
            if (config.batchSize != null) {
                throw new _errors.ValueError('Cannot specify batchSize if batchInputShape is' + 'specified when creating an InputLayer.');
            }
        }
        var dtype = config.dtype || K.floatx();
        _this.batchInputShape = batchInputShape;
        _this.dtype = dtype;
        _this.inputSpec = [{ shape: batchInputShape }];
        var inputTensor = new _types.SymbolicTensor(_this.dtype, _this.batchInputShape, _this, [], {}, _this.name);
        inputTensor.nodeIndex = 0;
        inputTensor.tensorIndex = 0;
        new Node({
            outboundLayer: _this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: [inputTensor],
            outputTensors: [inputTensor],
            inputMasks: [null],
            outputMasks: [null],
            inputShapes: [batchInputShape],
            outputShapes: [batchInputShape]
        });
        return _this;
    }
    InputLayer.prototype.apply = function (inputs, kwargs) {
        throw new _errors.ValueError('Cannot pass any input to an ' + ("InputLayer's apply() method. InputLayer name: " + this.name));
    };
    InputLayer.prototype.getConfig = function () {
        return {
            batchInputShape: this.batchInputShape,
            dtype: this.dtype,
            sparse: this.sparse,
            name: this.name
        };
    };
    InputLayer.className = 'InputLayer';
    return InputLayer;
}(Layer);
exports.InputLayer = InputLayer;

_tfjsCore.serialization.SerializationMap.register(InputLayer);
function Input(config) {
    if (config.batchShape == null && config.shape == null) {
        throw new Error('Please provide to Input either a `shape`' + ' or a `batchShape` argument. Note that ' + '`shape` does not include the batch ' + 'dimension.');
    }
    if (config.batchShape != null && config.shape != null) {
        throw new _errors.ValueError('Please provide either a `shape` or `batchShape` ' + 'argument to Input, but not both.');
    }
    var batchShape = config.batchShape;
    if (config.shape != null && batchShape == null) {
        batchShape = [null].concat(config.shape);
    }
    var dtype = config.dtype;
    if (dtype == null) {
        dtype = K.floatx();
    }
    var inputLayer = new InputLayer({
        batchInputShape: batchShape,
        name: config.name,
        dtype: dtype,
        sparse: config.sparse
    });
    var outputs = inputLayer.inboundNodes[0].outputTensors;
    return outputs[0];
}
var Container = function (_super) {
    __extends(Container, _super);
    function Container(config) {
        var _this = _super.call(this, {}) || this;
        _this.containerNodes = new Set();
        _this.name = config.name;
        if (_this.name == null) {
            var prefix = _this.getClassName().toLowerCase();
            _this.name = K.getUid(prefix);
        }
        _this.supportsMasking = false;
        _this.trainable = true;
        _this.updatable = true;
        if (Array.isArray(config.inputs)) {
            _this.inputs = config.inputs.slice();
        } else {
            _this.inputs = [config.inputs];
        }
        if (Array.isArray(config.outputs)) {
            _this.outputs = config.outputs.slice();
        } else {
            _this.outputs = [config.outputs];
        }
        if (generic_utils.unique(_this.inputs).length !== _this.inputs.length) {
            throw new _errors.ValueError('The list of inputs passed to the model is ' + 'redundant. All inputs should only appear once. Found: ' + _this.inputs.map(function (x) {
                return x.name;
            }));
        }
        if (generic_utils.unique(_this.outputs).length !== _this.outputs.length) {
            console.warn('The list of outputs passed to the model is redundant. ' + 'All outputs should only appear once. Found: ' + _this.outputs.map(function (x) {
                return x.name;
            }));
        }
        _this.inputLayers = [];
        _this.inputLayersNodeIndices = [];
        _this.inputLayersTensorIndices = [];
        _this.outputLayers = [];
        _this.outputLayersNodeIndices = [];
        _this.outputLayersTensorIndices = [];
        _this.layers = [];
        for (var _i = 0, _a = _this.outputs; _i < _a.length; _i++) {
            var x = _a[_i];
            var layer = x.sourceLayer;
            var nodeIndex = x.nodeIndex;
            var tensorIndex = x.tensorIndex;
            _this.outputLayers.push(layer);
            _this.outputLayersNodeIndices.push(nodeIndex);
            _this.outputLayersTensorIndices.push(tensorIndex);
        }
        for (var _b = 0, _c = _this.inputs; _b < _c.length; _b++) {
            var x = _c[_b];
            var layer = x.sourceLayer;
            var nodeIndex = x.nodeIndex;
            var tensorIndex = x.tensorIndex;
            generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');
            generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');
            _this.inputLayers.push(layer);
            _this.inputLayersNodeIndices.push(nodeIndex);
            _this.inputLayersTensorIndices.push(tensorIndex);
        }
        _this.inputNames = [];
        _this.outputNames = [];
        _this.feedInputShapes = [];
        _this.feedInputNames = [];
        _this.feedOutputNames = [];
        for (var i = 0; i < _this.inputLayers.length; i++) {
            var layer = _this.inputLayers[i];
            if (!(layer instanceof InputLayer)) {
                throw new TypeError('Input layers to a Model must be InputLayer objects. ' + ("Received inputs: " + config.inputs + ". ") + ("Input " + i + " (0-based) originates ") + ("from layer type " + layer.getClassName() + "."));
            }
            _this.inputNames.push(layer.name);
            _this.feedInputShapes.push(layer.batchInputShape);
            _this.feedInputNames.push(layer.name);
        }
        for (var _d = 0, _e = _this.outputLayers; _d < _e.length; _d++) {
            var layer = _e[_d];
            _this.outputNames.push(layer.name);
        }
        _this.internalInputShapes = _this.inputs.map(function (x) {
            return x.shape;
        });
        _this.internalOutputShapes = _this.outputs.map(function (x) {
            return x.shape;
        });
        var nodesDepths = {};
        var nodeIDToNode = {};
        var layersDepths = {};
        var layerIDToLayer = {};
        var layerIndices = {};
        var nodesInDecreasingDepth = [];
        var buildMapOfGraph = function (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) {
            if (layer == null || nodeIndex == null || tensorIndex == null) {
                layer = tensor.sourceLayer;
                nodeIndex = tensor.nodeIndex;
                tensorIndex = tensor.tensorIndex;
            }
            var node = layer.inboundNodes[nodeIndex];
            if (nodesInProgress.indexOf(node) !== -1) {
                throw new _errors.RuntimeError("The tensor " + tensor.name + " at layer \"" + layer.name + "\" " + 'is part of a cycle.');
            }
            if (finishedNodes.indexOf(node) !== -1) {
                return;
            }
            _this.containerNodes.add(Container.nodeKey(layer, nodeIndex));
            if (!(layer.id in layerIndices)) {
                layerIndices[layer.id] = Object.keys(layerIndices).length;
            }
            if (nodesInProgress.indexOf(node) === -1) {
                nodesInProgress.push(node);
            }
            var numInboundLayers = node.inboundLayers.length;
            for (var i = 0; i < numInboundLayers; i++) {
                var x = node.inputTensors[i];
                var layer_1 = node.inboundLayers[i];
                var nodeIndex_1 = node.nodeIndices[i];
                var tensorIndex_1 = node.tensorIndices[i];
                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer_1, nodeIndex_1, tensorIndex_1);
            }
            finishedNodes.push(node);
            while (nodesInProgress.indexOf(node) >= 0) {
                nodesInProgress.splice(nodesInProgress.indexOf(node), 1);
            }
            nodesInDecreasingDepth.push(node);
        };
        var finishedNodes = [];
        var nodesInProgress = [];
        for (var _f = 0, _g = _this.outputs; _f < _g.length; _f++) {
            var x = _g[_f];
            buildMapOfGraph(x, finishedNodes, nodesInProgress);
        }
        var reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();
        for (var _h = 0, reversedNodesInDecreasingDepth_1 = reversedNodesInDecreasingDepth; _h < reversedNodesInDecreasingDepth_1.length; _h++) {
            var node = reversedNodesInDecreasingDepth_1[_h];
            nodeIDToNode[node.id] = node;
            if (!(node.id in nodesDepths)) {
                nodesDepths[node.id] = 0;
            }
            var depth = nodesDepths[node.id];
            var previousDepth = layersDepths[node.outboundLayer.id] == null ? 0 : layersDepths[node.outboundLayer.id];
            depth = Math.max(depth, previousDepth);
            layersDepths[node.outboundLayer.id] = depth;
            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;
            nodesDepths[node.id] = depth;
            for (var i = 0; i < node.inboundLayers.length; i++) {
                var inboundLayer = node.inboundLayers[i];
                var nodeIndex = node.nodeIndices[i];
                var inboundNode = inboundLayer.inboundNodes[nodeIndex];
                var previousDepth_1 = nodesDepths[inboundNode.id] == null ? 0 : nodesDepths[inboundNode.id];
                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth_1);
                nodeIDToNode[inboundNode.id] = inboundNode;
            }
        }
        var nodesByDepth = {};
        for (var nodeID in nodesDepths) {
            var depth = nodesDepths[nodeID];
            if (!(depth in nodesByDepth)) {
                nodesByDepth[depth] = [];
            }
            nodesByDepth[depth].push(nodeIDToNode[nodeID]);
        }
        var layersByDepth = {};
        for (var layerID in layersDepths) {
            var depth = layersDepths[layerID];
            if (!(depth in layersByDepth)) {
                layersByDepth[depth] = [];
            }
            layersByDepth[depth].push(layerIDToLayer[layerID]);
        }
        var depthKeys = Object.keys(layersByDepth).map(function (x) {
            return parseInt(x, 10);
        }).sort(generic_utils.reverseNumberCompare);
        _this.layers = [];
        for (var _j = 0, depthKeys_1 = depthKeys; _j < depthKeys_1.length; _j++) {
            var depth = depthKeys_1[_j];
            var layersForDepth = layersByDepth[depth];
            layersForDepth.sort(function (a, b) {
                var aIndex = layerIndices[a.id];
                var bIndex = layerIndices[b.id];
                if (aIndex < bIndex) {
                    return -1;
                }
                if (aIndex > bIndex) {
                    return 1;
                }
                return 0;
            });
            for (var _k = 0, layersForDepth_1 = layersForDepth; _k < layersForDepth_1.length; _k++) {
                var layer = layersForDepth_1[_k];
                _this.layers.push(layer);
            }
        }
        _this.layersByDepth = layersByDepth;
        depthKeys = Object.keys(nodesByDepth).map(function (x) {
            return parseInt(x, 10);
        }).sort(generic_utils.reverseNumberCompare);
        var computableTensors = _this.inputs.slice();
        var layersWithCompleteInput = [];
        for (var _l = 0, depthKeys_2 = depthKeys; _l < depthKeys_2.length; _l++) {
            var depth = depthKeys_2[_l];
            for (var _m = 0, _o = nodesByDepth[depth]; _m < _o.length; _m++) {
                var node = _o[_m];
                var layer = node.outboundLayer;
                if (layer != null) {
                    for (var _p = 0, _q = node.inputTensors; _p < _q.length; _p++) {
                        var x = _q[_p];
                        if (computableTensors.indexOf(x) === -1) {
                            throw new _errors.RuntimeError("Graph disconnected: cannot obtain value for tensor " + x + (" at layer \"" + layer.name + "\". ") + 'The following previous layers were accessed without ' + ("issue: " + layersWithCompleteInput));
                        }
                    }
                    for (var _r = 0, _s = node.outputTensors; _r < _s.length; _r++) {
                        var x = _s[_r];
                        computableTensors.push(x);
                    }
                    layersWithCompleteInput.push(layer.name);
                }
            }
        }
        _this.nodesByDepth = nodesByDepth;
        var allNames = _this.layers.map(function (x) {
            return x.name;
        });
        var _loop_1 = function (name_1) {
            var numOccurrences = allNames.filter(function (x) {
                return x === name_1;
            }).length;
            if (numOccurrences !== 1) {
                throw new _errors.RuntimeError("The name \"" + name_1 + "\" is used " + numOccurrences + " times " + 'in the model. All layer names should be unique. Layer names: ' + JSON.stringify(allNames));
            }
        };
        for (var _t = 0, allNames_1 = allNames; _t < allNames_1.length; _t++) {
            var name_1 = allNames_1[_t];
            _loop_1(name_1);
        }
        _this.outboundNodes = [];
        _this.inboundNodes = [];
        new Node({
            outboundLayer: _this,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: _this.inputs,
            outputTensors: _this.outputs,
            inputMasks: _this.inputs.map(function (x) {
                return null;
            }),
            outputMasks: _this.outputs.map(function (x) {
                return null;
            }),
            inputShapes: _this.inputs.map(function (x) {
                return x.shape;
            }),
            outputShapes: _this.outputs.map(function (x) {
                return x.shape;
            })
        });
        _this.built = true;
        return _this;
    }
    Object.defineProperty(Container.prototype, "trainableWeights", {
        get: function () {
            if (this._trainableWeights.length > 0) {
                throw new _errors.ValueError('Container instance unexpectedly contains _trainableWeights.' + 'The trainable weights of a Container are a union of the ' + 'trainable weights of its consituent Layers. Its own ' + '_trainableWeights must remain an empty Array.');
            }
            if (!this.trainable) {
                return [];
            }
            var weights = [];
            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                weights = weights.concat(layer.trainableWeights);
            }
            return weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "nonTrainableWeights", {
        get: function () {
            var weights = [];
            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                weights.push.apply(weights, layer.nonTrainableWeights);
            }
            if (!this.trainable) {
                var trainableWeights = [];
                for (var _b = 0, _c = this.layers; _b < _c.length; _b++) {
                    var layer = _c[_b];
                    trainableWeights.push.apply(trainableWeights, layer.trainableWeights);
                }
                return trainableWeights.concat(weights);
            }
            return weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "weights", {
        get: function () {
            return this.trainableWeights.concat(this.nonTrainableWeights);
        },
        enumerable: true,
        configurable: true
    });
    Container.prototype.loadWeights = function (weightsJSON, skipMismatch, isNamedTensorMap) {
        if (skipMismatch === void 0) {
            skipMismatch = false;
        }
        if (isNamedTensorMap === void 0) {
            isNamedTensorMap = false;
        }
        if (isNamedTensorMap) {
            loadWeightsFromNamedTensorMap(weightsJSON, this.layers);
        } else {
            loadWeightsFromJson(weightsJSON, this.layers, skipMismatch);
        }
    };
    Container.prototype.updatedConfig = function () {
        var theConfig = this.getConfig();
        var modelConfig = {
            className: this.getClassName(),
            config: theConfig,
            kerasVersion: "tfjs-layers " + _version.version,
            backend: 'TensorFlow.js'
        };
        return modelConfig;
    };
    Container.prototype.toJSON = function (unused, returnString) {
        if (returnString === void 0) {
            returnString = true;
        }
        var modelConfig = (0, _serialization_utils.convertTsToPythonic)(this.updatedConfig());
        return returnString ? JSON.stringify(modelConfig) : modelConfig;
    };
    Container.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = generic_utils.toList(inputs);
            var masks;
            if ('mask' in kwargs) {
                masks = generic_utils.toList(kwargs['mask']);
            } else {
                masks = generic_utils.pyListRepeat(null, inputs.length);
            }
            return _this.runInternalGraph(inputs, masks)[0];
        });
    };
    Container.prototype.computeMask = function (inputs, mask) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = generic_utils.toList(inputs);
            var masks;
            if (mask == null) {
                masks = generic_utils.pyListRepeat(null, inputs.length);
            } else {
                masks = generic_utils.toList(mask);
            }
            return _this.runInternalGraph(inputs, masks)[1];
        });
    };
    Container.prototype.computeOutputShape = function (inputShape) {
        var inputShapes = generic_utils.normalizeShapeList(inputShape);
        if (inputShapes.length !== this.inputLayers.length) {
            throw new _errors.ValueError("Invalid inputShape argument " + inputShape + ": " + ("model has " + this.inputLayers.length + " tensor inputs."));
        }
        var layersToOutputShapes = {};
        for (var i = 0; i < inputShapes.length; i++) {
            var layer = this.inputLayers[i];
            var inputShape_1 = inputShapes[i];
            var shapeKey = layer.name + '_0_0';
            layersToOutputShapes[shapeKey] = inputShape_1;
        }
        var depthKeys = Object.keys(this.nodesByDepth).map(function (x) {
            return parseInt(x, 10);
        }).sort(generic_utils.reverseNumberCompare);
        if (depthKeys.length > 1) {
            for (var _i = 0, depthKeys_3 = depthKeys; _i < depthKeys_3.length; _i++) {
                var depth = depthKeys_3[_i];
                var nodes = this.nodesByDepth[depth];
                for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {
                    var node = nodes_1[_a];
                    var layer = node.outboundLayer;
                    if (this.inputLayers.map(function (x) {
                        return x.id;
                    }).indexOf(layer.id) !== -1) {
                        continue;
                    }
                    var inputShapes_1 = [];
                    for (var j = 0; j < node.inboundLayers.length; j++) {
                        var inboundLayer = node.inboundLayers[j];
                        var nodeIndex_2 = node.nodeIndices[j];
                        var tensorIndex = node.tensorIndices[j];
                        var shapeKey = inboundLayer.name + "_" + nodeIndex_2 + "_" + tensorIndex;
                        var inputShape_2 = layersToOutputShapes[shapeKey];
                        inputShapes_1.push(inputShape_2);
                    }
                    var outputShape = layer.computeOutputShape(generic_utils.singletonOrArray(inputShapes_1));
                    var outputShapes_1 = generic_utils.normalizeShapeList(outputShape);
                    var nodeIndex = layer.inboundNodes.indexOf(node);
                    for (var j = 0; j < outputShapes_1.length; j++) {
                        var shapeKey = layer.name + "_" + nodeIndex + "_" + j;
                        layersToOutputShapes[shapeKey] = outputShapes_1[j];
                    }
                }
            }
        }
        var outputShapes = [];
        var outputShapeKeys = [];
        for (var i = 0; i < this.outputLayers.length; i++) {
            var layer = this.outputLayers[i];
            var nodeIndex = this.outputLayersNodeIndices[i];
            var tensorIndex = this.outputLayersTensorIndices[i];
            var shapeKey = layer.name + "_" + nodeIndex + "_" + tensorIndex;
            outputShapeKeys.push(shapeKey);
        }
        for (var i = 0; i < outputShapeKeys.length; i++) {
            var key = outputShapeKeys[i];
            generic_utils.assert(key in layersToOutputShapes);
            outputShapes.push(layersToOutputShapes[key]);
        }
        return generic_utils.singletonOrArray(outputShapes);
    };
    Container.prototype.runInternalGraph = function (inputs, masks) {
        if (masks == null) {
            masks = generic_utils.pyListRepeat(null, inputs.length);
        }
        var tensorMap = {};
        for (var i = 0; i < this.inputs.length; ++i) {
            var x = this.inputs[i];
            var y = inputs[i];
            var mask = masks[i];
            tensorMap[x.id] = [y, mask];
        }
        var depthKeys = Object.keys(this.nodesByDepth).map(function (x) {
            return parseInt(x, 10);
        }).sort(generic_utils.reverseNumberCompare);
        for (var _i = 0, depthKeys_4 = depthKeys; _i < depthKeys_4.length; _i++) {
            var depth = depthKeys_4[_i];
            var nodes = this.nodesByDepth[depth];
            for (var _a = 0, nodes_2 = nodes; _a < nodes_2.length; _a++) {
                var node = nodes_2[_a];
                var layer = node.outboundLayer;
                var referenceInputTensors = node.inputTensors;
                var referenceOutputTensors = node.outputTensors;
                var computedData = new Array();
                for (var _b = 0, referenceInputTensors_1 = referenceInputTensors; _b < referenceInputTensors_1.length; _b++) {
                    var x = referenceInputTensors_1[_b];
                    if (x.id in tensorMap) {
                        computedData.push(tensorMap[x.id]);
                    }
                }
                if (computedData.length === referenceInputTensors.length) {
                    var kwargs = {};
                    var computedTensors = void 0;
                    var computedMasks = void 0;
                    var outputTensors_1 = void 0;
                    var outputMasks_1 = void 0;
                    if (node.callArgs != null) {
                        kwargs = node.callArgs;
                    }
                    if (computedData.length === 1) {
                        var _c = computedData[0],
                            computedTensor = _c[0],
                            computedMask = _c[1];
                        if (kwargs.mask == null) {
                            kwargs['mask'] = computedMask;
                        }
                        outputTensors_1 = generic_utils.toList(layer.call(computedTensor, kwargs));
                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensor, computedMask));
                        computedTensors = [computedTensor];
                        computedMasks = [computedMask];
                    } else {
                        computedTensors = computedData.map(function (x) {
                            return x[0];
                        });
                        computedMasks = computedData.map(function (x) {
                            return x[1];
                        });
                        if (kwargs.mask == null) {
                            kwargs['mask'] = computedMasks;
                        }
                        outputTensors_1 = generic_utils.toList(layer.call(computedTensors, kwargs));
                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensors, computedMasks));
                    }
                    if (layer.activityRegularizer) {
                        throw new _errors.NotImplementedError('Model invocation with concrete Tensor value(s) in the ' + 'presence of activity regularizer(s) is not supported yet.');
                    }
                    for (var i = 0; i < referenceOutputTensors.length; ++i) {
                        var x = referenceOutputTensors[i];
                        var y = outputTensors_1[i];
                        var mask = outputMasks_1[i];
                        tensorMap[x.id] = [y, mask];
                    }
                }
            }
        }
        var outputTensors = [];
        var outputMasks = [];
        var outputShapes = [];
        for (var _d = 0, _e = this.outputs; _d < _e.length; _d++) {
            var x = _e[_d];
            generic_utils.assert(x.id in tensorMap, "Could not compute output " + x.name + " : " + x.id);
            var _f = tensorMap[x.id],
                tensor = _f[0],
                mask = _f[1];
            outputShapes.push(tensor.shape);
            outputTensors.push(tensor);
            outputMasks.push(mask);
        }
        return [outputTensors, outputMasks, outputShapes];
    };
    Container.prototype.buildNodeConversionMap = function (layers) {
        var nodeConversionMap = {};
        var keptNodes;
        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
            var layer = _a[_i];
            keptNodes = layer instanceof Container ? 1 : 0;
            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {
                var nodeKey = Container.nodeKey(layer, originalNodeIndex);
                if (nodeKey in this.containerNodes) {
                    nodeConversionMap[nodeKey] = keptNodes;
                    keptNodes += 1;
                }
            }
        }
        return nodeConversionMap;
    };
    Container.prototype.getLayer = function (name, index) {
        if (index != null) {
            if (this.layers.length <= index) {
                throw new _errors.ValueError("Was asked to retrieve layer at index " + index + ", but model only " + ("has " + this.layers.length + " layer(s)."));
            } else {
                return this.layers[index];
            }
        } else {
            if (name == null) {
                throw new _errors.ValueError('Provide either a layer name or layer index');
            }
        }
        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
            var layer = _a[_i];
            if (layer.name === name) {
                return layer;
            }
        }
        throw new _errors.ValueError("No such layer: " + name);
    };
    Container.prototype.calculateLosses = function () {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var losses = [];
            for (var _i = 0, _a = _this.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                for (var nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {
                    var nodeKey = Container.nodeKey(layer, nodeIndex);
                    if (_this.containerNodes.has(nodeKey)) {
                        losses.push.apply(losses, layer.calculateLosses());
                    }
                }
            }
            return losses;
        });
    };
    Container.prototype.getConfig = function () {
        var config = { name: this.name };
        var nodeConversionMap = this.buildNodeConversionMap(this.layers);
        var layerConfigs = [];
        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
            var layer = _a[_i];
            var layerClassName = layer.getClassName();
            var layerConfig = layer.getConfig();
            var filteredInboundNodes = [];
            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {
                var node = layer.inboundNodes[originalNodeIndex];
                var nodeKey = Container.nodeKey(layer, originalNodeIndex);
                var kwargs = {};
                if (this.containerNodes.has(nodeKey)) {
                    if (node.callArgs) {
                        var testString = JSON.stringify(node.callArgs);
                        if (testString.indexOf('undefined') === -1) {
                            kwargs = node.callArgs;
                        } else {
                            console.warn("Layer " + layer.name + " was passed " + "non-serializable keyword arguments: " + (node.callArgs + ". They will not be included ") + "in the serialized model (and thus will be " + "missing at deserialization time).");
                            kwargs = {};
                        }
                    }
                    if (node.inboundLayers.length > 0) {
                        var nodeData = [];
                        for (var i = 0; i < node.inboundLayers.length; i++) {
                            var inboundLayer = node.inboundLayers[i];
                            var nodeIndex = node.nodeIndices[i];
                            var tensorIndex = node.tensorIndices[i];
                            var nodeKey_1 = Container.nodeKey(inboundLayer, nodeIndex);
                            var newNodeIndex = nodeConversionMap[nodeKey_1];
                            if (newNodeIndex === null || newNodeIndex === undefined) {
                                newNodeIndex = 0;
                            }
                            nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);
                        }
                        filteredInboundNodes.push(nodeData);
                    }
                }
            }
            layerConfigs.push({
                name: layer.name,
                className: layerClassName,
                config: layerConfig,
                inboundNodes: filteredInboundNodes
            });
        }
        config['layers'] = layerConfigs;
        var modelInputs = [];
        for (var i = 0; i < this.inputLayers.length; i++) {
            var layer = this.inputLayers[i];
            var nodeIndex = this.inputLayersNodeIndices[i];
            var nodeKey = Container.nodeKey(layer, nodeIndex);
            if (!this.containerNodes.has(nodeKey)) {
                continue;
            }
            var newNodeIndex = nodeConversionMap[nodeKey];
            if (newNodeIndex === null || newNodeIndex === undefined) {
                newNodeIndex = 0;
            }
            var tensorIndex = this.inputLayersTensorIndices[i];
            modelInputs.push([layer.name, newNodeIndex, tensorIndex]);
        }
        config['inputLayers'] = modelInputs;
        var modelOutputs = [];
        for (var i = 0; i < this.outputLayers.length; i++) {
            var layer = this.outputLayers[i];
            var nodeIndex = this.outputLayersNodeIndices[i];
            var nodeKey = Container.nodeKey(layer, nodeIndex);
            if (!this.containerNodes.has(nodeKey)) {
                continue;
            }
            var newNodeIndex = nodeConversionMap[nodeKey];
            if (newNodeIndex === null || newNodeIndex === undefined) {
                newNodeIndex = 0;
            }
            var tensorIndex = this.outputLayersTensorIndices[i];
            modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);
        }
        config['outputLayers'] = modelOutputs;
        return config;
    };
    Container.fromConfig = function (cls, config) {
        var createdLayers = {};
        var unprocessedNodes = {};
        function addUnprocessedNode(layer, nodeData) {
            if (!(layer.name in unprocessedNodes)) {
                unprocessedNodes[layer.name] = [nodeData];
            } else {
                unprocessedNodes[layer.name].push(nodeData);
            }
        }
        function processNode(layer, nodeData) {
            var inputTensors = [];
            var kwargs;
            for (var _i = 0, nodeData_1 = nodeData; _i < nodeData_1.length; _i++) {
                var inputData = nodeData_1[_i];
                var inboundLayerName = inputData[0];
                var inboundNodeIndex = inputData[1];
                var inboundTensorIndex = inputData[2];
                if (inputData.length === 3) {
                    kwargs = {};
                } else if (inputData.length === 4) {
                    kwargs = inputData[3];
                } else {
                    throw new _errors.ValueError("Improperly formatted model config for layer " + JSON.stringify(layer) + ": " + JSON.stringify(inputData));
                }
                if (!(inboundLayerName in createdLayers)) {
                    addUnprocessedNode(layer, nodeData);
                    return;
                }
                var inboundLayer = createdLayers[inboundLayerName];
                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {
                    addUnprocessedNode(layer, nodeData);
                    return;
                }
                var inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];
                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);
            }
            if (inputTensors.length > 0) {
                layer.apply(generic_utils.singletonOrArray(inputTensors), kwargs);
            }
        }
        function processLayer(layerData) {
            var layerName = layerData.name;
            var layer = (0, _serialization.deserialize)(layerData, config.customObjects != null ? config.customObjects : {});
            createdLayers[layerName] = layer;
            var inboundNodesData = layerData.inboundNodes;
            for (var _i = 0, inboundNodesData_1 = inboundNodesData; _i < inboundNodesData_1.length; _i++) {
                var nodeData = inboundNodesData_1[_i];
                if (!(nodeData instanceof Array)) {
                    throw new _errors.ValueError("Corrupted configuration, expected array for nodeData: " + nodeData);
                }
                addUnprocessedNode(layer, nodeData);
            }
        }
        var name = config.name;
        var layersFromConfig = config.layers;
        for (var _i = 0, layersFromConfig_1 = layersFromConfig; _i < layersFromConfig_1.length; _i++) {
            var layerData = layersFromConfig_1[_i];
            processLayer(layerData);
        }
        while (!generic_utils.isObjectEmpty(unprocessedNodes)) {
            for (var _a = 0, layersFromConfig_2 = layersFromConfig; _a < layersFromConfig_2.length; _a++) {
                var layerData = layersFromConfig_2[_a];
                var layer = createdLayers[layerData.name];
                if (layer.name in unprocessedNodes) {
                    for (var _b = 0, _c = unprocessedNodes[layer.name]; _b < _c.length; _b++) {
                        var nodeData = _c[_b];
                        processNode(layer, nodeData);
                    }
                    delete unprocessedNodes[layer.name];
                }
            }
        }
        var inputTensors = [];
        var outputTensors = [];
        var inputLayersFromConfig = config.inputLayers;
        for (var _d = 0, inputLayersFromConfig_1 = inputLayersFromConfig; _d < inputLayersFromConfig_1.length; _d++) {
            var layerData = inputLayersFromConfig_1[_d];
            var layerName = layerData[0];
            var nodeIndex = layerData[1];
            var tensorIndex = layerData[2];
            generic_utils.assert(layerName in createdLayers);
            var layer = createdLayers[layerName];
            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;
            inputTensors.push(layerOutputTensors[tensorIndex]);
        }
        var outputLayersFromConfig = config.outputLayers;
        for (var _e = 0, outputLayersFromConfig_1 = outputLayersFromConfig; _e < outputLayersFromConfig_1.length; _e++) {
            var layerData = outputLayersFromConfig_1[_e];
            var layerName = layerData[0];
            var nodeIndex = layerData[1];
            var tensorIndex = layerData[2];
            generic_utils.assert(layerName in createdLayers);
            var layer = createdLayers[layerName];
            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;
            outputTensors.push(layerOutputTensors[tensorIndex]);
        }
        return new cls({ inputs: inputTensors, outputs: outputTensors, name: name });
    };
    Object.defineProperty(Container.prototype, "stateful", {
        get: function () {
            if (this._stateful) {
                throw new _errors.ValueError('Container instance unexpectedly has _stateful = true. The ' + 'statefulness of a Container is determined by the Layers it ' + 'contains. Its _stateful property must remain the default false.');
            }
            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                if (layer.stateful) {
                    return true;
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Classes',
        namespace: 'layers',
        subclasses: ['Model']
    })], Container.prototype, "getLayer", null);
    return Container;
}(Layer);
exports.Container = Container;
function getSourceInputs(tensor, layer, nodeIndex) {
    if (layer == null || nodeIndex != null && nodeIndex > 0) {
        layer = tensor.sourceLayer;
        nodeIndex = tensor.nodeIndex;
    }
    if (layer.inboundNodes.length === 0) {
        return [tensor];
    } else {
        var node = layer.inboundNodes[nodeIndex];
        if (node.inboundLayers.length === 0) {
            return node.inputTensors;
        } else {
            var sourceTensors = [];
            for (var i = 0; i < node.inboundLayers.length; i++) {
                var x = node.inputTensors[i];
                var layer_2 = node.inboundLayers[i];
                var nodeIndex_3 = node.nodeIndices[i];
                var previousSources = getSourceInputs(x, layer_2, nodeIndex_3);
                for (var _i = 0, previousSources_1 = previousSources; _i < previousSources_1.length; _i++) {
                    var x_1 = previousSources_1[_i];
                    if (sourceTensors.indexOf(x_1) === -1) {
                        sourceTensors.push(x_1);
                    }
                }
            }
            return sourceTensors;
        }
    }
}
function loadTensor(dtype, shape, value) {
    var dataType = generic_utils.stringToDType(dtype);
    return _tfjsCore.Tensor.make(shape, { values: shape.length === 0 ? value : _tfjsCore.util.flatten(value) }, dataType);
}
function preprocessWeightsForLoading(layer, weights, originalKerasVersion, originalBackend) {
    if (!originalKerasVersion.startsWith('2.')) {
        throw new _errors.ValueError('Unsupported Keras version in weights being loaded: ' + originalKerasVersion);
    }
    return weights;
}
function loadWeightsFromNamedTensorMap(weights, layers) {
    var nameToWeight = {};
    var totalWeightsCount = 0;
    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {
        var layer = layers_1[_i];
        for (var _a = 0, _b = layer.weights; _a < _b.length; _a++) {
            var weight = _b[_a];
            if (nameToWeight[weight.originalName] != null) {
                throw new _errors.ValueError("Duplicate weight name: " + weight.originalName);
            }
            nameToWeight[weight.originalName] = weight;
            totalWeightsCount++;
        }
    }
    var weightValueTuples = [];
    for (var name_2 in weights) {
        weightValueTuples.push([nameToWeight[name_2], weights[name_2]]);
        delete nameToWeight[name_2];
    }
    var unsetNames = [];
    for (var name_3 in nameToWeight) {
        unsetNames.push(name_3);
    }
    if (unsetNames.length > 0) {
        throw new _errors.ValueError(unsetNames.length + " of " + totalWeightsCount + " weights are not set: " + ("" + unsetNames));
    }
    (0, _variables.batchSetValue)(weightValueTuples);
}
function loadWeightsFromJson(weightsJSON, layers, skipMismatch) {
    if (skipMismatch === void 0) {
        skipMismatch = false;
    }
    var originalKerasVersion = weightsJSON['keras_version'];
    var originalBackend = weightsJSON['backend'];
    var layerNames = layers.map(function (layer) {
        return layer.name;
    });
    var index = {};
    for (var _i = 0, layers_2 = layers; _i < layers_2.length; _i++) {
        var layer = layers_2[_i];
        if (layer.name != null) {
            if (index[layer.name] == null) {
                index[layer.name] = [];
            }
            index[layer.name].push(layer);
        }
    }
    var nameToWeights = weightsJSON['weights'];
    var weightValueTuples = [];
    for (var k = 0; k < layerNames.length; ++k) {
        var name_4 = layerNames[k];
        var layerWeights = nameToWeights[name_4];
        if (layerWeights == null) {
            layerWeights = [];
        }
        var weightValues = [];
        for (var n = 0; n < layerWeights.length; ++n) {
            var weightEntry = layerWeights[n];
            weightValues.push(new _variables.LayerVariable(loadTensor(weightEntry['dtype'], weightEntry['shape'], weightEntry['value'])));
        }
        for (var _a = 0, _b = index[name_4]; _a < _b.length; _a++) {
            var layer = _b[_a];
            var symbolicWeights = layer.weights;
            weightValues = preprocessWeightsForLoading(layer, weightValues, originalKerasVersion, originalBackend);
            if (weightValues.length !== symbolicWeights.length) {
                if (skipMismatch) {
                    console.warn("Skipping loading of weights of layer " + layer.name + " " + ("due to mismatch in number of weights: (" + weightValues.length + " ") + ("vs " + symbolicWeights.length + ")."));
                } else {
                    throw new _errors.ValueError("Layer #" + k + " (named \"" + layer.name + "\") expects " + (symbolicWeights.length + " weight(s), but the saved weights ") + ("have " + weightValues.length + " element(s)."));
                }
            }
            for (var i = 0; i < weightValues.length; ++i) {
                if (skipMismatch) {
                    if (!_tfjsCore.util.arraysEqual(symbolicWeights[i].shape, weightValues[i].shape)) {
                        console.warn("Skipping loading of weights for layer " + layer.name + " due " + ("to mismatch in shape (" + symbolicWeights[i].shape + " vs ") + (weightValues[i].shape + ")"));
                        continue;
                    }
                }
                weightValueTuples.push([symbolicWeights[i], weightValues[i].read()]);
            }
        }
    }
    (0, _variables.batchSetValue)(weightValueTuples);
}
//# sourceMappingURL=topology.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/tfjs_backend":"yoLG","../errors":"WwMz","../layers/serialization":"QEAU","../types":"qCW+","../utils/generic_utils":"Uv0q","../utils/serialization_utils":"EA1F","../variables":"uVg5","../version":"bg5G"}],"oY+c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CustomCallback = exports.History = exports.BaseLogger = exports.CallbackList = exports.Callback = undefined;
exports.resolveScalarsInLogs = resolveScalarsInLogs;
exports.disposeTensorsInLogs = disposeTensorsInLogs;
exports.standardizeCallbacks = standardizeCallbacks;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tfjs_backend = require("./backend/tfjs_backend");

var K = _interopRequireWildcard(_tfjs_backend);

var _generic_utils = require("./utils/generic_utils");

var generic_utils = _interopRequireWildcard(_generic_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var Callback = function () {
    function Callback() {
        this.validationData = null;
        this.model = null;
    }
    Callback.prototype.setParams = function (params) {
        this.params = params;
    };
    Callback.prototype.setModel = function (model) {
        this.model = model;
    };
    Callback.prototype.onEpochBegin = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    Callback.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    Callback.prototype.onBatchBegin = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    Callback.prototype.onBatchEnd = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    Callback.prototype.onTrainBegin = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    Callback.prototype.onTrainEnd = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2];
            });
        });
    };
    return Callback;
}();
exports.Callback = Callback;

var CallbackList = function () {
    function CallbackList(callbacks, queueLength) {
        if (queueLength === void 0) {
            queueLength = 10;
        }
        if (callbacks == null) {
            callbacks = [];
        }
        this.callbacks = callbacks;
        this.queueLength = queueLength;
    }
    CallbackList.prototype.append = function (callback) {
        this.callbacks.push(callback);
    };
    CallbackList.prototype.setParams = function (params) {
        for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
            var callback = _a[_i];
            callback.setParams(params);
        }
    };
    CallbackList.prototype.setModel = function (model) {
        for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
            var callback = _a[_i];
            callback.setModel(model);
        }
    };
    CallbackList.prototype.onEpochBegin = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onEpochBegin(epoch, logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        return [2];
                }
            });
        });
    };
    CallbackList.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onEpochEnd(epoch, logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        return [2];
                }
            });
        });
    };
    CallbackList.prototype.onBatchBegin = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onBatchBegin(batch, logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        return [2];
                }
            });
        });
    };
    CallbackList.prototype.onBatchEnd = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onBatchEnd(batch, logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        return [2];
                }
            });
        });
    };
    CallbackList.prototype.onTrainBegin = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onTrainBegin(logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        return [2];
                }
            });
        });
    };
    CallbackList.prototype.onTrainEnd = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, callback;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (logs == null) {
                            logs = {};
                        }
                        _i = 0, _a = this.callbacks;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        callback = _a[_i];
                        return [4, callback.onTrainEnd(logs)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4:
                        return [2];
                }
            });
        });
    };
    return CallbackList;
}();
exports.CallbackList = CallbackList;

var BaseLogger = function (_super) {
    __extends(BaseLogger, _super);
    function BaseLogger() {
        return _super.call(this) || this;
    }
    BaseLogger.prototype.onEpochBegin = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.seen = 0;
                this.totals = {};
                return [2];
            });
        });
    };
    BaseLogger.prototype.onBatchEnd = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var batchSize, _loop_1, this_1, key;
            return __generator(this, function (_a) {
                if (logs == null) {
                    logs = {};
                }
                batchSize = logs['size'] == null ? 0 : logs['size'];
                this.seen += batchSize;
                _loop_1 = function (key) {
                    var value = logs[key];
                    if (typeof value === 'number') {
                        if (!this_1.totals.hasOwnProperty(key)) {
                            this_1.totals[key] = 0;
                        }
                        this_1.totals[key] = this_1.totals[key] + value * batchSize;
                    } else {
                        if (!this_1.totals.hasOwnProperty(key)) {
                            this_1.totals[key] = K.getScalar(0);
                        }
                        (0, _tfjsCore.tidy)(function () {
                            _this.totals[key] = K.scalarPlusArray(_this.totals[key], (0, _tfjsCore.mul)(value, K.getScalar(batchSize)));
                            (0, _tfjsCore.keep)(_this.totals[key]);
                        });
                    }
                };
                this_1 = this;
                for (key in logs) {
                    _loop_1(key);
                }
                return [2];
            });
        });
    };
    BaseLogger.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _loop_2, this_2, _i, _a, key;
            return __generator(this, function (_b) {
                if (logs != null) {
                    _loop_2 = function (key) {
                        if (this_2.totals[key] == null) {
                            return "continue";
                        }
                        if (typeof this_2.totals[key] === 'number') {
                            logs[key] = this_2.totals[key] / this_2.seen;
                        } else {
                            (0, _tfjsCore.tidy)(function () {
                                logs[key] = K.scalarTimesArray((0, _tfjsCore.div)(K.getScalar(1), K.getScalar(_this.seen)), _this.totals[key]);
                                _this.totals[key].dispose();
                                (0, _tfjsCore.keep)(logs[key]);
                            });
                        }
                    };
                    this_2 = this;
                    for (_i = 0, _a = this.params['metrics']; _i < _a.length; _i++) {
                        key = _a[_i];
                        _loop_2(key);
                    }
                }
                return [2];
            });
        });
    };
    return BaseLogger;
}(Callback);
exports.BaseLogger = BaseLogger;
function resolveScalarsInLogs(logs) {
    return __awaiter(this, void 0, void 0, function () {
        var promises, keys, key, value, valueScalar, values, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (logs == null) {
                        return [2];
                    }
                    promises = [];
                    keys = [];
                    for (key in logs) {
                        value = logs[key];
                        if (typeof value !== 'number') {
                            valueScalar = value;
                            promises.push(valueScalar.data());
                            keys.push(key);
                        }
                    }
                    return [4, Promise.all(promises)];
                case 1:
                    values = _a.sent();
                    for (i = 0; i < values.length; ++i) {
                        logs[keys[i]] = values[i][0];
                    }
                    return [2];
            }
        });
    });
}
function disposeTensorsInLogs(logs) {
    if (logs == null) {
        return;
    }
    for (var key in logs) {
        var value = logs[key];
        if (typeof value !== 'number') {
            value.dispose();
        }
    }
}
var History = function (_super) {
    __extends(History, _super);
    function History() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    History.prototype.onTrainBegin = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.epoch = [];
                this.history = {};
                return [2];
            });
        });
    };
    History.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                if (logs == null) {
                    logs = {};
                }
                this.epoch.push(epoch);
                for (key in logs) {
                    if (this.history[key] == null) {
                        this.history[key] = [];
                    }
                    this.history[key].push(logs[key]);
                }
                return [2];
            });
        });
    };
    History.prototype.syncData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var promises, keys, indices, key, valueArray, i, valueScalar, values, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = [];
                        keys = [];
                        indices = [];
                        for (key in this.history) {
                            valueArray = this.history[key];
                            for (i = 0; i < valueArray.length; ++i) {
                                if (typeof valueArray[i] !== 'number') {
                                    valueScalar = valueArray[i];
                                    promises.push(valueScalar.data());
                                    keys.push(key);
                                    indices.push(i);
                                }
                            }
                        }
                        return [4, Promise.all(promises)];
                    case 1:
                        values = _a.sent();
                        for (n = 0; n < values.length; ++n) {
                            this.history[keys[n]][indices[n]].dispose();
                            this.history[keys[n]][indices[n]] = values[n][0];
                        }
                        return [2];
                }
            });
        });
    };
    return History;
}(Callback);
exports.History = History;

var CustomCallback = function (_super) {
    __extends(CustomCallback, _super);
    function CustomCallback(config) {
        var _this = _super.call(this) || this;
        _this.trainBegin = config.onTrainBegin;
        _this.trainEnd = config.onTrainEnd;
        _this.epochBegin = config.onEpochBegin;
        _this.epochEnd = config.onEpochEnd;
        _this.batchBegin = config.onBatchBegin;
        _this.batchEnd = config.onBatchEnd;
        return _this;
    }
    CustomCallback.prototype.onEpochBegin = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.epochBegin != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.epochBegin(epoch, logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onEpochEnd = function (epoch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.epochEnd != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.epochEnd(epoch, logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onBatchBegin = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.batchBegin != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.batchBegin(batch, logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onBatchEnd = function (batch, logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.batchEnd != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.batchEnd(batch, logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onTrainBegin = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.trainBegin != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.trainBegin(logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        return [2];
                }
            });
        });
    };
    CustomCallback.prototype.onTrainEnd = function (logs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.trainEnd != null)) return [3, 3];
                        return [4, resolveScalarsInLogs(logs)];
                    case 1:
                        _a.sent();
                        return [4, this.trainEnd(logs)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        return [2];
                }
            });
        });
    };
    return CustomCallback;
}(Callback);
exports.CustomCallback = CustomCallback;
function standardizeCallbacks(callbacks) {
    if (callbacks == null) {
        return null;
    }
    if (callbacks instanceof Callback) {
        return [callbacks];
    }
    if (Array.isArray(callbacks) && callbacks[0] instanceof Callback) {
        return callbacks;
    }
    var callbackConfigs = generic_utils.toList(callbacks);
    return callbackConfigs.map(function (callbackConfig) {
        return new CustomCallback(callbackConfig);
    });
}
//# sourceMappingURL=callbacks.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./utils/generic_utils":"Uv0q"}],"cMmA":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cosine = exports.KLD = exports.kld = exports.MSLE = exports.msle = exports.MAPE = exports.mape = exports.MAE = exports.mae = exports.MSE = exports.mse = undefined;
exports.l2Normalize = l2Normalize;
exports.meanSquaredError = meanSquaredError;
exports.meanAbsoluteError = meanAbsoluteError;
exports.meanAbsolutePercentageError = meanAbsolutePercentageError;
exports.meanSquaredLogarithmicError = meanSquaredLogarithmicError;
exports.squaredHinge = squaredHinge;
exports.hinge = hinge;
exports.categoricalHinge = categoricalHinge;
exports.logcosh = logcosh;
exports.categoricalCrossentropy = categoricalCrossentropy;
exports.sparseCategoricalCrossentropy = sparseCategoricalCrossentropy;
exports.sigmoidCrossEntropyWithLogits = sigmoidCrossEntropyWithLogits;
exports.binaryCrossentropy = binaryCrossentropy;
exports.kullbackLeiblerDivergence = kullbackLeiblerDivergence;
exports.poisson = poisson;
exports.cosineProximity = cosineProximity;
exports.get = get;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require('./backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _errors = require('./errors');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function l2Normalize(x, axis) {
    return (0, _tfjsCore.tidy)(function () {
        var squareSum = tfc.sum(K.square(x), axis, true);
        var epsilonTensor = K.scalarTimesArray((0, _tfjsCore.scalar)(K.epsilon()), tfc.onesLike(x));
        var norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));
        return tfc.div(x, norm);
    });
}
function meanSquaredError(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        return tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1);
    });
}
function meanAbsoluteError(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        return tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1);
    });
}
function meanAbsolutePercentageError(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var diff = tfc.sub(yTrue, yPred);
        var clippedTrue = tfc.clipByValue(tfc.abs(yTrue), K.epsilon(), Number.MAX_VALUE);
        var absResult = tfc.abs(tfc.div(diff, clippedTrue));
        return K.scalarTimesArray(K.getScalar(100.0), tfc.mean(absResult, -1));
    });
}
function meanSquaredLogarithmicError(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var one = K.getScalar(1.0);
        var clippedPred = tfc.clipByValue(yPred, K.epsilon(), Number.MAX_VALUE);
        var firstLog = tfc.log(K.scalarPlusArray(one, clippedPred));
        var clippedTrue = tfc.clipByValue(yTrue, K.epsilon(), Number.MAX_VALUE);
        var secondLog = tfc.log(K.scalarPlusArray(one, clippedTrue));
        return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);
    });
}
function squaredHinge(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var zeroTensor = K.getScalar(0.0);
        var one = K.getScalar(1.0);
        var maxResult = tfc.maximum(zeroTensor, tfc.sub(one, tfc.mul(yTrue, yPred)));
        return tfc.mean(K.square(maxResult), -1);
    });
}
function hinge(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var zeroTensor = K.getScalar(0.0);
        var one = K.getScalar(1.0);
        var maxResult = tfc.maximum(zeroTensor, tfc.sub(one, tfc.mul(yTrue, yPred)));
        return tfc.mean(maxResult, -1);
    });
}
function categoricalHinge(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var zeroTensor = K.getScalar(0.0);
        var one = K.getScalar(1.0);
        var pos = tfc.sum(tfc.mul(yTrue, yPred), -1);
        var neg = tfc.max(tfc.mul(tfc.sub(one, yTrue), yPred), -1);
        return tfc.maximum(zeroTensor, K.scalarPlusArray(one, tfc.sub(neg, pos)));
    });
}
function logcosh(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var log2 = K.getScalar(Math.log(2.0));
        var predictionDiff = tfc.sub(yPred, yTrue);
        var logcoshResult = tfc.sub(tfc.add(predictionDiff, tfc.softplus(K.scalarTimesArray(K.getScalar(-2.0), predictionDiff))), log2);
        return tfc.mean(logcoshResult, -1);
    });
}
function categoricalCrossentropy(target, output, fromLogits) {
    if (fromLogits === void 0) {
        fromLogits = false;
    }
    return (0, _tfjsCore.tidy)(function () {
        if (fromLogits) {
            output = tfc.softmax(output);
        } else {
            var outputSum = tfc.sum(output, K.shape(output).length - 1, true);
            output = tfc.div(output, outputSum);
        }
        output = tfc.clipByValue(output, K.epsilon(), 1 - K.epsilon());
        return tfc.neg(tfc.sum(tfc.mul(target.toFloat(), tfc.log(output)), K.shape(output).length - 1));
    });
}
function sparseCategoricalCrossentropy(target, output, fromLogits) {
    if (fromLogits === void 0) {
        fromLogits = false;
    }
    return (0, _tfjsCore.tidy)(function () {
        var flatTarget = tfc.floor(K.flatten(target)).toInt();
        var outputShape = K.shape(output);
        var oneHotTarget = tfc.oneHot(flatTarget, outputShape[outputShape.length - 1]).reshape(outputShape);
        return categoricalCrossentropy(oneHotTarget, output, fromLogits);
    });
}
function sigmoidCrossEntropyWithLogits(target, output) {
    return (0, _tfjsCore.tidy)(function () {
        var maxOutput = tfc.maximum(output, tfc.zerosLike(output));
        var outputXTarget = tfc.mul(output, target);
        var sigmoidOutput = tfc.log(tfc.add(K.getScalar(1), tfc.exp(tfc.neg(tfc.abs(output)))));
        var result = tfc.add(tfc.sub(maxOutput, outputXTarget), sigmoidOutput);
        return result;
    });
}
function binaryCrossentropy(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var y;
        y = tfc.clipByValue(yPred, K.epsilon(), 1 - K.epsilon());
        y = tfc.log(tfc.div(y, tfc.sub(tfc.onesLike(y), y)));
        return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);
    });
}
function kullbackLeiblerDivergence(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var clippedTrue = tfc.clipByValue(yTrue, K.epsilon(), 1);
        var clippedPred = tfc.clipByValue(yPred, K.epsilon(), 1);
        return tfc.sum(tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);
    });
}
function poisson(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var logPred = tfc.log(K.scalarPlusArray(K.getScalar(K.epsilon()), yPred));
        return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);
    });
}
function cosineProximity(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var trueNormalized = l2Normalize(yTrue, -1);
        var predNormalized = l2Normalize(yPred, -1);
        var trueXPred = tfc.mul(trueNormalized, predNormalized);
        return tfc.neg(tfc.sum(trueXPred, -1));
    });
}
var mse = exports.mse = meanSquaredError;
var MSE = exports.MSE = meanSquaredError;
var mae = exports.mae = meanAbsoluteError;
var MAE = exports.MAE = meanAbsoluteError;
var mape = exports.mape = meanAbsolutePercentageError;
var MAPE = exports.MAPE = meanAbsolutePercentageError;
var msle = exports.msle = meanSquaredLogarithmicError;
var MSLE = exports.MSLE = meanSquaredLogarithmicError;
var kld = exports.kld = kullbackLeiblerDivergence;
var KLD = exports.KLD = kullbackLeiblerDivergence;
var cosine = exports.cosine = cosineProximity;
function get(identifierOrFn) {
    var lossesMap = {
        meanSquaredError: meanSquaredError,
        meanAbsoluteError: meanAbsoluteError,
        meanAbsolutePercentageError: meanAbsolutePercentageError,
        meanSquaredLogarithmicError: meanSquaredLogarithmicError,
        squaredHinge: squaredHinge,
        hinge: hinge,
        categoricalHinge: categoricalHinge,
        logcosh: logcosh,
        categoricalCrossentropy: categoricalCrossentropy,
        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,
        binaryCrossentropy: binaryCrossentropy,
        kullbackLeiblerDivergence: kullbackLeiblerDivergence,
        poisson: poisson,
        cosineProximity: cosineProximity
    };
    if (typeof identifierOrFn === 'string') {
        if (identifierOrFn in lossesMap) {
            return lossesMap[identifierOrFn];
        }
        throw new _errors.ValueError("Unknown loss " + identifierOrFn);
    } else {
        return identifierOrFn;
    }
}
//# sourceMappingURL=losses.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./errors":"WwMz"}],"2Fsr":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sparseCategoricalCrossentropy = exports.cosine = exports.categoricalCrossentropy = exports.MAPE = exports.mape = exports.MAE = exports.mae = exports.MSE = exports.mse = undefined;
exports.binaryAccuracy = binaryAccuracy;
exports.categoricalAccuracy = categoricalAccuracy;
exports.binaryCrossentropy = binaryCrossentropy;
exports.sparseCategoricalAccuracy = sparseCategoricalAccuracy;
exports.topKCategoricalAccuracy = topKCategoricalAccuracy;
exports.sparseTopKCategoricalAccuracy = sparseTopKCategoricalAccuracy;
exports.get = get;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require('./backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _errors = require('./errors');

var _losses = require('./losses');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function binaryAccuracy(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        var threshold = K.scalarTimesArray(K.getScalar(0.5), tfc.onesLike(yPred));
        var yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);
        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);
    });
}
function categoricalAccuracy(yTrue, yPred) {
    return (0, _tfjsCore.tidy)(function () {
        return K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32');
    });
}
function binaryCrossentropy(yTrue, yPred) {
    return (0, _losses.binaryCrossentropy)(yTrue, yPred);
}
function sparseCategoricalAccuracy(yTrue, yPred) {
    throw new _errors.NotImplementedError();
}
function topKCategoricalAccuracy(yTrue, yPred) {
    throw new _errors.NotImplementedError();
}
function sparseTopKCategoricalAccuracy(yTrue, yPred) {
    throw new _errors.NotImplementedError();
}
var mse = exports.mse = _losses.meanSquaredError;
var MSE = exports.MSE = _losses.meanSquaredError;
var mae = exports.mae = _losses.meanAbsoluteError;
var MAE = exports.MAE = _losses.meanAbsoluteError;
var mape = exports.mape = _losses.meanAbsolutePercentageError;
var MAPE = exports.MAPE = _losses.meanAbsolutePercentageError;
var categoricalCrossentropy = exports.categoricalCrossentropy = _losses.categoricalCrossentropy;
var cosine = exports.cosine = _losses.cosineProximity;
var sparseCategoricalCrossentropy = exports.sparseCategoricalCrossentropy = _losses.sparseCategoricalCrossentropy;
function get(identifier) {
    var metricsMap = {
        binaryAccuracy: binaryAccuracy,
        categoricalAccuracy: categoricalAccuracy,
        categoricalCrossentropy: categoricalCrossentropy,
        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,
        mse: mse,
        MSE: MSE,
        mae: mae,
        MAE: MAE,
        mape: mape,
        MAPE: MAPE,
        cosine: cosine
    };
    if (typeof identifier === 'string' && identifier in metricsMap) {
        return metricsMap[identifier];
    } else if (typeof identifier !== 'string' && identifier != null) {
        return identifier;
    } else {
        throw new _errors.ValueError("Unknown metric " + identifier);
    }
}
//# sourceMappingURL=metrics.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./errors":"WwMz","./losses":"cMmA"}],"GKfH":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getOptimizer = getOptimizer;

var _tfjsCore = require('@tensorflow/tfjs-core');

var _tfjs_backend = require('./backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _errors = require('./errors');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function getOptimizer(identifier) {
    var optimizerMap = {
        'Adagrad': function () {
            return _tfjsCore.train.adagrad(.01);
        },
        'Adam': function () {
            return _tfjsCore.train.adam(.001, .9, .999, K.epsilon());
        },
        'RMSProp': function () {
            return _tfjsCore.train.rmsprop(.001, .9, null, K.epsilon());
        },
        'SGD': function () {
            return _tfjsCore.train.sgd(.01);
        }
    };
    optimizerMap['adagrad'] = optimizerMap['Adagrad'];
    optimizerMap['adam'] = optimizerMap['Adam'];
    optimizerMap['rmsprop'] = optimizerMap['RMSProp'];
    optimizerMap['sgd'] = optimizerMap['SGD'];
    if (identifier in optimizerMap) {
        return optimizerMap[identifier]();
    }
    throw new _errors.ValueError("Unknown Optimizer " + identifier);
}
//# sourceMappingURL=optimizers.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./errors":"WwMz"}],"PHs6":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FeedDict = undefined;
exports.execute = execute;

var _errors = require('../errors');

var _topology = require('./topology');

function assertFeedCompatibility(key, val) {
    if (key.dtype != null && key.dtype !== val.dtype) {
        throw new _errors.ValueError("The dtype of the feed (" + val.dtype + ") is incompatible with that of " + ("the key '" + key.name + "' (" + key.dtype + ")."));
    }
    if (key.shape != null) {
        if (key.shape.length !== val.shape.length) {
            throw new _errors.ValueError("The rank of feed (" + val.shape.length + ") does not match the rank of " + ("the key (" + key.shape.length + ")."));
        }
        for (var i = 0; i < key.shape.length; ++i) {
            if (key.shape[i] != null && key.shape[i] !== val.shape[i]) {
                throw new _errors.ValueError("The " + i + "-th dimension of the feed (" + val.shape[i] + ") is " + ("incompatible with that of the key (" + key.shape[i] + ")."));
            }
        }
    }
}
var FeedDict = function () {
    function FeedDict(feeds) {
        this.id2Value = {};
        if (feeds instanceof FeedDict) {
            for (var id in feeds.id2Value) {
                this.id2Value[id] = feeds.id2Value[id];
            }
        } else {
            if (feeds == null) {
                return;
            }
            for (var _i = 0, feeds_1 = feeds; _i < feeds_1.length; _i++) {
                var feed = feeds_1[_i];
                this.add(feed.key, feed.value);
            }
        }
    }
    FeedDict.prototype.add = function (key, value) {
        assertFeedCompatibility(key, value);
        if (this.id2Value[key.id] == null) {
            this.id2Value[key.id] = value;
        } else {
            throw new _errors.ValueError("Duplicate key: name=" + key.name + ", id=" + key.id);
        }
        return this;
    };
    FeedDict.prototype.addFeed = function (feed) {
        this.add(feed.key, feed.value);
    };
    FeedDict.prototype.hasKey = function (key) {
        return this.id2Value[key.id] != null;
    };
    FeedDict.prototype.getValue = function (key) {
        if (this.id2Value[key.id] == null) {
            throw new _errors.ValueError("Nonexistent key: " + JSON.stringify(key));
        } else {
            return this.id2Value[key.id];
        }
    };
    return FeedDict;
}();
exports.FeedDict = FeedDict;
function execute(fetches, feedDict, kwargs) {
    var arrayFetches = Array.isArray(fetches);
    var fetchArray = arrayFetches ? fetches : [fetches];
    var outputs = [];
    var internalFeedDict = new FeedDict(feedDict);
    for (var _i = 0, fetchArray_1 = fetchArray; _i < fetchArray_1.length; _i++) {
        var fetch_1 = fetchArray_1[_i];
        outputs.push(executeInternal(fetch_1, internalFeedDict, kwargs));
    }
    return arrayFetches ? outputs : outputs[0];
}
function executeInternal(fetch, internalFeedDict, kwargs) {
    if (internalFeedDict.hasKey(fetch)) {
        return internalFeedDict.getValue(fetch);
    }
    if (fetch.sourceLayer instanceof _topology.InputLayer) {
        throw new _errors.ValueError("Missing a feed value for SymbolicTensor from InputLayer " + ("'" + _topology.InputLayer.name + "'"));
    }
    var inputs = fetch.inputs;
    var inputValues = [];
    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
        var input = inputs_1[_i];
        var inputVal = executeInternal(input, internalFeedDict, kwargs);
        inputValues.push(inputVal);
    }
    var output = fetch.sourceLayer.apply(inputValues, kwargs);
    if (!Array.isArray(output)) {
        output = [output];
    }
    var layerOutputs = getNodeOutputs(fetch);
    var outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];
    for (var i = 0; i < outputSymbolicTensors.length; ++i) {
        internalFeedDict.add(outputSymbolicTensors[i], output[i]);
    }
    return output.length === 1 ? output[0] : output[fetch.outputTensorIndex];
}
function getNodeOutputs(fetch) {
    var layerOutputs;
    if (fetch.sourceLayer.inboundNodes.length === 1) {
        layerOutputs = fetch.sourceLayer.output;
    } else {
        var nodeIndex = null;
        for (var i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {
            for (var _i = 0, _a = fetch.sourceLayer.inboundNodes[i].outputTensors; _i < _a.length; _i++) {
                var outputTensor = _a[_i];
                if (outputTensor.id === fetch.id) {
                    nodeIndex = i;
                    break;
                }
            }
        }
        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);
    }
    return layerOutputs;
}
//# sourceMappingURL=executor.js.map
},{"../errors":"WwMz","./topology":"q4cr"}],"3KwT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Model = exports.ModelLoggingVerbosity = undefined;
exports.isDataTensor = isDataTensor;
exports.isDataArray = isDataArray;
exports.isDataDict = isDataDict;
exports.standardizeInputData = standardizeInputData;
exports.checkArrayLengths = checkArrayLengths;
exports.makeBatches = makeBatches;
exports.sliceArraysByIndices = sliceArraysByIndices;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require("../backend/tfjs_backend");

var K = _interopRequireWildcard(_tfjs_backend);

var _callbacks = require("../callbacks");

var _errors = require("../errors");

var _losses = require("../losses");

var losses = _interopRequireWildcard(_losses);

var _metrics = require("../metrics");

var Metrics = _interopRequireWildcard(_metrics);

var _optimizers = require("../optimizers");

var optimizers = _interopRequireWildcard(_optimizers);

var _generic_utils = require("../utils/generic_utils");

var _math_utils = require("../utils/math_utils");

var _executor = require("./executor");

var _topology = require("./topology");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function isDataTensor(x) {
    return x instanceof _tfjsCore.Tensor;
}
function isDataArray(x) {
    return Array.isArray(x);
}
function isDataDict(x) {
    return !isDataTensor(x) && !isDataArray(x);
}
function standardizeInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {
    if (checkBatchAxis === void 0) {
        checkBatchAxis = true;
    }
    if (exceptionPrefix === void 0) {
        exceptionPrefix = '';
    }
    if (names == null || names.length === 0) {
        if (data != null) {
            var gotUnexpectedData = false;
            if (isDataArray(data) && data.length > 0) {
                gotUnexpectedData = true;
            } else if (isDataDict(data)) {
                for (var key in data) {
                    if (data.hasOwnProperty(key)) {
                        gotUnexpectedData = true;
                        break;
                    }
                }
            } else {
                gotUnexpectedData = true;
            }
            if (gotUnexpectedData) {
                throw new _errors.ValueError("Error when checking model " + exceptionPrefix + " expected no data, " + ("but got " + data));
            }
        }
        return [];
    }
    if (data == null) {
        return names.map(function (name) {
            return null;
        });
    }
    var arrays;
    if (isDataDict(data)) {
        data = data;
        arrays = [];
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
            var name_1 = names_1[_i];
            if (data[name_1] == null) {
                throw new _errors.ValueError("No data provided for \"" + name_1 + "\". Need data for each key in: " + ("" + names));
            }
            arrays.push(data[name_1]);
        }
    } else if (isDataArray(data)) {
        data = data;
        if (data.length !== names.length) {
            throw new _errors.ValueError("Error when checking model " + exceptionPrefix + ": the Array of " + "Tensors that you are passing to your model is not the size the " + ("model expected. Expected to see " + names.length + " Tensor(s), but ") + ("instead got the following list of Tensor(s): " + data));
        }
        arrays = data;
    } else {
        data = data;
        if (names.length > 1) {
            throw new _errors.ValueError("The model " + exceptionPrefix + " expects " + names.length + " Tensor(s), " + ("but only received one Tensor. Found: Tensor with shape " + data.shape));
        }
        arrays = [data];
    }
    for (var i = 0; i < names.length; ++i) {
        var array = arrays[i];
        if (array.shape.length === 1) {
            arrays[i] = K.expandDims(array, 1);
        }
    }
    if (shapes != null) {
        for (var i = 0; i < names.length; ++i) {
            if (shapes[i] == null) {
                continue;
            }
            var array = arrays[i];
            if (array.shape.length !== shapes[i].length) {
                throw new _errors.ValueError("Error when checking " + exceptionPrefix + ": expected " + names[i] + " " + ("to have " + shapes[i].length + " dimension(s). but got array with ") + ("shape " + array.shape));
            }
            for (var j = 0; j < shapes[i].length; ++j) {
                if (j === 0 && !checkBatchAxis) {
                    continue;
                }
                var dim = array.shape[j];
                var refDim = shapes[i][j];
                if (refDim != null && refDim >= 0 && dim !== refDim) {
                    throw new _errors.ValueError("Error when checking " + exceptionPrefix + ": expected " + names[i] + " " + ("to have shape [" + shapes[i] + "], but got array with shape ") + ("[" + array.shape + "]."));
                }
            }
        }
    }
    return arrays;
}
function checkArrayLengths(inputs, targets, weights) {
    var setX = (0, _generic_utils.unique)(inputs.map(function (input) {
        return input.shape[0];
    }));
    setX.sort();
    var setY = (0, _generic_utils.unique)(targets.map(function (target) {
        return target.shape[0];
    }));
    setY.sort();
    if (setX.length > 1) {
        throw new _errors.ValueError("All input Tensors (x) should have the same number of samples. " + "Got array shapes: " + ("" + JSON.stringify(inputs.map(function (input) {
            return input.shape;
        }))));
    }
    if (setY.length > 1) {
        throw new _errors.ValueError("All target Tensors (y) should have the same number of samples. " + "Got array shapes: " + ("" + JSON.stringify(targets.map(function (target) {
            return target.shape;
        }))));
    }
    if (setX.length > 0 && setY.length > 0 && !_tfjsCore.util.arraysEqual(setX, setY)) {
        throw new _errors.ValueError("Input Tensors should have the same number of samples as target " + ("Tensors. Found " + setX[0] + " input sample(s) and " + setY[0] + " target ") + "sample(s).");
    }
}
function checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {
    var keyLosses = [losses.meanSquaredError, losses.binaryCrossentropy, losses.categoricalCrossentropy];
    for (var i = 0; i < targets.length; ++i) {
        var y = targets[i];
        var loss = lossFns[i];
        var shape = outputShapes[i];
        if (loss == null) {
            continue;
        }
        if (loss === losses.categoricalCrossentropy) {
            if (y.shape[y.shape.length - 1] === 1) {
                throw new _errors.ValueError("You are passing a target array of shape " + y.shape + " while using " + "a loss 'categorical_crossentropy'. 'categorical_crossentropy'" + "expects targets to be binary matrices (1s and 0s) of shape " + "[samples, classes].");
            }
        }
        if (keyLosses.indexOf(loss) !== -1) {
            var slicedYShape = y.shape.slice(1);
            var slicedShape = shape.slice(1);
            for (var j = 0; j < slicedYShape.length; ++j) {
                var targetDim = slicedYShape[j];
                var outDim = slicedShape[j];
                if (outDim != null && targetDim !== outDim) {
                    throw new _errors.ValueError("A target Tensor with shape " + y.shape + " was passed for an " + ("output of shape " + shape + ", while using a loss function that ") + "expects targets to have the same shape as the output.");
                }
            }
        }
    }
}
function makeBatches(size, batchSize) {
    var output = [];
    var batchStart = 0;
    var batchEnd = null;
    while (batchStart < size) {
        batchEnd = batchStart + batchSize;
        if (batchEnd >= size) {
            batchEnd = size;
        }
        output.push([batchStart, batchEnd]);
        batchStart = batchEnd;
    }
    return output;
}
function sliceArrays(arrays, start, stop) {
    if (arrays == null) {
        return [null];
    } else if (Array.isArray(arrays)) {
        return arrays.map(function (array) {
            return K.sliceAlongFirstAxis(array, start, stop - start);
        });
    } else {
        return K.sliceAlongFirstAxis(arrays, start, stop - start);
    }
}
function sliceArraysByIndices(arrays, indices) {
    if (arrays == null) {
        return null;
    } else if (Array.isArray(arrays)) {
        return arrays.map(function (array) {
            return sliceArraysByIndices(array, indices);
        });
    } else {
        return K.gather(arrays, indices.dtype === 'int32' ? indices : indices.toInt());
    }
}
function checkInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {
    if (checkBatchAxis === void 0) {
        checkBatchAxis = true;
    }
    if (exceptionPrefix === void 0) {
        exceptionPrefix = '';
    }
    var arrays;
    if (Array.isArray(data)) {
        if (data.length !== names.length) {
            throw new _errors.ValueError("Error when checking model " + exceptionPrefix + ": the Array of " + "Tensors that you are passing to your model is not the size the " + ("the model expected. Expected to see " + names.length + " Tensor(s),") + (" but instead got " + data.length + " Tensors(s)."));
        }
        arrays = data;
    } else {
        if (names.length > 1) {
            throw new _errors.ValueError("The model expects " + names.length + " " + exceptionPrefix + " Tensors, " + "but only received one Tensor. Found: array with shape " + (JSON.stringify(data.shape) + "."));
        }
        arrays = [data];
    }
    if (shapes != null) {
        for (var i = 0; i < names.length; ++i) {
            if (shapes[i] == null) {
                continue;
            }
            var array = arrays[i];
            if (array.shape.length !== shapes[i].length) {
                throw new _errors.ValueError("Error when checking " + exceptionPrefix + ": expected " + names[i] + " " + ("to have " + shapes[i].length + " dimension(s), but got array with ") + ("shape " + JSON.stringify(array.shape)));
            }
            for (var j = 0; j < shapes[i].length; ++j) {
                if (j === 0 && !checkBatchAxis) {
                    continue;
                }
                var dim = array.shape[j];
                var refDim = shapes[i][j];
                if (refDim != null) {
                    if (refDim !== dim) {
                        throw new _errors.ValueError("Error when checking " + exceptionPrefix + ": expected " + (names[i] + " to have shape " + JSON.stringify(shapes[i]) + " but ") + ("got array with shape " + JSON.stringify(array.shape) + "."));
                    }
                }
            }
        }
    }
}
function collectMetrics(metrics, outputNames) {
    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {
        return outputNames.map(function (name) {
            return [];
        });
    }
    if (Array.isArray(metrics)) {
        return outputNames.map(function (name) {
            return metrics;
        });
    } else if (metrics != null) {
        var nestedMetrics = [];
        for (var _i = 0, outputNames_1 = outputNames; _i < outputNames_1.length; _i++) {
            var name_2 = outputNames_1[_i];
            var outputMetrics = metrics.hasOwnProperty(name_2) ? metrics[name_2] : [];
            if (!Array.isArray(outputMetrics)) {
                outputMetrics = [outputMetrics];
            }
            nestedMetrics.push(outputMetrics);
        }
        return nestedMetrics;
    } else {
        throw new TypeError('Type of metrics argument not understood. Expected an Array or ' + 'Object, found: ' + metrics);
    }
}
var ModelLoggingVerbosity = exports.ModelLoggingVerbosity = undefined;
(function (ModelLoggingVerbosity) {
    ModelLoggingVerbosity[ModelLoggingVerbosity["SILENT"] = 0] = "SILENT";
    ModelLoggingVerbosity[ModelLoggingVerbosity["VERBOSE"] = 1] = "VERBOSE";
})(ModelLoggingVerbosity || (exports.ModelLoggingVerbosity = ModelLoggingVerbosity = {}));
var Model = function (_super) {
    __extends(Model, _super);
    function Model(config) {
        return _super.call(this, config) || this;
    }
    Model.prototype.compile = function (config) {
        var _this = this;
        if (config.loss == null) {
            config.loss = [];
        }
        this.loss = config.loss;
        if (typeof config.optimizer === 'string') {
            this.optimizer = optimizers.getOptimizer(config.optimizer);
        } else {
            if (!(config.optimizer instanceof _tfjsCore.Optimizer)) {
                throw new _errors.ValueError("User-defined optimizer must be an instance of tf.Optimizer.");
            }
            this.optimizer = config.optimizer;
        }
        var lossFunctions = [];
        if (!Array.isArray(config.loss) && typeof config.loss !== 'string' && typeof config.loss !== 'function') {
            config.loss = config.loss;
            for (var name_3 in config.loss) {
                if (this.outputNames.indexOf(name_3) === -1) {
                    throw new _errors.ValueError("Unknown entry in loss dictionary: \"" + name_3 + "\". Only expect the " + ("following keys: " + this.outputNames));
                }
            }
            for (var name_4 in this.outputNames) {
                if (config.loss[name_4] == null) {
                    console.warn("Output \"" + name_4 + "\" is missing from loss dictionary. We assume " + "this was done on purpose, and we will not be expecting data " + ("to be passed to " + name_4 + " during training"));
                }
                lossFunctions.push(losses.get(config.loss[name_4]));
            }
        } else if (Array.isArray(config.loss)) {
            if (config.loss.length !== this.outputs.length) {
                throw new _errors.ValueError("When passing an Array as loss, it should have one entry per " + ("model output. The model has " + this.outputs.length + " output(s), ") + ("but you passed loss=" + config.loss + "."));
            }
            var theLosses = config.loss;
            lossFunctions = theLosses.map(function (l) {
                return losses.get(l);
            });
        } else {
            var lossFunction_1 = losses.get(config.loss);
            this.outputs.map(function (layer) {
                lossFunctions.push(lossFunction_1);
            });
        }
        this.lossFunctions = lossFunctions;
        this.feedOutputNames = [];
        this.feedOutputShapes = [];
        this.feedLossFns = [];
        for (var i = 0; i < this.outputs.length; ++i) {
            var shape = this.internalOutputShapes[i];
            var name_5 = this.outputNames[i];
            this.feedOutputNames.push(name_5);
            this.feedOutputShapes.push(shape);
            this.feedLossFns.push(this.lossFunctions[i]);
        }
        var skipTargetIndices = [];
        this.metrics = config.metrics;
        this.metricsNames = ['loss'];
        this.metricsTensors = [];
        K.nameScope('loss', function () {
            for (var i = 0; i < _this.outputs.length; ++i) {
                if (skipTargetIndices.indexOf(i) !== -1) {
                    continue;
                }
                var weightedLoss = _this.lossFunctions[i];
                if (_this.outputs.length > 1) {
                    _this.metricsTensors.push([weightedLoss, i]);
                    _this.metricsNames.push(_this.outputNames[i] + '_loss');
                }
            }
        });
        var nestedMetrics = collectMetrics(config.metrics, this.outputNames);
        var appendMetric = function (outputIndex, metricName, metricTensor) {
            if (_this.outputNames.length > 1) {
                metricName = _this.outputNames[outputIndex] + '_' + metricName;
            }
            _this.metricsNames.push(metricName);
            _this.metricsTensors.push([metricTensor, outputIndex]);
        };
        K.nameScope('metric', function () {
            var _loop_1 = function (i) {
                if (skipTargetIndices.indexOf(i) !== -1) {
                    return "continue";
                }
                var outputMetrics = nestedMetrics[i];
                var handleMetrics = function (metrics) {
                    var metricNamePrefix = '';
                    var metricName;
                    var accFn;
                    var weightedMetricFn;
                    var _loop_2 = function (metric) {
                        if (['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !== -1) {
                            var outputShape = _this.internalOutputShapes[i];
                            if (outputShape[outputShape.length - 1] === 1 || _this.lossFunctions[i] === losses.binaryCrossentropy) {
                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                                    accFn = Metrics.binaryAccuracy;
                                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                                    accFn = Metrics.binaryCrossentropy;
                                }
                            } else if (_this.lossFunctions[i] === losses.sparseCategoricalCrossentropy) {
                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                                    accFn = Metrics.sparseCategoricalAccuracy;
                                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                                    accFn = Metrics.sparseCategoricalCrossentropy;
                                }
                            } else {
                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                                    accFn = Metrics.categoricalAccuracy;
                                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                                    accFn = Metrics.categoricalCrossentropy;
                                }
                            }
                            var suffix = void 0;
                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                                suffix = 'acc';
                            } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                                suffix = 'ce';
                            }
                            weightedMetricFn = accFn;
                            metricName = metricNamePrefix + suffix;
                        } else {
                            var metricFn = Metrics.get(metric);
                            weightedMetricFn = metricFn;
                            metricName = metricNamePrefix + metric;
                        }
                        var metricResult;
                        K.nameScope(metricName, function () {
                            metricResult = weightedMetricFn;
                        });
                        appendMetric(i, metricName, metricResult);
                    };
                    for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {
                        var metric = metrics_1[_i];
                        _loop_2(metric);
                    }
                };
                handleMetrics(outputMetrics);
            };
            for (var i = 0; i < _this.outputs.length; ++i) {
                _loop_1(i);
            }
        });
        this.collectedTrainableWeights = this.trainableWeights;
    };
    Model.prototype.checkTrainableWeightsConsistency = function () {
        if (this.collectedTrainableWeights == null) {
            return;
        }
        if (this.trainableWeights.length !== this.collectedTrainableWeights.length) {
            console.warn('Discrepancy between trainableweights and collected trainable ' + 'weights. Did you set `model.trainable` without calling ' + '`model.compile()` afterwards?');
        }
    };
    Model.prototype.evaluate = function (x, y, config) {
        if (config === void 0) {
            config = {};
        }
        var batchSize = config.batchSize == null ? 32 : config.batchSize;
        var standardizedOuts = this.standardizeUserData(x, y, true, batchSize);
        var ins = standardizedOuts[0].concat(standardizedOuts[1]);
        this.makeTestFunction();
        var f = this.testFunction;
        var testOuts = this.testLoop(f, ins, batchSize, config.verbose, config.steps);
        return (0, _generic_utils.singletonOrArray)(testOuts);
    };
    Model.prototype.checkNumSamples = function (ins, batchSize, steps, stepsName) {
        if (stepsName === void 0) {
            stepsName = 'steps';
        }
        var numSamples;
        if (steps != null) {
            numSamples = null;
            if (batchSize != null) {
                throw new _errors.ValueError("If " + stepsName + " is set, batchSize must be null or undefined." + ("Got batchSize = " + batchSize));
            }
        } else if (ins != null) {
            if (Array.isArray(ins)) {
                numSamples = ins[0].shape[0];
            } else {
                numSamples = ins.shape[0];
            }
        } else {
            throw new _errors.ValueError("Either the input data should have a defined shape, or " + (stepsName + " shoud be specified."));
        }
        return numSamples;
    };
    Model.prototype.predictLoop = function (ins, batchSize, verbose) {
        var _this = this;
        if (batchSize === void 0) {
            batchSize = 32;
        }
        if (verbose === void 0) {
            verbose = false;
        }
        var numSamples = this.checkNumSamples(ins);
        if (verbose) {
            throw new _errors.NotImplementedError('Verbose predictLoop() is not implemented yet.');
        }
        var batches = makeBatches(numSamples, batchSize);
        var outs = [];
        var _loop_3 = function (batchIndex) {
            var batchOuts = tfc.tidy(function () {
                var batchStart = batches[batchIndex][0];
                var batchEnd = batches[batchIndex][1];
                var insBatch = sliceArrays(ins, batchStart, batchEnd);
                var feeds = [];
                if (Array.isArray(insBatch)) {
                    for (var i = 0; i < insBatch.length; ++i) {
                        feeds.push({ key: _this.inputs[i], value: insBatch[i] });
                    }
                } else {
                    feeds.push({ key: _this.inputs[0], value: insBatch });
                }
                var feedDict = new _executor.FeedDict(feeds);
                return (0, _executor.execute)(_this.outputs, feedDict);
            });
            if (batchIndex === 0) {
                for (var _i = 0, batchOuts_1 = batchOuts; _i < batchOuts_1.length; _i++) {
                    var batchOut = batchOuts_1[_i];
                    outs.push(batchOut);
                }
            } else {
                for (var i = 0; i < batchOuts.length; ++i) {
                    outs[i] = K.concatAlongFirstAxis(outs[i], batchOuts[i]);
                }
            }
        };
        for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {
            _loop_3(batchIndex);
        }
        return (0, _generic_utils.singletonOrArray)(outs);
    };
    Model.prototype.predict = function (x, config) {
        if (config === void 0) {
            config = {};
        }
        checkInputData(x, this.inputNames, this.feedInputShapes, false);
        var batchSize = config.batchSize == null ? 32 : config.batchSize;
        return this.predictLoop(x, batchSize);
    };
    Model.prototype.predictOnBatch = function (x) {
        checkInputData(x, this.inputNames, this.feedInputShapes, true);
        return this.predictLoop(x, x.shape[0]);
    };
    Model.prototype.standardizeUserData = function (x, y, checkBatchAxis, batchSize) {
        if (checkBatchAxis === void 0) {
            checkBatchAxis = true;
        }
        if (this.optimizer == null) {
            throw new _errors.RuntimeError('You must compile a model before training/testing. Use ' + 'Model.compile(modelCompileConfig).');
        }
        var outputShapes = [];
        for (var i = 0; i < this.feedOutputShapes.length; ++i) {
            var outputShape = this.feedOutputShapes[i];
            var lossFn = this.feedLossFns[i];
            if (lossFn === losses.sparseCategoricalCrossentropy) {
                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));
            } else {
                outputShapes.push(outputShape);
            }
        }
        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');
        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');
        checkArrayLengths(x, y, null);
        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);
        if (this.stateful && batchSize != null && batchSize > 0) {
            if (x[0].shape[0] % batchSize !== 0) {
                throw new _errors.ValueError("In a stateful network, you should only pass inputs with a " + "number of samples that is divisible by the batch size " + (batchSize + ". Found: " + x[0].shape[0] + " sample(s)."));
            }
        }
        return [x, y, null];
    };
    Model.prototype.fitLoop = function (f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {
        if (initialEpoch === void 0) {
            initialEpoch = 0;
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var doValidation, numTrainSamples, indexArray, callbackList, _loop_4, this_1, epoch, state_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (batchSize == null) {
                            batchSize = 32;
                        }
                        if (epochs == null) {
                            epochs = 1;
                        }
                        if (shuffle == null) {
                            shuffle = true;
                        }
                        if (initialEpoch == null) {
                            initialEpoch = 0;
                        }
                        doValidation = false;
                        if (valF != null && valIns != null) {
                            doValidation = true;
                        }
                        if (validationSteps != null) {
                            doValidation = true;
                            if (stepsPerEpoch == null) {
                                throw new _errors.ValueError('Can only use `validationSteps` when doing step-wise training, ' + 'i.e., `stepsPerEpoch` must be set.');
                            }
                        }
                        numTrainSamples = this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');
                        if (numTrainSamples != null) {
                            indexArray = (0, _math_utils.range)(0, numTrainSamples);
                        }
                        this.history = new _callbacks.History();
                        if (callbacks == null) {
                            callbacks = [new _callbacks.BaseLogger()];
                        } else {
                            callbacks = [new _callbacks.BaseLogger()].concat(callbacks);
                        }
                        callbacks = callbacks.concat([this.history]);
                        if (verbose > 0) {
                            throw new _errors.NotImplementedError('Verbose mode is not implemented yet.');
                        }
                        callbackList = new _callbacks.CallbackList(callbacks);
                        callbackList.setModel(this);
                        callbackList.setParams({
                            epochs: epochs,
                            steps: stepsPerEpoch,
                            verbose: verbose,
                            doValidation: doValidation,
                            metrics: callbackMetrics
                        });
                        return [4, callbackList.onTrainBegin()];
                    case 1:
                        _a.sent();
                        this.stopTraining = false;
                        _loop_4 = function (epoch) {
                            var epochLogs, epochIndexArray1D_1, batches_1, _loop_5, batchIndex, state_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        return [4, callbackList.onEpochBegin(epoch)];
                                    case 1:
                                        _a.sent();
                                        epochLogs = {};
                                        if (!(stepsPerEpoch != null)) return [3, 2];
                                        throw new _errors.NotImplementedError('stepsPerEpoch mode is not implemented yet.');
                                    case 2:
                                        if (shuffle === 'batch') {
                                            throw new _errors.NotImplementedError('batch shuffling is not implemneted yet');
                                        } else if (shuffle) {
                                            _tfjsCore.util.shuffle(indexArray);
                                        }
                                        epochIndexArray1D_1 = (0, _tfjsCore.tensor1d)(indexArray);
                                        batches_1 = makeBatches(numTrainSamples, batchSize);
                                        _loop_5 = function (batchIndex) {
                                            var batchLogs;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        batchLogs = {};
                                                        return [4, callbackList.onBatchBegin(batchIndex, batchLogs)];
                                                    case 1:
                                                        _a.sent();
                                                        tfc.tidy(function () {
                                                            var batchStart = batches_1[batchIndex][0];
                                                            var batchEnd = batches_1[batchIndex][1];
                                                            var batchIds = K.sliceAlongFirstAxis(epochIndexArray1D_1, batchStart, batchEnd - batchStart);
                                                            batchLogs['batch'] = batchIndex;
                                                            batchLogs['size'] = batchEnd - batchStart;
                                                            var insBatch = sliceArraysByIndices(ins, batchIds);
                                                            var outs = f(insBatch);
                                                            for (var i = 0; i < outLabels.length; ++i) {
                                                                var label = outLabels[i];
                                                                var out = outs[i];
                                                                batchLogs[label] = out;
                                                                tfc.keep(out);
                                                            }
                                                            if (batchIndex === batches_1.length - 1) {
                                                                if (doValidation) {
                                                                    var valOuts = _this.testLoop(valF, valIns, batchSize);
                                                                    for (var i = 0; i < outLabels.length; ++i) {
                                                                        var label = outLabels[i];
                                                                        var out = valOuts[i];
                                                                        tfc.keep(out);
                                                                        epochLogs['val_' + label] = out;
                                                                    }
                                                                }
                                                            }
                                                        });
                                                        return [4, callbackList.onBatchEnd(batchIndex, batchLogs)];
                                                    case 2:
                                                        _a.sent();
                                                        (0, _callbacks.disposeTensorsInLogs)(batchLogs);
                                                        if (this_1.stopTraining) {
                                                            return [2, "break"];
                                                        }
                                                        return [2];
                                                }
                                            });
                                        };
                                        batchIndex = 0;
                                        _a.label = 3;
                                    case 3:
                                        if (!(batchIndex < batches_1.length)) return [3, 6];
                                        return [5, _loop_5(batchIndex)];
                                    case 4:
                                        state_2 = _a.sent();
                                        if (state_2 === "break") return [3, 6];
                                        _a.label = 5;
                                    case 5:
                                        ++batchIndex;
                                        return [3, 3];
                                    case 6:
                                        epochIndexArray1D_1.dispose();
                                        _a.label = 7;
                                    case 7:
                                        return [4, callbackList.onEpochEnd(epoch, epochLogs)];
                                    case 8:
                                        _a.sent();
                                        if (this_1.stopTraining) {
                                            return [2, "break"];
                                        }
                                        return [2];
                                }
                            });
                        };
                        this_1 = this;
                        epoch = initialEpoch;
                        _a.label = 2;
                    case 2:
                        if (!(epoch < epochs)) return [3, 5];
                        return [5, _loop_4(epoch)];
                    case 3:
                        state_1 = _a.sent();
                        if (state_1 === "break") return [3, 5];
                        _a.label = 4;
                    case 4:
                        ++epoch;
                        return [3, 2];
                    case 5:
                        return [4, callbackList.onTrainEnd()];
                    case 6:
                        _a.sent();
                        return [4, this.history.syncData()];
                    case 7:
                        _a.sent();
                        return [2, this.history];
                }
            });
        });
    };
    Model.prototype.testLoop = function (f, ins, batchSize, verbose, steps) {
        if (verbose === void 0) {
            verbose = 0;
        }
        var numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');
        var outs = [];
        if (verbose === 1) {
            throw new _errors.NotImplementedError('Verbose mode is not implemented yet.');
        }
        if (steps != null) {
            throw new _errors.NotImplementedError('steps mode in testLoop() is not implemented yet');
        } else {
            var batches = makeBatches(numSamples, batchSize);
            var indexArray = (0, _tfjsCore.tensor1d)((0, _math_utils.range)(0, numSamples));
            for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {
                var batchStart = batches[batchIndex][0];
                var batchEnd = batches[batchIndex][1];
                var batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);
                var insBatch = sliceArraysByIndices(ins, batchIds);
                var batchOuts = f(insBatch);
                if (batchIndex === 0) {
                    for (var i = 0; i < batchOuts.length; ++i) {
                        outs.push(K.getScalar(0));
                    }
                }
                for (var i = 0; i < batchOuts.length; ++i) {
                    var batchOut = batchOuts[i];
                    outs[i] = tfc.add(outs[i], K.scalarTimesArray(K.getScalar(batchEnd - batchStart), batchOut));
                }
            }
            for (var i = 0; i < outs.length; ++i) {
                outs[i] = tfc.div(outs[i], K.getScalar(numSamples));
            }
        }
        return outs;
    };
    Model.prototype.getDedupedMetricsNames = function () {
        var outLabels = this.metricsNames;
        var dedupedOutLabels = [];
        for (var i = 0; i < outLabels.length; ++i) {
            var label = outLabels[i];
            var newLabel = label;
            if ((0, _generic_utils.count)(outLabels, label) > 1) {
                var dupIndex = (0, _generic_utils.count)(outLabels.slice(0, i), label);
                newLabel += "_" + dupIndex;
            }
            dedupedOutLabels.push(newLabel);
        }
        return dedupedOutLabels;
    };
    Model.prototype.makeTestFunction = function () {
        var _this = this;
        this.testFunction = function (data) {
            return tfc.tidy(function () {
                var valOutputs = [];
                var totalLoss;
                var inputs = data.slice(0, _this.inputs.length);
                var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);
                var feeds = [];
                for (var i = 0; i < _this.inputs.length; ++i) {
                    feeds.push({ key: _this.inputs[i], value: inputs[i] });
                }
                var feedDict = new _executor.FeedDict(feeds);
                var outputs = (0, _executor.execute)(_this.outputs, feedDict);
                for (var i = 0; i < _this.lossFunctions.length; ++i) {
                    var lossFunction = _this.lossFunctions[i];
                    var loss = tfc.mean(lossFunction(targets[i], outputs[i]));
                    if (i === 0) {
                        totalLoss = loss;
                    } else {
                        totalLoss = tfc.add(totalLoss, loss);
                    }
                    valOutputs.push(totalLoss);
                }
                for (var i = 0; i < _this.metricsTensors.length; ++i) {
                    var metric = _this.metricsTensors[i][0];
                    var outputIndex = _this.metricsTensors[i][1];
                    var meanMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));
                    valOutputs.push(meanMetric);
                }
                return valOutputs;
            });
        };
    };
    Model.prototype.fit = function (x, y, config) {
        if (config === void 0) {
            config = {};
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var batchSize, standardizedOuts, inputs, targets, doValidation, valX, valY, valIns, needValidationDisposal, valStandardized, splitAt, originalBatchSize, ins, trainFunction, outLabels, valFunction, callbackMetrics, callbacks, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        batchSize = config.batchSize == null ? 32 : config.batchSize;
                        standardizedOuts = this.standardizeUserData(x, y, false, batchSize);
                        inputs = standardizedOuts[0];
                        targets = standardizedOuts[1];
                        doValidation = false;
                        needValidationDisposal = false;
                        if (config.validationData != null && config.validationData.length > 0) {
                            doValidation = true;
                            if (config.validationData.length === 2) {
                                valX = config.validationData[0];
                                valY = config.validationData[1];
                            } else if (config.validationData.length === 3) {
                                throw new _errors.NotImplementedError('validationData including sample weights is not supported yet.');
                            } else {
                                throw new _errors.ValueError("When passing validation data, it must contain 2 (valX, valY) " + "or 3 (valX, valY, valSampleWeight) items; " + (config.validationData + " is invalid."));
                            }
                            valStandardized = this.standardizeUserData(valX, valY, true, batchSize);
                            valX = valStandardized[0];
                            valY = valStandardized[1];
                            valIns = valX.concat(valY);
                        } else if (config.validationSplit != null && config.validationSplit > 0 && config.validationSplit < 1) {
                            doValidation = true;
                            splitAt = Math.floor(inputs[0].shape[0] * (1 - config.validationSplit));
                            originalBatchSize = inputs[0].shape[0];
                            valX = sliceArrays(inputs, splitAt, originalBatchSize);
                            inputs = sliceArrays(inputs, 0, splitAt);
                            valY = sliceArrays(targets, splitAt, originalBatchSize);
                            targets = sliceArrays(targets, 0, splitAt);
                            needValidationDisposal = true;
                            valIns = valX.concat(valY);
                        } else if (config.validationSteps != null) {
                            doValidation = true;
                        }
                        ins = inputs.concat(targets);
                        this.checkTrainableWeightsConsistency();
                        trainFunction = function (data) {
                            var losses = [];
                            var lossValues = [];
                            var inputs = data.slice(0, _this.inputs.length);
                            var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);
                            var metricsValues = [];
                            var totalLossFunction = function () {
                                var feeds = [];
                                for (var i = 0; i < _this.inputs.length; ++i) {
                                    feeds.push({ key: _this.inputs[i], value: inputs[i] });
                                }
                                var feedDict = new _executor.FeedDict(feeds);
                                var outputs = (0, _executor.execute)(_this.outputs, feedDict, { 'training': true });
                                var totalLoss;
                                for (var i = 0; i < _this.lossFunctions.length; ++i) {
                                    var lossFunction = _this.lossFunctions[i];
                                    var loss = lossFunction(targets[i], outputs[i]);
                                    losses.push(loss);
                                    var meanLoss = tfc.mean(loss);
                                    lossValues.push(meanLoss);
                                    if (i === 0) {
                                        totalLoss = loss;
                                    } else {
                                        totalLoss = tfc.add(totalLoss, loss);
                                    }
                                }
                                for (var i = 0; i < _this.metricsTensors.length; ++i) {
                                    var metric = _this.metricsTensors[i][0];
                                    var outputIndex = _this.metricsTensors[i][1];
                                    var meanMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));
                                    tfc.keep(meanMetric);
                                    metricsValues.push(meanMetric);
                                }
                                totalLoss = tfc.mean(totalLoss);
                                _this.calculateLosses().forEach(function (regularizerLoss) {
                                    totalLoss = tfc.add(totalLoss, regularizerLoss);
                                });
                                return totalLoss;
                            };
                            var variables = _this.collectedTrainableWeights.map(function (param) {
                                return param.read();
                            });
                            var returnCost = true;
                            var totalLossValue = _this.optimizer.minimize(totalLossFunction, returnCost, variables);
                            return [totalLossValue].concat(metricsValues);
                        };
                        outLabels = this.getDedupedMetricsNames();
                        if (doValidation) {
                            this.makeTestFunction();
                            valFunction = this.testFunction;
                            callbackMetrics = outLabels.slice().concat(outLabels.map(function (n) {
                                return 'val_' + n;
                            }));
                        } else {
                            valFunction = null;
                            valIns = [];
                            callbackMetrics = outLabels.slice();
                        }
                        callbacks = (0, _callbacks.standardizeCallbacks)(config.callbacks);
                        return [4, this.fitLoop(trainFunction, ins, outLabels, batchSize, config.epochs, config.verbose, callbacks, valFunction, valIns, config.shuffle, callbackMetrics, null, null, null)];
                    case 1:
                        out = _a.sent();
                        if (needValidationDisposal) {
                            valIns.forEach(function (tensor) {
                                return tensor.dispose();
                            });
                            inputs.forEach(function (tensor) {
                                return tensor.dispose();
                            });
                            targets.forEach(function (tensor) {
                                return tensor.dispose();
                            });
                        }
                        return [2, out];
                }
            });
        });
    };
    Model.prototype.getNamedWeights = function (config) {
        var namedWeights = {};
        var trainableOnly = config != null && config.trainableOnly;
        var weights = trainableOnly ? this.trainableWeights : this.weights;
        var weightValues = this.getWeights(trainableOnly);
        for (var i = 0; i < weights.length; ++i) {
            if (trainableOnly && !weights[i].trainable) {
                continue;
            }
            namedWeights[weights[i].originalName] = weightValues[i];
        }
        return namedWeights;
    };
    Model.prototype.save = function (handlerOrURL, config) {
        return __awaiter(this, void 0, void 0, function () {
            var handlers, weightDataAndSpecs, returnString, unusedArg, modelConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof handlerOrURL === 'string') {
                            handlers = _tfjsCore.io.getSaveHandlers(handlerOrURL);
                            if (handlers.length === 0) {
                                throw new _errors.ValueError("Cannot find any save handlers for URL '" + handlerOrURL + "'");
                            } else if (handlers.length > 1) {
                                throw new _errors.ValueError("Found more than one (" + handlers.length + ") save handlers for " + ("URL '" + handlerOrURL + "'"));
                            }
                            handlerOrURL = handlers[0];
                        }
                        if (handlerOrURL.save == null) {
                            throw new _errors.ValueError('Model.save() cannot proceed because the IOHandler provided does ' + 'not have the `save` attribute defined.');
                        }
                        return [4, _tfjsCore.io.encodeWeights(this.getNamedWeights(config))];
                    case 1:
                        weightDataAndSpecs = _a.sent();
                        returnString = false;
                        unusedArg = null;
                        modelConfig = this.toJSON(unusedArg, returnString);
                        return [2, handlerOrURL.save({
                            modelTopology: modelConfig,
                            weightData: weightDataAndSpecs.data,
                            weightSpecs: weightDataAndSpecs.specs
                        })];
                }
            });
        });
    };
    Model.className = 'Model';
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes', configParamIndices: [0] })], Model.prototype, "compile", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })], Model.prototype, "evaluate", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes', configParamIndices: [1] })], Model.prototype, "predict", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes' })], Model.prototype, "predictOnBatch", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })], Model.prototype, "fit", null);
    Model = __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes' })], Model);
    return Model;
}(_topology.Container);
exports.Model = Model;

_tfjsCore.serialization.SerializationMap.register(Model);
//# sourceMappingURL=training.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/tfjs_backend":"yoLG","../callbacks":"oY+c","../errors":"WwMz","../losses":"cMmA","../metrics":"2Fsr","../optimizers":"GKfH","../utils/generic_utils":"Uv0q","../utils/math_utils":"42TA","./executor":"PHs6","./topology":"q4cr"}],"5TN9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.Orthogonal = exports.LeCunNormal = exports.HeNormal = exports.GlorotNormal = exports.GlorotUniform = exports.VarianceScaling = exports.Identity = exports.TruncatedNormal = exports.RandomNormal = exports.RandomUniform = exports.Constant = exports.Ones = exports.Zeros = exports.Initializer = exports.VALID_DISTRIBUTION_VALUES = exports.VALID_FAN_MODE_VALUES = undefined;
exports.checkFanMode = checkFanMode;
exports.checkDistribution = checkDistribution;
exports.serializeInitializer = serializeInitializer;
exports.getInitializer = getInitializer;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tfjs_backend = require("./backend/tfjs_backend");

var K = _interopRequireWildcard(_tfjs_backend);

var _common = require("./common");

var _errors = require("./errors");

var _generic_utils = require("./utils/generic_utils");

var _math_utils = require("./utils/math_utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var VALID_FAN_MODE_VALUES = exports.VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg'];
function checkFanMode(value) {
    (0, _generic_utils.checkStringTypeUnionValue)(VALID_FAN_MODE_VALUES, 'FanMode', value);
}
var VALID_DISTRIBUTION_VALUES = exports.VALID_DISTRIBUTION_VALUES = ['normal', 'uniform'];
function checkDistribution(value) {
    (0, _generic_utils.checkStringTypeUnionValue)(VALID_DISTRIBUTION_VALUES, 'Distribution', value);
}
var Initializer = function (_super) {
    __extends(Initializer, _super);
    function Initializer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Initializer.prototype.fromConfigUsesCustomObjects = function () {
        return false;
    };
    Initializer.prototype.getConfig = function () {
        return {};
    };
    Initializer = __decorate([(0, _tfjsCore.doc)({ heading: 'Initializers', subheading: 'Classes', namespace: 'initializers' })], Initializer);
    return Initializer;
}(_tfjsCore.serialization.Serializable);
exports.Initializer = Initializer;

var Zeros = function (_super) {
    __extends(Zeros, _super);
    function Zeros() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Zeros.prototype.apply = function (shape, dtype) {
        return (0, _tfjsCore.zeros)(shape, dtype);
    };
    Zeros.className = 'Zeros';
    return Zeros;
}(Initializer);
exports.Zeros = Zeros;

_tfjsCore.serialization.SerializationMap.register(Zeros);
var Ones = function (_super) {
    __extends(Ones, _super);
    function Ones() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ones.prototype.apply = function (shape, dtype) {
        return (0, _tfjsCore.ones)(shape, dtype);
    };
    Ones.className = 'Ones';
    return Ones;
}(Initializer);
exports.Ones = Ones;

_tfjsCore.serialization.SerializationMap.register(Ones);
var Constant = function (_super) {
    __extends(Constant, _super);
    function Constant(config) {
        var _this = _super.call(this) || this;
        _this.value = config.value;
        return _this;
    }
    Constant.prototype.apply = function (shape, dtype) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            return K.scalarTimesArray((0, _tfjsCore.scalar)(_this.value), (0, _tfjsCore.ones)(shape, dtype));
        });
    };
    Constant.prototype.getConfig = function () {
        return {
            value: this.value
        };
    };
    Constant.className = 'Constant';
    return Constant;
}(Initializer);
exports.Constant = Constant;

_tfjsCore.serialization.SerializationMap.register(Constant);
var RandomUniform = function (_super) {
    __extends(RandomUniform, _super);
    function RandomUniform(config) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_MINVAL = -0.05;
        _this.DEFAULT_MAXVAL = 0.05;
        _this.minval = config.minval || _this.DEFAULT_MINVAL;
        _this.maxval = config.maxval || _this.DEFAULT_MAXVAL;
        _this.seed = config.seed;
        return _this;
    }
    RandomUniform.prototype.apply = function (shape, dtype) {
        return (0, _tfjsCore.randomUniform)(shape, this.minval, this.maxval, dtype);
    };
    RandomUniform.prototype.getConfig = function () {
        return { minval: this.minval, maxval: this.maxval, seed: this.seed };
    };
    RandomUniform.className = 'RandomUniform';
    return RandomUniform;
}(Initializer);
exports.RandomUniform = RandomUniform;

_tfjsCore.serialization.SerializationMap.register(RandomUniform);
var RandomNormal = function (_super) {
    __extends(RandomNormal, _super);
    function RandomNormal(config) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_MEAN = 0.;
        _this.DEFAULT_STDDEV = 0.05;
        _this.mean = config.mean || _this.DEFAULT_MEAN;
        _this.stddev = config.stddev || _this.DEFAULT_STDDEV;
        _this.seed = config.seed;
        return _this;
    }
    RandomNormal.prototype.apply = function (shape, dtype) {
        if (dtype === 'bool') {
            throw new _errors.NotImplementedError("randomNormal does not support dType bool.");
        }
        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);
    };
    RandomNormal.prototype.getConfig = function () {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
    };
    RandomNormal.className = 'RandomNormal';
    return RandomNormal;
}(Initializer);
exports.RandomNormal = RandomNormal;

_tfjsCore.serialization.SerializationMap.register(RandomNormal);
var TruncatedNormal = function (_super) {
    __extends(TruncatedNormal, _super);
    function TruncatedNormal(config) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_MEAN = 0.;
        _this.DEFAULT_STDDEV = 0.05;
        _this.mean = config.mean || _this.DEFAULT_MEAN;
        _this.stddev = config.stddev || _this.DEFAULT_STDDEV;
        _this.seed = config.seed;
        return _this;
    }
    TruncatedNormal.prototype.apply = function (shape, dtype) {
        if (dtype === 'bool') {
            throw new _errors.NotImplementedError("truncatedNormal does not support dType bool.");
        }
        return (0, _tfjsCore.truncatedNormal)(shape, this.mean, this.stddev, dtype, this.seed);
    };
    TruncatedNormal.prototype.getConfig = function () {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
    };
    TruncatedNormal.className = 'TruncatedNormal';
    return TruncatedNormal;
}(Initializer);
exports.TruncatedNormal = TruncatedNormal;

_tfjsCore.serialization.SerializationMap.register(TruncatedNormal);
var Identity = function (_super) {
    __extends(Identity, _super);
    function Identity(config) {
        var _this = _super.call(this) || this;
        _this.gain = config.gain != null ? (0, _tfjsCore.scalar)(config.gain) : K.getScalar(1.0);
        return _this;
    }
    Identity.prototype.apply = function (shape, dtype) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            if (shape.length !== 2 || shape[0] !== shape[1]) {
                throw new _errors.ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');
            } else {
                return K.scalarTimesArray(_this.gain, (0, _tfjsCore.eye)(shape[0]));
            }
        });
    };
    Identity.prototype.getConfig = function () {
        return { gain: this.gain.get() };
    };
    Identity.className = 'Identity';
    return Identity;
}(Initializer);
exports.Identity = Identity;

_tfjsCore.serialization.SerializationMap.register(Identity);
function computeFans(shape, dataFormat) {
    if (dataFormat === void 0) {
        dataFormat = 'channelsLast';
    }
    var fanIn;
    var fanOut;
    (0, _common.checkDataFormat)(dataFormat);
    if (shape.length === 2) {
        fanIn = shape[0];
        fanOut = shape[1];
    } else if ([3, 4, 5].indexOf(shape.length) !== -1) {
        if (dataFormat === 'channelsFirst') {
            var receptiveFieldSize = (0, _math_utils.arrayProd)(shape, 2);
            fanIn = shape[1] * receptiveFieldSize;
            fanOut = shape[0] * receptiveFieldSize;
        } else if (dataFormat === 'channelsLast') {
            var receptiveFieldSize = (0, _math_utils.arrayProd)(shape, 0, shape.length - 2);
            fanIn = shape[shape.length - 2] * receptiveFieldSize;
            fanOut = shape[shape.length - 1] * receptiveFieldSize;
        }
    } else {
        var shapeProd = (0, _math_utils.arrayProd)(shape);
        fanIn = Math.sqrt(shapeProd);
        fanOut = Math.sqrt(shapeProd);
    }
    return [fanIn, fanOut];
}
var VarianceScaling = function (_super) {
    __extends(VarianceScaling, _super);
    function VarianceScaling(config) {
        var _this = _super.call(this) || this;
        if (config.scale < 0.0) {
            throw new _errors.ValueError("scale must be a positive float. Got: " + config.scale);
        }
        _this.scale = config.scale == null ? 1.0 : config.scale;
        _this.mode = config.mode;
        checkFanMode(_this.mode);
        _this.distribution = config.distribution;
        checkDistribution(_this.distribution);
        _this.seed = config.seed;
        return _this;
    }
    VarianceScaling.prototype.apply = function (shape, dtype) {
        var fans = computeFans(shape);
        var fanIn = fans[0];
        var fanOut = fans[1];
        var scale = this.scale;
        if (this.mode === 'fanIn') {
            scale /= Math.max(1, fanIn);
        } else if (this.mode === 'fanOut') {
            scale /= Math.max(1, fanOut);
        } else {
            scale /= Math.max(1, (fanIn + fanOut) / 2);
        }
        if (this.distribution === 'normal') {
            var stddev = Math.sqrt(scale);
            if (dtype === 'bool') {
                throw new _errors.NotImplementedError(this.getClassName() + " does not support dType bool.");
            }
            return (0, _tfjsCore.truncatedNormal)(shape, 0, stddev, dtype, this.seed);
        } else {
            var limit = Math.sqrt(3 * scale);
            return (0, _tfjsCore.randomUniform)(shape, -limit, limit, dtype);
        }
    };
    VarianceScaling.prototype.getConfig = function () {
        return {
            scale: this.scale,
            mode: this.mode,
            distribution: this.distribution,
            seed: this.seed
        };
    };
    VarianceScaling.className = 'VarianceScaling';
    return VarianceScaling;
}(Initializer);
exports.VarianceScaling = VarianceScaling;

_tfjsCore.serialization.SerializationMap.register(VarianceScaling);
var GlorotUniform = function (_super) {
    __extends(GlorotUniform, _super);
    function GlorotUniform(config) {
        return _super.call(this, {
            scale: 1.0,
            mode: 'fanAvg',
            distribution: 'uniform',
            seed: config == null ? null : config.seed
        }) || this;
    }
    GlorotUniform.prototype.getClassName = function () {
        return VarianceScaling.className;
    };
    return GlorotUniform;
}(VarianceScaling);
exports.GlorotUniform = GlorotUniform;

var GlorotNormal = function (_super) {
    __extends(GlorotNormal, _super);
    function GlorotNormal(config) {
        return _super.call(this, {
            scale: 1.0,
            mode: 'fanAvg',
            distribution: 'normal',
            seed: config == null ? null : config.seed
        }) || this;
    }
    GlorotNormal.prototype.getClassName = function () {
        return VarianceScaling.className;
    };
    return GlorotNormal;
}(VarianceScaling);
exports.GlorotNormal = GlorotNormal;

var HeNormal = function (_super) {
    __extends(HeNormal, _super);
    function HeNormal(config) {
        return _super.call(this, {
            scale: 2.0,
            mode: 'fanIn',
            distribution: 'normal',
            seed: config == null ? null : config.seed
        }) || this;
    }
    HeNormal.prototype.getClassName = function () {
        return VarianceScaling.className;
    };
    return HeNormal;
}(VarianceScaling);
exports.HeNormal = HeNormal;

var LeCunNormal = function (_super) {
    __extends(LeCunNormal, _super);
    function LeCunNormal(config) {
        return _super.call(this, {
            scale: 1.0,
            mode: 'fanIn',
            distribution: 'normal',
            seed: config == null ? null : config.seed
        }) || this;
    }
    LeCunNormal.prototype.getClassName = function () {
        return VarianceScaling.className;
    };
    return LeCunNormal;
}(VarianceScaling);
exports.LeCunNormal = LeCunNormal;

var Orthogonal = function (_super) {
    __extends(Orthogonal, _super);
    function Orthogonal(config) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_GAIN = 1;
        _this.gain = config.gain == null ? _this.DEFAULT_GAIN : config.gain;
        _this.seed = config.seed;
        if (_this.seed != null) {
            throw new _errors.NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');
        }
        return _this;
    }
    Orthogonal.prototype.apply = function (shape, dtype) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            if (shape.length !== 2) {
                throw new _errors.NotImplementedError('The Orthogonal Initializer does not support non-2D shapes yet.');
            }
            if (shape[0] * shape[1] > 2000) {
                console.warn("Orthogonal initializer is being called on a matrix with more " + ("than 2000 (" + shape[0] * shape[1] + ") elements: ") + "Slowness may result.");
            }
            var normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;
            var a = K.randomNormal(normalizedShape, 0, 1, 'float32');
            var q = _tfjsCore.linalg.gramSchmidt(a);
            if (shape[0] > shape[1]) {
                q = q.transpose();
            }
            return K.scalarTimesArray(K.getScalar(_this.gain), q);
        });
    };
    Orthogonal.prototype.getConfig = function () {
        return {
            gain: this.gain,
            seed: this.seed
        };
    };
    Orthogonal.className = 'Orthogonal';
    return Orthogonal;
}(Initializer);
exports.Orthogonal = Orthogonal;

_tfjsCore.serialization.SerializationMap.register(Orthogonal);
var INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    'constant': 'Constant',
    'glorotNormal': 'GlorotNormal',
    'glorotUniform': 'GlorotUniform',
    'heNormal': 'HeNormal',
    'identity': 'Identity',
    'leCunNormal': 'LeCunNormal',
    'ones': 'Ones',
    'orthogonal': 'Orthogonal',
    'randomNormal': 'RandomNormal',
    'randomUniform': 'RandomUniform',
    'truncatedNormal': 'TruncatedNormal',
    'varianceScaling': 'VarianceScaling',
    'zeros': 'Zeros'
};
function deserializeInitializer(config, customObjects) {
    if (customObjects === void 0) {
        customObjects = {};
    }
    return (0, _generic_utils.deserializeKerasObject)(config, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');
}
function serializeInitializer(initializer) {
    return (0, _generic_utils.serializeKerasObject)(initializer);
}
function getInitializer(identifier) {
    if (typeof identifier === 'string') {
        var className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
        if (className === 'GlorotUniform') {
            return new GlorotUniform();
        } else if (className === 'GlorotNormal') {
            return new GlorotNormal();
        } else if (className === 'HeNormal') {
            return new HeNormal();
        } else if (className === 'LeCunNormal') {
            return new LeCunNormal();
        } else {
            var config = { className: className, config: {} };
            return deserializeInitializer(config);
        }
    } else if (identifier instanceof Initializer) {
        return identifier;
    } else {
        return deserializeInitializer(identifier);
    }
}
//# sourceMappingURL=initializers.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./common":"uF+p","./errors":"WwMz","./utils/generic_utils":"Uv0q","./utils/math_utils":"42TA"}],"mGqD":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Softmax = exports.Tanh = exports.Softsign = exports.Softplus = exports.HardSigmoid = exports.Sigmoid = exports.Linear = exports.Relu6 = exports.Relu = exports.Selu = exports.Elu = exports.Activation = undefined;
exports.serializeActivation = serializeActivation;
exports.deserializeActivation = deserializeActivation;
exports.getActivation = getActivation;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require('./backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _generic_utils = require('./utils/generic_utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var Activation = function (_super) {
    __extends(Activation, _super);
    function Activation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Activation.prototype.getConfig = function () {
        return {};
    };
    return Activation;
}(_tfjsCore.serialization.Serializable);
exports.Activation = Activation;

var Elu = function (_super) {
    __extends(Elu, _super);
    function Elu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Elu.prototype.apply = function (x, alpha) {
        if (alpha === void 0) {
            alpha = 1;
        }
        return K.elu(x, alpha);
    };
    Elu.className = 'elu';
    return Elu;
}(Activation);
exports.Elu = Elu;

_tfjsCore.serialization.SerializationMap.register(Elu);
var Selu = function (_super) {
    __extends(Selu, _super);
    function Selu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Selu.prototype.apply = function (x) {
        return tfc.selu(x);
    };
    Selu.className = 'selu';
    return Selu;
}(Activation);
exports.Selu = Selu;

_tfjsCore.serialization.SerializationMap.register(Selu);
var Relu = function (_super) {
    __extends(Relu, _super);
    function Relu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Relu.prototype.apply = function (x) {
        return tfc.relu(x);
    };
    Relu.className = 'relu';
    return Relu;
}(Activation);
exports.Relu = Relu;

_tfjsCore.serialization.SerializationMap.register(Relu);
var Relu6 = function (_super) {
    __extends(Relu6, _super);
    function Relu6() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Relu6.prototype.apply = function (x) {
        return (0, _tfjsCore.tidy)(function () {
            return tfc.minimum(K.getScalar(6.0), tfc.relu(x));
        });
    };
    Relu6.className = 'relu6';
    return Relu6;
}(Activation);
exports.Relu6 = Relu6;

_tfjsCore.serialization.SerializationMap.register(Relu6);
var Linear = function (_super) {
    __extends(Linear, _super);
    function Linear() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Linear.prototype.apply = function (x) {
        return x;
    };
    Linear.className = 'linear';
    return Linear;
}(Activation);
exports.Linear = Linear;

_tfjsCore.serialization.SerializationMap.register(Linear);
var Sigmoid = function (_super) {
    __extends(Sigmoid, _super);
    function Sigmoid() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Sigmoid.prototype.apply = function (x) {
        return tfc.sigmoid(x);
    };
    Sigmoid.className = 'sigmoid';
    return Sigmoid;
}(Activation);
exports.Sigmoid = Sigmoid;

_tfjsCore.serialization.SerializationMap.register(Sigmoid);
var HardSigmoid = function (_super) {
    __extends(HardSigmoid, _super);
    function HardSigmoid() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HardSigmoid.prototype.apply = function (x) {
        return K.hardSigmoid(x);
    };
    HardSigmoid.className = 'hardSigmoid';
    return HardSigmoid;
}(Activation);
exports.HardSigmoid = HardSigmoid;

_tfjsCore.serialization.SerializationMap.register(HardSigmoid);
var Softplus = function (_super) {
    __extends(Softplus, _super);
    function Softplus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Softplus.prototype.apply = function (x) {
        return tfc.softplus(x);
    };
    Softplus.className = 'softplus';
    return Softplus;
}(Activation);
exports.Softplus = Softplus;

_tfjsCore.serialization.SerializationMap.register(Softplus);
var Softsign = function (_super) {
    __extends(Softsign, _super);
    function Softsign() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Softsign.prototype.apply = function (x) {
        return K.softsign(x);
    };
    Softsign.className = 'softsign';
    return Softsign;
}(Activation);
exports.Softsign = Softsign;

_tfjsCore.serialization.SerializationMap.register(Softsign);
var Tanh = function (_super) {
    __extends(Tanh, _super);
    function Tanh() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tanh.prototype.apply = function (x) {
        return tfc.tanh(x);
    };
    Tanh.className = 'tanh';
    return Tanh;
}(Activation);
exports.Tanh = Tanh;

_tfjsCore.serialization.SerializationMap.register(Tanh);
var Softmax = function (_super) {
    __extends(Softmax, _super);
    function Softmax() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Softmax.prototype.apply = function (x, axis) {
        if (axis === void 0) {
            axis = -1;
        }
        return tfc.softmax(x, axis);
    };
    Softmax.className = 'softmax';
    return Softmax;
}(Activation);
exports.Softmax = Softmax;

_tfjsCore.serialization.SerializationMap.register(Softmax);
function serializeActivation(activation) {
    return activation.getClassName();
}
function deserializeActivation(config, customObjects) {
    if (customObjects === void 0) {
        customObjects = {};
    }
    return (0, _generic_utils.deserializeKerasObject)(config, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, customObjects, 'activation');
}
function getActivation(identifier) {
    if (identifier == null) {
        var config = { className: 'linear', config: {} };
        return deserializeActivation(config);
    }
    if (typeof identifier === 'string') {
        var config = { className: identifier, config: {} };
        return deserializeActivation(config);
    } else if (identifier instanceof Activation) {
        return identifier;
    } else {
        return deserializeActivation(identifier);
    }
}
//# sourceMappingURL=activations.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./utils/generic_utils":"Uv0q"}],"opnf":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Softmax = exports.ThresholdedReLU = exports.ELU = exports.LeakyReLU = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var _activations = require('../activations');

var _tfjs_backend = require('../backend/tfjs_backend');

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var LeakyReLU = function (_super) {
    __extends(LeakyReLU, _super);
    function LeakyReLU(config) {
        var _this = _super.call(this, config == null ? {} : config) || this;
        _this.DEFAULT_ALPHA = 0.3;
        if (config == null) {
            config = {};
        }
        _this.alpha = config.alpha == null ? _this.DEFAULT_ALPHA : config.alpha;
        return _this;
    }
    LeakyReLU.prototype.call = function (inputs, kwargs) {
        var x = generic_utils.getExactlyOneTensor(inputs);
        return (0, _tfjsCore.leakyRelu)(x, this.alpha);
    };
    LeakyReLU.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    LeakyReLU.prototype.getConfig = function () {
        var config = { alpha: this.alpha };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    LeakyReLU.className = 'LeakyReLU';
    return LeakyReLU;
}(_topology.Layer);
exports.LeakyReLU = LeakyReLU;

_tfjsCore.serialization.SerializationMap.register(LeakyReLU);
var ELU = function (_super) {
    __extends(ELU, _super);
    function ELU(config) {
        var _this = _super.call(this, config == null ? {} : config) || this;
        _this.DEFAULT_ALPHA = 1.0;
        if (config == null) {
            config = {};
        }
        if (config.alpha != null && config.alpha !== _this.DEFAULT_ALPHA) {
            throw new _errors.NotImplementedError("Non-default alpha value (" + config.alpha + ") is not supported by the " + "ELU layer yet.");
        }
        _this.alpha = config.alpha == null ? _this.DEFAULT_ALPHA : config.alpha;
        return _this;
    }
    ELU.prototype.call = function (inputs, kwargs) {
        var x = generic_utils.getExactlyOneTensor(inputs);
        return (0, _tfjsCore.elu)(x);
    };
    ELU.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    ELU.prototype.getConfig = function () {
        var config = { alpha: this.alpha };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    ELU.className = 'ELU';
    return ELU;
}(_topology.Layer);
exports.ELU = ELU;

_tfjsCore.serialization.SerializationMap.register(ELU);
var ThresholdedReLU = function (_super) {
    __extends(ThresholdedReLU, _super);
    function ThresholdedReLU(config) {
        var _this = _super.call(this, config == null ? {} : config) || this;
        _this.DEFAULT_THETA = 1.0;
        if (config == null) {
            config = {};
        }
        _this.theta = config.theta == null ? _this.DEFAULT_THETA : config.theta;
        _this.thetaTensor = (0, _tfjs_backend.getScalar)(_this.theta);
        return _this;
    }
    ThresholdedReLU.prototype.call = function (inputs, kwargs) {
        var x = generic_utils.getExactlyOneTensor(inputs);
        return x.mul((0, _tfjs_backend.cast)(x.greater(this.thetaTensor), 'float32'));
    };
    ThresholdedReLU.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    ThresholdedReLU.prototype.getConfig = function () {
        var config = { theta: this.theta };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    ThresholdedReLU.className = 'ThresholdedReLU';
    return ThresholdedReLU;
}(_topology.Layer);
exports.ThresholdedReLU = ThresholdedReLU;

_tfjsCore.serialization.SerializationMap.register(ThresholdedReLU);
var Softmax = function (_super) {
    __extends(Softmax, _super);
    function Softmax(config) {
        var _this = _super.call(this, config == null ? {} : config) || this;
        _this.DEFAULT_AXIS = 1.0;
        if (config == null) {
            config = {};
        }
        _this.softmax = new _activations.Softmax().apply;
        _this.axis = config.axis == null ? _this.DEFAULT_AXIS : config.axis;
        return _this;
    }
    Softmax.prototype.call = function (inputs, kwargs) {
        var x = generic_utils.getExactlyOneTensor(inputs);
        return this.softmax(x, this.axis);
    };
    Softmax.prototype.computeOutputShape = function (inputShape) {
        return inputShape;
    };
    Softmax.prototype.getConfig = function () {
        var config = { axis: this.axis };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Softmax.className = 'Softmax';
    return Softmax;
}(_topology.Layer);
exports.Softmax = Softmax;

_tfjsCore.serialization.SerializationMap.register(Softmax);
//# sourceMappingURL=advanced_activations.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../activations":"mGqD","../backend/tfjs_backend":"yoLG","../engine/topology":"q4cr","../errors":"WwMz","../utils/generic_utils":"Uv0q"}],"qedd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.L1L2 = exports.Regularizer = undefined;
exports.l1 = l1;
exports.l2 = l2;
exports.serializeRegularizer = serializeRegularizer;
exports.deserializeRegularizer = deserializeRegularizer;
exports.getRegularizer = getRegularizer;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tfjs_backend = require("./backend/tfjs_backend");

var K = _interopRequireWildcard(_tfjs_backend);

var _generic_utils = require("./utils/generic_utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var Regularizer = function (_super) {
    __extends(Regularizer, _super);
    function Regularizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Regularizer;
}(_tfjsCore.serialization.Serializable);
exports.Regularizer = Regularizer;

var L1L2 = function (_super) {
    __extends(L1L2, _super);
    function L1L2(config) {
        var _this = _super.call(this) || this;
        var l1 = config == null || config.l1 == null ? 0.01 : config.l1;
        var l2 = config == null || config.l2 == null ? 0.01 : config.l2;
        _this.hasL1 = l1 !== 0;
        _this.hasL2 = l2 !== 0;
        _this.l1 = K.getScalar(l1);
        _this.l2 = K.getScalar(l2);
        return _this;
    }
    L1L2.prototype.apply = function (x) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var regularization = (0, _tfjsCore.zeros)([1]);
            if (_this.hasL1) {
                regularization = (0, _tfjsCore.add)(regularization, (0, _tfjsCore.sum)(K.scalarTimesArray(_this.l1, (0, _tfjsCore.abs)(x))));
            }
            if (_this.hasL2) {
                regularization = (0, _tfjsCore.add)(regularization, (0, _tfjsCore.sum)(K.scalarTimesArray(_this.l2, K.square(x))));
            }
            return regularization.asScalar();
        });
    };
    L1L2.prototype.getConfig = function () {
        return { 'l1': this.l1.dataSync()[0], 'l2': this.l2.dataSync()[0] };
    };
    L1L2.fromConfig = function (cls, config) {
        return new cls({ l1: config.l1, l2: config.l2 });
    };
    L1L2.className = 'L1L2';
    L1L2 = __decorate([(0, _tfjsCore.doc)({ heading: 'Regularizers', namespace: 'regularizers' })], L1L2);
    return L1L2;
}(Regularizer);
exports.L1L2 = L1L2;

_tfjsCore.serialization.SerializationMap.register(L1L2);
function l1(config) {
    return new L1L2({ l1: config != null ? config.l1 : null, l2: 0 });
}
function l2(config) {
    return new L1L2({ l2: config != null ? config.l2 : null, l1: 0 });
}
var REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    'l1l2': 'L1L2'
};
function serializeRegularizer(constraint) {
    return (0, _generic_utils.serializeKerasObject)(constraint);
}
function deserializeRegularizer(config, customObjects) {
    if (customObjects === void 0) {
        customObjects = {};
    }
    return (0, _generic_utils.deserializeKerasObject)(config, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');
}
function getRegularizer(identifier) {
    if (identifier == null) {
        return null;
    }
    if (typeof identifier === 'string') {
        var className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
        var config = { className: className, config: {} };
        return deserializeRegularizer(config);
    } else if (identifier instanceof Regularizer) {
        return identifier;
    } else {
        return deserializeRegularizer(identifier);
    }
}
//# sourceMappingURL=regularizers.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./utils/generic_utils":"Uv0q"}],"f2Kr":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.normalizeArray = normalizeArray;
exports.convOutputLength = convOutputLength;
exports.deconvLength = deconvLength;

var _errors = require('../errors');

var _generic_utils = require('./generic_utils');

var _math_utils = require('./math_utils');

function normalizeArray(value, n, name) {
    if (typeof value === 'number') {
        return (0, _generic_utils.pyListRepeat)(value, n);
    } else {
        if (value.length !== n) {
            throw new _errors.ValueError("The " + name + " argument must be a tuple of " + n + " integers. Received: " + (value.length + " elements."));
        }
        for (var i = 0; i < n; ++i) {
            var singleValue = value[i];
            if (!(0, _math_utils.isInteger)(singleValue)) {
                throw new _errors.ValueError("The " + name + " argument must be a tuple of " + n + " integers. Received: " + (JSON.stringify(value) + " including a non-integer number ") + ("" + singleValue));
            }
        }
        return value;
    }
}
function convOutputLength(inputLength, filterSize, padding, stride, dilation) {
    if (dilation === void 0) {
        dilation = 1;
    }
    if (inputLength == null) {
        return inputLength;
    }
    var dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);
    var outputLength;
    if (padding === 'same') {
        outputLength = inputLength;
    } else {
        outputLength = inputLength - dilatedFilterSize + 1;
    }
    return Math.floor((outputLength + stride - 1) / stride);
}
function deconvLength(dimSize, strideSize, kernelSize, padding) {
    if (dimSize == null) {
        return null;
    }
    if (padding === 'valid') {
        dimSize = dimSize * strideSize + (0, _math_utils.max)([kernelSize - strideSize, 0]);
    } else if (padding === 'same') {
        dimSize = dimSize * strideSize;
    } else {
        throw new _errors.ValueError("Unsupport padding mode: " + padding + ".");
    }
    return dimSize;
}
//# sourceMappingURL=conv_utils.js.map
},{"../errors":"WwMz","./generic_utils":"Uv0q","./math_utils":"42TA"}],"TnZK":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UpSampling2D = exports.Cropping2D = exports.Conv1D = exports.SeparableConv2D = exports.SeparableConv = exports.Conv2DTranspose = exports.Conv2D = exports.Conv = undefined;
exports.preprocessConv2DInput = preprocessConv2DInput;
exports.conv1dWithBias = conv1dWithBias;
exports.conv1d = conv1d;
exports.conv2d = conv2d;
exports.conv2dWithBias = conv2dWithBias;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _activations = require('../activations');

var _common = require('../backend/common');

var _tfjs_backend = require('../backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _common2 = require('../common');

var _constraints = require('../constraints');

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _initializers = require('../initializers');

var _regularizers = require('../regularizers');

var _conv_utils = require('../utils/conv_utils');

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
function preprocessConv2DInput(x, dataFormat) {
    return (0, _tfjsCore.tidy)(function () {
        (0, _common2.checkDataFormat)(dataFormat);
        if (dataFormat === 'channelsFirst') {
            return tfc.transpose(x, [0, 2, 3, 1]);
        } else {
            return x;
        }
    });
}
function conv1dWithBias(x, kernel, bias, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) {
        strides = 1;
    }
    if (padding === void 0) {
        padding = 'valid';
    }
    if (dilationRate === void 0) {
        dilationRate = 1;
    }
    return (0, _tfjsCore.tidy)(function () {
        if (dataFormat == null) {
            dataFormat = (0, _common.imageDataFormat)();
        }
        (0, _common2.checkDataFormat)(dataFormat);
        if (x.shape.length !== 3) {
            throw new _errors.ValueError("The input of a conv1dWithBias operation should be 3, but is " + (x.shape.length + " instead."));
        }
        if (kernel.shape.length !== 3) {
            throw new _errors.ValueError("The kernel for a conv1dWithBias operation should be 3, but is " + (kernel.shape.length + " instead"));
        }
        if (bias != null && bias.shape.length !== 1) {
            throw new _errors.ValueError("The bias for a conv1dWithBias operation should be 1, but is " + (kernel.shape.length + " instead"));
        }
        if (dataFormat === 'channelsFirst') {
            x = tfc.transpose(x, [0, 2, 1]);
        }
        if (padding === 'causal') {
            throw new _errors.NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');
        }
        var y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);
        if (bias != null) {
            y = K.biasAdd(y, bias);
        }
        return y;
    });
}
function conv1d(x, kernel, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) {
        strides = 1;
    }
    if (padding === void 0) {
        padding = 'valid';
    }
    if (dilationRate === void 0) {
        dilationRate = 1;
    }
    return (0, _tfjsCore.tidy)(function () {
        (0, _common2.checkDataFormat)(dataFormat);
        return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);
    });
}
function conv2d(x, kernel, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) {
        strides = [1, 1];
    }
    if (padding === void 0) {
        padding = 'valid';
    }
    return (0, _tfjsCore.tidy)(function () {
        (0, _common2.checkDataFormat)(dataFormat);
        return conv2dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);
    });
}
function conv2dWithBias(x, kernel, bias, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) {
        strides = [1, 1];
    }
    if (padding === void 0) {
        padding = 'valid';
    }
    return (0, _tfjsCore.tidy)(function () {
        if (dataFormat == null) {
            dataFormat = (0, _common.imageDataFormat)();
        }
        (0, _common2.checkDataFormat)(dataFormat);
        if (x.rank !== 3 && x.rank !== 4) {
            throw new _errors.ValueError("conv2dWithBias expects input to be of rank 3 or 4, but received " + (x.rank + "."));
        }
        if (kernel.rank !== 3 && kernel.rank !== 4) {
            throw new _errors.ValueError("conv2dWithBias expects kernel to be of rank 3 or 4, but received " + (x.rank + "."));
        }
        var y = preprocessConv2DInput(x, dataFormat);
        if (padding === 'causal') {
            throw new _errors.NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');
        }
        y = tfc.conv2d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);
        if (bias != null) {
            y = K.biasAdd(y, bias);
        }
        if (dataFormat === 'channelsFirst') {
            y = tfc.transpose(y, [0, 3, 1, 2]);
        }
        return y;
    });
}
var Conv = function (_super) {
    __extends(Conv, _super);
    function Conv(rank, config) {
        var _this = _super.call(this, config) || this;
        _this.kernel = null;
        _this.bias = null;
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        _this.rank = rank;
        if (_this.rank !== 1 && _this.rank !== 2) {
            throw new _errors.NotImplementedError("Convolution layer for rank other than 1 or 2 (" + _this.rank + ") is " + "not implemented yet.");
        }
        _this.filters = config.filters;
        _this.kernelSize = (0, _conv_utils.normalizeArray)(config.kernelSize, rank, 'kernelSize');
        _this.strides = (0, _conv_utils.normalizeArray)(config.strides == null ? 1 : config.strides, rank, 'strides');
        _this.padding = config.padding == null ? 'valid' : config.padding;
        (0, _common2.checkPaddingMode)(_this.padding);
        _this.dataFormat = config.dataFormat == null ? 'channelsLast' : config.dataFormat;
        (0, _common2.checkDataFormat)(_this.dataFormat);
        _this.dilationRate = config.dilationRate == null ? 1 : config.dilationRate;
        if (_this.rank === 1 && Array.isArray(_this.dilationRate) && _this.dilationRate.length !== 1) {
            throw new _errors.ValueError("dilationRate must be a number or an array of a single number " + "for 1D convolution, but received " + ("" + JSON.stringify(_this.dilationRate)));
        }
        if (_this.rank === 2) {
            if (typeof _this.dilationRate === 'number') {
                _this.dilationRate = [_this.dilationRate, _this.dilationRate];
            } else if (_this.dilationRate.length !== 2) {
                throw new _errors.ValueError("dilationRate must be a number or array of two numbers for 2D " + ("convolution, but received " + JSON.stringify(_this.dilationRate)));
            }
        }
        _this.activation = (0, _activations.getActivation)(config.activation);
        _this.useBias = config.useBias == null ? true : config.useBias;
        _this.kernelInitializer = (0, _initializers.getInitializer)(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.biasInitializer = (0, _initializers.getInitializer)(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.kernelConstraint = (0, _constraints.getConstraint)(config.kernelConstraint);
        _this.biasConstraint = (0, _constraints.getConstraint)(config.biasConstraint);
        _this.kernelRegularizer = (0, _regularizers.getRegularizer)(config.kernelRegularizer);
        _this.biasRegularizer = (0, _regularizers.getRegularizer)(config.biasRegularizer);
        _this.activityRegularizer = (0, _regularizers.getRegularizer)(config.activityRegularizer);
        return _this;
    }
    Conv.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null) {
            throw new _errors.ValueError("The channel dimension of the input should be defined. " + ("Found " + inputShape[channelAxis]));
        }
        var inputDim = inputShape[channelAxis];
        var kernelShape = this.kernelSize.concat([inputDim, this.filters]);
        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        this.inputSpec = [{ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) }];
        this.built = true;
        var _a;
    };
    Conv.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = generic_utils.getExactlyOneTensor(inputs);
            var outputs;
            var biasValue = _this.bias == null ? null : _this.bias.read();
            if (_this.rank === 1) {
                outputs = conv1dWithBias(inputs, _this.kernel.read(), biasValue, _this.strides[0], _this.padding, _this.dataFormat, _this.dilationRate);
            } else if (_this.rank === 2) {
                outputs = conv2dWithBias(inputs, _this.kernel.read(), biasValue, _this.strides, _this.padding, _this.dataFormat, _this.dilationRate);
            } else if (_this.rank === 3) {
                throw new _errors.NotImplementedError('3D convolution is not implemented yet.');
            }
            if (_this.activation != null) {
                outputs = _this.activation.apply(outputs);
            }
            return outputs;
        });
    };
    Conv.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var newSpace = [];
        var space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);
        for (var i = 0; i < space.length; ++i) {
            var newDim = (0, _conv_utils.convOutputLength)(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);
            newSpace.push(newDim);
        }
        var outputShape = [inputShape[0]];
        if (this.dataFormat === 'channelsLast') {
            outputShape = outputShape.concat(newSpace);
            outputShape.push(this.filters);
        } else {
            outputShape.push(this.filters);
            outputShape = outputShape.concat(newSpace);
        }
        return outputShape;
    };
    Conv.prototype.getConfig = function () {
        var config = {
            rank: this.rank,
            filters: this.filters,
            kernelSize: this.kernelSize,
            strides: this.strides,
            padding: this.padding,
            dataFormat: this.dataFormat,
            dilationRate: this.dilationRate,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint)
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Conv;
}(_topology.Layer);
exports.Conv = Conv;

var Conv2D = function (_super) {
    __extends(Conv2D, _super);
    function Conv2D(config) {
        return _super.call(this, 2, config) || this;
    }
    Conv2D.prototype.getConfig = function () {
        var config = _super.prototype.getConfig.call(this);
        delete config['rank'];
        return config;
    };
    Conv2D.className = 'Conv2D';
    return Conv2D;
}(Conv);
exports.Conv2D = Conv2D;

_tfjsCore.serialization.SerializationMap.register(Conv2D);
var Conv2DTranspose = function (_super) {
    __extends(Conv2DTranspose, _super);
    function Conv2DTranspose(config) {
        var _this = _super.call(this, config) || this;
        _this.inputSpec = [new _topology.InputSpec({ ndim: 4 })];
        if (_this.padding !== 'same' && _this.padding !== 'valid') {
            throw new _errors.ValueError("Conv2DTranspose currently supports only padding modes 'same' " + ("and 'valid', but received padding mode " + _this.padding));
        }
        return _this;
    }
    Conv2DTranspose.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        if (inputShape.length !== 4) {
            throw new _errors.ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));
        }
        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null) {
            throw new _errors.ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');
        }
        var inputDim = inputShape[channelAxis];
        var kernelShape = this.kernelSize.concat([this.filters, inputDim]);
        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        }
        this.inputSpec = [new _topology.InputSpec({ ndim: 4, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];
        this.built = true;
        var _a;
    };
    Conv2DTranspose.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return tfc.tidy(function () {
            var input = generic_utils.getExactlyOneTensor(inputs);
            if (input.shape.length !== 4) {
                throw new _errors.ValueError("Conv2DTranspose.call() expects input tensor to be rank-4, but " + ("received a tensor of rank-" + input.shape.length));
            }
            var inputShape = input.shape;
            var batchSize = inputShape[0];
            var hAxis;
            var wAxis;
            if (_this.dataFormat === 'channelsFirst') {
                hAxis = 2;
                wAxis = 3;
            } else {
                hAxis = 1;
                wAxis = 2;
            }
            var height = inputShape[hAxis];
            var width = inputShape[wAxis];
            var kernelH = _this.kernelSize[0];
            var kernelW = _this.kernelSize[1];
            var strideH = _this.strides[0];
            var strideW = _this.strides[1];
            var outHeight = (0, _conv_utils.deconvLength)(height, strideH, kernelH, _this.padding);
            var outWidth = (0, _conv_utils.deconvLength)(width, strideW, kernelW, _this.padding);
            var outputShape = [batchSize, outHeight, outWidth, _this.filters];
            if (_this.dataFormat !== 'channelsLast') {
                input = tfc.transpose(input, [0, 2, 3, 1]);
            }
            var outputs = tfc.conv2dTranspose(input, _this.kernel.read(), outputShape, _this.strides, _this.padding);
            if (_this.dataFormat !== 'channelsLast') {
                outputs = tfc.transpose(outputs, [0, 3, 1, 2]);
            }
            if (_this.bias != null) {
                outputs = K.biasAdd(outputs, _this.bias.read(), _this.dataFormat);
            }
            if (_this.activation != null) {
                outputs = _this.activation.apply(outputs);
            }
            return outputs;
        });
    };
    Conv2DTranspose.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var outputShape = inputShape.slice();
        var channelAxis;
        var heightAxis;
        var widthAxis;
        if (this.dataFormat === 'channelsFirst') {
            channelAxis = 1;
            heightAxis = 2;
            widthAxis = 3;
        } else {
            channelAxis = 3;
            heightAxis = 1;
            widthAxis = 2;
        }
        var kernelH = this.kernelSize[0];
        var kernelW = this.kernelSize[1];
        var strideH = this.strides[0];
        var strideW = this.strides[1];
        outputShape[channelAxis] = this.filters;
        outputShape[heightAxis] = (0, _conv_utils.deconvLength)(outputShape[heightAxis], strideH, kernelH, this.padding);
        outputShape[widthAxis] = (0, _conv_utils.deconvLength)(outputShape[widthAxis], strideW, kernelW, this.padding);
        return outputShape;
    };
    Conv2DTranspose.prototype.getConfig = function () {
        var config = _super.prototype.getConfig.call(this);
        delete config['dilationRate'];
        return config;
    };
    Conv2DTranspose.className = 'Conv2DTranspose';
    return Conv2DTranspose;
}(Conv2D);
exports.Conv2DTranspose = Conv2DTranspose;

_tfjsCore.serialization.SerializationMap.register(Conv2DTranspose);
var SeparableConv = function (_super) {
    __extends(SeparableConv, _super);
    function SeparableConv(rank, config) {
        var _this = _super.call(this, rank, config) || this;
        _this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';
        _this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';
        _this.depthwiseKernel = null;
        _this.pointwiseKernel = null;
        if (config.filters == null) {
            throw new _errors.ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');
        }
        if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {
            throw new _errors.ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');
        }
        if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {
            throw new _errors.ValueError("SeparableConv" + _this.rank + "D supports only padding modes: " + ("'same' and 'valid', but received " + JSON.stringify(config.padding)));
        }
        _this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;
        _this.depthwiseInitializer = (0, _initializers.getInitializer)(config.depthwiseInitializer || _this.DEFAULT_DEPTHWISE_INITIALIZER);
        _this.depthwiseRegularizer = (0, _regularizers.getRegularizer)(config.depthwiseRegularizer);
        _this.depthwiseConstraint = (0, _constraints.getConstraint)(config.depthwiseConstraint);
        _this.pointwiseInitializer = (0, _initializers.getInitializer)(config.depthwiseInitializer || _this.DEFAULT_POINTWISE_INITIALIZER);
        _this.pointwiseRegularizer = (0, _regularizers.getRegularizer)(config.pointwiseRegularizer);
        _this.pointwiseConstraint = (0, _constraints.getConstraint)(config.pointwiseConstraint);
        return _this;
    }
    SeparableConv.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        if (inputShape.length < this.rank + 2) {
            throw new _errors.ValueError("Inputs to SeparableConv" + this.rank + "D should have rank " + (this.rank + 2 + ", but received input shape: ") + ("" + JSON.stringify(inputShape)));
        }
        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {
            throw new _errors.ValueError("The channel dimension of the inputs should be defined, " + ("but found " + JSON.stringify(inputShape[channelAxis])));
        }
        var inputDim = inputShape[channelAxis];
        var depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);
        var pointwiseKernelShape = [];
        for (var i = 0; i < this.rank; ++i) {
            pointwiseKernelShape.push(1);
        }
        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);
        var trainable = true;
        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);
        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);
        } else {
            this.bias = null;
        }
        this.inputSpec = [new _topology.InputSpec({ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];
        this.built = true;
        var _a;
    };
    SeparableConv.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = generic_utils.getExactlyOneTensor(inputs);
            var output;
            if (_this.rank === 1) {
                throw new _errors.NotImplementedError('1D separable convolution is not implemented yet.');
            } else if (_this.rank === 2) {
                if (_this.dataFormat === 'channelsFirst') {
                    inputs = tfc.transpose(inputs, [0, 2, 3, 1]);
                }
                output = tfc.separableConv2d(inputs, _this.depthwiseKernel.read(), _this.pointwiseKernel.read(), _this.strides, _this.padding, _this.dilationRate, 'NHWC');
            }
            if (_this.useBias) {
                output = K.biasAdd(output, _this.bias.read(), _this.dataFormat);
            }
            if (_this.activation != null) {
                output = _this.activation.apply(output);
            }
            if (_this.dataFormat === 'channelsFirst') {
                output = tfc.transpose(output, [0, 3, 1, 2]);
            }
            return output;
        });
    };
    SeparableConv.prototype.getConfig = function () {
        var config = _super.prototype.getConfig.call(this);
        delete config['rank'];
        delete config['kernelInitializer'];
        delete config['kernelRegularizer'];
        delete config['kernelConstraint'];
        config['depthwiseInitializer'] = (0, _initializers.serializeInitializer)(this.depthwiseInitializer);
        config['pointwiseInitializer'] = (0, _initializers.serializeInitializer)(this.pointwiseInitializer);
        config['depthwiseRegularizer'] = (0, _regularizers.serializeRegularizer)(this.depthwiseRegularizer);
        config['pointwiseRegularizer'] = (0, _regularizers.serializeRegularizer)(this.pointwiseRegularizer);
        config['depthwiseConstraint'] = (0, _constraints.serializeConstraint)(this.depthwiseConstraint);
        config['pointwiseConstraint'] = (0, _constraints.serializeConstraint)(this.pointwiseConstraint);
        return config;
    };
    SeparableConv.className = 'SeparableConv';
    return SeparableConv;
}(Conv);
exports.SeparableConv = SeparableConv;

var SeparableConv2D = function (_super) {
    __extends(SeparableConv2D, _super);
    function SeparableConv2D(config) {
        return _super.call(this, 2, config) || this;
    }
    SeparableConv2D.className = 'SeparableConv2D';
    return SeparableConv2D;
}(SeparableConv);
exports.SeparableConv2D = SeparableConv2D;

_tfjsCore.serialization.SerializationMap.register(SeparableConv2D);
var Conv1D = function (_super) {
    __extends(Conv1D, _super);
    function Conv1D(config) {
        var _this = _super.call(this, 1, config) || this;
        _this.inputSpec = [{ ndim: 3 }];
        return _this;
    }
    Conv1D.prototype.getConfig = function () {
        var config = _super.prototype.getConfig.call(this);
        delete config['rank'];
        delete config['dataFormat'];
        return config;
    };
    Conv1D.className = 'Conv1D';
    return Conv1D;
}(Conv);
exports.Conv1D = Conv1D;

_tfjsCore.serialization.SerializationMap.register(Conv1D);
var Cropping2D = function (_super) {
    __extends(Cropping2D, _super);
    function Cropping2D(config) {
        var _this = _super.call(this, config) || this;
        if (typeof config.cropping === 'number') _this.cropping = [[config.cropping, config.cropping], [config.cropping, config.cropping]];else if (typeof config.cropping[0] === 'number') _this.cropping = [[config.cropping[0], config.cropping[0]], [config.cropping[1], config.cropping[1]]];else _this.cropping = config.cropping;
        _this.dataFormat = config.dataFormat === undefined ? 'channelsLast' : config.dataFormat;
        _this.inputSpec = [{ ndim: 4 }];
        return _this;
    }
    Cropping2D.prototype.computeOutputShape = function (inputShape) {
        if (this.dataFormat === 'channelsFirst') return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1]];else return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];
    };
    Cropping2D.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = generic_utils.getExactlyOneTensor(inputs);
            if (_this.dataFormat === 'channelsLast') {
                var hSliced = K.sliceAlongAxis(inputs, _this.cropping[0][0], inputs.shape[1] - _this.cropping[0][0] - _this.cropping[0][1], 2);
                return K.sliceAlongAxis(hSliced, _this.cropping[1][0], inputs.shape[2] - _this.cropping[1][1] - _this.cropping[1][0], 3);
            } else {
                var hSliced = K.sliceAlongAxis(inputs, _this.cropping[0][0], inputs.shape[2] - _this.cropping[0][0] - _this.cropping[0][1], 3);
                return K.sliceAlongAxis(hSliced, _this.cropping[1][0], inputs.shape[3] - _this.cropping[1][1] - _this.cropping[1][0], 4);
            }
        });
    };
    Cropping2D.prototype.getConfig = function () {
        var config = { cropping: this.cropping, dataFormat: this.dataFormat };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Cropping2D.className = 'Cropping2D';
    return Cropping2D;
}(_topology.Layer);
exports.Cropping2D = Cropping2D;

_tfjsCore.serialization.SerializationMap.register(Cropping2D);
var UpSampling2D = function (_super) {
    __extends(UpSampling2D, _super);
    function UpSampling2D(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_SIZE = [2, 2];
        _this.inputSpec = [{ ndim: 4 }];
        _this.size = config.size === undefined ? _this.DEFAULT_SIZE : config.size;
        _this.dataFormat = config.dataFormat === undefined ? 'channelsLast' : config.dataFormat;
        return _this;
    }
    UpSampling2D.prototype.computeOutputShape = function (inputShape) {
        if (this.dataFormat === 'channelsFirst') {
            var height = this.size[0] * inputShape[2];
            var width = this.size[1] * inputShape[3];
            return [inputShape[0], inputShape[1], height, width];
        } else {
            var height = this.size[0] * inputShape[1];
            var width = this.size[1] * inputShape[2];
            return [inputShape[0], height, width, inputShape[3]];
        }
    };
    UpSampling2D.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return tfc.tidy(function () {
            var input = generic_utils.getExactlyOneTensor(inputs);
            var inputShape = input.shape;
            if (_this.dataFormat === 'channelsFirst') {
                input = tfc.transpose(input, [0, 2, 3, 1]);
                var height = _this.size[0] * inputShape[2];
                var width = _this.size[1] * inputShape[3];
                var resized = input.resizeNearestNeighbor([height, width]);
                return tfc.transpose(resized, [0, 3, 1, 2]);
            } else {
                var height = _this.size[0] * inputShape[1];
                var width = _this.size[1] * inputShape[2];
                return input.resizeNearestNeighbor([height, width]);
            }
        });
    };
    UpSampling2D.prototype.getConfig = function () {
        var config = { size: this.size, dataFormat: this.dataFormat };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    UpSampling2D.className = 'UpSampling2D';
    return UpSampling2D;
}(_topology.Layer);
exports.UpSampling2D = UpSampling2D;

_tfjsCore.serialization.SerializationMap.register(UpSampling2D);
//# sourceMappingURL=convolutional.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../activations":"mGqD","../backend/common":"G+d8","../backend/tfjs_backend":"yoLG","../common":"uF+p","../constraints":"haqD","../engine/topology":"q4cr","../errors":"WwMz","../initializers":"5TN9","../regularizers":"qedd","../utils/conv_utils":"f2Kr","../utils/generic_utils":"Uv0q"}],"HD7T":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DepthwiseConv2D = undefined;
exports.depthwiseConv2d = depthwiseConv2d;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _common = require('../backend/common');

var _tfjs_backend = require('../backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _common2 = require('../common');

var _constraints = require('../constraints');

var _errors = require('../errors');

var _initializers = require('../initializers');

var _regularizers = require('../regularizers');

var _conv_utils = require('../utils/conv_utils');

var _generic_utils = require('../utils/generic_utils');

var _convolutional = require('./convolutional');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
function depthwiseConv2d(x, depthwiseKernel, strides, padding, dataFormat, dilationRate) {
    if (strides === void 0) {
        strides = [1, 1];
    }
    if (padding === void 0) {
        padding = 'valid';
    }
    return (0, _tfjsCore.tidy)(function () {
        if (dataFormat == null) {
            dataFormat = (0, _common.imageDataFormat)();
        }
        (0, _common2.checkDataFormat)(dataFormat);
        var y = (0, _convolutional.preprocessConv2DInput)(x, dataFormat);
        if (x.rank !== 4) {
            throw new _errors.ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead " + (x.rank + "-D"));
        }
        if (depthwiseKernel.rank !== 4) {
            throw new _errors.ValueError("depthwiseKernel is required to be 4-D, but is instead " + (depthwiseKernel.rank + "-D"));
        }
        y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);
        if (dataFormat === 'channelsFirst') {
            y = tfc.transpose(y, [0, 3, 1, 2]);
        }
        return y;
    });
}
var DepthwiseConv2D = function (_super) {
    __extends(DepthwiseConv2D, _super);
    function DepthwiseConv2D(config) {
        var _this = _super.call(this, config) || this;
        _this.depthwiseKernel = null;
        _this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;
        _this.depthwiseInitializer = (0, _initializers.getInitializer)(config.depthwiseInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.depthwiseConstraint = (0, _constraints.getConstraint)(config.depthwiseConstraint);
        _this.depthwiseRegularizer = (0, _regularizers.getRegularizer)(config.depthwiseRegularizer);
        return _this;
    }
    DepthwiseConv2D.prototype.build = function (inputShape) {
        inputShape = (0, _generic_utils.getExactlyOneShape)(inputShape);
        if (inputShape.length < 4) {
            throw new _errors.ValueError("Inputs to DepthwiseConv2D should have rank 4. " + ("Received input shape: " + JSON.stringify(inputShape) + "."));
        }
        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;
        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {
            throw new _errors.ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + ("be defined, but is not (" + inputShape[channelAxis] + ")."));
        }
        var inputDim = inputShape[channelAxis];
        var depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];
        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        } else {
            this.bias = null;
        }
        this.built = true;
    };
    DepthwiseConv2D.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = (0, _generic_utils.getExactlyOneTensor)(inputs);
            var outputs = depthwiseConv2d(inputs, _this.depthwiseKernel.read(), _this.strides, _this.padding, _this.dataFormat, null);
            if (_this.useBias) {
                outputs = K.biasAdd(outputs, _this.bias.read(), _this.dataFormat);
            }
            if (_this.activation != null) {
                outputs = _this.activation.apply(outputs);
            }
            return outputs;
        });
    };
    DepthwiseConv2D.prototype.computeOutputShape = function (inputShape) {
        inputShape = (0, _generic_utils.getExactlyOneShape)(inputShape);
        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];
        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];
        var outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;
        var outRows = (0, _conv_utils.convOutputLength)(rows, this.kernelSize[0], this.padding, this.strides[0]);
        var outCols = (0, _conv_utils.convOutputLength)(cols, this.kernelSize[1], this.padding, this.strides[1]);
        if (this.dataFormat === 'channelsFirst') {
            return [inputShape[0], outFilters, outRows, outCols];
        } else {
            return [inputShape[0], outRows, outCols, outFilters];
        }
    };
    DepthwiseConv2D.className = 'DepthwiseConv2D';
    return DepthwiseConv2D;
}(_convolutional.Conv2D);
exports.DepthwiseConv2D = DepthwiseConv2D;

_tfjsCore.serialization.SerializationMap.register(DepthwiseConv2D);
//# sourceMappingURL=convolutional_depthwise.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/common":"G+d8","../backend/tfjs_backend":"yoLG","../common":"uF+p","../constraints":"haqD","../errors":"WwMz","../initializers":"5TN9","../regularizers":"qedd","../utils/conv_utils":"f2Kr","../utils/generic_utils":"Uv0q","./convolutional":"TnZK"}],"03Pm":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Reshape = exports.RepeatVector = exports.Activation = exports.Flatten = exports.Dense = exports.Dropout = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var _activations = require('../activations');

var _tfjs_backend = require('../backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _constraints = require('../constraints');

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _initializers = require('../initializers');

var _regularizers = require('../regularizers');

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

var _math_utils = require('../utils/math_utils');

var math_utils = _interopRequireWildcard(_math_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var Dropout = function (_super) {
    __extends(Dropout, _super);
    function Dropout(config) {
        var _this = _super.call(this, config) || this;
        _this.rate = Math.max(Math.min(config.rate, 1), 0);
        _this.rateScalar = K.getScalar(_this.rate);
        _this.noiseShape = config.noiseShape;
        _this.seed = config.seed;
        if (_this.seed != null) {
            throw new _errors.NotImplementedError('Non-default seed is not implemented in Dropout layer yet: ' + _this.seed);
        }
        _this.supportsMasking = true;
        return _this;
    }
    Dropout.prototype.getNoiseShape = function (input) {
        if (this.noiseShape == null) {
            return this.noiseShape;
        }
        var inputShape = input.shape;
        var noiseShape = [];
        for (var i = 0; i < this.noiseShape.length; ++i) {
            noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);
        }
        return noiseShape;
    };
    Dropout.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            _this.invokeCallHook(inputs, kwargs);
            var input = generic_utils.getExactlyOneTensor(inputs);
            if (_this.noiseShape != null && !_tfjsCore.util.arraysEqual(input.shape, _this.noiseShape)) {
                throw new _errors.NotImplementedError('Non-default noise shape is not implemented in Dropout ' + 'layer yet: ' + JSON.stringify(_this.noiseShape));
            }
            if (0 < _this.rate && _this.rate < 1) {
                var training = kwargs['training'] == null ? false : kwargs['training'];
                var noiseShape_1 = _this.getNoiseShape(input);
                var output = K.inTrainPhase(function () {
                    return K.dropout(input, _this.rateScalar, noiseShape_1, _this.seed);
                }, function () {
                    return input;
                }, training);
                return output;
            }
            return inputs;
        });
    };
    Dropout.prototype.getConfig = function () {
        var config = {
            rate: this.rate,
            noiseShape: this.noiseShape,
            seed: this.seed
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Dropout.className = 'Dropout';
    return Dropout;
}(_topology.Layer);
exports.Dropout = Dropout;

_tfjsCore.serialization.SerializationMap.register(Dropout);
var Dense = function (_super) {
    __extends(Dense, _super);
    function Dense(config) {
        var _this = _super.call(this, config) || this;
        _this.activation = null;
        _this.useBias = true;
        _this.kernel = null;
        _this.bias = null;
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        if (config.batchInputShape == null && config.inputShape == null && config.inputDim != null) {
            var batchSize = null;
            if (config.batchSize != null) {
                batchSize = config.batchSize;
            }
            _this.batchInputShape = [batchSize, config.inputDim];
        }
        _this.units = config.units;
        _this.activation = (0, _activations.getActivation)(config.activation);
        if (config.useBias != null) {
            _this.useBias = config.useBias;
        }
        _this.kernelInitializer = (0, _initializers.getInitializer)(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.biasInitializer = (0, _initializers.getInitializer)(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.kernelConstraint = (0, _constraints.getConstraint)(config.kernelConstraint);
        _this.biasConstraint = (0, _constraints.getConstraint)(config.biasConstraint);
        _this.kernelRegularizer = (0, _regularizers.getRegularizer)(config.kernelRegularizer);
        _this.biasRegularizer = (0, _regularizers.getRegularizer)(config.biasRegularizer);
        _this.activityRegularizer = (0, _regularizers.getRegularizer)(config.activityRegularizer);
        _this.inputSpec = [{ minNDim: 2 }];
        return _this;
    }
    Dense.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var inputLastDim = inputShape[inputShape.length - 1];
        if (this.kernel == null) {
            this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
            if (this.useBias) {
                this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
            }
        }
        this.inputSpec = [{ minNDim: 2, axes: (_a = {}, _a[-1] = inputLastDim, _a) }];
        this.built = true;
        var _a;
    };
    Dense.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var outputShape = inputShape.slice();
        outputShape[outputShape.length - 1] = this.units;
        return outputShape;
    };
    Dense.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            _this.invokeCallHook(inputs, kwargs);
            var input = generic_utils.getExactlyOneTensor(inputs);
            var output = K.dot(input, _this.kernel.read());
            if (_this.bias != null) {
                output = K.biasAdd(output, _this.bias.read());
            }
            if (_this.activation != null) {
                output = _this.activation.apply(output);
            }
            return output;
        });
    };
    Dense.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint)
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Dense.className = 'Dense';
    return Dense;
}(_topology.Layer);
exports.Dense = Dense;

_tfjsCore.serialization.SerializationMap.register(Dense);
var Flatten = function (_super) {
    __extends(Flatten, _super);
    function Flatten(config) {
        var _this = _super.call(this, config || {}) || this;
        _this.inputSpec = [{ minNDim: 3 }];
        return _this;
    }
    Flatten.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        for (var _i = 0, _a = inputShape.slice(1); _i < _a.length; _i++) {
            var dim = _a[_i];
            if (dim == null) {
                throw new _errors.ValueError("The shape of the input to \"Flatten\" is not fully defined " + ("(got " + inputShape.slice(1) + "). Make sure to pass a complete ") + "\"input_shape\" or \"batch_input_shape\" argument to the first " + "layer in your model.");
            }
        }
        return [inputShape[0], math_utils.arrayProd(inputShape, 1)];
    };
    Flatten.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            _this.invokeCallHook(inputs, kwargs);
            return K.batchFlatten(generic_utils.getExactlyOneTensor(inputs));
        });
    };
    Flatten.className = 'Flatten';
    return Flatten;
}(_topology.Layer);
exports.Flatten = Flatten;

_tfjsCore.serialization.SerializationMap.register(Flatten);
var Activation = function (_super) {
    __extends(Activation, _super);
    function Activation(config) {
        var _this = _super.call(this, config) || this;
        _this.supportsMasking = true;
        _this.activation = (0, _activations.getActivation)(config.activation);
        return _this;
    }
    Activation.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            _this.invokeCallHook(inputs, kwargs);
            var input = generic_utils.getExactlyOneTensor(inputs);
            return _this.activation.apply(input);
        });
    };
    Activation.prototype.getConfig = function () {
        var config = { activation: (0, _activations.serializeActivation)(this.activation) };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Activation.className = 'Activation';
    return Activation;
}(_topology.Layer);
exports.Activation = Activation;

_tfjsCore.serialization.SerializationMap.register(Activation);
var RepeatVector = function (_super) {
    __extends(RepeatVector, _super);
    function RepeatVector(config) {
        var _this = _super.call(this, config) || this;
        _this.n = config.n;
        _this.inputSpec = [{ ndim: 2 }];
        return _this;
    }
    RepeatVector.prototype.computeOutputShape = function (inputShape) {
        return [inputShape[0], this.n, inputShape[1]];
    };
    RepeatVector.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = (0, _generic_utils.getExactlyOneTensor)(inputs);
            return K.repeat(inputs, _this.n);
        });
    };
    RepeatVector.prototype.getConfig = function () {
        var config = {
            n: this.n
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    RepeatVector.className = 'RepeatVector';
    return RepeatVector;
}(_topology.Layer);
exports.RepeatVector = RepeatVector;

_tfjsCore.serialization.SerializationMap.register(RepeatVector);
var Reshape = function (_super) {
    __extends(Reshape, _super);
    function Reshape(config) {
        var _this = _super.call(this, config) || this;
        _this.targetShape = config.targetShape;
        for (var i = 0; i < _this.targetShape.length; ++i) {
            if (_this.isUnknown(_this.targetShape[i])) {
                _this.targetShape[i] = null;
            }
        }
        return _this;
    }
    Reshape.prototype.isUnknown = function (dim) {
        return dim < 0 || dim == null;
    };
    Reshape.prototype.fixUnknownDimension = function (inputShape, outputShape) {
        var errorMsg = 'Total size of new array must be unchanged.';
        var finalShape = outputShape.slice();
        var known = 1;
        var unknown = null;
        for (var i = 0; i < finalShape.length; ++i) {
            var dim = finalShape[i];
            if (this.isUnknown(dim)) {
                if (unknown === null) {
                    unknown = i;
                } else {
                    throw new _errors.ValueError('Can only specifiy one unknown dimension.');
                }
            } else {
                known *= dim;
            }
        }
        var originalSize = math_utils.arrayProd(inputShape);
        if (unknown !== null) {
            if (known === 0 || originalSize % known !== 0) {
                throw new _errors.ValueError(errorMsg);
            }
            finalShape[unknown] = originalSize / known;
        } else if (originalSize !== known) {
            throw new _errors.ValueError(errorMsg);
        }
        return finalShape;
    };
    Reshape.prototype.computeOutputShape = function (inputShape) {
        var anyUnknownDims = false;
        for (var i = 0; i < inputShape.length; ++i) {
            if (this.isUnknown(inputShape[i])) {
                anyUnknownDims = true;
                break;
            }
        }
        if (anyUnknownDims) {
            return inputShape.slice(0, 1).concat(this.targetShape);
        } else {
            return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));
        }
    };
    Reshape.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            _this.invokeCallHook(inputs, kwargs);
            var input = generic_utils.getExactlyOneTensor(inputs);
            var inputShape = K.shape(input);
            var outputShape = inputShape.slice(0, 1).concat(_this.fixUnknownDimension(inputShape.slice(1), _this.targetShape));
            return input.reshape(outputShape);
        });
    };
    Reshape.prototype.getConfig = function () {
        var config = {
            targetShape: this.targetShape
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Reshape.className = 'Reshape';
    return Reshape;
}(_topology.Layer);
exports.Reshape = Reshape;

_tfjsCore.serialization.SerializationMap.register(Reshape);
//# sourceMappingURL=core.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../activations":"mGqD","../backend/tfjs_backend":"yoLG","../constraints":"haqD","../engine/topology":"q4cr","../errors":"WwMz","../initializers":"5TN9","../regularizers":"qedd","../utils/generic_utils":"Uv0q","../utils/math_utils":"42TA"}],"ck4m":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Embedding = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var _tfjs_backend = require('../backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _constraints = require('../constraints');

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _initializers = require('../initializers');

var _regularizers = require('../regularizers');

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var Embedding = function (_super) {
    __extends(Embedding, _super);
    function Embedding(config) {
        var _this = _super.call(this, config) || this;
        _this.embeddings = null;
        _this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';
        if (config.batchInputShape == null && config.inputShape == null) {
            var batchSize = null;
            if (config.batchSize != null) {
                batchSize = config.batchSize;
            }
            if (config.inputLength == null) {
                _this.batchInputShape = [batchSize, null];
            } else {
                _this.batchInputShape = [batchSize].concat(generic_utils.toList(config.inputLength));
            }
        }
        _this.inputDim = config.inputDim;
        _this.outputDim = config.outputDim;
        _this.embeddingsInitializer = (0, _initializers.getInitializer)(config.embeddingsInitializer || _this.DEFAULT_EMBEDDINGS_INITIALIZER);
        _this.embeddingsRegularizer = (0, _regularizers.getRegularizer)(config.embeddingsRegularizer);
        _this.activityRegularizer = (0, _regularizers.getRegularizer)(config.activityRegularizer);
        _this.embeddingsConstraint = (0, _constraints.getConstraint)(config.embeddingsConstraint);
        _this.maskZero = config.maskZero;
        _this.inputLength = config.inputLength;
        return _this;
    }
    Embedding.prototype.build = function (inputShape) {
        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);
        this.built = true;
    };
    Embedding.prototype.computeMask = function (inputs, mask) {
        throw new _errors.NotImplementedError('computeMask has not been implemented for Embedding yet');
    };
    Embedding.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        if (this.inputLength == null) {
            return inputShape.concat([this.outputDim]);
        }
        var inLens = generic_utils.toList(this.inputLength);
        if (inLens.length !== inputShape.length - 1) {
            throw new _errors.ValueError("\"inputLength\" is " + this.inputLength + ", but received " + ("input shape has shape " + inputShape));
        } else {
            var i = 0;
            for (var k = 0; k < inLens.length; ++k) {
                var s1 = inLens[k];
                var s2 = inputShape[k + 1];
                if (s1 != null && s2 != null && s1 !== s2) {
                    throw new _errors.ValueError("\"inputLength\" is " + this.inputLength + ", but received " + ("input shape has shape " + inputShape));
                } else if (s1 == null) {
                    inLens[i] = s2;
                }
                i++;
            }
        }
        return [inputShape[0]].concat(inLens, [this.outputDim]);
    };
    Embedding.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            _this.invokeCallHook(inputs, kwargs);
            var input = generic_utils.getExactlyOneTensor(inputs);
            if (K.dtype(input) !== 'int32') {
                input = K.cast(input, 'int32');
            }
            var output = K.gather(_this.embeddings.read(), input.as1D());
            return output.reshape((0, _generic_utils.getExactlyOneShape)(_this.computeOutputShape(input.shape)));
        });
    };
    Embedding.prototype.getConfig = function () {
        var config = {
            inputDim: this.inputDim,
            outputDim: this.outputDim,
            embeddingsInitializer: (0, _initializers.serializeInitializer)(this.embeddingsInitializer),
            embeddingsRegularizer: (0, _regularizers.serializeRegularizer)(this.embeddingsRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            embeddingsConstraint: (0, _constraints.serializeConstraint)(this.embeddingsConstraint),
            maskZero: this.maskZero,
            inputLength: this.inputLength
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Embedding.className = 'Embedding';
    return Embedding;
}(_topology.Layer);
exports.Embedding = Embedding;

_tfjsCore.serialization.SerializationMap.register(Embedding);
//# sourceMappingURL=embeddings.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/tfjs_backend":"yoLG","../constraints":"haqD","../engine/topology":"q4cr","../errors":"WwMz","../initializers":"5TN9","../regularizers":"qedd","../utils/generic_utils":"Uv0q"}],"3GOx":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Concatenate = exports.Minimum = exports.Maximum = exports.Average = exports.Multiply = exports.Add = exports.Merge = undefined;
exports.add = add;
exports.multiply = multiply;
exports.average = average;
exports.maximum = maximum;
exports.minimum = minimum;
exports.concatenate = concatenate;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require('../backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

var _math_utils = require('../utils/math_utils');

var mathUtils = _interopRequireWildcard(_math_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var Merge = function (_super) {
    __extends(Merge, _super);
    function Merge(config) {
        var _this = _super.call(this, config || {}) || this;
        _this.supportsMasking = true;
        return _this;
    }
    Merge.prototype.mergeFunction = function (inputs) {
        throw new _errors.NotImplementedError();
    };
    Merge.prototype.computeElementwiseOpOutputShape = function (shape1, shape2) {
        if (shape1 == null || shape2 == null) {
            return null;
        } else if (shape1.length < shape2.length) {
            return this.computeElementwiseOpOutputShape(shape2, shape1);
        } else if (shape2.length === 0) {
            return shape1;
        }
        var outputShape = shape1.slice(0, shape1.length - shape2.length);
        for (var k = 0; k < shape2.length; ++k) {
            var i = shape1[shape1.length - shape2.length + k];
            var j = shape2[k];
            if (i == null || j == null || i < 0 || j < 0) {
                outputShape.push(null);
            } else if (i === 1) {
                outputShape.push(j);
            } else if (j === 1) {
                outputShape.push(i);
            } else {
                if (i !== j) {
                    throw new _errors.ValueError('Operands could not be broadcast together with shapes ' + JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));
                }
                outputShape.push(i);
            }
        }
        return outputShape;
    };
    Merge.prototype.build = function (inputShape) {
        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {
            inputShape = [generic_utils.getExactlyOneShape(inputShape)];
        }
        inputShape = inputShape;
        if (inputShape.length < 2) {
            throw new _errors.ValueError('A merge layer should be called on an Array of at least 2 inputs.' + (" Got " + inputShape.length + " input(s)."));
        }
        var batchSizes = [];
        for (var _i = 0, inputShape_1 = inputShape; _i < inputShape_1.length; _i++) {
            var shape = inputShape_1[_i];
            if (shape != null && shape[0] !== null) {
                batchSizes.push(shape[0]);
            }
        }
        batchSizes = generic_utils.unique(batchSizes);
        if (batchSizes.length > 1) {
            throw new _errors.ValueError("Can not merge tensors with different batch sizes. " + ("Got tensors with shapes: " + JSON.stringify(inputShape) + "."));
        }
        var outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);
        for (var i = 1; i < inputShape.length; ++i) {
            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);
            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);
        }
        var allRanks = inputShape.map(function (shape) {
            return shape.length;
        });
        if (inputShape.indexOf(null) === -1 && generic_utils.unique(allRanks).length === 1) {
            this.reshapeRequired = false;
        } else {
            this.reshapeRequired = true;
        }
    };
    Merge.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = inputs;
            if (_this.reshapeRequired) {
                var reshapedInputs = [];
                var inputDims = inputs.map(function (input) {
                    return input.rank;
                });
                if (inputDims.indexOf(null) === -1) {
                    var maxNDim = mathUtils.max(inputDims);
                    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
                        var x = inputs_1[_i];
                        var xNDim = x.rank;
                        for (var k = 0; k < maxNDim - xNDim; ++k) {
                            x = K.expandDims(x, 1);
                        }
                        reshapedInputs.push(x);
                    }
                    return _this.mergeFunction(reshapedInputs);
                } else {
                    var transposed = false;
                    for (var _a = 0, inputs_2 = inputs; _a < inputs_2.length; _a++) {
                        var x = inputs_2[_a];
                        var xNDim = x.rank;
                        if (xNDim == null) {
                            var xShape = K.shape(x);
                            var batchSize = xShape[0];
                            var newShape = xShape.slice(1).concat([batchSize]);
                            var xTransposed = x.reshape([batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));
                            xTransposed = tfc.transpose(xTransposed, [1, 0]);
                            xTransposed = xTransposed.reshape(newShape);
                            reshapedInputs.push(xTransposed);
                            transposed = true;
                        } else if (xNDim > 1) {
                            var dims = mathUtils.range(1, xNDim).concat([0]);
                            reshapedInputs.push(tfc.transpose(x, dims));
                            transposed = true;
                        } else {
                            reshapedInputs.push(x);
                        }
                    }
                    var y = _this.mergeFunction(reshapedInputs);
                    var yNDim = y.rank;
                    if (transposed) {
                        if (yNDim == null) {
                            var yShape = K.shape(y);
                            var yNDim_1 = yShape.length;
                            var batchSize = yShape[yNDim_1 - 1];
                            var newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));
                            y = tfc.transpose(y.reshape([-1, batchSize]), [1, 0]).reshape(newShape);
                        } else if (yNDim > 1) {
                            var dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));
                            y = tfc.transpose(y, dims);
                        }
                    }
                    return y;
                }
            } else {
                return _this.mergeFunction(inputs);
            }
        });
    };
    Merge.prototype.computeOutputShape = function (inputShape) {
        inputShape = inputShape;
        var outputShape;
        if (inputShape[0] == null) {
            outputShape = null;
        } else {
            outputShape = inputShape[0].slice(1);
        }
        for (var i = 1; i < inputShape.length; ++i) {
            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);
            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);
        }
        var batchSizes = [];
        for (var _i = 0, inputShape_2 = inputShape; _i < inputShape_2.length; _i++) {
            var shape = inputShape_2[_i];
            if (shape != null && shape[0] !== null) {
                batchSizes.push(shape[0]);
            }
        }
        batchSizes = generic_utils.unique(batchSizes);
        if (batchSizes.length === 1) {
            outputShape = batchSizes.concat(outputShape);
        } else {
            outputShape = [null].concat(outputShape);
        }
        return outputShape;
    };
    return Merge;
}(_topology.Layer);
exports.Merge = Merge;

var Add = function (_super) {
    __extends(Add, _super);
    function Add(config) {
        return _super.call(this, config) || this;
    }
    Add.prototype.mergeFunction = function (inputs) {
        return (0, _tfjsCore.tidy)(function () {
            var output = tfc.zeros(inputs[0].shape);
            for (var _i = 0, inputs_3 = inputs; _i < inputs_3.length; _i++) {
                var input = inputs_3[_i];
                output = tfc.add(output, input);
            }
            return output;
        });
    };
    Add.className = 'Add';
    return Add;
}(Merge);
exports.Add = Add;

_tfjsCore.serialization.SerializationMap.register(Add);
function add(config) {
    if (Array.isArray(config)) {
        var layer = new Add({});
        return layer.apply(config);
    } else {
        return new Add(config);
    }
}
var Multiply = function (_super) {
    __extends(Multiply, _super);
    function Multiply(config) {
        return _super.call(this, config) || this;
    }
    Multiply.prototype.mergeFunction = function (inputs) {
        return (0, _tfjsCore.tidy)(function () {
            var output = tfc.ones(inputs[0].shape);
            for (var _i = 0, inputs_4 = inputs; _i < inputs_4.length; _i++) {
                var input = inputs_4[_i];
                output = tfc.mul(output, input);
            }
            return output;
        });
    };
    Multiply.className = 'Multiply';
    return Multiply;
}(Merge);
exports.Multiply = Multiply;

_tfjsCore.serialization.SerializationMap.register(Multiply);
function multiply(config) {
    if (Array.isArray(config)) {
        var layer = new Multiply({});
        return layer.apply(config);
    } else {
        return new Multiply(config);
    }
}
var Average = function (_super) {
    __extends(Average, _super);
    function Average(config) {
        return _super.call(this, config) || this;
    }
    Average.prototype.mergeFunction = function (inputs) {
        return (0, _tfjsCore.tidy)(function () {
            var output = tfc.zeros(inputs[0].shape);
            for (var _i = 0, inputs_5 = inputs; _i < inputs_5.length; _i++) {
                var input = inputs_5[_i];
                output = tfc.add(output, input);
            }
            return K.scalarTimesArray(K.getScalar(1 / inputs.length), output);
        });
    };
    Average.className = 'Average';
    return Average;
}(Merge);
exports.Average = Average;

_tfjsCore.serialization.SerializationMap.register(Average);
function average(config) {
    if (Array.isArray(config)) {
        var layer = new Average({});
        return layer.apply(config);
    } else {
        return new Average(config);
    }
}
var Maximum = function (_super) {
    __extends(Maximum, _super);
    function Maximum(config) {
        return _super.call(this, config) || this;
    }
    Maximum.prototype.mergeFunction = function (inputs) {
        return (0, _tfjsCore.tidy)(function () {
            var output = inputs[0];
            for (var i = 1; i < inputs.length; ++i) {
                output = tfc.maximum(output, inputs[i]);
            }
            return output;
        });
    };
    Maximum.className = 'Maximum';
    return Maximum;
}(Merge);
exports.Maximum = Maximum;

_tfjsCore.serialization.SerializationMap.register(Maximum);
function maximum(config) {
    if (Array.isArray(config)) {
        var layer = new Maximum({});
        return layer.apply(config);
    } else {
        return new Maximum(config);
    }
}
var Minimum = function (_super) {
    __extends(Minimum, _super);
    function Minimum(config) {
        return _super.call(this, config) || this;
    }
    Minimum.prototype.mergeFunction = function (inputs) {
        return (0, _tfjsCore.tidy)(function () {
            var output = inputs[0];
            for (var i = 1; i < inputs.length; ++i) {
                output = tfc.minimum(output, inputs[i]);
            }
            return output;
        });
    };
    Minimum.className = 'Minimum';
    return Minimum;
}(Merge);
exports.Minimum = Minimum;

_tfjsCore.serialization.SerializationMap.register(Minimum);
function minimum(config) {
    if (Array.isArray(config)) {
        var layer = new Minimum({});
        return layer.apply(config);
    } else {
        return new Minimum(config);
    }
}
var Concatenate = function (_super) {
    __extends(Concatenate, _super);
    function Concatenate(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_AXIS = -1;
        if (config == null) {
            config = {};
        }
        _this.axis = config.axis == null ? _this.DEFAULT_AXIS : config.axis;
        _this.supportsMasking = true;
        _this.reshapeRequired = false;
        return _this;
    }
    Concatenate.prototype.build = function (inputShape) {
        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) || inputShape.length === 1) {
            throw new _errors.ValueError('A `Concatenate` layer should be called on a list of at least 2 ' + 'inputs');
        }
        inputShape = inputShape;
        var allNoneShape = true;
        for (var _i = 0, inputShape_3 = inputShape; _i < inputShape_3.length; _i++) {
            var shape = inputShape_3[_i];
            if (shape != null) {
                allNoneShape = false;
                break;
            }
        }
        if (allNoneShape) {
            return;
        }
        var shapeSet = [];
        for (var i = 0; i < inputShape.length; ++i) {
            var shapeWithoutConcatAxis = inputShape[i].slice();
            shapeWithoutConcatAxis.splice(this.axis, 1);
            var exists = false;
            for (var _a = 0, shapeSet_1 = shapeSet; _a < shapeSet_1.length; _a++) {
                var shape = shapeSet_1[_a];
                if (_tfjsCore.util.arraysEqual(shape, shapeWithoutConcatAxis)) {
                    exists = true;
                    break;
                }
            }
            if (!exists) {
                shapeSet.push(shapeWithoutConcatAxis);
            }
        }
        if (shapeSet.length > 1) {
            throw new _errors.ValueError('A `Concatenate` layer requires inputs with matching shapes ' + 'except for the concat axis. Got input shapes: ' + JSON.stringify(inputShape));
        }
    };
    Concatenate.prototype.mergeFunction = function (inputs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            return K.concatenate(inputs, _this.axis);
        });
    };
    Concatenate.prototype.computeOutputShape = function (inputShape) {
        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {
            throw new _errors.ValueError('A `Concatenate` layer should be called on a list of inputs.');
        }
        var inputShapes = inputShape;
        var outputShape = inputShapes[0].slice();
        var axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;
        for (var _i = 0, _a = inputShapes.slice(1); _i < _a.length; _i++) {
            var shape = _a[_i];
            if (outputShape[axis] == null || shape[axis] == null) {
                outputShape[axis] = null;
                break;
            }
            outputShape[axis] += shape[axis];
        }
        return outputShape;
    };
    Concatenate.prototype.getConfig = function () {
        var config = {
            'axis': this.axis
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Concatenate.className = 'Concatenate';
    return Concatenate;
}(Merge);
exports.Concatenate = Concatenate;

_tfjsCore.serialization.SerializationMap.register(Concatenate);
function concatenate(config) {
    if (Array.isArray(config)) {
        var layer = new Concatenate({});
        return layer.apply(config);
    } else {
        return new Concatenate(config);
    }
}
//# sourceMappingURL=merge.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/tfjs_backend":"yoLG","../engine/topology":"q4cr","../errors":"WwMz","../utils/generic_utils":"Uv0q","../utils/math_utils":"42TA"}],"xzCz":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BatchNormalization = undefined;
exports.batchNormalization = batchNormalization;
exports.normalizeBatchInTraining = normalizeBatchInTraining;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require('../backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _constraints = require('../constraints');

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _initializers = require('../initializers');

var _regularizers = require('../regularizers');

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

var _math_utils = require('../utils/math_utils');

var math_utils = _interopRequireWildcard(_math_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
function batchNormalization(x, mean, variance, beta, gamma, epsilon) {
    if (epsilon === void 0) {
        epsilon = 1e-3;
    }
    var out;
    if (x.rank === 2) {
        out = tfc.batchNormalization2d(x, mean, variance, epsilon, gamma, beta);
    } else if (x.rank === 3) {
        out = tfc.batchNormalization3d(x, mean, variance, epsilon, gamma, beta);
    } else if (x.rank === 4) {
        out = tfc.batchNormalization4d(x, mean, variance, epsilon, gamma, beta);
    } else {
        throw new _errors.NotImplementedError("batchNormalization is not implememnted for array of rank " + x.rank + " " + "yet");
    }
    return out;
}
function regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon) {
    if (epsilon === void 0) {
        epsilon = 1e-3;
    }
    return (0, _tfjsCore.tidy)(function () {
        var meanAndVariance = tfc.moments(x, reductionAxes);
        var mean = meanAndVariance.mean;
        var variance = meanAndVariance.variance;
        var normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);
        return [normed, mean, variance];
    });
}
function broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon) {
    if (epsilon === void 0) {
        epsilon = 1e-3;
    }
    return (0, _tfjsCore.tidy)(function () {
        var meanAndVariance = tfc.moments(x, reductionAxes);
        var mean = meanAndVariance.mean;
        var variance = meanAndVariance.variance;
        var targetShape = [];
        for (var _i = 0, _a = math_utils.range(0, x.rank); _i < _a.length; _i++) {
            var axis = _a[_i];
            if (reductionAxes.indexOf(axis) !== -1) {
                targetShape.push(1);
            } else {
                targetShape.push(x.shape[axis]);
            }
        }
        var broadcastMean = mean.reshape(targetShape);
        var broadcastVariance = variance.reshape(targetShape);
        var broadcastGamma = gamma == null ? null : gamma.reshape(targetShape);
        var broadcastBeta = beta == null ? null : beta.reshape(targetShape);
        var normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);
        return [normed, mean, variance];
    });
}
function normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon) {
    if (epsilon === void 0) {
        epsilon = 1e-3;
    }
    if (_tfjsCore.util.arraysEqual(reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {
        return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);
    } else {
        return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);
    }
}
var BatchNormalization = function (_super) {
    __extends(BatchNormalization, _super);
    function BatchNormalization(config) {
        var _this = _super.call(this, config) || this;
        _this.supportsMasking = true;
        _this.axis = config.axis == null ? -1 : config.axis;
        _this.momentum = config.momentum == null ? 0.99 : config.momentum;
        _this.epsilon = config.epsilon == null ? 1e-3 : config.epsilon;
        _this.center = config.center == null ? true : config.center;
        _this.scale = config.scale == null ? true : config.scale;
        _this.betaInitializer = (0, _initializers.getInitializer)(config.betaInitializer || 'zeros');
        _this.gammaInitializer = (0, _initializers.getInitializer)(config.gammaInitializer || 'ones');
        _this.movingMeanInitializer = (0, _initializers.getInitializer)(config.movingMeanInitializer || 'zeros');
        _this.movingVarianceInitializer = (0, _initializers.getInitializer)(config.movingVarianceInitializer || 'ones');
        _this.betaConstraint = (0, _constraints.getConstraint)(config.betaConstraint);
        _this.gammaConstraint = (0, _constraints.getConstraint)(config.gammaConstraint);
        _this.betaRegularizer = (0, _regularizers.getRegularizer)(config.betaRegularizer);
        _this.gammaRegularizer = (0, _regularizers.getRegularizer)(config.gammaRegularizer);
        _this.stepCount = 0;
        return _this;
    }
    BatchNormalization.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var axis = this.axis >= 0 ? this.axis : this.axis + inputShape.length;
        var dim = inputShape[axis];
        if (dim == null) {
            throw new _errors.ValueError("Axis " + axis + " of input tensor should have a defined dimension but " + "the layer received an input with shape " + (JSON.stringify(inputShape) + "."));
        }
        this.inputSpec = [new _topology.InputSpec({ ndim: inputShape.length, axes: (_a = {}, _a[axis] = dim, _a) })];
        var shape = [dim];
        if (this.scale) {
            this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);
        }
        if (this.center) {
            this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);
        }
        this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);
        this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);
        this.built = true;
        var _a;
    };
    BatchNormalization.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var training = kwargs['training'] == null ? false : kwargs['training'];
            var input = generic_utils.getExactlyOneTensor(inputs);
            var inputShape = K.shape(input);
            var ndim = inputShape.length;
            var reductionAxes = math_utils.range(0, ndim);
            var axis = _this.axis >= 0 ? _this.axis : _this.axis + ndim;
            reductionAxes.splice(axis, 1);
            var broadcastShape = generic_utils.pyListRepeat(1, ndim);
            broadcastShape[axis] = inputShape[axis];
            var sortedReductionAxes = reductionAxes.slice();
            sortedReductionAxes.sort();
            var needsBroadcasting = !_tfjsCore.util.arraysEqual(sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));
            var normalizeInference = function () {
                if (needsBroadcasting) {
                    var broadcastMovingMean = _this.movingMean.read().reshape(broadcastShape);
                    var broadcastMovingVariance = _this.movingVariance.read().reshape(broadcastShape);
                    var broadcastBeta = _this.center ? _this.beta.read().reshape(broadcastShape) : null;
                    var broadcastGamma = _this.scale ? _this.gamma.read().reshape(broadcastShape) : null;
                    return batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, _this.epsilon);
                } else {
                    return batchNormalization(input, _this.movingMean.read(), _this.movingVariance.read(), _this.beta == null ? null : _this.beta.read(), _this.gamma == null ? null : _this.gamma.read(), _this.epsilon);
                }
            };
            if (!training) {
                return normalizeInference();
            }
            var _a = normalizeBatchInTraining(input, _this.gamma.read(), _this.beta.read(), reductionAxes, _this.epsilon),
                normedTraining = _a[0],
                mean = _a[1],
                variance = _a[2];
            var sampleSize = math_utils.arrayProd(reductionAxes.map(function (axis) {
                return input.shape[axis];
            }));
            var varianceDebiased = variance.mul(K.getScalar(sampleSize / (sampleSize - (1 + _this.epsilon))));
            var updateMovingMeanAndVariance = function () {
                _this.stepCount++;
                var newMovingMean = tfc.movingAverage(_this.movingMean.read(), mean, _this.momentum, _this.stepCount);
                _this.movingMean.write(newMovingMean);
                var newMovingVariance = tfc.movingAverage(_this.movingVariance.read(), varianceDebiased, _this.momentum, _this.stepCount);
                _this.movingVariance.write(newMovingVariance);
            };
            updateMovingMeanAndVariance();
            return normedTraining;
        });
    };
    BatchNormalization.prototype.getConfig = function () {
        var config = {
            axis: this.axis,
            momentum: this.momentum,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: (0, _initializers.serializeInitializer)(this.betaInitializer),
            gammaInitializer: (0, _initializers.serializeInitializer)(this.gammaInitializer),
            movingMeanInitializer: (0, _initializers.serializeInitializer)(this.movingMeanInitializer),
            movingVarianceInitializer: (0, _initializers.serializeInitializer)(this.movingVarianceInitializer),
            betaRegularizer: (0, _regularizers.serializeRegularizer)(this.betaRegularizer),
            gammaRegularizer: (0, _regularizers.serializeRegularizer)(this.gammaRegularizer),
            betaConstraint: (0, _constraints.serializeConstraint)(this.betaConstraint),
            gammaConstraint: (0, _constraints.serializeConstraint)(this.gammaConstraint)
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    BatchNormalization.className = 'BatchNormalization';
    return BatchNormalization;
}(_topology.Layer);
exports.BatchNormalization = BatchNormalization;

_tfjsCore.serialization.SerializationMap.register(BatchNormalization);
//# sourceMappingURL=normalization.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/tfjs_backend":"yoLG","../constraints":"haqD","../engine/topology":"q4cr","../errors":"WwMz","../initializers":"5TN9","../regularizers":"qedd","../utils/generic_utils":"Uv0q","../utils/math_utils":"42TA"}],"UWr+":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ZeroPadding2D = undefined;
exports.temporalPadding = temporalPadding;
exports.spatial2dPadding = spatial2dPadding;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _common = require('../backend/common');

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _generic_utils = require('../utils/generic_utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
function temporalPadding(x, padding) {
    return (0, _tfjsCore.tidy)(function () {
        if (x.rank !== 3) {
            throw new _errors.ValueError("temporalPadding expects input tensor to be 3-D, but received a " + (x.rank + "-D tensor."));
        }
        if (padding == null) {
            padding = [1, 1];
        }
        if (padding.length !== 2) {
            throw new _errors.ValueError("temporalPadding expects input padding pattern to be a length-2 " + ("array, but received a length-" + padding.length + " array."));
        }
        var pattern = [[0, 0], padding, [0, 0]];
        return tfc.pad(x, pattern);
    });
}
function spatial2dPadding(x, padding, dataFormat) {
    return (0, _tfjsCore.tidy)(function () {
        if (x.rank !== 4) {
            throw new _errors.ValueError("temporalPadding expects input tensor to be 4-D, but received a " + (x.rank + "-D tensor."));
        }
        if (padding == null) {
            padding = [[1, 1], [1, 1]];
        }
        if (padding.length !== 2 || padding[0].length !== 2 || padding[1].length !== 2) {
            throw new _errors.ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' + 'each of which is an Array of two integers.');
        }
        if (dataFormat == null) {
            dataFormat = (0, _common.imageDataFormat)();
        }
        if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {
            throw new _errors.ValueError("Unknown data format: " + dataFormat + ". " + "Supported data formats are 'channelsLast' and 'channelsFirst.");
        }
        var pattern;
        if (dataFormat === 'channelsFirst') {
            pattern = [[0, 0], [0, 0], padding[0], padding[1]];
        } else {
            pattern = [[0, 0], padding[0], padding[1], [0, 0]];
        }
        return tfc.pad(x, pattern);
    });
}
var ZeroPadding2D = function (_super) {
    __extends(ZeroPadding2D, _super);
    function ZeroPadding2D(config) {
        var _this = this;
        if (config == null) {
            config = {};
        }
        _this = _super.call(this, config) || this;
        _this.dataFormat = config.dataFormat == null ? (0, _common.imageDataFormat)() : config.dataFormat;
        if (config.padding == null) {
            _this.padding = [[1, 1], [1, 1]];
        } else if (typeof config.padding === 'number') {
            _this.padding = [[config.padding, config.padding], [config.padding, config.padding]];
        } else {
            config.padding = config.padding;
            if (config.padding.length !== 2) {
                throw new _errors.ValueError("ZeroPadding2D expects padding to be a length-2 array, but " + ("received a length-" + config.padding.length + " array."));
            }
            var heightPadding = void 0;
            var widthPadding = void 0;
            if (typeof config.padding[0] === 'number') {
                heightPadding = [config.padding[0], config.padding[0]];
                widthPadding = [config.padding[1], config.padding[1]];
            } else {
                config.padding = config.padding;
                if (config.padding[0].length !== 2) {
                    throw new _errors.ValueError("ZeroPadding2D expects height padding to be a length-2 array, " + ("but received a length-" + config.padding[0].length + " array."));
                }
                heightPadding = config.padding[0];
                if (config.padding[1].length !== 2) {
                    throw new _errors.ValueError("ZeroPadding2D expects width padding to be a length-2 array, " + ("but received a length-" + config.padding[1].length + " array."));
                }
                widthPadding = config.padding[1];
            }
            _this.padding = [heightPadding, widthPadding];
        }
        _this.inputSpec = [new _topology.InputSpec({ ndim: 4 })];
        return _this;
    }
    ZeroPadding2D.prototype.computeOutputShape = function (inputShape) {
        inputShape = (0, _generic_utils.getExactlyOneShape)(inputShape);
        var rows;
        var cols;
        if (this.dataFormat === 'channelsFirst') {
            if (inputShape[2] != null && inputShape[2] >= 0) {
                rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];
            } else {
                rows = null;
            }
            if (inputShape[3] != null && inputShape[3] >= 0) {
                cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];
            } else {
                cols = null;
            }
            return [inputShape[0], inputShape[1], rows, cols];
        } else {
            if (inputShape[1] != null && inputShape[1] >= 0) {
                rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];
            } else {
                rows = null;
            }
            if (inputShape[2] != null && inputShape[2] >= 0) {
                cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];
            } else {
                cols = null;
            }
            return [inputShape[0], rows, cols, inputShape[3]];
        }
    };
    ZeroPadding2D.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            return spatial2dPadding((0, _generic_utils.getExactlyOneTensor)(inputs), _this.padding, _this.dataFormat);
        });
    };
    ZeroPadding2D.prototype.getConfig = function () {
        var config = {
            padding: this.padding,
            dataFormat: this.dataFormat
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    ZeroPadding2D.className = 'ZeroPadding2D';
    return ZeroPadding2D;
}(_topology.Layer);
exports.ZeroPadding2D = ZeroPadding2D;

_tfjsCore.serialization.SerializationMap.register(ZeroPadding2D);
//# sourceMappingURL=padding.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/common":"G+d8","../engine/topology":"q4cr","../errors":"WwMz","../utils/generic_utils":"Uv0q"}],"fNt6":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GlobalMaxPooling2D = exports.GlobalAveragePooling2D = exports.GlobalPooling2D = exports.GlobalMaxPooling1D = exports.GlobalAveragePooling1D = exports.GlobalPooling1D = exports.AveragePooling2D = exports.MaxPooling2D = exports.Pooling2D = exports.AveragePooling1D = exports.MaxPooling1D = exports.Pooling1D = undefined;
exports.pool2d = pool2d;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _common = require('../backend/common');

var _tfjs_backend = require('../backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _common2 = require('../common');

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _conv_utils = require('../utils/conv_utils');

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

var _convolutional = require('./convolutional');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {
    return (0, _tfjsCore.tidy)(function () {
        (0, _common2.checkDataFormat)(dataFormat);
        (0, _common2.checkPoolMode)(poolMode);
        (0, _common2.checkPaddingMode)(padding);
        if (strides == null) {
            strides = [1, 1];
        }
        if (padding == null) {
            padding = 'valid';
        }
        if (dataFormat == null) {
            dataFormat = (0, _common.imageDataFormat)();
        }
        if (poolMode == null) {
            poolMode = 'max';
        }
        x = (0, _convolutional.preprocessConv2DInput)(x, dataFormat);
        var y;
        var paddingString = padding === 'same' ? 'same' : 'valid';
        if (poolMode === 'max') {
            y = tfc.maxPool(x, poolSize, strides, paddingString);
        } else {
            y = tfc.avgPool(x, poolSize, strides, paddingString);
        }
        if (dataFormat === 'channelsFirst') {
            y = tfc.transpose(y, [0, 3, 1, 2]);
        }
        return y;
    });
}
var Pooling1D = function (_super) {
    __extends(Pooling1D, _super);
    function Pooling1D(config) {
        var _this = this;
        if (config.poolSize == null) {
            config.poolSize = 2;
        }
        _this = _super.call(this, config) || this;
        if (typeof config.poolSize === 'number') {
            _this.poolSize = [config.poolSize];
        } else if (Array.isArray(config.poolSize) && config.poolSize.length === 1 && typeof config.poolSize[0] === 'number') {
            _this.poolSize = config.poolSize;
        } else {
            throw new _errors.ValueError("poolSize for 1D convolutional layer must be a number or an " + "Array of a single number, but received " + ("" + JSON.stringify(config.poolSize)));
        }
        if (config.strides == null) {
            _this.strides = _this.poolSize;
        } else {
            if (typeof config.strides === 'number') {
                _this.strides = [config.strides];
            } else if (Array.isArray(config.strides) && config.strides.length === 1 && typeof config.strides[0] === 'number') {
                _this.strides = config.strides;
            } else {
                throw new _errors.ValueError("strides for 1D convolutional layer must be a number or an " + "Array of a single number, but received " + ("" + JSON.stringify(config.strides)));
            }
        }
        _this.padding = config.padding == null ? 'valid' : config.padding;
        (0, _common2.checkPaddingMode)(_this.padding);
        _this.inputSpec = [new _topology.InputSpec({ ndim: 3 })];
        return _this;
    }
    Pooling1D.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var length = (0, _conv_utils.convOutputLength)(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);
        return [inputShape[0], length, inputShape[2]];
    };
    Pooling1D.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            _this.invokeCallHook(inputs, kwargs);
            inputs = K.expandDims(generic_utils.getExactlyOneTensor(inputs), 2);
            var output = _this.poolingFunction(generic_utils.getExactlyOneTensor(inputs), [_this.poolSize[0], 1], [_this.strides[0], 1], _this.padding, 'channelsLast');
            return tfc.squeeze(output, [2]);
        });
    };
    Pooling1D.prototype.getConfig = function () {
        var config = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Pooling1D;
}(_topology.Layer);
exports.Pooling1D = Pooling1D;

var MaxPooling1D = function (_super) {
    __extends(MaxPooling1D, _super);
    function MaxPooling1D(config) {
        return _super.call(this, config) || this;
    }
    MaxPooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {
        (0, _common2.checkDataFormat)(dataFormat);
        (0, _common2.checkPaddingMode)(padding);
        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');
    };
    MaxPooling1D.className = 'MaxPooling1D';
    return MaxPooling1D;
}(Pooling1D);
exports.MaxPooling1D = MaxPooling1D;

_tfjsCore.serialization.SerializationMap.register(MaxPooling1D);
var AveragePooling1D = function (_super) {
    __extends(AveragePooling1D, _super);
    function AveragePooling1D(config) {
        return _super.call(this, config) || this;
    }
    AveragePooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {
        (0, _common2.checkDataFormat)(dataFormat);
        (0, _common2.checkPaddingMode)(padding);
        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');
    };
    AveragePooling1D.className = 'AveragePooling1D';
    return AveragePooling1D;
}(Pooling1D);
exports.AveragePooling1D = AveragePooling1D;

_tfjsCore.serialization.SerializationMap.register(AveragePooling1D);
var Pooling2D = function (_super) {
    __extends(Pooling2D, _super);
    function Pooling2D(config) {
        var _this = this;
        if (config.poolSize == null) {
            config.poolSize = [2, 2];
        }
        _this = _super.call(this, config) || this;
        _this.poolSize = Array.isArray(config.poolSize) ? config.poolSize : [config.poolSize, config.poolSize];
        _this.strides = config.strides == null ? _this.poolSize : config.strides;
        _this.padding = config.padding == null ? 'valid' : config.padding;
        _this.dataFormat = config.dataFormat == null ? 'channelsLast' : config.dataFormat;
        (0, _common2.checkDataFormat)(_this.dataFormat);
        (0, _common2.checkPaddingMode)(_this.padding);
        _this.inputSpec = [new _topology.InputSpec({ ndim: 4 })];
        return _this;
    }
    Pooling2D.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];
        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];
        rows = (0, _conv_utils.convOutputLength)(rows, this.poolSize[0], this.padding, this.strides[0]);
        cols = (0, _conv_utils.convOutputLength)(cols, this.poolSize[1], this.padding, this.strides[1]);
        if (this.dataFormat === 'channelsFirst') {
            return [inputShape[0], inputShape[1], rows, cols];
        } else {
            return [inputShape[0], rows, cols, inputShape[3]];
        }
    };
    Pooling2D.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            _this.invokeCallHook(inputs, kwargs);
            return _this.poolingFunction(generic_utils.getExactlyOneTensor(inputs), _this.poolSize, _this.strides, _this.padding, _this.dataFormat);
        });
    };
    Pooling2D.prototype.getConfig = function () {
        var config = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return Pooling2D;
}(_topology.Layer);
exports.Pooling2D = Pooling2D;

var MaxPooling2D = function (_super) {
    __extends(MaxPooling2D, _super);
    function MaxPooling2D(config) {
        return _super.call(this, config) || this;
    }
    MaxPooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {
        (0, _common2.checkDataFormat)(dataFormat);
        (0, _common2.checkPaddingMode)(padding);
        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');
    };
    MaxPooling2D.className = 'MaxPooling2D';
    return MaxPooling2D;
}(Pooling2D);
exports.MaxPooling2D = MaxPooling2D;

_tfjsCore.serialization.SerializationMap.register(MaxPooling2D);
var AveragePooling2D = function (_super) {
    __extends(AveragePooling2D, _super);
    function AveragePooling2D(config) {
        return _super.call(this, config) || this;
    }
    AveragePooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {
        (0, _common2.checkDataFormat)(dataFormat);
        (0, _common2.checkPaddingMode)(padding);
        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');
    };
    AveragePooling2D.className = 'AveragePooling2D';
    return AveragePooling2D;
}(Pooling2D);
exports.AveragePooling2D = AveragePooling2D;

_tfjsCore.serialization.SerializationMap.register(AveragePooling2D);
var GlobalPooling1D = function (_super) {
    __extends(GlobalPooling1D, _super);
    function GlobalPooling1D(config) {
        var _this = _super.call(this, config) || this;
        _this.inputSpec = [new _topology.InputSpec({ ndim: 3 })];
        return _this;
    }
    GlobalPooling1D.prototype.computeOutputShape = function (inputShape) {
        return [inputShape[0], inputShape[2]];
    };
    GlobalPooling1D.prototype.call = function (inputs, kwargs) {
        throw new _errors.NotImplementedError();
    };
    return GlobalPooling1D;
}(_topology.Layer);
exports.GlobalPooling1D = GlobalPooling1D;

var GlobalAveragePooling1D = function (_super) {
    __extends(GlobalAveragePooling1D, _super);
    function GlobalAveragePooling1D(config) {
        return _super.call(this, config) || this;
    }
    GlobalAveragePooling1D.prototype.call = function (inputs, kwargs) {
        return (0, _tfjsCore.tidy)(function () {
            var input = generic_utils.getExactlyOneTensor(inputs);
            return tfc.mean(input, 1);
        });
    };
    GlobalAveragePooling1D.className = 'GlobalAveragePooling1D';
    return GlobalAveragePooling1D;
}(GlobalPooling1D);
exports.GlobalAveragePooling1D = GlobalAveragePooling1D;

_tfjsCore.serialization.SerializationMap.register(GlobalAveragePooling1D);
var GlobalMaxPooling1D = function (_super) {
    __extends(GlobalMaxPooling1D, _super);
    function GlobalMaxPooling1D(config) {
        return _super.call(this, config) || this;
    }
    GlobalMaxPooling1D.prototype.call = function (inputs, kwargs) {
        return (0, _tfjsCore.tidy)(function () {
            var input = generic_utils.getExactlyOneTensor(inputs);
            return tfc.max(input, 1);
        });
    };
    GlobalMaxPooling1D.className = 'GlobalMaxPooling1D';
    return GlobalMaxPooling1D;
}(GlobalPooling1D);
exports.GlobalMaxPooling1D = GlobalMaxPooling1D;

_tfjsCore.serialization.SerializationMap.register(GlobalMaxPooling1D);
var GlobalPooling2D = function (_super) {
    __extends(GlobalPooling2D, _super);
    function GlobalPooling2D(config) {
        var _this = _super.call(this, config) || this;
        _this.dataFormat = config.dataFormat == null ? 'channelsLast' : config.dataFormat;
        (0, _common2.checkDataFormat)(_this.dataFormat);
        _this.inputSpec = [new _topology.InputSpec({ ndim: 4 })];
        return _this;
    }
    GlobalPooling2D.prototype.computeOutputShape = function (inputShape) {
        inputShape = inputShape;
        if (this.dataFormat === 'channelsLast') {
            return [inputShape[0], inputShape[3]];
        } else {
            return [inputShape[0], inputShape[1]];
        }
    };
    GlobalPooling2D.prototype.call = function (inputs, kwargs) {
        throw new _errors.NotImplementedError();
    };
    GlobalPooling2D.prototype.getConfig = function () {
        var config = { dataFormat: this.dataFormat };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    return GlobalPooling2D;
}(_topology.Layer);
exports.GlobalPooling2D = GlobalPooling2D;

var GlobalAveragePooling2D = function (_super) {
    __extends(GlobalAveragePooling2D, _super);
    function GlobalAveragePooling2D() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalAveragePooling2D.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var input = generic_utils.getExactlyOneTensor(inputs);
            if (_this.dataFormat === 'channelsLast') {
                return tfc.mean(input, [1, 2]);
            } else {
                return tfc.mean(input, [2, 3]);
            }
        });
    };
    GlobalAveragePooling2D.className = 'GlobalAveragePooling2D';
    return GlobalAveragePooling2D;
}(GlobalPooling2D);
exports.GlobalAveragePooling2D = GlobalAveragePooling2D;

_tfjsCore.serialization.SerializationMap.register(GlobalAveragePooling2D);
var GlobalMaxPooling2D = function (_super) {
    __extends(GlobalMaxPooling2D, _super);
    function GlobalMaxPooling2D() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalMaxPooling2D.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var input = generic_utils.getExactlyOneTensor(inputs);
            if (_this.dataFormat === 'channelsLast') {
                return tfc.max(input, [1, 2]);
            } else {
                return tfc.max(input, [2, 3]);
            }
        });
    };
    GlobalMaxPooling2D.className = 'GlobalMaxPooling2D';
    return GlobalMaxPooling2D;
}(GlobalPooling2D);
exports.GlobalMaxPooling2D = GlobalMaxPooling2D;

_tfjsCore.serialization.SerializationMap.register(GlobalMaxPooling2D);
//# sourceMappingURL=pooling.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/common":"G+d8","../backend/tfjs_backend":"yoLG","../common":"uF+p","../engine/topology":"q4cr","../errors":"WwMz","../utils/conv_utils":"f2Kr","../utils/generic_utils":"Uv0q","./convolutional":"TnZK"}],"kmFm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StackedRNNCells = exports.LSTM = exports.LSTMCell = exports.GRU = exports.GRUCell = exports.SimpleRNN = exports.SimpleRNNCell = exports.RNNCell = exports.RNN = undefined;
exports.rnn = rnn;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tfc = _interopRequireWildcard(_tfjsCore);

var _activations = require("../activations");

var _tfjs_backend = require("../backend/tfjs_backend");

var K = _interopRequireWildcard(_tfjs_backend);

var _constraints = require("../constraints");

var _topology = require("../engine/topology");

var _errors = require("../errors");

var _initializers = require("../initializers");

var _regularizers = require("../regularizers");

var _types = require("../types");

var _generic_utils = require("../utils/generic_utils");

var generic_utils = _interopRequireWildcard(_generic_utils);

var _math_utils = require("../utils/math_utils");

var math_utils = _interopRequireWildcard(_math_utils);

var _variables = require("../variables");

var _serialization = require("./serialization");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function rnn(stepFunction, inputs, initialStates, goBackwards, mask, constants, unroll, inputLength) {
    if (goBackwards === void 0) {
        goBackwards = false;
    }
    if (unroll === void 0) {
        unroll = false;
    }
    var ndim = inputs.shape.length;
    if (ndim < 3) {
        throw new _errors.ValueError("Input should be at least 3D, but is " + ndim + "D.");
    }
    var axes = [1, 0].concat(math_utils.range(2, ndim));
    inputs = tfc.transpose(inputs, axes);
    if (mask != null) {
        throw new _errors.NotImplementedError('The rnn() function of the deeplearn.js backend does not support ' + 'masking yet.');
    }
    if (constants != null) {
        throw new _errors.NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' + 'constants yet.');
    }
    if (unroll) {
        console.warn('Backend rnn(): the unroll = true option is not applicable to the ' + 'imperative deeplearn.js backend.');
    }
    if (goBackwards) {
        inputs = tfc.reverse(inputs, 0);
    }
    var outputs;
    var lastOutput;
    var states = initialStates;
    var timeSteps = inputs.shape[0];
    for (var t = 0; t < timeSteps; ++t) {
        var currentInput = K.sliceAlongFirstAxis(inputs, t, 1);
        currentInput = currentInput.reshape(currentInput.shape.slice(1));
        var stepOutputs = stepFunction(currentInput, states);
        lastOutput = stepOutputs[0];
        if (t === 0) {
            outputs = lastOutput.reshape([1].concat(lastOutput.shape));
        } else {
            outputs = K.concatAlongFirstAxis(outputs, lastOutput.reshape([1].concat(lastOutput.shape)));
        }
        states = stepOutputs[1];
    }
    return [lastOutput, tfc.transpose(outputs, [1, 0].concat(math_utils.range(2, outputs.shape.length))), states];
}
var RNN = function (_super) {
    __extends(RNN, _super);
    function RNN(config) {
        var _this = _super.call(this, config) || this;
        var cell;
        if (config.cell == null) {
            throw new _errors.ValueError('cell property is missing for the constructor of RNN.');
        } else if (Array.isArray(config.cell)) {
            cell = new StackedRNNCells({ cells: config.cell });
        } else {
            cell = config.cell;
        }
        if (cell.stateSize == null) {
            throw new _errors.ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' + 'integers, one integer per RNN state).');
        }
        _this.cell = cell;
        _this.returnSequences = config.returnSequences == null ? false : config.returnSequences;
        _this.returnState = config.returnState == null ? false : config.returnState;
        _this.goBackwards = config.goBackwards == null ? false : config.goBackwards;
        _this._stateful = config.stateful == null ? false : config.stateful;
        _this.unroll = config.unroll == null ? false : config.unroll;
        _this.supportsMasking = true;
        _this.inputSpec = [new _topology.InputSpec({ ndim: 3 })];
        _this.stateSpec = null;
        _this.states = null;
        _this.numConstants = null;
        return _this;
    }
    RNN.prototype.getStates = function () {
        if (this.states == null) {
            var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
            return math_utils.range(0, numStates).map(function (x) {
                return null;
            });
        } else {
            return this.states;
        }
    };
    RNN.prototype.setStates = function (states) {
        this.states = states;
    };
    RNN.prototype.computeOutputShape = function (inputShape) {
        if (generic_utils.isArrayOfShapes(inputShape)) {
            inputShape = inputShape[0];
        }
        inputShape = inputShape;
        var stateSize = this.cell.stateSize;
        if (!Array.isArray(stateSize)) {
            stateSize = [stateSize];
        }
        var outputDim = stateSize[0];
        var outputShape;
        if (this.returnSequences) {
            outputShape = [inputShape[0], inputShape[1], outputDim];
        } else {
            outputShape = [inputShape[0], outputDim];
        }
        if (this.returnState) {
            var stateShape = [];
            for (var _i = 0, stateSize_1 = stateSize; _i < stateSize_1.length; _i++) {
                var dim = stateSize_1[_i];
                stateShape.push([inputShape[0], dim]);
            }
            return [outputShape].concat(stateShape);
        } else {
            return outputShape;
        }
    };
    RNN.prototype.computeMask = function (inputs, mask) {
        throw new _errors.NotImplementedError('computeMask has not been implemented for RNN yet');
    };
    RNN.prototype.build = function (inputShape) {
        var constantShape = null;
        if (this.numConstants != null) {
            throw new _errors.NotImplementedError('Constants support is not implemented in RNN yet.');
        }
        if (generic_utils.isArrayOfShapes(inputShape)) {
            inputShape = inputShape[0];
        }
        inputShape = inputShape;
        var batchSize = this.stateful ? inputShape[0] : null;
        var inputDim = inputShape[inputShape.length - 1];
        this.inputSpec[0] = new _topology.InputSpec({ shape: [batchSize, null, inputDim] });
        var stepInputShape = [inputShape[0]].concat(inputShape.slice(2));
        if (constantShape != null) {
            throw new _errors.NotImplementedError('Constants support is not implemented in RNN yet.');
        } else {
            this.cell.build(stepInputShape);
        }
        var stateSize;
        if (Array.isArray(this.cell.stateSize)) {
            stateSize = this.cell.stateSize;
        } else {
            stateSize = [this.cell.stateSize];
        }
        if (this.stateSpec != null) {
            if (!_tfjsCore.util.arraysEqual(this.stateSpec.map(function (spec) {
                return spec.shape[spec.shape.length - 1];
            }), stateSize)) {
                throw new _errors.ValueError("An initialState was passed that is not compatible with " + ("cell.stateSize. Received stateSpec=" + this.stateSpec + "; ") + ("However cell.stateSize is " + this.cell.stateSize));
            }
        } else {
            this.stateSpec = stateSize.map(function (dim) {
                return new _topology.InputSpec({ shape: [null, dim] });
            });
        }
        if (this.stateful) {
            throw new _errors.NotImplementedError('stateful RNN layer is not implemented yet');
        }
    };
    RNN.prototype.resetStates = function (states) {
        var _this = this;
        (0, _tfjsCore.tidy)(function () {
            if (!_this.stateful) {
                throw new _errors.AttributeError('Cannot call resetState() on an RNN Layer that is not stateful.');
            }
            var batchSize = _this.inputSpec[0].shape[0];
            if (batchSize == null) {
                throw new _errors.ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');
            }
            if (_this.states == null) {
                if (Array.isArray(_this.cell.stateSize)) {
                    _this.states = _this.cell.stateSize.map(function (dim) {
                        return tfc.zeros([batchSize, dim]);
                    });
                } else {
                    _this.states = [tfc.zeros([batchSize, _this.cell.stateSize])];
                }
            } else if (states == null) {
                if (Array.isArray(_this.cell.stateSize)) {
                    _this.states = _this.cell.stateSize.map(function (dim) {
                        return tfc.zeros([batchSize, dim]);
                    });
                } else {
                    _this.states[0] = tfc.zeros([batchSize, _this.cell.stateSize]);
                }
            } else {
                if (!Array.isArray(states)) {
                    states = [states];
                }
                if (states.length !== _this.states.length) {
                    throw new _errors.ValueError("Layer " + _this.name + " expects " + _this.states.length + " state(s), " + ("but it received " + states.length + " state value(s). Input ") + ("received: " + states));
                }
                for (var index = 0; index < _this.states.length; ++index) {
                    var value = states[index];
                    var dim = Array.isArray(_this.cell.stateSize) ? _this.cell.stateSize[index] : _this.cell.stateSize;
                    var expectedShape = [batchSize, dim];
                    if (!_tfjsCore.util.arraysEqual(value.shape, expectedShape)) {
                        throw new _errors.ValueError("State " + index + " is incompatible with layer " + _this.name + ": " + ("expected shape=" + expectedShape + ", received shape=" + value.shape));
                    }
                    _this.states[index] = value;
                }
            }
        });
    };
    RNN.prototype.standardizeArgs = function (inputs, initialState, constants) {
        if (Array.isArray(inputs)) {
            if (initialState != null || constants != null) {
                throw new _errors.ValueError('When inputs is an array, neither initialState or constants ' + 'should be provided');
            }
            if (this.numConstants != null) {
                constants = inputs.slice(inputs.length - this.numConstants, inputs.length);
                inputs = inputs.slice(0, inputs.length - this.numConstants);
            }
            if (inputs.length > 1) {
                initialState = inputs.slice(1, inputs.length);
            }
            inputs = inputs[0];
        }
        function toListOrNull(x) {
            if (x == null || Array.isArray(x)) {
                return x;
            } else {
                return [x];
            }
        }
        initialState = toListOrNull(initialState);
        constants = toListOrNull(constants);
        return { inputs: inputs, initialState: initialState, constants: constants };
    };
    RNN.prototype.apply = function (inputs, kwargs) {
        var initialState = kwargs == null ? null : kwargs['initialState'];
        var constants = kwargs == null ? null : kwargs['constants'];
        if (kwargs == null) {
            kwargs = {};
        }
        var standardized = this.standardizeArgs(inputs, initialState, constants);
        inputs = standardized.inputs;
        initialState = standardized.initialState;
        constants = standardized.constants;
        var additionalInputs = [];
        var additionalSpecs = [];
        if (initialState != null) {
            kwargs['initialState'] = initialState;
            additionalInputs = additionalInputs.concat(initialState);
            this.stateSpec = [];
            for (var _i = 0, initialState_1 = initialState; _i < initialState_1.length; _i++) {
                var state = initialState_1[_i];
                this.stateSpec.push(new _topology.InputSpec({ shape: state.shape }));
            }
            additionalSpecs = additionalSpecs.concat(this.stateSpec);
        }
        if (constants != null) {
            kwargs['constants'] = constants;
            additionalInputs = additionalInputs.concat(constants);
            this.numConstants = constants.length;
        }
        var isTensor = additionalInputs[0] instanceof _types.SymbolicTensor;
        if (isTensor) {
            var fullInput = [inputs].concat(additionalInputs);
            var fullInputSpec = this.inputSpec.concat(additionalSpecs);
            var originalInputSpec = this.inputSpec;
            this.inputSpec = fullInputSpec;
            var output = _super.prototype.apply.call(this, fullInput, kwargs);
            this.inputSpec = originalInputSpec;
            return output;
        } else {
            return _super.prototype.apply.call(this, inputs, kwargs);
        }
    };
    RNN.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var mask = kwargs == null ? null : kwargs['mask'];
            var training = kwargs == null ? null : kwargs['training'];
            var initialState = kwargs == null ? null : kwargs['initialState'];
            inputs = generic_utils.getExactlyOneTensor(inputs);
            if (initialState == null) {
                if (_this.stateful) {
                    throw new _errors.NotImplementedError('stateful RNN layer is not implemented yet.');
                } else {
                    initialState = _this.getInitialState(inputs);
                }
            }
            if (mask != null) {
                throw new _errors.NotImplementedError('Masking is not implemented for RNN yet');
            }
            var numStates = Array.isArray(_this.cell.stateSize) ? _this.cell.stateSize.length : 1;
            if (initialState.length !== numStates) {
                throw new _errors.ValueError("RNN Layer has " + numStates + " state(s) but was passed " + (initialState.length + " initial state(s)."));
            }
            var inputShape = inputs.shape;
            var timesteps = inputShape[1];
            if (_this.unroll) {
                console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');
            }
            var cellCallKwargs = { training: training };
            var step = function (inputs, states) {
                var outputs = _this.cell.call([inputs].concat(states), cellCallKwargs);
                return [outputs[0], outputs.slice(1)];
            };
            var rnnOutputs = rnn(step, inputs, initialState, _this.goBackwards, null, null, _this.unroll, timesteps);
            var lastOutput = rnnOutputs[0];
            var outputs = rnnOutputs[1];
            var states = rnnOutputs[2];
            if (_this.stateful) {
                throw new _errors.NotImplementedError('stateful RNN layer is not implemented yet');
            }
            var output = _this.returnSequences ? outputs : lastOutput;
            if (_this.returnState) {
                return [output].concat(states);
            } else {
                return output;
            }
        });
    };
    RNN.prototype.getInitialState = function (inputs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var initialState = tfc.zeros(inputs.shape);
            initialState = tfc.sum(initialState, [1, 2]);
            initialState = K.expandDims(initialState);
            if (Array.isArray(_this.cell.stateSize)) {
                return _this.cell.stateSize.map(function (dim) {
                    return dim > 1 ? K.tile(initialState, [1, dim]) : initialState;
                });
            } else {
                return _this.cell.stateSize > 1 ? [K.tile(initialState, [1, _this.cell.stateSize])] : [initialState];
            }
        });
    };
    Object.defineProperty(RNN.prototype, "trainableWeights", {
        get: function () {
            if (!this.trainable) {
                return [];
            }
            return this.cell.trainableWeights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RNN.prototype, "nonTrainableWeights", {
        get: function () {
            if (!this.trainable) {
                return this.cell.weights;
            }
            return this.cell.nonTrainableWeights;
        },
        enumerable: true,
        configurable: true
    });
    RNN.prototype.getConfig = function () {
        var config = {
            returnSequences: this.returnSequences,
            returnState: this.returnState,
            goBackwards: this.goBackwards,
            stateful: this.stateful,
            unroll: this.unroll
        };
        if (this.numConstants != null) {
            config.numConstants = this.numConstants;
        }
        var cellConfig = this.cell.getConfig();
        config.cell = {
            className: this.cell.getClassName(),
            config: cellConfig
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    RNN.className = 'RNN';
    return RNN;
}(_topology.Layer);
exports.RNN = RNN;

_tfjsCore.serialization.SerializationMap.register(RNN);
var RNNCell = function (_super) {
    __extends(RNNCell, _super);
    function RNNCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RNNCell = __decorate([(0, _tfjsCore.doc)({ heading: 'Layers', subheading: 'Classes' })], RNNCell);
    return RNNCell;
}(_topology.Layer);
exports.RNNCell = RNNCell;

var SimpleRNNCell = function (_super) {
    __extends(SimpleRNNCell, _super);
    function SimpleRNNCell(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_ACTIVATION = 'tanh';
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        _this.units = config.units;
        _this.activation = (0, _activations.getActivation)(config.activation == null ? _this.DEFAULT_ACTIVATION : config.activation);
        _this.useBias = config.useBias == null ? true : config.useBias;
        _this.kernelInitializer = (0, _initializers.getInitializer)(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.recurrentInitializer = (0, _initializers.getInitializer)(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);
        _this.biasInitializer = (0, _initializers.getInitializer)(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.kernelRegularizer = (0, _regularizers.getRegularizer)(config.kernelRegularizer);
        _this.recurrentRegularizer = (0, _regularizers.getRegularizer)(config.recurrentRegularizer);
        _this.biasRegularizer = (0, _regularizers.getRegularizer)(config.biasRegularizer);
        _this.kernelConstraint = (0, _constraints.getConstraint)(config.kernelConstraint);
        _this.recurrentConstraint = (0, _constraints.getConstraint)(config.recurrentConstraint);
        _this.biasConstraint = (0, _constraints.getConstraint)(config.biasConstraint);
        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);
        _this.recurrentDropout = math_utils.min([1, math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])]);
        _this.stateSize = _this.units;
        return _this;
    }
    SimpleRNNCell.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        } else {
            this.bias = null;
        }
        this.built = true;
    };
    SimpleRNNCell.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = inputs;
            if (inputs.length !== 2) {
                throw new _errors.ValueError("SimpleRNNCell expects 2 input Tensors, got " + inputs.length + ".");
            }
            var prevOutput = inputs[1];
            inputs = inputs[0];
            if (_this.dropout !== 0 || _this.recurrentDropout !== 0) {
                throw new _errors.NotImplementedError('Dropout is not implemented for SimpleRNNCell yet');
            }
            var h = K.dot(inputs, _this.kernel.read());
            if (_this.bias != null) {
                h = K.biasAdd(h, _this.bias.read());
            }
            var output = tfc.add(h, K.dot(prevOutput, _this.recurrentKernel.read()));
            if (_this.activation != null) {
                output = _this.activation.apply(output);
            }
            return [output, output];
        });
    };
    SimpleRNNCell.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    SimpleRNNCell.className = 'SimpleRNNCell';
    return SimpleRNNCell;
}(RNNCell);
exports.SimpleRNNCell = SimpleRNNCell;

_tfjsCore.serialization.SerializationMap.register(SimpleRNNCell);
var SimpleRNN = function (_super) {
    __extends(SimpleRNN, _super);
    function SimpleRNN(config) {
        var _this = this;
        config.cell = new SimpleRNNCell(config);
        _this = _super.call(this, config) || this;
        return _this;
    }
    SimpleRNN.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var mask = kwargs == null ? null : kwargs['mask'];
            var training = kwargs == null ? null : kwargs['training'];
            var initialState = kwargs == null ? null : kwargs['initialState'];
            return _super.prototype.call.call(_this, inputs, { mask: mask, training: training, initialState: initialState });
        });
    };
    Object.defineProperty(SimpleRNN.prototype, "units", {
        get: function () {
            return this.cell.units;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "activation", {
        get: function () {
            return this.cell.activation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "useBias", {
        get: function () {
            return this.cell.useBias;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "kernelInitializer", {
        get: function () {
            return this.cell.kernelInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "recurrentInitializer", {
        get: function () {
            return this.cell.recurrentInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "biasInitializer", {
        get: function () {
            return this.cell.biasInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "kernelRegularizer", {
        get: function () {
            return this.cell.kernelRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "recurrentRegularizer", {
        get: function () {
            return this.cell.recurrentRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "biasRegularizer", {
        get: function () {
            return this.cell.biasRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "kernelConstraint", {
        get: function () {
            return this.cell.kernelConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "recurrentConstraint", {
        get: function () {
            return this.cell.recurrentConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "biasConstraint", {
        get: function () {
            return this.cell.biasConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "dropout", {
        get: function () {
            return this.cell.dropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleRNN.prototype, "recurrentDropout", {
        get: function () {
            return this.cell.recurrentDropout;
        },
        enumerable: true,
        configurable: true
    });
    SimpleRNN.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        delete baseConfig['cell'];
        Object.assign(config, baseConfig);
        return config;
    };
    SimpleRNN.className = 'SimpleRNN';
    return SimpleRNN;
}(RNN);
exports.SimpleRNN = SimpleRNN;

_tfjsCore.serialization.SerializationMap.register(SimpleRNN);
var GRUCell = function (_super) {
    __extends(GRUCell, _super);
    function GRUCell(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_ACTIVATION = 'tanh';
        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        _this.units = config.units;
        _this.activation = (0, _activations.getActivation)(config.activation === undefined ? _this.DEFAULT_ACTIVATION : config.activation);
        _this.recurrentActivation = (0, _activations.getActivation)(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION : config.recurrentActivation);
        _this.useBias = config.useBias == null ? true : config.useBias;
        _this.kernelInitializer = (0, _initializers.getInitializer)(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.recurrentInitializer = (0, _initializers.getInitializer)(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);
        _this.biasInitializer = (0, _initializers.getInitializer)(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.kernelRegularizer = (0, _regularizers.getRegularizer)(config.kernelRegularizer);
        _this.recurrentRegularizer = (0, _regularizers.getRegularizer)(config.recurrentRegularizer);
        _this.biasRegularizer = (0, _regularizers.getRegularizer)(config.biasRegularizer);
        _this.kernelConstraint = (0, _constraints.getConstraint)(config.kernelConstraint);
        _this.recurrentConstraint = (0, _constraints.getConstraint)(config.recurrentConstraint);
        _this.biasConstraint = (0, _constraints.getConstraint)(config.biasConstraint);
        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);
        _this.recurrentDropout = math_utils.min([1, math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])]);
        _this.implementation = config.implementation;
        _this.stateSize = _this.units;
        return _this;
    }
    GRUCell.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var inputDim = inputShape[inputShape.length - 1];
        this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        if (this.useBias) {
            this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        } else {
            this.bias = null;
        }
        this.built = true;
    };
    GRUCell.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            if (_this.dropout !== 0 || _this.recurrentDropout !== 0) {
                throw new _errors.NotImplementedError('Dropout is not implemented for GRUCell yet');
            }
            inputs = inputs;
            if (inputs.length !== 2) {
                throw new _errors.ValueError("GRUCell expects 2 input Tensors (inputs, h, c), got " + (inputs.length + "."));
            }
            var hTMinus1 = inputs[1];
            inputs = inputs[0];
            var z;
            var r;
            var hh;
            if (_this.implementation === 1) {
                var kernelZ = K.sliceAlongLastAxis(_this.kernel.read(), 0, _this.units);
                var kernelR = K.sliceAlongLastAxis(_this.kernel.read(), _this.units, _this.units);
                var kernelH = K.sliceAlongLastAxis(_this.kernel.read(), _this.units * 2, _this.units);
                var recurrentKernelZ = K.sliceAlongLastAxis(_this.recurrentKernel.read(), 0, _this.units);
                var recurrentKernelR = K.sliceAlongLastAxis(_this.recurrentKernel.read(), _this.units, _this.units);
                var recurrentKernelH = K.sliceAlongLastAxis(_this.recurrentKernel.read(), _this.units * 2, _this.units);
                var inputsZ = inputs;
                var inputsR = inputs;
                var inputsH = inputs;
                var xZ = K.dot(inputsZ, kernelZ);
                var xR = K.dot(inputsR, kernelR);
                var xH = K.dot(inputsH, kernelH);
                if (_this.useBias) {
                    var biasZ = K.sliceAlongFirstAxis(_this.bias.read(), 0, _this.units);
                    var biasR = K.sliceAlongFirstAxis(_this.bias.read(), _this.units, _this.units);
                    var biasH = K.sliceAlongFirstAxis(_this.bias.read(), _this.units * 2, _this.units);
                    xZ = K.biasAdd(xZ, biasZ);
                    xR = K.biasAdd(xR, biasR);
                    xH = K.biasAdd(xH, biasH);
                }
                var hTMinus1Z = hTMinus1;
                var hTMinus1R = hTMinus1;
                var hTMinus1H = hTMinus1;
                z = _this.recurrentActivation.apply(tfc.add(xZ, K.dot(hTMinus1Z, recurrentKernelZ)));
                r = _this.recurrentActivation.apply(tfc.add(xR, K.dot(hTMinus1R, recurrentKernelR)));
                hh = _this.activation.apply(tfc.add(xH, K.dot(tfc.mul(r, hTMinus1H), recurrentKernelH)));
            } else {
                var matrixX = K.dot(inputs, _this.kernel.read());
                if (_this.useBias) {
                    matrixX = K.biasAdd(matrixX, _this.bias.read());
                }
                var matrixInner = K.dot(hTMinus1, K.sliceAlongLastAxis(_this.recurrentKernel.read(), 0, 2 * _this.units));
                var xZ = K.sliceAlongLastAxis(matrixX, 0, _this.units);
                var xR = K.sliceAlongLastAxis(matrixX, _this.units, _this.units);
                var recurrentZ = K.sliceAlongLastAxis(matrixInner, 0, _this.units);
                var recurrentR = K.sliceAlongLastAxis(matrixInner, _this.units, _this.units);
                z = _this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));
                r = _this.recurrentActivation.apply(tfc.add(xR, recurrentR));
                var xH = K.sliceAlongLastAxis(matrixX, 2 * _this.units, _this.units);
                var recurrentH = K.dot(tfc.mul(r, hTMinus1), K.sliceAlongLastAxis(_this.recurrentKernel.read(), 2 * _this.units, _this.units));
                hh = _this.activation.apply(tfc.add(xH, recurrentH));
            }
            var h = tfc.add(tfc.mul(z, hTMinus1), tfc.mul(K.scalarPlusArray(K.getScalar(1), tfc.neg(z)), hh));
            return [h, h];
        });
    };
    GRUCell.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    GRUCell.className = 'GRUCell';
    return GRUCell;
}(RNNCell);
exports.GRUCell = GRUCell;

_tfjsCore.serialization.SerializationMap.register(GRUCell);
var GRU = function (_super) {
    __extends(GRU, _super);
    function GRU(config) {
        var _this = this;
        if (config.implementation === 0) {
            console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');
        }
        config.cell = new GRUCell(config);
        _this = _super.call(this, config) || this;
        return _this;
    }
    GRU.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var mask = kwargs == null ? null : kwargs['mask'];
            var training = kwargs == null ? null : kwargs['training'];
            var initialState = kwargs == null ? null : kwargs['initialState'];
            return _super.prototype.call.call(_this, inputs, { mask: mask, training: training, initialState: initialState });
        });
    };
    Object.defineProperty(GRU.prototype, "units", {
        get: function () {
            return this.cell.units;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "activation", {
        get: function () {
            return this.cell.activation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "useBias", {
        get: function () {
            return this.cell.useBias;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "kernelInitializer", {
        get: function () {
            return this.cell.kernelInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "recurrentInitializer", {
        get: function () {
            return this.cell.recurrentInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "biasInitializer", {
        get: function () {
            return this.cell.biasInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "kernelRegularizer", {
        get: function () {
            return this.cell.kernelRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "recurrentRegularizer", {
        get: function () {
            return this.cell.recurrentRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "biasRegularizer", {
        get: function () {
            return this.cell.biasRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "kernelConstraint", {
        get: function () {
            return this.cell.kernelConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "recurrentConstraint", {
        get: function () {
            return this.cell.recurrentConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "biasConstraint", {
        get: function () {
            return this.cell.biasConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "dropout", {
        get: function () {
            return this.cell.dropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "recurrentDropout", {
        get: function () {
            return this.cell.recurrentDropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GRU.prototype, "implementation", {
        get: function () {
            return this.cell.implementation;
        },
        enumerable: true,
        configurable: true
    });
    GRU.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        delete baseConfig['cell'];
        Object.assign(config, baseConfig);
        return config;
    };
    GRU.fromConfig = function (cls, config) {
        if (config['implmentation'] === 0) {
            config['implementation'] = 1;
        }
        return new cls(config);
    };
    GRU.className = 'GRU';
    return GRU;
}(RNN);
exports.GRU = GRU;

_tfjsCore.serialization.SerializationMap.register(GRU);
var LSTMCell = function (_super) {
    __extends(LSTMCell, _super);
    function LSTMCell(config) {
        var _this = _super.call(this, config) || this;
        _this.DEFAULT_ACTIVATION = 'tanh';
        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';
        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';
        _this.units = config.units;
        _this.activation = (0, _activations.getActivation)(config.activation === undefined ? _this.DEFAULT_ACTIVATION : config.activation);
        _this.recurrentActivation = (0, _activations.getActivation)(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION : config.recurrentActivation);
        _this.useBias = config.useBias == null ? true : config.useBias;
        _this.kernelInitializer = (0, _initializers.getInitializer)(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);
        _this.recurrentInitializer = (0, _initializers.getInitializer)(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);
        _this.biasInitializer = (0, _initializers.getInitializer)(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);
        _this.unitForgetBias = config.unitForgetBias;
        _this.kernelRegularizer = (0, _regularizers.getRegularizer)(config.kernelRegularizer);
        _this.recurrentRegularizer = (0, _regularizers.getRegularizer)(config.recurrentRegularizer);
        _this.biasRegularizer = (0, _regularizers.getRegularizer)(config.biasRegularizer);
        _this.kernelConstraint = (0, _constraints.getConstraint)(config.kernelConstraint);
        _this.recurrentConstraint = (0, _constraints.getConstraint)(config.recurrentConstraint);
        _this.biasConstraint = (0, _constraints.getConstraint)(config.biasConstraint);
        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);
        _this.recurrentDropout = math_utils.min([1, math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])]);
        _this.implementation = config.implementation;
        _this.stateSize = [_this.units, _this.units];
        return _this;
    }
    LSTMCell.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var inputDim = inputShape[inputShape.length - 1];
        this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
        var biasInitializer;
        if (this.useBias) {
            if (this.unitForgetBias) {
                var capturedBiasInit_1 = this.biasInitializer;
                var capturedUnits_1 = this.units;
                biasInitializer = new (_a = function (_super) {
                    __extends(CustomInit, _super);
                    function CustomInit() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    CustomInit.prototype.apply = function (shape, dtype) {
                        var bI = capturedBiasInit_1.apply([capturedUnits_1]);
                        var bF = new _initializers.Ones().apply([capturedUnits_1]);
                        var bCAndH = capturedBiasInit_1.apply([capturedUnits_1 * 2]);
                        return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);
                    };
                    return CustomInit;
                }(_initializers.Initializer), _a.className = 'CustomInit', _a)();
            } else {
                biasInitializer = this.biasInitializer;
            }
            this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);
        } else {
            this.bias = null;
        }
        this.built = true;
        var _a;
    };
    LSTMCell.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            if (_this.dropout !== 0 || _this.recurrentDropout !== 0) {
                throw new _errors.NotImplementedError('Dropout is not implemented for LSTMCell yet');
            }
            inputs = inputs;
            if (inputs.length !== 3) {
                throw new _errors.ValueError("LSTMCell expects 3 input Tensors (inputs, h, c), got " + (inputs.length + "."));
            }
            var hTMinus1 = inputs[1];
            var cTMinus1 = inputs[2];
            inputs = inputs[0];
            var i;
            var f;
            var c;
            var o;
            if (_this.implementation === 1) {
                var kernelI = K.sliceAlongLastAxis(_this.kernel.read(), 0, _this.units);
                var kernelF = K.sliceAlongLastAxis(_this.kernel.read(), _this.units, _this.units);
                var kernelC = K.sliceAlongLastAxis(_this.kernel.read(), _this.units * 2, _this.units);
                var kernelO = K.sliceAlongLastAxis(_this.kernel.read(), _this.units * 3, _this.units);
                var recurrentKernelI = K.sliceAlongLastAxis(_this.recurrentKernel.read(), 0, _this.units);
                var recurrentKernelF = K.sliceAlongLastAxis(_this.recurrentKernel.read(), _this.units, _this.units);
                var recurrentKernelC = K.sliceAlongLastAxis(_this.recurrentKernel.read(), _this.units * 2, _this.units);
                var recurrentKernelO = K.sliceAlongLastAxis(_this.recurrentKernel.read(), _this.units * 3, _this.units);
                var inputsI = inputs;
                var inputsF = inputs;
                var inputsC = inputs;
                var inputsO = inputs;
                var xI = K.dot(inputsI, kernelI);
                var xF = K.dot(inputsF, kernelF);
                var xC = K.dot(inputsC, kernelC);
                var xO = K.dot(inputsO, kernelO);
                if (_this.useBias) {
                    var biasI = K.sliceAlongFirstAxis(_this.bias.read(), 0, _this.units);
                    var biasF = K.sliceAlongFirstAxis(_this.bias.read(), _this.units, _this.units);
                    var biasC = K.sliceAlongFirstAxis(_this.bias.read(), _this.units * 2, _this.units);
                    var biasO = K.sliceAlongFirstAxis(_this.bias.read(), _this.units * 3, _this.units);
                    xI = K.biasAdd(xI, biasI);
                    xF = K.biasAdd(xF, biasF);
                    xC = K.biasAdd(xC, biasC);
                    xO = K.biasAdd(xO, biasO);
                }
                var hTMinus1I = hTMinus1;
                var hTMinus1F = hTMinus1;
                var hTMinus1C = hTMinus1;
                var hTMinus1O = hTMinus1;
                i = _this.recurrentActivation.apply(tfc.add(xI, K.dot(hTMinus1I, recurrentKernelI)));
                f = _this.recurrentActivation.apply(tfc.add(xF, K.dot(hTMinus1F, recurrentKernelF)));
                c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, _this.activation.apply(tfc.add(xC, K.dot(hTMinus1C, recurrentKernelC)))));
                o = _this.recurrentActivation.apply(tfc.add(xO, K.dot(hTMinus1O, recurrentKernelO)));
            } else {
                var z = K.dot(inputs, _this.kernel.read());
                z = tfc.add(z, K.dot(hTMinus1, _this.recurrentKernel.read()));
                if (_this.useBias) {
                    z = K.biasAdd(z, _this.bias.read());
                }
                var z0 = K.sliceAlongLastAxis(z, 0, _this.units);
                var z1 = K.sliceAlongLastAxis(z, _this.units, _this.units);
                var z2 = K.sliceAlongLastAxis(z, _this.units * 2, _this.units);
                var z3 = K.sliceAlongLastAxis(z, _this.units * 3, _this.units);
                i = _this.recurrentActivation.apply(z0);
                f = _this.recurrentActivation.apply(z1);
                c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, _this.activation.apply(z2)));
                o = _this.recurrentActivation.apply(z3);
            }
            var h = tfc.mul(o, _this.activation.apply(c));
            return [h, h, c];
        });
    };
    LSTMCell.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    LSTMCell.className = 'LSTMCell';
    return LSTMCell;
}(RNNCell);
exports.LSTMCell = LSTMCell;

_tfjsCore.serialization.SerializationMap.register(LSTMCell);
var LSTM = function (_super) {
    __extends(LSTM, _super);
    function LSTM(config) {
        var _this = this;
        if (config.implementation === 0) {
            console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');
        }
        config.cell = new LSTMCell(config);
        _this = _super.call(this, config) || this;
        return _this;
    }
    LSTM.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            var mask = kwargs == null ? null : kwargs['mask'];
            var training = kwargs == null ? null : kwargs['training'];
            var initialState = kwargs == null ? null : kwargs['initialState'];
            return _super.prototype.call.call(_this, inputs, { mask: mask, training: training, initialState: initialState });
        });
    };
    Object.defineProperty(LSTM.prototype, "units", {
        get: function () {
            return this.cell.units;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "activation", {
        get: function () {
            return this.cell.activation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "useBias", {
        get: function () {
            return this.cell.useBias;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "kernelInitializer", {
        get: function () {
            return this.cell.kernelInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "recurrentInitializer", {
        get: function () {
            return this.cell.recurrentInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "biasInitializer", {
        get: function () {
            return this.cell.biasInitializer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "unitForgetBias", {
        get: function () {
            return this.cell.unitForgetBias;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "kernelRegularizer", {
        get: function () {
            return this.cell.kernelRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "recurrentRegularizer", {
        get: function () {
            return this.cell.recurrentRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "biasRegularizer", {
        get: function () {
            return this.cell.biasRegularizer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "kernelConstraint", {
        get: function () {
            return this.cell.kernelConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "recurrentConstraint", {
        get: function () {
            return this.cell.recurrentConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "biasConstraint", {
        get: function () {
            return this.cell.biasConstraint;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "dropout", {
        get: function () {
            return this.cell.dropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "recurrentDropout", {
        get: function () {
            return this.cell.recurrentDropout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LSTM.prototype, "implementation", {
        get: function () {
            return this.cell.implementation;
        },
        enumerable: true,
        configurable: true
    });
    LSTM.prototype.getConfig = function () {
        var config = {
            units: this.units,
            activation: (0, _activations.serializeActivation)(this.activation),
            useBias: this.useBias,
            kernelInitializer: (0, _initializers.serializeInitializer)(this.kernelInitializer),
            recurrentInitializer: (0, _initializers.serializeInitializer)(this.recurrentInitializer),
            biasInitializer: (0, _initializers.serializeInitializer)(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: (0, _regularizers.serializeRegularizer)(this.kernelRegularizer),
            recurrentRegularizer: (0, _regularizers.serializeRegularizer)(this.recurrentRegularizer),
            biasRegularizer: (0, _regularizers.serializeRegularizer)(this.biasRegularizer),
            activityRegularizer: (0, _regularizers.serializeRegularizer)(this.activityRegularizer),
            kernelConstraint: (0, _constraints.serializeConstraint)(this.kernelConstraint),
            recurrentConstraint: (0, _constraints.serializeConstraint)(this.recurrentConstraint),
            biasConstraint: (0, _constraints.serializeConstraint)(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        delete baseConfig['cell'];
        Object.assign(config, baseConfig);
        return config;
    };
    LSTM.fromConfig = function (cls, config) {
        if (config['implmentation'] === 0) {
            config['implementation'] = 1;
        }
        return new cls(config);
    };
    LSTM.className = 'LSTM';
    return LSTM;
}(RNN);
exports.LSTM = LSTM;

_tfjsCore.serialization.SerializationMap.register(LSTM);
var StackedRNNCells = function (_super) {
    __extends(StackedRNNCells, _super);
    function StackedRNNCells(config) {
        var _this = _super.call(this, config) || this;
        _this.cells = config.cells;
        return _this;
    }
    Object.defineProperty(StackedRNNCells.prototype, "stateSize", {
        get: function () {
            var stateSize = [];
            for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {
                var cell = _a[_i];
                if (Array.isArray(cell.stateSize)) {
                    stateSize.push.apply(stateSize, cell.stateSize);
                } else {
                    stateSize.push(cell.stateSize);
                }
            }
            return stateSize;
        },
        enumerable: true,
        configurable: true
    });
    StackedRNNCells.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = inputs;
            var states = inputs.slice(1);
            var nestedStates = [];
            for (var _i = 0, _a = _this.cells.slice().reverse(); _i < _a.length; _i++) {
                var cell = _a[_i];
                if (Array.isArray(cell.stateSize)) {
                    nestedStates.push(states.splice(0, cell.stateSize.length));
                } else {
                    nestedStates.push(states.splice(0, 1));
                }
            }
            nestedStates.reverse();
            var newNestedStates = [];
            var callInputs;
            for (var i = 0; i < _this.cells.length; ++i) {
                var cell = _this.cells[i];
                states = nestedStates[i];
                if (i === 0) {
                    callInputs = [inputs[0]].concat(states);
                } else {
                    callInputs = [callInputs[0]].concat(states);
                }
                callInputs = cell.call(callInputs, kwargs);
                newNestedStates.push(callInputs.slice(1));
            }
            states = [];
            for (var _b = 0, _c = newNestedStates.slice().reverse(); _b < _c.length; _b++) {
                var cellStates = _c[_b];
                states.push.apply(states, cellStates);
            }
            return [callInputs[0]].concat(states);
        });
    };
    StackedRNNCells.prototype.build = function (inputShape) {
        if (generic_utils.isArrayOfShapes(inputShape)) {
            inputShape = inputShape[0];
        }
        inputShape = inputShape;
        var outputDim;
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            cell.build(inputShape);
            if (Array.isArray(cell.stateSize)) {
                outputDim = cell.stateSize[0];
            } else {
                outputDim = cell.stateSize;
            }
            inputShape = [inputShape[0], outputDim];
        }
        this.built = true;
    };
    StackedRNNCells.prototype.getConfig = function () {
        var cellConfigs = [];
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            cellConfigs.push({
                'className': this.getClassName(),
                'config': cell.getConfig()
            });
        }
        var config = { 'cells': cellConfigs };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    StackedRNNCells.fromConfig = function (cls, config, customObjects) {
        if (customObjects === void 0) {
            customObjects = {};
        }
        var cells = [];
        for (var _i = 0, _a = config['cells']; _i < _a.length; _i++) {
            var cellConfig = _a[_i];
            cells.push((0, _serialization.deserialize)(cellConfig, customObjects));
        }
        return new cls({ cells: cells });
    };
    Object.defineProperty(StackedRNNCells.prototype, "trainableWeights", {
        get: function () {
            if (!this.trainable) {
                return [];
            }
            var weights = [];
            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
                var cell = _a[_i];
                weights.push.apply(weights, cell.trainableWeights);
            }
            return weights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StackedRNNCells.prototype, "nonTrainableWeights", {
        get: function () {
            var weights = [];
            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
                var cell = _a[_i];
                weights.push.apply(weights, cell.nonTrainableWeights);
            }
            if (!this.trainable) {
                var trainableWeights = [];
                for (var _b = 0, _c = this.cells; _b < _c.length; _b++) {
                    var cell = _c[_b];
                    trainableWeights.push.apply(trainableWeights, cell.trainableWeights);
                }
                return trainableWeights.concat(weights);
            }
            return weights;
        },
        enumerable: true,
        configurable: true
    });
    StackedRNNCells.prototype.getWeights = function () {
        var weights = [];
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            weights.push.apply(weights, cell.weights);
        }
        return (0, _variables.batchGetValue)(weights);
    };
    StackedRNNCells.prototype.setWeights = function (weights) {
        var tuples = [];
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            var numParams = cell.weights.length;
            var inputWeights = weights.splice(numParams);
            for (var i = 0; i < cell.weights.length; ++i) {
                tuples.push([cell.weights[i], inputWeights[i]]);
            }
        }
        (0, _variables.batchSetValue)(tuples);
    };
    StackedRNNCells.className = 'StackedRNNCells';
    return StackedRNNCells;
}(RNNCell);
exports.StackedRNNCells = StackedRNNCells;

_tfjsCore.serialization.SerializationMap.register(StackedRNNCells);
//# sourceMappingURL=recurrent.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../activations":"mGqD","../backend/tfjs_backend":"yoLG","../constraints":"haqD","../engine/topology":"q4cr","../errors":"WwMz","../initializers":"5TN9","../regularizers":"qedd","../types":"qCW+","../utils/generic_utils":"Uv0q","../utils/math_utils":"42TA","../variables":"uVg5","./serialization":"QEAU"}],"+sPb":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Bidirectional = exports.VALID_BIDIRECTIONAL_MERGE_MODES = exports.TimeDistributed = exports.Wrapper = undefined;
exports.checkBidirectionalMergeMode = checkBidirectionalMergeMode;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _tfjs_backend = require('../backend/tfjs_backend');

var K = _interopRequireWildcard(_tfjs_backend);

var _topology = require('../engine/topology');

var _errors = require('../errors');

var _generic_utils = require('../utils/generic_utils');

var generic_utils = _interopRequireWildcard(_generic_utils);

var _recurrent = require('./recurrent');

var _serialization = require('./serialization');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

var Wrapper = function (_super) {
    __extends(Wrapper, _super);
    function Wrapper(config) {
        var _this = _super.call(this, config) || this;
        _this.layer = config.layer;
        return _this;
    }
    Wrapper.prototype.build = function (inputShape) {
        this.built = true;
    };
    Object.defineProperty(Wrapper.prototype, "trainable", {
        get: function () {
            if (this.layer != null) {
                return this.layer.trainable;
            } else {
                return false;
            }
        },
        set: function (value) {
            if (this.layer != null) {
                this.layer.trainable = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wrapper.prototype, "trainableWeights", {
        get: function () {
            return this.layer.trainableWeights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wrapper.prototype, "nonTrainableWeights", {
        get: function () {
            return this.layer.nonTrainableWeights;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wrapper.prototype, "updates", {
        get: function () {
            return this.layer._updates;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wrapper.prototype, "losses", {
        get: function () {
            return this.layer.losses;
        },
        enumerable: true,
        configurable: true
    });
    Wrapper.prototype.getWeights = function () {
        return this.layer.getWeights();
    };
    Wrapper.prototype.setWeights = function (weights) {
        this.layer.setWeights(weights);
    };
    Wrapper.prototype.getConfig = function () {
        var config = {
            'layer': {
                'className': this.layer.getClassName(),
                'config': this.layer.getConfig()
            }
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Wrapper.fromConfig = function (cls, config, customObjects) {
        if (customObjects === void 0) {
            customObjects = {};
        }
        var layerConfig = config['layer'];
        var layer = (0, _serialization.deserialize)(layerConfig, customObjects);
        delete config['layer'];
        var newConfig = { layer: layer };
        Object.assign(newConfig, config);
        return new cls(newConfig);
    };
    return Wrapper;
}(_topology.Layer);
exports.Wrapper = Wrapper;

var TimeDistributed = function (_super) {
    __extends(TimeDistributed, _super);
    function TimeDistributed(config) {
        var _this = _super.call(this, config) || this;
        _this.supportsMasking = true;
        return _this;
    }
    TimeDistributed.prototype.build = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        if (inputShape.length < 3) {
            throw new _errors.ValueError("TimeDistributed layer expects an input shape >= 3D, but received " + ("input shape " + JSON.stringify(inputShape)));
        }
        this.inputSpec = [{ shape: inputShape }];
        var childInputShape = [inputShape[0]].concat(inputShape.slice(2));
        if (!this.layer.built) {
            this.layer.build(childInputShape);
            this.layer.built = true;
        }
        _super.prototype.build.call(this, inputShape);
    };
    TimeDistributed.prototype.computeOutputShape = function (inputShape) {
        inputShape = generic_utils.getExactlyOneShape(inputShape);
        var childInputShape = [inputShape[0]].concat(inputShape.slice(2));
        var childOutputShape = this.layer.computeOutputShape(childInputShape);
        var timesteps = inputShape[1];
        return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));
    };
    TimeDistributed.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            inputs = generic_utils.getExactlyOneTensor(inputs);
            var step = function (inputs, states) {
                var output = _this.layer.call(inputs, kwargs);
                return [output, []];
            };
            var rnnOutputs = (0, _recurrent.rnn)(step, inputs, [], false, null, null, false, inputs.shape[1]);
            var y = rnnOutputs[1];
            return y;
        });
    };
    TimeDistributed.className = 'TimeDistributed';
    return TimeDistributed;
}(Wrapper);
exports.TimeDistributed = TimeDistributed;

_tfjsCore.serialization.SerializationMap.register(TimeDistributed);
var VALID_BIDIRECTIONAL_MERGE_MODES = exports.VALID_BIDIRECTIONAL_MERGE_MODES = ['sum', 'mul', 'concat', 'ave'];
function checkBidirectionalMergeMode(value) {
    generic_utils.checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, 'BidirectionalMergeMode', value);
}
var Bidirectional = function (_super) {
    __extends(Bidirectional, _super);
    function Bidirectional(config) {
        var _this = _super.call(this, config) || this;
        var layerConfig = config.layer.getConfig();
        _this.forwardLayer = (0, _serialization.deserialize)({ className: config.layer.getClassName(), config: layerConfig });
        layerConfig['goBackwards'] = layerConfig['goBackwards'] === true ? false : true;
        _this.backwardLayer = (0, _serialization.deserialize)({ className: config.layer.getClassName(), config: layerConfig });
        _this.forwardLayer.name = 'forward_' + _this.forwardLayer.name;
        _this.backwardLayer.name = 'backward_' + _this.backwardLayer.name;
        checkBidirectionalMergeMode(config.mergeMode);
        _this.mergeMode = config.mergeMode;
        if (config.weights) {
            throw new _errors.NotImplementedError('weights support is not implemented for Bidirectional layer yet.');
        }
        _this._stateful = config.layer.stateful;
        _this.returnSequences = config.layer.returnSequences;
        _this.returnState = config.layer.returnState;
        _this.supportsMasking = true;
        _this._trainable = true;
        _this.inputSpec = config.layer.inputSpec;
        return _this;
    }
    Object.defineProperty(Bidirectional.prototype, "trainable", {
        get: function () {
            return this._trainable;
        },
        set: function (value) {
            this._trainable = value;
            if (this.forwardLayer != null) {
                this.forwardLayer.trainable = value;
            }
            if (this.backwardLayer != null) {
                this.backwardLayer.trainable = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Bidirectional.prototype.getWeights = function () {
        return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
    };
    Bidirectional.prototype.setWeights = function (weights) {
        var numWeights = weights.length;
        var numeightsOver2 = Math.floor(numWeights / 2);
        this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));
        this.backwardLayer.setWeights(weights.slice(numeightsOver2));
    };
    Bidirectional.prototype.computeOutputShape = function (inputShape) {
        var layerShapes = this.forwardLayer.computeOutputShape(inputShape);
        if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {
            layerShapes = [layerShapes];
        }
        layerShapes = layerShapes;
        var outputShape;
        var outputShapes;
        var stateShape;
        if (this.returnState) {
            stateShape = layerShapes.slice(1);
            outputShape = layerShapes[0];
        } else {
            outputShape = layerShapes[0];
        }
        outputShape = outputShape;
        if (this.mergeMode === 'concat') {
            outputShape[outputShape.length - 1] *= 2;
            outputShapes = [outputShape];
        } else if (this.mergeMode == null) {
            outputShapes = [outputShape, outputShape.slice()];
        } else {
            outputShapes = [outputShape];
        }
        if (this.returnState) {
            if (this.mergeMode == null) {
                return outputShapes.concat(stateShape).concat(stateShape.slice());
            }
            return [outputShape].concat(stateShape).concat(stateShape.slice());
        }
        return generic_utils.singletonOrArray(outputShapes);
    };
    Bidirectional.prototype.apply = function (inputs, kwargs) {
        var initialState = null;
        if (kwargs != null) {
            initialState = kwargs['initialState'];
        }
        if (Array.isArray(inputs)) {
            initialState = inputs.slice(1);
            inputs = inputs[0];
        }
        if (initialState == null || initialState.length === 0) {
            var applyOutputs = _super.prototype.apply.call(this, inputs, kwargs);
            return applyOutputs;
        } else {
            throw new _errors.NotImplementedError('The support for initial states is not implemented for ' + 'Bidirectional layers yet.');
        }
    };
    Bidirectional.prototype.call = function (inputs, kwargs) {
        var _this = this;
        return (0, _tfjsCore.tidy)(function () {
            if (kwargs['mask'] != null) {
                throw new _errors.NotImplementedError('The support for masking is not implemented for ' + 'Bidirectional layers yet.');
            }
            if (kwargs['initialState'] != null) {
                throw new _errors.NotImplementedError('The support for initial states is not implemented for ' + 'Bidirectional layers yet.');
            }
            var y = _this.forwardLayer.call(inputs, kwargs);
            var yRev = _this.backwardLayer.call(inputs, kwargs);
            var states;
            if (_this.returnState) {
                if (Array.isArray(y)) {
                    states = y.slice(1).concat(yRev.slice(1));
                } else {}
                y = y[0];
                yRev = yRev[0];
            }
            if (_this.returnSequences) {
                yRev = tfc.reverse(yRev, 1);
            }
            var output;
            if (_this.mergeMode === 'concat') {
                output = K.concatenate([y, yRev]);
            } else if (_this.mergeMode === 'sum') {
                output = tfc.add(y, yRev);
            } else if (_this.mergeMode === 'ave') {
                output = K.scalarTimesArray(K.getScalar(0.5), tfc.add(y, yRev));
            } else if (_this.mergeMode === 'mul') {
                output = tfc.mul(y, yRev);
            } else if (_this.mergeMode == null) {
                output = [y, yRev];
            }
            if (_this.returnState) {
                if (_this.mergeMode == null) {
                    return output.concat(states);
                }
                return [output].concat(states);
            }
            return output;
        });
    };
    Bidirectional.prototype.resetStates = function (states) {
        this.forwardLayer.resetStates();
        this.backwardLayer.resetStates();
    };
    Bidirectional.prototype.build = function (inputShape) {
        var _this = this;
        K.nameScope(this.forwardLayer.name, function () {
            _this.forwardLayer.build(inputShape);
        });
        K.nameScope(this.backwardLayer.name, function () {
            _this.backwardLayer.build(inputShape);
        });
        this.built = true;
    };
    Object.defineProperty(Bidirectional.prototype, "trainableWeights", {
        get: function () {
            return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bidirectional.prototype, "nonTrainableWeights", {
        get: function () {
            return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
        },
        enumerable: true,
        configurable: true
    });
    Bidirectional.prototype.getConfig = function () {
        var config = {
            'mergeMode': this.mergeMode
        };
        var baseConfig = _super.prototype.getConfig.call(this);
        Object.assign(config, baseConfig);
        return config;
    };
    Bidirectional.fromConfig = function (cls, config) {
        var rnnLayer = (0, _serialization.deserialize)(config['layer']);
        delete config['layer'];
        if (config['numConstants'] != null) {
            throw new _errors.NotImplementedError("Deserialization of a Bidirectional layer with numConstants " + "present is not supported yet.");
        }
        var newConfig = config;
        newConfig['layer'] = rnnLayer;
        return new cls(newConfig);
    };
    Bidirectional.className = 'Bidirectional';
    return Bidirectional;
}(Wrapper);
exports.Bidirectional = Bidirectional;

_tfjsCore.serialization.SerializationMap.register(Bidirectional);
//# sourceMappingURL=wrappers.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../backend/tfjs_backend":"yoLG","../engine/topology":"q4cr","../errors":"WwMz","../utils/generic_utils":"Uv0q","./recurrent":"kmFm","./serialization":"QEAU"}],"Ef1a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sequential = undefined;
exports.modelFromJSON = modelFromJSON;
exports.loadModelInternal = loadModelInternal;
exports.loadModelFromIOHandler = loadModelFromIOHandler;
exports.loadModelFromPath = loadModelFromPath;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _tfjs_backend = require("./backend/tfjs_backend");

var K = _interopRequireWildcard(_tfjs_backend);

var _topology = require("./engine/topology");

var _training = require("./engine/training");

var _errors = require("./errors");

var _serialization = require("./layers/serialization");

var _generic_utils = require("./utils/generic_utils");

var generic_utils = _interopRequireWildcard(_generic_utils);

var _serialization_utils = require("./utils/serialization_utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function modelFromJSON(modelAndWeightsConfig, customObjects) {
    return __awaiter(this, void 0, void 0, function () {
        var modelTopology, tsConfig, model, weightValues, uniqueWeightValues, _i, _a, weight, skipMismatches, isNamedTensorMap;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    modelTopology = modelAndWeightsConfig.modelTopology;
                    if (modelTopology['model_config'] != null) {
                        modelTopology = modelTopology['model_config'];
                    }
                    tsConfig = (0, _serialization_utils.convertPythonicToTs)(modelTopology);
                    model = (0, _serialization.deserialize)(tsConfig, customObjects);
                    if (!(modelAndWeightsConfig.weightsManifest != null)) return [3, 2];
                    return [4, _tfjsCore.io.loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model.weights.map(function (weight) {
                        return weight.originalName;
                    }))];
                case 1:
                    weightValues = _b.sent();
                    uniqueWeightValues = {};
                    for (_i = 0, _a = model.weights; _i < _a.length; _i++) {
                        weight = _a[_i];
                        uniqueWeightValues[weight.originalName] = weightValues[weight.originalName];
                    }
                    skipMismatches = null;
                    isNamedTensorMap = true;
                    model.loadWeights(uniqueWeightValues, skipMismatches, isNamedTensorMap);
                    _b.label = 2;
                case 2:
                    return [2, model];
            }
        });
    });
}
function loadModelInternal(pathOrIOHandler) {
    return __awaiter(this, void 0, void 0, function () {
        var handlers;
        return __generator(this, function (_a) {
            if (typeof pathOrIOHandler === 'string') {
                handlers = _tfjsCore.io.getLoadHandlers(pathOrIOHandler);
                if (handlers.length === 0) {
                    return [2, loadModelFromPath(pathOrIOHandler)];
                } else if (handlers.length > 1) {
                    throw new _errors.ValueError("Found more than one (" + handlers.length + ") load handlers for " + ("URL '" + pathOrIOHandler + "'"));
                }
                pathOrIOHandler = handlers[0];
            }
            return [2, loadModelFromIOHandler(pathOrIOHandler)];
        });
    });
}
function loadModelFromIOHandler(handler, customObjects) {
    return __awaiter(this, void 0, void 0, function () {
        var artifacts, model, skipMismatch, isNamedTensorMap;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (handler.load == null) {
                        throw new _errors.ValueError('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');
                    }
                    return [4, handler.load()];
                case 1:
                    artifacts = _a.sent();
                    model = (0, _serialization.deserialize)((0, _serialization_utils.convertPythonicToTs)(artifacts.modelTopology), customObjects);
                    if (artifacts.weightData != null) {
                        if (artifacts.weightSpecs == null) {
                            throw new _errors.ValueError('Model artifacts contains weight data, but not weight specs. ' + 'Therefore loading of weights cannot proceed.');
                        }
                        skipMismatch = false;
                        isNamedTensorMap = true;
                        model.loadWeights(_tfjsCore.io.decodeWeights(artifacts.weightData, artifacts.weightSpecs), skipMismatch, isNamedTensorMap);
                    }
                    return [2, model];
            }
        });
    });
}
function loadModelFromPath(modelConfigPath) {
    return __awaiter(this, void 0, void 0, function () {
        var modelConfigRequest, modelConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    return [4, fetch(modelConfigPath)];
                case 1:
                    modelConfigRequest = _a.sent();
                    return [4, modelConfigRequest.json()];
                case 2:
                    modelConfig = _a.sent();
                    if (modelConfig['modelTopology'] == null) {
                        throw new _errors.ValueError('Missing field "modelTopology" from model JSON at path' + modelConfigPath);
                    }
                    if (modelConfig['weightsManifest'] == null) {
                        throw new _errors.ValueError('Missing field "weightsManifest" from model JSON at path' + modelConfigPath);
                    }
                    modelConfig.pathPrefix = modelConfigPath.substring(0, modelConfigPath.lastIndexOf('/'));
                    return [2, modelFromJSON(modelConfig)];
            }
        });
    });
}
var Sequential = function (_super) {
    __extends(Sequential, _super);
    function Sequential(config) {
        var _this = _super.call(this, { inputs: [], outputs: [] }) || this;
        config = config || {};
        _this.trainable = true;
        _this._updatable = true;
        _this.built = false;
        _this.name = config.name != null ? config.name : K.getUid('sequential_');
        if (config.layers != null) {
            for (var _i = 0, _a = config.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                _this.add(layer);
            }
        }
        return _this;
    }
    Sequential_1 = Sequential;
    Sequential.prototype.add = function (layer) {
        if (this.outputs.length === 0) {
            if (layer.inboundNodes.length === 0) {
                if (layer.batchInputShape == null) {
                    throw new _errors.ValueError('The first layer in a Sequential model must ' + 'get an `inputShape` or `batchInputShape` argument.');
                }
                var x = (0, _topology.Input)({
                    batchShape: layer.batchInputShape,
                    dtype: layer.dtype,
                    name: layer.name + '_input'
                });
                layer.apply(x);
            }
            if (layer.inboundNodes.length !== 1) {
                throw new _errors.ValueError('A layer added to a Sequential model must not already be ' + ("connected somewhere else. Model received layer " + layer.name + " ") + ("which has " + layer.inboundNodes.length + " pre-existing inbound ") + 'connections.');
            }
            if (layer.inboundNodes[0].outputTensors.length !== 1) {
                throw new _errors.ValueError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');
            }
            this.outputs = [layer.inboundNodes[0].outputTensors[0]];
            this.inputs = (0, _topology.getSourceInputs)(this.outputs[0]);
            new _topology.Node({
                outboundLayer: this,
                inboundLayers: [],
                nodeIndices: [],
                tensorIndices: [],
                inputTensors: this.inputs,
                outputTensors: this.outputs,
                inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),
                outputMasks: [null],
                inputShapes: this.inputs.map(function (x) {
                    return x.shape;
                }),
                outputShapes: this.outputs[0].shape
            });
        } else {
            var outputTensor = layer.apply(this.outputs[0]);
            if (Array.isArray(outputTensor)) {
                throw new TypeError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');
            }
            this.outputs = [outputTensor];
            this.inboundNodes[0].outputTensors = this.outputs;
            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
        }
        this.layers.push(layer);
        this.built = false;
    };
    Sequential.prototype.pop = function () {
        if (this.layers.length === 0) {
            throw new TypeError('There are no layers in the model.');
        }
        this.layers.pop();
        if (this.layers.length === 0) {
            this.outputs = [];
            this.inboundNodes = [];
            this.outboundNodes = [];
        } else {
            var lastLayerIndex = this.layers.length - 1;
            this.layers[lastLayerIndex].outboundNodes = [];
            this.outputs = [this.layers[lastLayerIndex].output];
            this.inboundNodes[0].outputTensors = this.outputs;
            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
        }
    };
    Sequential.prototype.call = function (inputs, kwargs) {
        if (this.model == null) {
            this.build();
        }
        return this.model.call(inputs, kwargs);
    };
    Sequential.prototype.build = function (inputShape) {
        generic_utils.getExactlyOneShape(inputShape);
        if (this.inputs.length === 0 || this.outputs.length === 0) {
            throw new TypeError('Sequential model cannot be built: model is empty.' + ' Add some layers first.');
        }
        this.model = new _training.Model({
            inputs: this.inputs,
            outputs: this.outputs[0],
            name: this.name + '_model'
        });
        this.model.trainable = this.trainable;
        this.model.updatable = this.updatable;
        this.supportsMasking = this.model.supportsMasking;
        this.inputLayers = this.model.inputLayers;
        this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;
        this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;
        this.outputLayers = this.model.outputLayers;
        this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;
        this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;
        this.nodesByDepth = this.model.nodesByDepth;
        this.containerNodes = this.model.containerNodes;
        this.outputNames = this.model.outputNames;
        this.inputNames = this.model.inputNames;
        this.built = true;
    };
    Sequential.prototype.setWeights = function (weights) {
        if (this.model == null) {
            this.build();
        }
        this.model.setWeights(weights);
    };
    Object.defineProperty(Sequential.prototype, "updatable", {
        get: function () {
            return this._updatable;
        },
        set: function (value) {
            if (this.built) {
                this.model.updatable = value;
            }
            this._updatable = value;
        },
        enumerable: true,
        configurable: true
    });
    Sequential.prototype.evaluate = function (x, y, config) {
        if (config === void 0) {
            config = {};
        }
        if (!this.built) {
            throw new _errors.RuntimeError('The model needs to be compiled before being used.');
        }
        return this.model.evaluate(x, y, config);
    };
    Sequential.prototype.predict = function (x, config) {
        if (config === void 0) {
            config = {};
        }
        if (this.model == null) {
            this.build();
        }
        return this.model.predict(x, config);
    };
    Sequential.prototype.predictOnBatch = function (x) {
        if (this.model == null) {
            this.build();
        }
        return this.model.predictOnBatch(x);
    };
    Sequential.prototype.compile = function (config) {
        this.build();
        this.model.compile(config);
        this.optimizer = this.model.optimizer;
        this.loss = this.model.loss;
        this.metrics = this.model.metrics;
        this.metricsTensors = this.model.metricsTensors;
        this.metricsNames = this.model.metricsNames;
    };
    Sequential.prototype.fit = function (x, y, config) {
        if (config === void 0) {
            config = {};
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.built) {
                    throw new _errors.RuntimeError('The model needs to be compiled before ' + 'being used.');
                }
                return [2, this.model.fit(x, y, config)];
            });
        });
    };
    Sequential.fromConfig = function (cls, config) {
        var model = new cls({});
        if (!(model instanceof Sequential_1)) {
            throw new _errors.ValueError("Sequential.fromConfig called on non-Sequential input: " + model);
        }
        if (!(config instanceof Array)) {
            throw new _errors.ValueError("Sequential.fromConfig called without an array of configs");
        }
        if (!(config[0].className != null) || config[0]['className'] === 'Merge') {
            throw new _errors.ValueError('Legacy serialization format not supported yet.');
        }
        for (var _i = 0, _a = config; _i < _a.length; _i++) {
            var conf = _a[_i];
            var layer = (0, _serialization.deserialize)(conf);
            model.add(layer);
        }
        return model;
    };
    Sequential.prototype.getConfig = function () {
        var config = [];
        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {
            var layer = _a[_i];
            config.push({
                className: layer.getClassName(),
                config: layer.getConfig()
            });
        }
        return config;
    };
    Sequential.className = 'Sequential';
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes' })], Sequential.prototype, "add", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })], Sequential.prototype, "evaluate", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes', configParamIndices: [1] })], Sequential.prototype, "predict", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })], Sequential.prototype, "fit", null);
    Sequential = Sequential_1 = __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Classes' })], Sequential);
    return Sequential;
    var Sequential_1;
}(_training.Model);
exports.Sequential = Sequential;

_tfjsCore.serialization.SerializationMap.register(Sequential);
//# sourceMappingURL=models.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./backend/tfjs_backend":"yoLG","./engine/topology":"q4cr","./engine/training":"3KwT","./errors":"WwMz","./layers/serialization":"QEAU","./utils/generic_utils":"Uv0q","./utils/serialization_utils":"EA1F"}],"OfrL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RegularizerExports = exports.MetricExports = exports.InitializerExports = exports.ConstraintExports = exports.LayerExports = exports.ModelExports = undefined;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _constraints = require("./constraints");

var _topology = require("./engine/topology");

var _training = require("./engine/training");

var _initializers = require("./initializers");

var _advanced_activations = require("./layers/advanced_activations");

var _convolutional = require("./layers/convolutional");

var _convolutional_depthwise = require("./layers/convolutional_depthwise");

var _core = require("./layers/core");

var _embeddings = require("./layers/embeddings");

var _merge = require("./layers/merge");

var _normalization = require("./layers/normalization");

var _padding = require("./layers/padding");

var _pooling = require("./layers/pooling");

var _recurrent = require("./layers/recurrent");

var _wrappers = require("./layers/wrappers");

var _losses = require("./losses");

var _metrics = require("./metrics");

var _models = require("./models");

var _regularizers = require("./regularizers");

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var ModelExports = function () {
    function ModelExports() {}
    ModelExports.model = function (config) {
        return new _training.Model(config);
    };
    ModelExports.sequential = function (config) {
        return new _models.Sequential(config);
    };
    ModelExports.loadModel = function (pathOrIOHandler) {
        return (0, _models.loadModelInternal)(pathOrIOHandler);
    };
    ModelExports.input = function (config) {
        return (0, _topology.Input)(config);
    };
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Creation', configParamIndices: [0] })], ModelExports, "model", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Models', subheading: 'Creation', configParamIndices: [0] })], ModelExports, "sequential", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Models',
        subheading: 'Loading',
        useDocsFrom: 'loadModelInternal'
    })], ModelExports, "loadModel", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Models',
        subheading: 'Inputs',
        useDocsFrom: 'Input',
        configParamIndices: [0]
    })], ModelExports, "input", null);
    return ModelExports;
}();
exports.ModelExports = ModelExports;

var LayerExports = function () {
    function LayerExports() {}
    LayerExports.inputLayer = function (config) {
        return new _topology.InputLayer(config);
    };
    LayerExports.elu = function (config) {
        return new _advanced_activations.ELU(config);
    };
    LayerExports.leakyReLU = function (config) {
        return new _advanced_activations.LeakyReLU(config);
    };
    LayerExports.softmax = function (config) {
        return new _advanced_activations.Softmax(config);
    };
    LayerExports.thresholdedReLU = function (config) {
        return new _advanced_activations.ThresholdedReLU(config);
    };
    LayerExports.conv1d = function (config) {
        return new _convolutional.Conv1D(config);
    };
    LayerExports.conv2d = function (config) {
        return new _convolutional.Conv2D(config);
    };
    LayerExports.conv2dTranspose = function (config) {
        return new _convolutional.Conv2DTranspose(config);
    };
    LayerExports.separableConv2d = function (config) {
        return new _convolutional.SeparableConv2D(config);
    };
    LayerExports.cropping2D = function (config) {
        return new _convolutional.Cropping2D(config);
    };
    LayerExports.upSampling2d = function (config) {
        return new _convolutional.UpSampling2D(config);
    };
    LayerExports.depthwiseConv2d = function (config) {
        return new _convolutional_depthwise.DepthwiseConv2D(config);
    };
    LayerExports.activation = function (config) {
        return new _core.Activation(config);
    };
    LayerExports.dense = function (config) {
        return new _core.Dense(config);
    };
    LayerExports.dropout = function (config) {
        return new _core.Dropout(config);
    };
    LayerExports.flatten = function (config) {
        return new _core.Flatten(config);
    };
    LayerExports.repeatVector = function (config) {
        return new _core.RepeatVector(config);
    };
    LayerExports.reshape = function (config) {
        return new _core.Reshape(config);
    };
    LayerExports.embedding = function (config) {
        return new _embeddings.Embedding(config);
    };
    LayerExports.add = function (config) {
        return new _merge.Add(config);
    };
    LayerExports.average = function (config) {
        return new _merge.Average(config);
    };
    LayerExports.concatenate = function (config) {
        return new _merge.Concatenate(config);
    };
    LayerExports.maximum = function (config) {
        return new _merge.Maximum(config);
    };
    LayerExports.minimum = function (config) {
        return new _merge.Minimum(config);
    };
    LayerExports.multiply = function (config) {
        return new _merge.Multiply(config);
    };
    LayerExports.batchNormalization = function (config) {
        return new _normalization.BatchNormalization(config);
    };
    LayerExports.zeroPadding2d = function (config) {
        return new _padding.ZeroPadding2D(config);
    };
    LayerExports.averagePooling1d = function (config) {
        return new _pooling.AveragePooling1D(config);
    };
    LayerExports.avgPool1d = function (config) {
        return LayerExports.averagePooling1d(config);
    };
    LayerExports.avgPooling1d = function (config) {
        return LayerExports.averagePooling1d(config);
    };
    LayerExports.averagePooling2d = function (config) {
        return new _pooling.AveragePooling2D(config);
    };
    LayerExports.avgPool2d = function (config) {
        return LayerExports.averagePooling2d(config);
    };
    LayerExports.avgPooling2d = function (config) {
        return LayerExports.averagePooling2d(config);
    };
    LayerExports.globalAveragePooling1d = function (config) {
        return new _pooling.GlobalAveragePooling1D(config);
    };
    LayerExports.globalAveragePooling2d = function (config) {
        return new _pooling.GlobalAveragePooling2D(config);
    };
    LayerExports.globalMaxPooling1d = function (config) {
        return new _pooling.GlobalMaxPooling1D(config);
    };
    LayerExports.globalMaxPooling2d = function (config) {
        return new _pooling.GlobalMaxPooling2D(config);
    };
    LayerExports.maxPooling1d = function (config) {
        return new _pooling.MaxPooling1D(config);
    };
    LayerExports.maxPooling2d = function (config) {
        return new _pooling.MaxPooling2D(config);
    };
    LayerExports.gru = function (config) {
        return new _recurrent.GRU(config);
    };
    LayerExports.gruCell = function (config) {
        return new _recurrent.GRUCell(config);
    };
    LayerExports.lstm = function (config) {
        return new _recurrent.LSTM(config);
    };
    LayerExports.lstmCell = function (config) {
        return new _recurrent.LSTMCell(config);
    };
    LayerExports.simpleRNN = function (config) {
        return new _recurrent.SimpleRNN(config);
    };
    LayerExports.simpleRNNCell = function (config) {
        return new _recurrent.SimpleRNNCell(config);
    };
    LayerExports.rnn = function (config) {
        return new _recurrent.RNN(config);
    };
    LayerExports.stackedRNNCells = function (config) {
        return new _recurrent.StackedRNNCells(config);
    };
    LayerExports.bidirectional = function (config) {
        return new _wrappers.Bidirectional(config);
    };
    LayerExports.timeDistributed = function (config) {
        return new _wrappers.TimeDistributed(config);
    };
    LayerExports.Layer = _topology.Layer;
    LayerExports.RNN = _recurrent.RNN;
    LayerExports.RNNCell = _recurrent.RNNCell;
    LayerExports.input = ModelExports.input;
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Inputs',
        namespace: 'layers',
        useDocsFrom: 'InputLayer',
        configParamIndices: [0]
    })], LayerExports, "inputLayer", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Advanced Activation',
        namespace: 'layers',
        useDocsFrom: 'ELU',
        configParamIndices: [0]
    })], LayerExports, "elu", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Advanced Activation',
        namespace: 'layers',
        useDocsFrom: 'LeakyReLU',
        configParamIndices: [0]
    })], LayerExports, "leakyReLU", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Advanced Activation',
        namespace: 'layers',
        useDocsFrom: 'Softmax',
        configParamIndices: [0]
    })], LayerExports, "softmax", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Advanced Activation',
        namespace: 'layers',
        useDocsFrom: 'ThresholdedReLU',
        configParamIndices: [0]
    })], LayerExports, "thresholdedReLU", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Convolutional',
        namespace: 'layers',
        useDocsFrom: 'Conv1D',
        configParamIndices: [0]
    })], LayerExports, "conv1d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Convolutional',
        namespace: 'layers',
        useDocsFrom: 'Conv2D',
        configParamIndices: [0]
    })], LayerExports, "conv2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Convolutional',
        namespace: 'layers',
        useDocsFrom: 'Conv2DTranspose',
        configParamIndices: [0]
    })], LayerExports, "conv2dTranspose", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Convolutional',
        namespace: 'layers',
        useDocsFrom: 'SeparableConv2D',
        configParamIndices: [0]
    })], LayerExports, "separableConv2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Convolutional',
        namespace: 'layers',
        useDocsFrom: 'Cropping2D',
        configParamIndices: [0]
    })], LayerExports, "cropping2D", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Convolutional',
        namespace: 'layers',
        useDocsFrom: 'UpSampling2D',
        configParamIndices: [0]
    })], LayerExports, "upSampling2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Convolutional',
        namespace: 'layers',
        useDocsFrom: 'DepthwiseConv2D',
        configParamIndices: [0]
    })], LayerExports, "depthwiseConv2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Basic',
        namespace: 'layers',
        useDocsFrom: 'Activation',
        configParamIndices: [0]
    })], LayerExports, "activation", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Basic',
        namespace: 'layers',
        useDocsFrom: 'Dense',
        configParamIndices: [0]
    })], LayerExports, "dense", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Basic',
        namespace: 'layers',
        useDocsFrom: 'Dropout',
        configParamIndices: [0]
    })], LayerExports, "dropout", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Basic',
        namespace: 'layers',
        useDocsFrom: 'Flatten',
        configParamIndices: [0]
    })], LayerExports, "flatten", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Basic',
        namespace: 'layers',
        useDocsFrom: 'RepeatVector',
        configParamIndices: [0]
    })], LayerExports, "repeatVector", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Basic',
        namespace: 'layers',
        useDocsFrom: 'Reshape',
        configParamIndices: [0]
    })], LayerExports, "reshape", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Basic',
        namespace: 'layers',
        useDocsFrom: 'Embedding',
        configParamIndices: [0]
    })], LayerExports, "embedding", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Merge',
        namespace: 'layers',
        useDocsFrom: 'Add',
        configParamIndices: [0]
    })], LayerExports, "add", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Merge',
        namespace: 'layers',
        useDocsFrom: 'Average',
        configParamIndices: [0]
    })], LayerExports, "average", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Merge',
        namespace: 'layers',
        useDocsFrom: 'Concatenate',
        configParamIndices: [0]
    })], LayerExports, "concatenate", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Merge',
        namespace: 'layers',
        useDocsFrom: 'Maximum',
        configParamIndices: [0]
    })], LayerExports, "maximum", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Merge',
        namespace: 'layers',
        useDocsFrom: 'Minimum',
        configParamIndices: [0]
    })], LayerExports, "minimum", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Merge',
        namespace: 'layers',
        useDocsFrom: 'Multiply',
        configParamIndices: [0]
    })], LayerExports, "multiply", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Normalization',
        namespace: 'layers',
        useDocsFrom: 'BatchNormalization',
        configParamIndices: [0]
    })], LayerExports, "batchNormalization", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Padding',
        namespace: 'layers',
        useDocsFrom: 'ZeroPadding2D',
        configParamIndices: [0]
    })], LayerExports, "zeroPadding2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Pooling',
        namespace: 'layers',
        useDocsFrom: 'AveragePooling1D',
        configParamIndices: [0]
    })], LayerExports, "averagePooling1d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Pooling',
        namespace: 'layers',
        useDocsFrom: 'AveragePooling2D',
        configParamIndices: [0]
    })], LayerExports, "averagePooling2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Pooling',
        namespace: 'layers',
        useDocsFrom: 'GlobalAveragePooling1D',
        configParamIndices: [0]
    })], LayerExports, "globalAveragePooling1d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Pooling',
        namespace: 'layers',
        useDocsFrom: 'GlobalAveragePooling2D',
        configParamIndices: [0]
    })], LayerExports, "globalAveragePooling2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Pooling',
        namespace: 'layers',
        useDocsFrom: 'GlobalMaxPooling1D',
        configParamIndices: [0]
    })], LayerExports, "globalMaxPooling1d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Pooling',
        namespace: 'layers',
        useDocsFrom: 'GlobalMaxPooling2D',
        configParamIndices: [0]
    })], LayerExports, "globalMaxPooling2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Pooling',
        namespace: 'layers',
        useDocsFrom: 'MaxPooling1D',
        configParamIndices: [0]
    })], LayerExports, "maxPooling1d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Pooling',
        namespace: 'layers',
        useDocsFrom: 'MaxPooling2D',
        configParamIndices: [0]
    })], LayerExports, "maxPooling2d", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Recurrent',
        namespace: 'layers',
        useDocsFrom: 'GRU',
        configParamIndices: [0]
    })], LayerExports, "gru", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Recurrent',
        namespace: 'layers',
        useDocsFrom: 'GRUCell',
        configParamIndices: [0]
    })], LayerExports, "gruCell", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Recurrent',
        namespace: 'layers',
        useDocsFrom: 'LSTM',
        configParamIndices: [0]
    })], LayerExports, "lstm", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Recurrent',
        namespace: 'layers',
        useDocsFrom: 'LSTMCell',
        configParamIndices: [0]
    })], LayerExports, "lstmCell", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Recurrent',
        namespace: 'layers',
        useDocsFrom: 'SimpleRNN',
        configParamIndices: [0]
    })], LayerExports, "simpleRNN", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Recurrent',
        namespace: 'layers',
        useDocsFrom: 'SimpleRNNCell',
        configParamIndices: [0]
    })], LayerExports, "simpleRNNCell", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Recurrent',
        namespace: 'layers',
        useDocsFrom: 'RNN',
        configParamIndices: [0]
    })], LayerExports, "rnn", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Recurrent',
        namespace: 'layers',
        useDocsFrom: 'RNN',
        configParamIndices: [0]
    })], LayerExports, "stackedRNNCells", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Wrapper',
        namespace: 'layers',
        useDocsFrom: 'Bidirectional',
        configParamIndices: [0]
    })], LayerExports, "bidirectional", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Layers',
        subheading: 'Wrapper',
        namespace: 'layers',
        useDocsFrom: 'TimeDistributed',
        configParamIndices: [0]
    })], LayerExports, "timeDistributed", null);
    return LayerExports;
}();
exports.LayerExports = LayerExports;

var ConstraintExports = function () {
    function ConstraintExports() {}
    ConstraintExports.maxNorm = function (config) {
        return new _constraints.MaxNorm(config);
    };
    ConstraintExports.unitNorm = function (config) {
        return new _constraints.UnitNorm(config);
    };
    ConstraintExports.nonNeg = function () {
        return new _constraints.NonNeg();
    };
    ConstraintExports.minMaxNorm = function (config) {
        return new _constraints.MinMaxNorm(config);
    };
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Constraints',
        namespace: 'constraints',
        useDocsFrom: 'MaxNorm',
        configParamIndices: [0]
    })], ConstraintExports, "maxNorm", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Constraints',
        namespace: 'constraints',
        useDocsFrom: 'UnitNorm',
        configParamIndices: [0]
    })], ConstraintExports, "unitNorm", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Constraints', namespace: 'constraints', useDocsFrom: 'NonNeg' })], ConstraintExports, "nonNeg", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Constraints',
        namespace: 'constraints',
        useDocsFrom: 'MinMaxNormConfig',
        configParamIndices: [0]
    })], ConstraintExports, "minMaxNorm", null);
    return ConstraintExports;
}();
exports.ConstraintExports = ConstraintExports;

var InitializerExports = function () {
    function InitializerExports() {}
    InitializerExports.zeros = function () {
        return new _initializers.Zeros();
    };
    InitializerExports.ones = function () {
        return new _initializers.Ones();
    };
    InitializerExports.constant = function (config) {
        return new _initializers.Constant(config);
    };
    InitializerExports.randomUniform = function (config) {
        return new _initializers.RandomUniform(config);
    };
    InitializerExports.randomNormal = function (config) {
        return new _initializers.RandomNormal(config);
    };
    InitializerExports.truncatedNormal = function (config) {
        return new _initializers.TruncatedNormal(config);
    };
    InitializerExports.identity = function (config) {
        return new _initializers.Identity(config);
    };
    InitializerExports.varianceScaling = function (config) {
        return new _initializers.VarianceScaling(config);
    };
    InitializerExports.glorotUniform = function (config) {
        return new _initializers.GlorotUniform(config);
    };
    InitializerExports.glorotNormal = function (config) {
        return new _initializers.GlorotNormal(config);
    };
    InitializerExports.heNormal = function (config) {
        return new _initializers.HeNormal(config);
    };
    InitializerExports.leCunNormal = function (config) {
        return new _initializers.LeCunNormal(config);
    };
    InitializerExports.orthogonal = function (config) {
        return new _initializers.Orthogonal(config);
    };
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'Zeros'
    })], InitializerExports, "zeros", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Initializers', namespace: 'initializers', useDocsFrom: 'Ones' })], InitializerExports, "ones", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'Constant',
        configParamIndices: [0]
    })], InitializerExports, "constant", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'RandomUniform',
        configParamIndices: [0]
    })], InitializerExports, "randomUniform", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'RandomNormal',
        configParamIndices: [0]
    })], InitializerExports, "randomNormal", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'TruncatedNormal',
        configParamIndices: [0]
    })], InitializerExports, "truncatedNormal", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'Identity',
        configParamIndices: [0]
    })], InitializerExports, "identity", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'VarianceScaling',
        configParamIndices: [0]
    })], InitializerExports, "varianceScaling", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'GlorotUniform',
        configParamIndices: [0]
    })], InitializerExports, "glorotUniform", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'GlorotNormal',
        configParamIndices: [0]
    })], InitializerExports, "glorotNormal", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'HeNormal',
        configParamIndices: [0]
    })], InitializerExports, "heNormal", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'LeCunNormal',
        configParamIndices: [0]
    })], InitializerExports, "leCunNormal", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Initializers',
        namespace: 'initializers',
        useDocsFrom: 'Orthogonal',
        configParamIndices: [0]
    })], InitializerExports, "orthogonal", null);
    return InitializerExports;
}();
exports.InitializerExports = InitializerExports;

var MetricExports = function () {
    function MetricExports() {}
    MetricExports.binaryAccuracy = function (yTrue, yPred) {
        return (0, _metrics.binaryAccuracy)(yTrue, yPred);
    };
    MetricExports.binaryCrossentropy = function (yTrue, yPred) {
        return (0, _metrics.binaryCrossentropy)(yTrue, yPred);
    };
    MetricExports.categoricalAccuracy = function (yTrue, yPred) {
        return (0, _metrics.categoricalAccuracy)(yTrue, yPred);
    };
    MetricExports.categoricalCrossentropy = function (yTrue, yPred) {
        return (0, _losses.categoricalCrossentropy)(yTrue, yPred);
    };
    MetricExports.cosineProximity = function (yTrue, yPred) {
        return (0, _losses.cosineProximity)(yTrue, yPred);
    };
    MetricExports.prototype.meanAbsoluteError = function (yTrue, yPred) {
        return (0, _losses.meanAbsoluteError)(yTrue, yPred);
    };
    MetricExports.prototype.meanAbsolutePercentageError = function (yTrue, yPred) {
        return (0, _losses.meanAbsolutePercentageError)(yTrue, yPred);
    };
    MetricExports.prototype.MAPE = function (yTrue, yPred) {
        return (0, _losses.meanAbsolutePercentageError)(yTrue, yPred);
    };
    MetricExports.prototype.mape = function (yTrue, yPred) {
        return (0, _losses.meanAbsolutePercentageError)(yTrue, yPred);
    };
    MetricExports.meanSquaredError = function (yTrue, yPred) {
        return (0, _losses.meanSquaredError)(yTrue, yPred);
    };
    MetricExports.MSE = function (yTrue, yPred) {
        return (0, _losses.meanSquaredError)(yTrue, yPred);
    };
    MetricExports.mse = function (yTrue, yPred) {
        return (0, _losses.meanSquaredError)(yTrue, yPred);
    };
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Metrics',
        namespace: 'metrics',
        useDocsFrom: 'meanAbsoluteError'
    })], MetricExports.prototype, "meanAbsoluteError", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Metrics',
        namespace: 'metrics',
        useDocsFrom: 'meanAbsolutePercentageError'
    })], MetricExports.prototype, "meanAbsolutePercentageError", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Metrics', namespace: 'metrics', useDocsFrom: 'binaryAccuracy' })], MetricExports, "binaryAccuracy", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Metrics',
        namespace: 'metrics',
        useDocsFrom: 'binaryCrossentropy'
    })], MetricExports, "binaryCrossentropy", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Metrics',
        namespace: 'metrics',
        useDocsFrom: 'categoricalAccuracy'
    })], MetricExports, "categoricalAccuracy", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Metrics',
        namespace: 'metrics',
        useDocsFrom: 'categoricalCrossentropy'
    })], MetricExports, "categoricalCrossentropy", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Metrics',
        namespace: 'metrics',
        useDocsFrom: 'cosineProximity'
    })], MetricExports, "cosineProximity", null);
    __decorate([(0, _tfjsCore.doc)({
        heading: 'Metrics',
        namespace: 'metrics',
        useDocsFrom: 'meanSquaredError'
    })], MetricExports, "meanSquaredError", null);
    return MetricExports;
}();
exports.MetricExports = MetricExports;

var RegularizerExports = function () {
    function RegularizerExports() {}
    RegularizerExports.l1l2 = function (config) {
        return new _regularizers.L1L2(config);
    };
    RegularizerExports.l1 = function (config) {
        return (0, _regularizers.l1)(config);
    };
    RegularizerExports.l2 = function (config) {
        return (0, _regularizers.l2)(config);
    };
    __decorate([(0, _tfjsCore.doc)({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })], RegularizerExports, "l1l2", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })], RegularizerExports, "l1", null);
    __decorate([(0, _tfjsCore.doc)({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })], RegularizerExports, "l2", null);
    return RegularizerExports;
}();
exports.RegularizerExports = RegularizerExports;
//# sourceMappingURL=exports.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./constraints":"haqD","./engine/topology":"q4cr","./engine/training":"3KwT","./initializers":"5TN9","./layers/advanced_activations":"opnf","./layers/convolutional":"TnZK","./layers/convolutional_depthwise":"HD7T","./layers/core":"03Pm","./layers/embeddings":"ck4m","./layers/merge":"3GOx","./layers/normalization":"xzCz","./layers/padding":"UWr+","./layers/pooling":"fNt6","./layers/recurrent":"kmFm","./layers/wrappers":"+sPb","./losses":"cMmA","./metrics":"2Fsr","./models":"Ef1a","./regularizers":"qedd"}],"ojwZ":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.regularizers = exports.metrics = exports.initializers = exports.constraints = exports.layers = exports.input = exports.loadModel = exports.sequential = exports.model = exports.version_layers = exports.SymbolicTensor = exports.Sequential = exports.RNN = exports.Model = exports.CustomCallback = exports.CallbackList = exports.Callback = undefined;

var _callbacks = require('./callbacks');

Object.defineProperty(exports, 'Callback', {
  enumerable: true,
  get: function () {
    return _callbacks.Callback;
  }
});
Object.defineProperty(exports, 'CallbackList', {
  enumerable: true,
  get: function () {
    return _callbacks.CallbackList;
  }
});
Object.defineProperty(exports, 'CustomCallback', {
  enumerable: true,
  get: function () {
    return _callbacks.CustomCallback;
  }
});

var _training = require('./engine/training');

Object.defineProperty(exports, 'Model', {
  enumerable: true,
  get: function () {
    return _training.Model;
  }
});

var _recurrent = require('./layers/recurrent');

Object.defineProperty(exports, 'RNN', {
  enumerable: true,
  get: function () {
    return _recurrent.RNN;
  }
});

var _models = require('./models');

Object.defineProperty(exports, 'Sequential', {
  enumerable: true,
  get: function () {
    return _models.Sequential;
  }
});

var _types = require('./types');

Object.defineProperty(exports, 'SymbolicTensor', {
  enumerable: true,
  get: function () {
    return _types.SymbolicTensor;
  }
});

var _version = require('./version');

Object.defineProperty(exports, 'version_layers', {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});

var _exports = require('./exports');

var model = exports.model = _exports.ModelExports.model;
var sequential = exports.sequential = _exports.ModelExports.sequential;
var loadModel = exports.loadModel = _exports.ModelExports.loadModel;
var input = exports.input = _exports.ModelExports.input;
var layers = exports.layers = _exports.LayerExports;
var constraints = exports.constraints = _exports.ConstraintExports;
var initializers = exports.initializers = _exports.InitializerExports;
var metrics = exports.metrics = _exports.MetricExports;
var regularizers = exports.regularizers = _exports.RegularizerExports;
//# sourceMappingURL=index.js.map
},{"./exports":"OfrL","./callbacks":"oY+c","./engine/training":"3KwT","./layers/recurrent":"kmFm","./models":"Ef1a","./types":"qCW+","./version":"bg5G"}],"FIMm":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

},{}],"5YsI":[function(require,module,exports) {
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],"J6GP":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};
},{}],"bvhO":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};
},{}],"+00f":[function(require,module,exports) {
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');
},{"./decode":"J6GP","./encode":"bvhO"}],"Mej7":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"punycode":"FIMm","./util":"5YsI","querystring":"+00f"}],"oU4k":[function(require,module,exports) {
"use strict";
module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}

},{}],"/6SA":[function(require,module,exports) {
"use strict";

/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};

},{}],"wJQW":[function(require,module,exports) {
"use strict";
module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};

},{}],"SGHJ":[function(require,module,exports) {
"use strict";

module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}

},{}],"XRF3":[function(require,module,exports) {
"use strict";
module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}

},{}],"74ni":[function(require,module,exports) {
"use strict";

/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};

},{}],"78YX":[function(require,module,exports) {
"use strict";
module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}

},{}],"Ty7D":[function(require,module,exports) {
"use strict";
module.exports = LongBits;

var util = require("../util/minimal");

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};

},{"../util/minimal":"9Kg/"}],"9Kg/":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
"use strict";
var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = require("@protobufjs/aspromise");

// converts to / from base64 encoded strings
util.base64 = require("@protobufjs/base64");

// base class of rpc.Service
util.EventEmitter = require("@protobufjs/eventemitter");

// float handling accross browsers
util.float = require("@protobufjs/float");

// requires modules optionally and hides the call from bundlers
util.inquire = require("@protobufjs/inquire");

// converts to / from utf8 encoded strings
util.utf8 = require("@protobufjs/utf8");

// provides a node-like buffer pool in the browser
util.pool = require("@protobufjs/pool");

// utility to work with the low and high bits of a 64 bit value
util.LongBits = require("./longbits");

// global object reference
util.global = typeof window !== "undefined" && window
           || typeof global !== "undefined" && global
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 * @const
 */
util.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: (new Error()).stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};

},{"@protobufjs/aspromise":"oU4k","@protobufjs/base64":"/6SA","@protobufjs/eventemitter":"wJQW","@protobufjs/float":"SGHJ","@protobufjs/inquire":"XRF3","@protobufjs/utf8":"74ni","@protobufjs/pool":"78YX","./longbits":"Ty7D","buffer":"dskh"}],"4DEs":[function(require,module,exports) {
"use strict";
module.exports = Writer;

var util      = require("./util/minimal");

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = util.Buffer
    ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
            return new BufferWriter();
        })();
    }
    /* istanbul ignore next */
    : function create_array() {
        return new Writer();
    };

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
};

},{"./util/minimal":"9Kg/"}],"70Bj":[function(require,module,exports) {

"use strict";
module.exports = BufferWriter;

// extends Writer
var Writer = require("./writer");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = require("./util/minimal");

var Buffer = util.Buffer;

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Buffer} Buffer
 */
BufferWriter.alloc = function alloc_buffer(size) {
    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
};

var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set"
    ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
                           // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
        else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
    };

/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else
        buf.utf8Write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

},{"./writer":"4DEs","./util/minimal":"9Kg/"}],"z4LV":[function(require,module,exports) {
"use strict";
module.exports = Reader;

var util      = require("./util/minimal");

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = util.Buffer
    ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer) {
            return util.Buffer.isBuffer(buffer)
                ? new BufferReader(buffer)
                /* istanbul ignore next */
                : create_array(buffer);
        })(buffer);
    }
    /* istanbul ignore next */
    : create_array;

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};

},{"./util/minimal":"9Kg/"}],"Rkr2":[function(require,module,exports) {
"use strict";
module.exports = BufferReader;

// extends Reader
var Reader = require("./reader");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = require("./util/minimal");

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

/* istanbul ignore else */
if (util.Buffer)
    BufferReader.prototype._slice = util.Buffer.prototype.slice;

/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

},{"./reader":"z4LV","./util/minimal":"9Kg/"}],"eoks":[function(require,module,exports) {
"use strict";
module.exports = Service;

var util = require("../util/minimal");

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

},{"../util/minimal":"9Kg/"}],"ay75":[function(require,module,exports) {
"use strict";

/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = require("./rpc/service");

},{"./rpc/service":"eoks"}],"Nr/0":[function(require,module,exports) {
"use strict";
module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */

},{}],"/qET":[function(require,module,exports) {
"use strict";
var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = require("./writer");
protobuf.BufferWriter = require("./writer_buffer");
protobuf.Reader       = require("./reader");
protobuf.BufferReader = require("./reader_buffer");

// Utility
protobuf.util         = require("./util/minimal");
protobuf.rpc          = require("./rpc");
protobuf.roots        = require("./roots");
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.Reader._configure(protobuf.BufferReader);
    protobuf.util._configure();
}

// Set up buffer utility according to the environment
protobuf.Writer._configure(protobuf.BufferWriter);
configure();

},{"./writer":"4DEs","./writer_buffer":"70Bj","./reader":"z4LV","./reader_buffer":"Rkr2","./util/minimal":"9Kg/","./rpc":"ay75","./roots":"Nr/0"}],"Myh2":[function(require,module,exports) {
// minimal library entry point.

"use strict";
module.exports = require("./src/index-minimal");

},{"./src/index-minimal":"/qET"}],"blTb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.tensorflow = undefined;

var _minimal = require("protobufjs/minimal");

var $protobuf = _interopRequireWildcard(_minimal);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const $Reader = $protobuf.Reader,
      $util = $protobuf.util; /*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/


const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

const tensorflow = exports.tensorflow = $root.tensorflow = (() => {

    const tensorflow = {};

    tensorflow.Any = function () {

        function Any(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        Any.prototype.typeUrl = "";
        Any.prototype.value = $util.newBuffer([]);

        Any.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.Any();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.typeUrl = r.string();
                        break;
                    case 2:
                        m.value = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return Any;
    }();

    tensorflow.DataType = function () {
        const valuesById = {},
              values = Object.create(valuesById);
        values[valuesById[0] = "DT_INVALID"] = 0;
        values[valuesById[1] = "DT_FLOAT"] = 1;
        values[valuesById[2] = "DT_DOUBLE"] = 2;
        values[valuesById[3] = "DT_INT32"] = 3;
        values[valuesById[4] = "DT_UINT8"] = 4;
        values[valuesById[5] = "DT_INT16"] = 5;
        values[valuesById[6] = "DT_INT8"] = 6;
        values[valuesById[7] = "DT_STRING"] = 7;
        values[valuesById[8] = "DT_COMPLEX64"] = 8;
        values[valuesById[9] = "DT_INT64"] = 9;
        values[valuesById[10] = "DT_BOOL"] = 10;
        values[valuesById[11] = "DT_QINT8"] = 11;
        values[valuesById[12] = "DT_QUINT8"] = 12;
        values[valuesById[13] = "DT_QINT32"] = 13;
        values[valuesById[14] = "DT_BFLOAT16"] = 14;
        values[valuesById[101] = "DT_FLOAT_REF"] = 101;
        values[valuesById[102] = "DT_DOUBLE_REF"] = 102;
        values[valuesById[103] = "DT_INT32_REF"] = 103;
        values[valuesById[104] = "DT_UINT8_REF"] = 104;
        values[valuesById[105] = "DT_INT16_REF"] = 105;
        values[valuesById[106] = "DT_INT8_REF"] = 106;
        values[valuesById[107] = "DT_STRING_REF"] = 107;
        values[valuesById[108] = "DT_COMPLEX64_REF"] = 108;
        values[valuesById[109] = "DT_INT64_REF"] = 109;
        values[valuesById[110] = "DT_BOOL_REF"] = 110;
        values[valuesById[111] = "DT_QINT8_REF"] = 111;
        values[valuesById[112] = "DT_QUINT8_REF"] = 112;
        values[valuesById[113] = "DT_QINT32_REF"] = 113;
        values[valuesById[114] = "DT_BFLOAT16_REF"] = 114;
        return values;
    }();

    tensorflow.TensorShape = function () {

        function TensorShape(p) {
            this.dim = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        TensorShape.prototype.dim = $util.emptyArray;
        TensorShape.prototype.unknownRank = false;

        TensorShape.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.TensorShape();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 2:
                        if (!(m.dim && m.dim.length)) m.dim = [];
                        m.dim.push($root.tensorflow.TensorShape.Dim.decode(r, r.uint32()));
                        break;
                    case 3:
                        m.unknownRank = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        TensorShape.Dim = function () {

            function Dim(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            Dim.prototype.size = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Dim.prototype.name = "";

            Dim.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.TensorShape.Dim();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.size = r.int64();
                            break;
                        case 2:
                            m.name = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Dim;
        }();

        return TensorShape;
    }();

    tensorflow.Tensor = function () {

        function Tensor(p) {
            this.floatVal = [];
            this.doubleVal = [];
            this.intVal = [];
            this.stringVal = [];
            this.scomplexVal = [];
            this.int64Val = [];
            this.boolVal = [];
            this.uint32Val = [];
            this.uint64Val = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        Tensor.prototype.dtype = 0;
        Tensor.prototype.tensorShape = null;
        Tensor.prototype.versionNumber = 0;
        Tensor.prototype.tensorContent = $util.newBuffer([]);
        Tensor.prototype.floatVal = $util.emptyArray;
        Tensor.prototype.doubleVal = $util.emptyArray;
        Tensor.prototype.intVal = $util.emptyArray;
        Tensor.prototype.stringVal = $util.emptyArray;
        Tensor.prototype.scomplexVal = $util.emptyArray;
        Tensor.prototype.int64Val = $util.emptyArray;
        Tensor.prototype.boolVal = $util.emptyArray;
        Tensor.prototype.uint32Val = $util.emptyArray;
        Tensor.prototype.uint64Val = $util.emptyArray;

        Tensor.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.Tensor();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.dtype = r.int32();
                        break;
                    case 2:
                        m.tensorShape = $root.tensorflow.TensorShape.decode(r, r.uint32());
                        break;
                    case 3:
                        m.versionNumber = r.int32();
                        break;
                    case 4:
                        m.tensorContent = r.bytes();
                        break;
                    case 5:
                        if (!(m.floatVal && m.floatVal.length)) m.floatVal = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.floatVal.push(r.float());
                        } else m.floatVal.push(r.float());
                        break;
                    case 6:
                        if (!(m.doubleVal && m.doubleVal.length)) m.doubleVal = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.doubleVal.push(r.double());
                        } else m.doubleVal.push(r.double());
                        break;
                    case 7:
                        if (!(m.intVal && m.intVal.length)) m.intVal = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.intVal.push(r.int32());
                        } else m.intVal.push(r.int32());
                        break;
                    case 8:
                        if (!(m.stringVal && m.stringVal.length)) m.stringVal = [];
                        m.stringVal.push(r.bytes());
                        break;
                    case 9:
                        if (!(m.scomplexVal && m.scomplexVal.length)) m.scomplexVal = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.scomplexVal.push(r.float());
                        } else m.scomplexVal.push(r.float());
                        break;
                    case 10:
                        if (!(m.int64Val && m.int64Val.length)) m.int64Val = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.int64Val.push(r.int64());
                        } else m.int64Val.push(r.int64());
                        break;
                    case 11:
                        if (!(m.boolVal && m.boolVal.length)) m.boolVal = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.boolVal.push(r.bool());
                        } else m.boolVal.push(r.bool());
                        break;
                    case 16:
                        if (!(m.uint32Val && m.uint32Val.length)) m.uint32Val = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.uint32Val.push(r.uint32());
                        } else m.uint32Val.push(r.uint32());
                        break;
                    case 17:
                        if (!(m.uint64Val && m.uint64Val.length)) m.uint64Val = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.uint64Val.push(r.uint64());
                        } else m.uint64Val.push(r.uint64());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return Tensor;
    }();

    tensorflow.AttrValue = function () {

        function AttrValue(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        AttrValue.prototype.list = null;
        AttrValue.prototype.s = $util.newBuffer([]);
        AttrValue.prototype.i = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
        AttrValue.prototype.f = 0;
        AttrValue.prototype.b = false;
        AttrValue.prototype.type = 0;
        AttrValue.prototype.shape = null;
        AttrValue.prototype.tensor = null;
        AttrValue.prototype.placeholder = "";
        AttrValue.prototype.func = null;

        let $oneOfFields;

        Object.defineProperty(AttrValue.prototype, "value", {
            get: $util.oneOfGetter($oneOfFields = ["list", "s", "i", "f", "b", "type", "shape", "tensor", "placeholder", "func"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        AttrValue.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.AttrValue();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.list = $root.tensorflow.AttrValue.ListValue.decode(r, r.uint32());
                        break;
                    case 2:
                        m.s = r.bytes();
                        break;
                    case 3:
                        m.i = r.int64();
                        break;
                    case 4:
                        m.f = r.float();
                        break;
                    case 5:
                        m.b = r.bool();
                        break;
                    case 6:
                        m.type = r.int32();
                        break;
                    case 7:
                        m.shape = $root.tensorflow.TensorShape.decode(r, r.uint32());
                        break;
                    case 8:
                        m.tensor = $root.tensorflow.Tensor.decode(r, r.uint32());
                        break;
                    case 9:
                        m.placeholder = r.string();
                        break;
                    case 10:
                        m.func = $root.tensorflow.NameAttrList.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        AttrValue.ListValue = function () {

            function ListValue(p) {
                this.s = [];
                this.i = [];
                this.f = [];
                this.b = [];
                this.type = [];
                this.shape = [];
                this.tensor = [];
                this.func = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            ListValue.prototype.s = $util.emptyArray;
            ListValue.prototype.i = $util.emptyArray;
            ListValue.prototype.f = $util.emptyArray;
            ListValue.prototype.b = $util.emptyArray;
            ListValue.prototype.type = $util.emptyArray;
            ListValue.prototype.shape = $util.emptyArray;
            ListValue.prototype.tensor = $util.emptyArray;
            ListValue.prototype.func = $util.emptyArray;

            ListValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.AttrValue.ListValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 2:
                            if (!(m.s && m.s.length)) m.s = [];
                            m.s.push(r.bytes());
                            break;
                        case 3:
                            if (!(m.i && m.i.length)) m.i = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2) m.i.push(r.int64());
                            } else m.i.push(r.int64());
                            break;
                        case 4:
                            if (!(m.f && m.f.length)) m.f = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2) m.f.push(r.float());
                            } else m.f.push(r.float());
                            break;
                        case 5:
                            if (!(m.b && m.b.length)) m.b = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2) m.b.push(r.bool());
                            } else m.b.push(r.bool());
                            break;
                        case 6:
                            if (!(m.type && m.type.length)) m.type = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2) m.type.push(r.int32());
                            } else m.type.push(r.int32());
                            break;
                        case 7:
                            if (!(m.shape && m.shape.length)) m.shape = [];
                            m.shape.push($root.tensorflow.TensorShape.decode(r, r.uint32()));
                            break;
                        case 8:
                            if (!(m.tensor && m.tensor.length)) m.tensor = [];
                            m.tensor.push($root.tensorflow.Tensor.decode(r, r.uint32()));
                            break;
                        case 9:
                            if (!(m.func && m.func.length)) m.func = [];
                            m.func.push($root.tensorflow.NameAttrList.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ListValue;
        }();

        return AttrValue;
    }();

    tensorflow.NameAttrList = function () {

        function NameAttrList(p) {
            this.attr = {};
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        NameAttrList.prototype.name = "";
        NameAttrList.prototype.attr = $util.emptyObject;

        NameAttrList.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.NameAttrList(),
                k;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.name = r.string();
                        break;
                    case 2:
                        r.skip().pos++;
                        if (m.attr === $util.emptyObject) m.attr = {};
                        k = r.string();
                        r.pos++;
                        m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return NameAttrList;
    }();

    tensorflow.NodeDef = function () {

        function NodeDef(p) {
            this.input = [];
            this.attr = {};
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        NodeDef.prototype.name = "";
        NodeDef.prototype.op = "";
        NodeDef.prototype.input = $util.emptyArray;
        NodeDef.prototype.device = "";
        NodeDef.prototype.attr = $util.emptyObject;

        NodeDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.NodeDef(),
                k;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.name = r.string();
                        break;
                    case 2:
                        m.op = r.string();
                        break;
                    case 3:
                        if (!(m.input && m.input.length)) m.input = [];
                        m.input.push(r.string());
                        break;
                    case 4:
                        m.device = r.string();
                        break;
                    case 5:
                        r.skip().pos++;
                        if (m.attr === $util.emptyObject) m.attr = {};
                        k = r.string();
                        r.pos++;
                        m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return NodeDef;
    }();

    tensorflow.VersionDef = function () {

        function VersionDef(p) {
            this.badConsumers = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        VersionDef.prototype.producer = 0;
        VersionDef.prototype.minConsumer = 0;
        VersionDef.prototype.badConsumers = $util.emptyArray;

        VersionDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.VersionDef();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.producer = r.int32();
                        break;
                    case 2:
                        m.minConsumer = r.int32();
                        break;
                    case 3:
                        if (!(m.badConsumers && m.badConsumers.length)) m.badConsumers = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2) m.badConsumers.push(r.int32());
                        } else m.badConsumers.push(r.int32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return VersionDef;
    }();

    tensorflow.GraphDef = function () {

        function GraphDef(p) {
            this.node = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        GraphDef.prototype.node = $util.emptyArray;
        GraphDef.prototype.versions = null;
        GraphDef.prototype.library = null;

        GraphDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.GraphDef();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        if (!(m.node && m.node.length)) m.node = [];
                        m.node.push($root.tensorflow.NodeDef.decode(r, r.uint32()));
                        break;
                    case 4:
                        m.versions = $root.tensorflow.VersionDef.decode(r, r.uint32());
                        break;
                    case 2:
                        m.library = $root.tensorflow.FunctionDefLibrary.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return GraphDef;
    }();

    tensorflow.CollectionDef = function () {

        function CollectionDef(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        CollectionDef.prototype.nodeList = null;
        CollectionDef.prototype.bytesList = null;
        CollectionDef.prototype.int64List = null;
        CollectionDef.prototype.floatList = null;
        CollectionDef.prototype.anyList = null;

        let $oneOfFields;

        Object.defineProperty(CollectionDef.prototype, "kind", {
            get: $util.oneOfGetter($oneOfFields = ["nodeList", "bytesList", "int64List", "floatList", "anyList"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        CollectionDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.CollectionDef();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.nodeList = $root.tensorflow.CollectionDef.NodeList.decode(r, r.uint32());
                        break;
                    case 2:
                        m.bytesList = $root.tensorflow.CollectionDef.BytesList.decode(r, r.uint32());
                        break;
                    case 3:
                        m.int64List = $root.tensorflow.CollectionDef.Int64List.decode(r, r.uint32());
                        break;
                    case 4:
                        m.floatList = $root.tensorflow.CollectionDef.FloatList.decode(r, r.uint32());
                        break;
                    case 5:
                        m.anyList = $root.tensorflow.CollectionDef.AnyList.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        CollectionDef.NodeList = function () {

            function NodeList(p) {
                this.value = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            NodeList.prototype.value = $util.emptyArray;

            NodeList.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.CollectionDef.NodeList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.value && m.value.length)) m.value = [];
                            m.value.push(r.string());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return NodeList;
        }();

        CollectionDef.BytesList = function () {

            function BytesList(p) {
                this.value = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            BytesList.prototype.value = $util.emptyArray;

            BytesList.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.CollectionDef.BytesList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.value && m.value.length)) m.value = [];
                            m.value.push(r.bytes());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return BytesList;
        }();

        CollectionDef.Int64List = function () {

            function Int64List(p) {
                this.value = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            Int64List.prototype.value = $util.emptyArray;

            Int64List.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.CollectionDef.Int64List();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.value && m.value.length)) m.value = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2) m.value.push(r.int64());
                            } else m.value.push(r.int64());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return Int64List;
        }();

        CollectionDef.FloatList = function () {

            function FloatList(p) {
                this.value = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            FloatList.prototype.value = $util.emptyArray;

            FloatList.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.CollectionDef.FloatList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.value && m.value.length)) m.value = [];
                            if ((t & 7) === 2) {
                                var c2 = r.uint32() + r.pos;
                                while (r.pos < c2) m.value.push(r.float());
                            } else m.value.push(r.float());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return FloatList;
        }();

        CollectionDef.AnyList = function () {

            function AnyList(p) {
                this.value = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            AnyList.prototype.value = $util.emptyArray;

            AnyList.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.CollectionDef.AnyList();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            if (!(m.value && m.value.length)) m.value = [];
                            m.value.push($root.tensorflow.Any.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return AnyList;
        }();

        return CollectionDef;
    }();

    tensorflow.SaverDef = function () {

        function SaverDef(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        SaverDef.prototype.filenameTensorName = "";
        SaverDef.prototype.saveTensorName = "";
        SaverDef.prototype.restoreOpName = "";
        SaverDef.prototype.maxToKeep = 0;
        SaverDef.prototype.sharded = false;
        SaverDef.prototype.keepCheckpointEveryNHours = 0;
        SaverDef.prototype.version = 0;

        SaverDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.SaverDef();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.filenameTensorName = r.string();
                        break;
                    case 2:
                        m.saveTensorName = r.string();
                        break;
                    case 3:
                        m.restoreOpName = r.string();
                        break;
                    case 4:
                        m.maxToKeep = r.int32();
                        break;
                    case 5:
                        m.sharded = r.bool();
                        break;
                    case 6:
                        m.keepCheckpointEveryNHours = r.float();
                        break;
                    case 7:
                        m.version = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        SaverDef.CheckpointFormatVersion = function () {
            const valuesById = {},
                  values = Object.create(valuesById);
            values[valuesById[0] = "LEGACY"] = 0;
            values[valuesById[1] = "V1"] = 1;
            values[valuesById[2] = "V2"] = 2;
            return values;
        }();

        return SaverDef;
    }();

    tensorflow.TensorInfo = function () {

        function TensorInfo(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        TensorInfo.prototype.name = "";
        TensorInfo.prototype.cooSparse = null;
        TensorInfo.prototype.dtype = 0;
        TensorInfo.prototype.tensorShape = null;

        let $oneOfFields;

        Object.defineProperty(TensorInfo.prototype, "encoding", {
            get: $util.oneOfGetter($oneOfFields = ["name", "cooSparse"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        TensorInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.TensorInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.name = r.string();
                        break;
                    case 4:
                        m.cooSparse = $root.tensorflow.TensorInfo.CooSparse.decode(r, r.uint32());
                        break;
                    case 2:
                        m.dtype = r.int32();
                        break;
                    case 3:
                        m.tensorShape = $root.tensorflow.TensorShape.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        TensorInfo.CooSparse = function () {

            function CooSparse(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            CooSparse.prototype.valuesTensorName = "";
            CooSparse.prototype.indicesTensorName = "";
            CooSparse.prototype.denseShapeTensorName = "";

            CooSparse.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.TensorInfo.CooSparse();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.valuesTensorName = r.string();
                            break;
                        case 2:
                            m.indicesTensorName = r.string();
                            break;
                        case 3:
                            m.denseShapeTensorName = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return CooSparse;
        }();

        return TensorInfo;
    }();

    tensorflow.SignatureDef = function () {

        function SignatureDef(p) {
            this.inputs = {};
            this.outputs = {};
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        SignatureDef.prototype.inputs = $util.emptyObject;
        SignatureDef.prototype.outputs = $util.emptyObject;
        SignatureDef.prototype.methodName = "";

        SignatureDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.SignatureDef(),
                k;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        r.skip().pos++;
                        if (m.inputs === $util.emptyObject) m.inputs = {};
                        k = r.string();
                        r.pos++;
                        m.inputs[k] = $root.tensorflow.TensorInfo.decode(r, r.uint32());
                        break;
                    case 2:
                        r.skip().pos++;
                        if (m.outputs === $util.emptyObject) m.outputs = {};
                        k = r.string();
                        r.pos++;
                        m.outputs[k] = $root.tensorflow.TensorInfo.decode(r, r.uint32());
                        break;
                    case 3:
                        m.methodName = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return SignatureDef;
    }();

    tensorflow.AssetFileDef = function () {

        function AssetFileDef(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        AssetFileDef.prototype.tensorInfo = null;
        AssetFileDef.prototype.filename = "";

        AssetFileDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.AssetFileDef();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.tensorInfo = $root.tensorflow.TensorInfo.decode(r, r.uint32());
                        break;
                    case 2:
                        m.filename = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return AssetFileDef;
    }();

    tensorflow.OpDef = function () {

        function OpDef(p) {
            this.inputArg = [];
            this.outputArg = [];
            this.attr = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        OpDef.prototype.name = "";
        OpDef.prototype.inputArg = $util.emptyArray;
        OpDef.prototype.outputArg = $util.emptyArray;
        OpDef.prototype.attr = $util.emptyArray;
        OpDef.prototype.deprecation = null;
        OpDef.prototype.summary = "";
        OpDef.prototype.description = "";
        OpDef.prototype.isCommutative = false;
        OpDef.prototype.isAggregate = false;
        OpDef.prototype.isStateful = false;
        OpDef.prototype.allowsUninitializedInput = false;

        OpDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.OpDef();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.name = r.string();
                        break;
                    case 2:
                        if (!(m.inputArg && m.inputArg.length)) m.inputArg = [];
                        m.inputArg.push($root.tensorflow.OpDef.ArgDef.decode(r, r.uint32()));
                        break;
                    case 3:
                        if (!(m.outputArg && m.outputArg.length)) m.outputArg = [];
                        m.outputArg.push($root.tensorflow.OpDef.ArgDef.decode(r, r.uint32()));
                        break;
                    case 4:
                        if (!(m.attr && m.attr.length)) m.attr = [];
                        m.attr.push($root.tensorflow.OpDef.AttrDef.decode(r, r.uint32()));
                        break;
                    case 8:
                        m.deprecation = $root.tensorflow.OpDef.OpDeprecation.decode(r, r.uint32());
                        break;
                    case 5:
                        m.summary = r.string();
                        break;
                    case 6:
                        m.description = r.string();
                        break;
                    case 18:
                        m.isCommutative = r.bool();
                        break;
                    case 16:
                        m.isAggregate = r.bool();
                        break;
                    case 17:
                        m.isStateful = r.bool();
                        break;
                    case 19:
                        m.allowsUninitializedInput = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        OpDef.ArgDef = function () {

            function ArgDef(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            ArgDef.prototype.name = "";
            ArgDef.prototype.description = "";
            ArgDef.prototype.type = 0;
            ArgDef.prototype.typeAttr = "";
            ArgDef.prototype.numberAttr = "";
            ArgDef.prototype.typeListAttr = "";
            ArgDef.prototype.isRef = false;

            ArgDef.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.OpDef.ArgDef();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m.description = r.string();
                            break;
                        case 3:
                            m.type = r.int32();
                            break;
                        case 4:
                            m.typeAttr = r.string();
                            break;
                        case 5:
                            m.numberAttr = r.string();
                            break;
                        case 6:
                            m.typeListAttr = r.string();
                            break;
                        case 16:
                            m.isRef = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return ArgDef;
        }();

        OpDef.AttrDef = function () {

            function AttrDef(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            AttrDef.prototype.name = "";
            AttrDef.prototype.type = "";
            AttrDef.prototype.defaultValue = null;
            AttrDef.prototype.description = "";
            AttrDef.prototype.hasMinimum = false;
            AttrDef.prototype.minimum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            AttrDef.prototype.allowedValues = null;

            AttrDef.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.OpDef.AttrDef();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.name = r.string();
                            break;
                        case 2:
                            m.type = r.string();
                            break;
                        case 3:
                            m.defaultValue = $root.tensorflow.AttrValue.decode(r, r.uint32());
                            break;
                        case 4:
                            m.description = r.string();
                            break;
                        case 5:
                            m.hasMinimum = r.bool();
                            break;
                        case 6:
                            m.minimum = r.int64();
                            break;
                        case 7:
                            m.allowedValues = $root.tensorflow.AttrValue.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return AttrDef;
        }();

        OpDef.OpDeprecation = function () {

            function OpDeprecation(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            OpDeprecation.prototype.version = 0;
            OpDeprecation.prototype.explanation = "";

            OpDeprecation.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.OpDef.OpDeprecation();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.version = r.int32();
                            break;
                        case 2:
                            m.explanation = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return OpDeprecation;
        }();

        return OpDef;
    }();

    tensorflow.OpList = function () {

        function OpList(p) {
            this.op = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        OpList.prototype.op = $util.emptyArray;

        OpList.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.OpList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        if (!(m.op && m.op.length)) m.op = [];
                        m.op.push($root.tensorflow.OpDef.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return OpList;
    }();

    tensorflow.MetaGraphDef = function () {

        function MetaGraphDef(p) {
            this.collectionDef = {};
            this.signatureDef = {};
            this.assetFileDef = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        MetaGraphDef.prototype.metaInfoDef = null;
        MetaGraphDef.prototype.graphDef = null;
        MetaGraphDef.prototype.saverDef = null;
        MetaGraphDef.prototype.collectionDef = $util.emptyObject;
        MetaGraphDef.prototype.signatureDef = $util.emptyObject;
        MetaGraphDef.prototype.assetFileDef = $util.emptyArray;

        MetaGraphDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.MetaGraphDef(),
                k;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.metaInfoDef = $root.tensorflow.MetaGraphDef.MetaInfoDef.decode(r, r.uint32());
                        break;
                    case 2:
                        m.graphDef = $root.tensorflow.GraphDef.decode(r, r.uint32());
                        break;
                    case 3:
                        m.saverDef = $root.tensorflow.SaverDef.decode(r, r.uint32());
                        break;
                    case 4:
                        r.skip().pos++;
                        if (m.collectionDef === $util.emptyObject) m.collectionDef = {};
                        k = r.string();
                        r.pos++;
                        m.collectionDef[k] = $root.tensorflow.CollectionDef.decode(r, r.uint32());
                        break;
                    case 5:
                        r.skip().pos++;
                        if (m.signatureDef === $util.emptyObject) m.signatureDef = {};
                        k = r.string();
                        r.pos++;
                        m.signatureDef[k] = $root.tensorflow.SignatureDef.decode(r, r.uint32());
                        break;
                    case 6:
                        if (!(m.assetFileDef && m.assetFileDef.length)) m.assetFileDef = [];
                        m.assetFileDef.push($root.tensorflow.AssetFileDef.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        MetaGraphDef.MetaInfoDef = function () {

            function MetaInfoDef(p) {
                this.tags = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }

            MetaInfoDef.prototype.metaGraphVersion = "";
            MetaInfoDef.prototype.strippedOpList = null;
            MetaInfoDef.prototype.anyInfo = null;
            MetaInfoDef.prototype.tags = $util.emptyArray;
            MetaInfoDef.prototype.tensorflowVersion = "";
            MetaInfoDef.prototype.tensorflowGitVersion = "";

            MetaInfoDef.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.tensorflow.MetaGraphDef.MetaInfoDef();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                        case 1:
                            m.metaGraphVersion = r.string();
                            break;
                        case 2:
                            m.strippedOpList = $root.tensorflow.OpList.decode(r, r.uint32());
                            break;
                        case 3:
                            m.anyInfo = $root.tensorflow.Any.decode(r, r.uint32());
                            break;
                        case 4:
                            if (!(m.tags && m.tags.length)) m.tags = [];
                            m.tags.push(r.string());
                            break;
                        case 5:
                            m.tensorflowVersion = r.string();
                            break;
                        case 6:
                            m.tensorflowGitVersion = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                    }
                }
                return m;
            };

            return MetaInfoDef;
        }();

        return MetaGraphDef;
    }();

    tensorflow.SavedModel = function () {

        function SavedModel(p) {
            this.metaGraphs = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        SavedModel.prototype.savedModelSchemaVersion = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
        SavedModel.prototype.metaGraphs = $util.emptyArray;

        SavedModel.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.SavedModel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.savedModelSchemaVersion = r.int64();
                        break;
                    case 2:
                        if (!(m.metaGraphs && m.metaGraphs.length)) m.metaGraphs = [];
                        m.metaGraphs.push($root.tensorflow.MetaGraphDef.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return SavedModel;
    }();

    tensorflow.FunctionDefLibrary = function () {

        function FunctionDefLibrary(p) {
            this["function"] = [];
            this.gradient = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        FunctionDefLibrary.prototype["function"] = $util.emptyArray;
        FunctionDefLibrary.prototype.gradient = $util.emptyArray;

        FunctionDefLibrary.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.FunctionDefLibrary();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        if (!(m["function"] && m["function"].length)) m["function"] = [];
                        m["function"].push($root.tensorflow.FunctionDef.decode(r, r.uint32()));
                        break;
                    case 2:
                        if (!(m.gradient && m.gradient.length)) m.gradient = [];
                        m.gradient.push($root.tensorflow.GradientDef.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return FunctionDefLibrary;
    }();

    tensorflow.FunctionDef = function () {

        function FunctionDef(p) {
            this.attr = {};
            this.nodeDef = [];
            this.ret = {};
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        FunctionDef.prototype.signature = null;
        FunctionDef.prototype.attr = $util.emptyObject;
        FunctionDef.prototype.nodeDef = $util.emptyArray;
        FunctionDef.prototype.ret = $util.emptyObject;

        FunctionDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.FunctionDef(),
                k;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.signature = $root.tensorflow.OpDef.decode(r, r.uint32());
                        break;
                    case 5:
                        r.skip().pos++;
                        if (m.attr === $util.emptyObject) m.attr = {};
                        k = r.string();
                        r.pos++;
                        m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());
                        break;
                    case 3:
                        if (!(m.nodeDef && m.nodeDef.length)) m.nodeDef = [];
                        m.nodeDef.push($root.tensorflow.NodeDef.decode(r, r.uint32()));
                        break;
                    case 4:
                        r.skip().pos++;
                        if (m.ret === $util.emptyObject) m.ret = {};
                        k = r.string();
                        r.pos++;
                        m.ret[k] = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return FunctionDef;
    }();

    tensorflow.GradientDef = function () {

        function GradientDef(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }

        GradientDef.prototype.functionName = "";
        GradientDef.prototype.gradientFunc = "";

        GradientDef.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.tensorflow.GradientDef();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                    case 1:
                        m.functionName = r.string();
                        break;
                    case 2:
                        m.gradientFunc = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                }
            }
            return m;
        };

        return GradientDef;
    }();

    return tensorflow;
})();

exports.default = $root;
},{"protobufjs/minimal":"Myh2"}],"q/Si":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getParamValue = getParamValue;
exports.getTensor = getTensor;
exports.getNodeNameAndIndex = getNodeNameAndIndex;
exports.parseNodeName = parseNodeName;
exports.split = split;
function getParamValue(paramName, node, tensorMap, context) {
    var param = node.params[paramName];
    if (param && param.inputIndex !== undefined) {
        if (param.type === 'tensor') {
            return getTensor(node.inputNames[param.inputIndex], tensorMap, context);
        }
        if (param.type === 'tensors') {
            var inputs = param.inputIndex === 0 ? param.inputParamLength === 0 ? node.inputNames : node.inputNames.slice(param.inputIndex, -param.inputParamLength) : node.inputNames.splice(param.inputIndex);
            return inputs.map(function (name) {
                return getTensor(name, tensorMap, context);
            });
        }
        var data = Array.prototype.slice.call(getTensor(node.inputNames.slice(param.inputIndex)[0], tensorMap, context).dataSync());
        return param.type === 'number' ? data[0] : data;
    }
    return param && param.value;
}
function getTensor(name, tensorsMap, context) {
    var _a = parseNodeName(name),
        nodeName = _a[0],
        index = _a[1];
    var contextId = context.currentContextIds.find(function (contextId) {
        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
    });
    return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;
}
function getNodeNameAndIndex(inputName, context) {
    var _a = parseNodeName(inputName),
        nodeName = _a[0],
        index = _a[1];
    return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index];
}
function getNodeNameWithContextId(name, contextId) {
    return !!contextId ? name + "-" + contextId : name;
}
function parseNodeName(name) {
    var index = name.lastIndexOf(':');
    if (index === -1) return [name, 0];
    var nodeName = name.substring(0, index);
    return [nodeName, Number(name.substring(index + 1))];
}
function split(arr, size) {
    var res = [];
    for (var i = 0; i < arr.length; i += size) {
        res.push(arr.slice(i, i + size));
    }
    return res;
}
//# sourceMappingURL=utils.js.map
},{}],"MLRj":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "Add",
    "dlOpName": "add",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "BiasAdd",
    "dlOpName": "add",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Sub",
    "dlOpName": "sub",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "RealDiv",
    "dlOpName": "div",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Div",
    "dlOpName": "div",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Mul",
    "dlOpName": "mul",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Maximum",
    "dlOpName": "maximum",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "Minimum",
    "dlOpName": "minimum",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "Pow",
    "dlOpName": "pow",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "SquaredDifference",
    "dlOpName": "squaredDifference",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Mod",
    "dlOpName": "mod",
    "category": "arithmetic",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  }
]
;
},{}],"Vnv3":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "Abs",
    "dlOpName": "abs",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Acos",
    "dlOpName": "acos",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Asin",
    "dlOpName": "asin",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "atan",
    "dlOpName": "atan",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Ceil",
    "dlOpName": "ceil",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "ClipByValue",
    "dlOpName": "clipByValue",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "clip_value_min",
        "dlParamName": "clipValueMin",
        "type": "number"
      },
      {
        "tfParamName": "clip_value_max",
        "dlParamName": "clipValueMax",
        "type": "number"
      }
    ]
  },
  {
    "tfOpName": "Cos",
    "dlOpName": "cos",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Cosh",
    "dlOpName": "cosh",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Elu",
    "dlOpName": "elu",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Exp",
    "dlOpName": "exp",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Floor",
    "dlOpName": "floor",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Log",
    "dlOpName": "log",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Neg",
    "dlOpName": "neg",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Relu",
    "dlOpName": "relu",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Relu6",
    "dlOpName": "clipByValue",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      },
      {
        "dlParamName": "clipValueMin",
        "type": "number",
        "defaultValue": 0
      },
      {
        "dlParamName": "clipValueMax",
        "type": "number",
        "defaultValue": 6
      }
    ]
  },
  {
    "tfOpName": "Selu",
    "dlOpName": "selu",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Sigmoid",
    "dlOpName": "sigmoid",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Sin",
    "dlOpName": "sin",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Sinh",
    "dlOpName": "sinh",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Sqrt",
    "dlOpName": "sqrt",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Rsqrt",
    "dlOpName": "rsqrt",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Square",
    "dlOpName": "square",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Tan",
    "dlOpName": "tan",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Tanh",
    "dlOpName": "tanh",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Sign",
    "dlOpName": "sign",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Round",
    "dlOpName": "round",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Expm1",
    "dlOpName": "expm1",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Log1p",
    "dlOpName": "log1p",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Reciprocal",
    "dlOpName": "reciprocal",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Reciprocal",
    "dlOpName": "reciprocal",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Softplus",
    "dlOpName": "softplus",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Asinh",
    "dlOpName": "asinh",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Acosh",
    "dlOpName": "acosh",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Atanh",
    "dlOpName": "atanh",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Erf",
    "dlOpName": "erf",
    "category": "basic_math",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  }
]
;
},{}],"nmoK":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "LoopCond",
    "dlOpName": "loopCond",
    "category": "control",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "pred",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "Switch",
    "dlOpName": "switch",
    "category": "control",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "data",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "pred",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "Merge",
    "dlOpName": "merge",
    "category": "control",
    "params": [
      {
        "tfInputIndex": 0,
        "tfInputParamLength": 0,
        "dlParamName": "tensors",
        "type": "tensors"
      }
    ]
  },
  {
    "tfOpName": "Enter",
    "dlOpName": "enter",
    "category": "control",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "tensor",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      },
      {
        "tfParamName": "frame_name",
        "dlParamName": "frameName",
        "type": "string"
      },
      {
        "tfParamName": "is_constant",
        "dlParamName": "isConstant",
        "type": "bool"
      }
    ]
  },
  {
    "tfOpName": "Exit",
    "dlOpName": "exit",
    "category": "control",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "tensor",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "NextIteration",
    "dlOpName": "nextIteration",
    "category": "control",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "tensor",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  }
]
;
},{}],"R3pA":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "AvgPool",
    "dlOpName": "avgPool",
    "category": "convolution",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "strides",
        "dlParamName": "strides",
        "type": "number[]"
      },
      {
        "tfParamName": "padding",
        "dlParamName": "pad",
        "type": "string"
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "notSupported": true
      },
      {
        "tfParamName": "ksize",
        "dlParamName": "kernelSize",
        "type": "number[]"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "MaxPool",
    "dlOpName": "maxPool",
    "category": "convolution",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "strides",
        "dlParamName": "strides",
        "type": "number[]"
      },
      {
        "tfParamName": "padding",
        "dlParamName": "pad",
        "type": "string"
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "notSupported": true
      },
      {
        "tfParamName": "ksize",
        "dlParamName": "kernelSize",
        "type": "number[]"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Conv1D",
    "dlOpName": "conv1d",
    "category": "convolution",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "filter",
        "type": "tensor"
      },
      {
        "tfParamName": "stride",
        "dlParamName": "stride",
        "type": "number"
      },
      {
        "tfParamName": "padding",
        "dlParamName": "pad",
        "type": "string"
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "defaultValue": "NWC"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      },
      {
        "tfParamName": "dilation",
        "dlParamName": "dilation",
        "type": "number",
        "defaultValue": 1
      }
    ]
  },
  {
    "tfOpName": "Conv2D",
    "dlOpName": "conv2d",
    "category": "convolution",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "filter",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      },
      {
        "tfParamName": "strides",
        "dlParamName": "strides",
        "type": "number[]"
      },
      {
        "tfParamName": "padding",
        "dlParamName": "pad",
        "type": "string"
      },
      {
        "tfParamName": "useCudnnOnGpu",
        "dlParamName": "useCudnnOnGpu",
        "type": "bool"
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "defaultValue": "NHWC"
      },
      {
        "tfParamName": "dilations",
        "dlParamName": "dilations",
        "type": "number[]"
      }
    ]
  },
  {
    "tfOpName": "Conv2DBackpropInput",
    "dlOpName": "conv2dTranspose",
    "category": "convolution",
    "params": [
      {
        "tfInputIndex": 2,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "filter",
        "type": "tensor"
      },
      {
        "tfInputIndex": 0,
        "dlParamName": "outputShape",
        "type": "number[]"
      },
      {
        "tfParamName": "strides",
        "dlParamName": "strides",
        "type": "number[]"
      },
      {
        "tfParamName": "padding",
        "dlParamName": "pad",
        "type": "string"
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "DepthwiseConv2d",
    "dlOpName": "depthwiseConv2d",
    "category": "convolution",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "input",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "filter",
        "type": "tensor"
      },
      {
        "tfParamName": "strides",
        "dlParamName": "strides",
        "type": "number[]"
      },
      {
        "tfParamName": "padding",
        "dlParamName": "pad",
        "type": "string"
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "defaultValue": "NHWC"
      },
      {
        "tfParamName": "dilations",
        "dlParamName": "dilations",
        "type": "number[]"
      }
    ]
  },
  {
    "tfOpName": "DepthwiseConv2dNative",
    "dlOpName": "depthwiseConv2d",
    "category": "convolution",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "input",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "filter",
        "type": "tensor"
      },
      {
        "tfParamName": "strides",
        "dlParamName": "strides",
        "type": "number[]"
      },
      {
        "tfParamName": "padding",
        "dlParamName": "pad",
        "type": "string"
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "defaultValue": "NHWC"
      },
      {
        "tfParamName": "dilations",
        "dlParamName": "dilations",
        "type": "number[]"
      }
    ]
  }
]
;
},{}],"OWJf":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "Fill",
    "dlOpName": "fill",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "shape",
        "type": "number[]"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "value",
        "type": "number"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "LinSpace",
    "dlOpName": "linspace",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "start",
        "type": "number"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "stop",
        "type": "number"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "num",
        "type": "number"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "OneHot",
    "dlOpName": "oneHot",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "indices",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "depth",
        "type": "number"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "onValue",
        "type": "number",
        "defaultValue": 1
      },
      {
        "tfInputIndex": 3,
        "dlParamName": "offValue",
        "type": "number",
        "defaultValue": 0
      },
      {
        "tfParamName": "axis",
        "dlParamName": "axis",
        "type": "number",
        "notSupported": true
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Ones",
    "dlOpName": "ones",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "shape",
        "type": "number[]"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype"
      }
    ]
  },
  {
    "tfOpName": "OnesLike",
    "dlOpName": "onesLike",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "dtype",
        "dlParamName": "dtype",
        "type": "dtype"
      }
    ]
  },
  {
    "tfOpName": "RandomUniform",
    "dlOpName": "randomUniform",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "shape",
        "type": "number[]"
      },
      {
        "tfParamName": "minval",
        "dlParamName": "minval",
        "type": "number",
        "defaultValue": 0
      },
      {
        "tfParamName": "maxval",
        "dlParamName": "maxval",
        "type": "number",
        "defaultValue": 1
      },
      {
        "tfParamName": "dtype",
        "dlParamName": "dtype",
        "type": "dtype"
      },
      {
        "tfParamName": "seed",
        "dlParamName": "seed",
        "type": "number",
        "defaultValue": 0
      },
      {
        "tfParamName": "seed2",
        "dlParamName": "seed2",
        "type": "number",
        "defaultValue": 0,
        "notSupported": true
      },
      {
        "tfParamName": "T",
        "dlParamName": "T",
        "type": "number",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Range",
    "dlOpName": "range",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "start",
        "type": "number"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "stop",
        "type": "number"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "step",
        "type": "number",
        "defaultValue": 0
      },
      {
        "tfParamName": "Tidx",
        "dlParamName": "dtype",
        "type": "dtype"
      }
    ]
  },
  {
    "tfOpName": "truncatedNormal",
    "dlOpName": "truncatedNormal",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "shape",
        "type": "number[]"
      },
      {
        "tfParamName": "means",
        "dlParamName": "mean",
        "type": "number",
        "defaultValue": 0.0
      },
      {
        "tfParamName": "stddev",
        "dlParamName": "stdDev",
        "type": "number",
        "defaultValue": 1.0
      },
      {
        "tfParamName": "seed",
        "dlParamName": "seed",
        "type": "number"
      },
      {
        "tfParamName": "seed2",
        "dlParamName": "seed2",
        "type": "number",
        "defaultValue": 0,
        "notSupported": true
      },
      {
        "tfParamName": "dtype",
        "dlParamName": "dtype",
        "type": "dtype"
      },
      {
        "tfParamName": "T",
        "dlParamName": "T",
        "type": "number",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Zeros",
    "dlOpName": "zeros",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "shape",
        "type": "number[]"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype"
      }
    ]
  },
  {
    "tfOpName": "ZerosLike",
    "dlOpName": "zerosLike",
    "category": "creation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype"
      }
    ]
  }
]
;
},{}],"n3br":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "PlaceholderWithDefault",
    "dlOpName": "placeholder",
    "category": "graph",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "default",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "Placeholder",
    "dlOpName": "placeholder",
    "category": "graph"
  },
  {
    "tfOpName": "Const",
    "dlOpName": "const",
    "category": "graph"
  },
  {
    "tfOpName": "Identity",
    "dlOpName": "identity",
    "category": "graph",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "Snapshot",
    "dlOpName": "snapshot",
    "category": "graph",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "Shape",
    "dlOpName": "shape",
    "category": "graph",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "Print",
    "dlOpName": "print",
    "category": "graph",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "tfInputParamLength": 1,
        "dlParamName": "data",
        "type": "tensors"
      },
      {
        "tfParamName": "message",
        "dlParamName": "message",
        "type": "string"
      },
      {
        "tfParamName": "first_n",
        "dlParamName": "firstN",
        "type": "number",
        "notSupprted": true
      },
      {
        "tfParamName": "summarize",
        "dlParamName": "summarize",
        "type": "number",
        "defaultValue": 3
      }
    ]
  },
  {
    "tfOpName": "NoOp",
    "dlOpName": "noop",
    "category": "graph",
    "params": []
  },
  {
    "tfOpName": "StopGradient",
    "dlOpName": "stopGradient",
    "category": "graph",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      }
    ]
  },
  {
    "tfOpName": "FakeQuantWithMinMaxVars",
    "dlOpName": "fakeQuantWithMinMaxVars",
    "category": "graph",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "min",
        "dlParamName": "min",
        "type": "number"
      },
      {
        "tfParamName": "max",
        "dlParamName": "max",
        "type": "number"
      }
    ]
  }
]
;
},{}],"eEIb":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "ResizeBilinear",
    "dlOpName": "resizeBilinear",
    "category": "image",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "images",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "size",
        "type": "number[]"
      },
      {
        "tfParamName": "align_corners",
        "dlParamName": "alignCorners",
        "type": "bool"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "ResizeNearestNeighbor",
    "dlOpName": "resizeNearestNeighbor",
    "category": "image",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "images",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "size",
        "type": "number[]"
      },
      {
        "tfParamName": "align_corners",
        "dlParamName": "alignCorners",
        "type": "bool"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  }
]
;
},{}],"wtx5":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "Equal",
    "dlOpName": "equal",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "NotEqual",
    "dlOpName": "notEqual",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Greater",
    "dlOpName": "greater",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "GreaterEqual",
    "dlOpName": "greaterEqual",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Less",
    "dlOpName": "less",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "LessEqual",
    "dlOpName": "lessEqual",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "LogicalAnd",
    "dlOpName": "logicalAnd",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "LogicalNot",
    "dlOpName": "logicalNot",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "LogicalOr",
    "dlOpName": "logicalOr",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Select",
    "dlOpName": "where",
    "category": "logical",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "condition",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  }
]
;
},{}],"b64J":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "MatMul",
    "dlOpName": "matMul",
    "category": "matrices",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "a",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "b",
        "type": "tensor"
      },
      {
        "tfParamName": "transpose_a",
        "dlParamName": "transposeA",
        "type": "bool",
        "defaultValue": false
      },
      {
        "tfParamName": "transpose_b",
        "dlParamName": "transposeB",
        "type": "bool",
        "defaultValue": false
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Transpose",
    "dlOpName": "transpose",
    "category": "matrices",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "perm",
        "dlParamName": "perm",
        "type": "number[]"
      },
      {
        "tfParamName": "T",
        "dlParamName": "dtype",
        "type": "dtype",
        "notSupported": true
      }
    ]
  }
]
;
},{}],"EHD2":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "FusedBatchNorm",
    "dlOpName": "batchNormalization",
    "category": "normalization",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "scale",
        "type": "tensor"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "offset",
        "type": "tensor"
      },
      {
        "tfInputIndex": 3,
        "dlParamName": "mean",
        "type": "tensor"
      },
      {
        "tfInputIndex": 4,
        "dlParamName": "variance",
        "type": "tensor"
      },
      {
        "tfParamName": "epsilon",
        "dlParamName": "epsilon",
        "type": "number",
        "defaultValue": 0.001
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "FusedBatchNormV2",
    "dlOpName": "batchNormalization",
    "category": "normalization",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "scale",
        "type": "tensor"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "offset",
        "type": "tensor"
      },
      {
        "tfInputIndex": 3,
        "dlParamName": "mean",
        "type": "tensor"
      },
      {
        "tfInputIndex": 4,
        "dlParamName": "variance",
        "type": "tensor"
      },
      {
        "tfParamName": "epsilon",
        "dlParamName": "epsilon",
        "type": "number",
        "defaultValue": 0.001
      },
      {
        "tfParamName": "data_format",
        "dlParamName": "dataFormat",
        "type": "string",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "LRN",
    "dlOpName": "localResponseNormalization",
    "category": "normalization",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "depth_radius",
        "dlParamName": "radius",
        "type": "number",
        "defaultValue": 5
      },
      {
        "tfParamName": "bias",
        "dlParamName": "bias",
        "type": "number",
        "defaultValue": 1.0
      },
      {
        "tfParamName": "alpha",
        "dlParamName": "alpha",
        "type": "number",
        "defaultValue": 1.0
      },
      {
        "tfParamName": "beta",
        "dlParamName": "beta",
        "type": "number",
        "defaultValue": 0.5
      }
    ]
  },  {
    "tfOpName": "Softmax",
    "dlOpName": "softmax",
    "category": "normalization",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      }
    ]
  }
]
;
},{}],"OwsI":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "Max",
    "dlOpName": "max",
    "category": "reduction",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "axis",
        "type": "number[]"
      },
      {
        "tfParamName": "keep_dims",
        "dlParamName": "keepDims",
        "type": "bool"
      }
    ]
  },
  {
    "tfOpName": "Mean",
    "dlOpName": "mean",
    "category": "reduction",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "axis",
        "type": "number[]"
      },
      {
        "tfParamName": "keep_dims",
        "dlParamName": "keepDims",
        "type": "bool"
      }
    ]
  },
  {
    "tfOpName": "Min",
    "dlOpName": "min",
    "category": "reduction",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "axis",
        "type": "number[]"
      },
      {
        "tfParamName": "keep_dims",
        "dlParamName": "keepDims",
        "type": "bool"
      }
    ]
  },
  {
    "tfOpName": "Sum",
    "dlOpName": "sum",
    "category": "reduction",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "axis",
        "type": "number[]"
      },
      {
        "tfParamName": "keep_dims",
        "dlParamName": "keepDims",
        "type": "bool"
      }
    ]
  },
  {
    "tfOpName": "ArgMax",
    "dlOpName": "argMax",
    "category": "reduction",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "axis",
        "type": "number"
      }
    ]
  },
  {
    "tfOpName": "ArgMin",
    "dlOpName": "argMin",
    "category": "reduction",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "axis",
        "type": "number"
      }
    ]
  }
]
;
},{}],"pEiO":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "ConcatV2",
    "dlOpName": "concat",
    "category": "slice_join",
    "params": [
      {
        "tfInputIndex": 0,
        "tfInputParamLength": 1,
        "dlParamName": "tensors",
        "type": "tensors"
      },
      {
        "tfInputIndex": -1,
        "dlParamName": "axis",
        "type": "number"
      }
    ]
  },
  {
    "tfOpName": "Concat",
    "dlOpName": "concat",
    "category": "slice_join",
    "params": [
      {
        "tfInputIndex": 1,
        "tfInputParamLength": 1,
        "dlParamName": "tensors",
        "type": "tensors"
      },
      {
        "tfInputIndex": 0,
        "dlParamName": "axis",
        "type": "number"
      }
    ]
  },
  {
    "tfOpName": "GatherV2",
    "dlOpName": "gather",
    "category": "slice_join",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "indices",
        "type": "tensor"
      },
      {
        "tfParamName": "axis",
        "dlParamName": "axis",
        "type": "number",
        "defaultValue": 0
      }
    ]
  },
  {
    "tfOpName": "Gather",
    "dlOpName": "gather",
    "category": "slice_join",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "indices",
        "type": "tensor"
      },
      {
        "tfParamName": "axis",
        "dlParamName": "axis",
        "type": "number",
        "defaultValue": 0
      },
      {
        "tfParamName": "validate_indices",
        "dlParamName": "validateIndices",
        "type": "bool",
        "notSupported": true
      }
    ]
  },
  {
    "tfOpName": "Reverse",
    "dlOpName": "reverse",
    "category": "slice_join",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "axis",
        "type": "number"
      }
    ]
  },
  {
    "tfOpName": "ReverseV2",
    "dlOpName": "reverse",
    "category": "slice_join",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "axis",
        "type": "number"
      }
    ]
  },
  {
    "tfOpName": "Slice",
    "dlOpName": "slice",
    "category": "slice_join",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "begin",
        "type": "number[]"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "size",
        "type": "number[]"
      }
    ]
  },
  {
    "tfOpName": "StridedSlice",
    "dlOpName": "stridedSlice",
    "category": "slice_join",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "begin",
        "type": "number[]"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "end",
        "type": "number[]"
      },
      {
        "tfInputIndex": 3,
        "dlParamName": "strides",
        "type": "number[]"
      },
      {
        "tfParamName": "begin_mask",
        "dlParamName": "beginMask",
        "type": "number",
        "defaultValue": 0
      },
      {
        "tfParamName": "end_mask",
        "dlParamName": "endMask",
        "type": "number",
        "defaultValue": 0
      }
    ]
  },
  {
    "tfOpName": "Pack",
    "dlOpName": "stack",
    "category": "slice_join",
    "params": [{
        "tfInputIndex": 0,
        "tfInputParamLength": 0,
        "dlParamName": "tensors",
        "type": "tensors"
      },
      {
        "tfParamName": "axis",
        "dlParamName": "axis",
        "type": "number",
        "defaultValue": 0
      }
    ]
  },
  {
    "tfOpName": "Tile",
    "dlOpName": "tile",
    "category": "slice_join",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "reps",
        "type": "number[]"
      }
    ]
  },
  {
    "tfOpName": "Split",
    "dlOpName": "split",
    "category": "slice_join",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "axis",
        "type": "number",
        "defaultValue": 0
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "num_split",
        "dlParamName": "numOrSizeSplits",
        "type": "number",
        "defaultValue": 1
      }
    ]
  }
]
;
},{}],"6hwu":[function(require,module,exports) {
module.exports = [
  {
    "tfOpName": "Cast",
    "dlOpName": "cast",
    "category": "transformation",
    "params": [
      {
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "SrcT",
        "dlParamName": "sdtype",
        "type": "dtype",
        "notSupported": true
      },
      {
        "tfParamName": "DstT",
        "dlParamName": "dtype",
        "type": "dtype"
      }
    ]
  },
  {
    "tfOpName": "ExpandDims",
    "dlOpName": "expandDims",
    "category": "transformation",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "tfParamNameDeprecated": "dim",
        "dlParamName": "axis",
        "type": "number"
      }
    ]
  },
  {
    "tfOpName": "Pad",
    "dlOpName": "pad",
    "category": "transformation",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "padding",
        "type": "number[]"
      },
      {
        "tfParamName": "constant_value",
        "dlParamName": "constantValue",
        "type": "number",
        "defaultValue": 0
      }
    ]
  },
  {
    "tfOpName": "PadV2",
    "dlOpName": "pad",
    "category": "transformation",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "padding",
        "type": "number[]"
      },
      {
        "tfInputIndex": 2,
        "dlParamName": "constantValue",
        "type": "number",
        "defaultValue": 0
      }
    ]
  },
  {
    "tfOpName": "Reshape",
    "dlOpName": "reshape",
    "category": "transformation",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfInputIndex": 1,
        "dlParamName": "shape",
        "type": "number[]"
      }
    ]
  },
  {
    "tfOpName": "Squeeze",
    "dlOpName": "squeeze",
    "category": "transformation",
    "params": [{
        "tfInputIndex": 0,
        "dlParamName": "x",
        "type": "tensor"
      },
      {
        "tfParamName": "axis",
        "tfParamNameDeprecated": "squeeze_dims",
        "dlParamName": "axis",
        "type": "number[]"
      }
    ]
  }
]
;
},{}],"gxZl":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OperationMapper = undefined;

var _compiled_api = require('../data/compiled_api');

var _utils = require('./executors/utils');

var _arithmetic = require('./op_list/arithmetic.json');

var arithmetic = _interopRequireWildcard(_arithmetic);

var _basic_math = require('./op_list/basic_math.json');

var basicMath = _interopRequireWildcard(_basic_math);

var _control = require('./op_list/control.json');

var control = _interopRequireWildcard(_control);

var _convolution = require('./op_list/convolution.json');

var convolution = _interopRequireWildcard(_convolution);

var _creation = require('./op_list/creation.json');

var creation = _interopRequireWildcard(_creation);

var _graph = require('./op_list/graph.json');

var graph = _interopRequireWildcard(_graph);

var _image = require('./op_list/image.json');

var image = _interopRequireWildcard(_image);

var _logical = require('./op_list/logical.json');

var logical = _interopRequireWildcard(_logical);

var _matrices = require('./op_list/matrices.json');

var matrices = _interopRequireWildcard(_matrices);

var _normalization = require('./op_list/normalization.json');

var normalization = _interopRequireWildcard(_normalization);

var _reduction = require('./op_list/reduction.json');

var reduction = _interopRequireWildcard(_reduction);

var _slice_join = require('./op_list/slice_join.json');

var sliceJoin = _interopRequireWildcard(_slice_join);

var _transformation = require('./op_list/transformation.json');

var transformation = _interopRequireWildcard(_transformation);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];
var OperationMapper = function () {
    function OperationMapper() {
        var ops = [arithmetic, basicMath, control, convolution, creation, logical, image, graph, matrices, normalization, reduction, sliceJoin, transformation];
        var mappersJson = [].concat.apply([], ops.map(function (op) {
            return op.default ? op.default : op;
        }));
        this.opMappers = mappersJson.reduce(function (map, mapper) {
            map[mapper.tfOpName] = mapper;
            return map;
        }, {});
    }
    Object.defineProperty(OperationMapper, "Instance", {
        get: function () {
            return this._instance || (this._instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    OperationMapper.prototype.isControlFlow = function (node) {
        return CONTROL_FLOW_OPS.some(function (op) {
            return op === node.op;
        });
    };
    OperationMapper.prototype.transformGraph = function (graph) {
        var _this = this;
        var tfNodes = graph.node;
        var withControlFlow = false;
        var placeholders = [];
        var nodes = tfNodes.reduce(function (map, node) {
            map[node.name] = _this.mapNode(node);
            if (_this.isControlFlow(node)) withControlFlow = true;
            if (node.op === 'Placeholder') placeholders.push(map[node.name]);
            return map;
        }, {});
        var inputs = [];
        var outputs = [];
        Object.keys(nodes).forEach(function (key) {
            var node = nodes[key];
            node.inputNames.forEach(function (name) {
                var nodeName = (0, _utils.getNodeNameAndIndex)(name)[0];
                node.inputs.push(nodes[nodeName]);
                nodes[nodeName].children.push(node);
            });
            if (node.inputs.length === 0) inputs.push(node);
        });
        Object.keys(nodes).forEach(function (key) {
            var node = nodes[key];
            if (node.children.length === 0) outputs.push(node);
        });
        return { nodes: nodes, inputs: inputs, outputs: outputs, placeholders: placeholders, withControlFlow: withControlFlow };
    };
    OperationMapper.prototype.mapNode = function (node) {
        var _this = this;
        var mapper = this.opMappers[node.op];
        if (mapper === undefined) {
            throw new Error('Tensorflow Op is not supported: ' + node.op);
        }
        var newNode = {
            name: node.name,
            op: mapper.dlOpName,
            category: mapper.category,
            inputNames: (node.input || []).map(function (input) {
                return input.startsWith('^') ? input.substr(1) : input;
            }),
            inputs: [],
            children: [],
            params: {}
        };
        if (!!mapper.params) {
            newNode.params = mapper.params.reduce(function (map, param) {
                var inputIndex = param.tfInputIndex;
                var inputParamLength = param.tfInputParamLength;
                var type = param.type;
                var value = undefined;
                if (inputIndex === undefined) {
                    switch (param.type) {
                        case 'string':
                            value = _this.getStringParam(node.attr, param.tfParamName, param.defaultValue);
                            if (value === undefined && !!param.tfParamNameDeprecated) {
                                value = _this.getStringParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
                            }
                            break;
                        case 'number':
                            value = _this.getNumberParam(node.attr, param.tfParamName, param.defaultValue);
                            if (value === undefined && !!param.tfParamNameDeprecated) {
                                value = _this.getNumberParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
                            }
                            break;
                        case 'number[]':
                            value = _this.getNumericArrayParam(node.attr, param.tfParamName, param.defaultValue);
                            if (value === undefined && !!param.tfParamNameDeprecated) {
                                value = _this.getNumericArrayParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
                            }
                            break;
                        case 'bool':
                            value = _this.getBoolParam(node.attr, param.tfParamName, param.defaultValue);
                            if (value === undefined && !!param.tfParamNameDeprecated) {
                                value = _this.getBoolParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
                            }
                            break;
                        case 'shape':
                            value = _this.getTensorShapeParam(node.attr, param.tfParamName, param.defaultValue);
                            if (value === undefined && !!param.tfParamNameDeprecated) {
                                value = _this.getTensorShapeParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
                            }
                            break;
                        case 'dtype':
                            value = _this.getDtypeParam(node.attr, param.tfParamName, param.defaultValue);
                            if (value === undefined && !!param.tfParamNameDeprecated) {
                                value = _this.getDtypeParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
                            }
                            break;
                        case 'tensor':
                        case 'tensors':
                            break;
                        default:
                            throw new Error("Unsupported param type: " + param.type + " for op: " + node.op);
                    }
                }
                map[param.dlParamName] = { value: value, inputIndex: inputIndex, type: type, inputParamLength: inputParamLength };
                return map;
            }, {});
        }
        return newNode;
    };
    OperationMapper.prototype.getStringParam = function (attrs, name, def, keepCase) {
        if (keepCase === void 0) {
            keepCase = false;
        }
        var param = attrs[name];
        if (param !== undefined) {
            var value = String.fromCharCode.apply(null, param.s);
            return keepCase ? value : value.toLowerCase();
        }
        return def;
    };
    OperationMapper.prototype.getBoolParam = function (attrs, name, def) {
        var param = attrs[name];
        return param ? param.b : def;
    };
    OperationMapper.prototype.getNumberParam = function (attrs, name, def) {
        var param = attrs[name];
        var value = param ? param.f !== undefined ? param.f : param.i : def;
        return typeof value === 'number' ? value : value['toInt']();
    };
    OperationMapper.prototype.getDtypeParam = function (attrs, name, def) {
        var param = attrs[name];
        if (param && param.type) {
            switch (param.type) {
                case _compiled_api.tensorflow.DataType.DT_FLOAT:
                    return 'float32';
                case _compiled_api.tensorflow.DataType.DT_INT32:
                    return 'int32';
                case _compiled_api.tensorflow.DataType.DT_BOOL:
                    return 'bool';
                default:
                    return def;
            }
        }
        return def;
    };
    OperationMapper.prototype.getTensorShapeParam = function (attrs, name, def) {
        var param = attrs[name];
        if (param && param.shape) {
            return param.shape.dim.map(function (dim) {
                return dim.size;
            });
        }
        return def;
    };
    OperationMapper.prototype.getNumericArrayParam = function (attrs, name, def) {
        var param = attrs[name];
        if (param) {
            return (param.list.f && param.list.f.length ? param.list.f : param.list.i).map(function (v) {
                return typeof v === 'number' ? v : v['toInt']();
            });
        }
        return def;
    };
    return OperationMapper;
}();
exports.OperationMapper = OperationMapper;
//# sourceMappingURL=operation_mapper.js.map
},{"../data/compiled_api":"blTb","./executors/utils":"q/Si","./op_list/arithmetic.json":"MLRj","./op_list/basic_math.json":"Vnv3","./op_list/control.json":"nmoK","./op_list/convolution.json":"R3pA","./op_list/creation.json":"OWJf","./op_list/graph.json":"n3br","./op_list/image.json":"eEIb","./op_list/logical.json":"wtx5","./op_list/matrices.json":"b64J","./op_list/normalization.json":"EHD2","./op_list/reduction.json":"OwsI","./op_list/slice_join.json":"pEiO","./op_list/transformation.json":"6hwu"}],"2e53":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'add':
            {
                return [tfc.add((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'mod':
            return [tfc.mod((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
        case 'mul':
            return [tfc.mul((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
        case 'div':
            {
                return [tfc.div((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'sub':
            {
                return [tfc.sub((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'minimum':
            {
                return [tfc.minimum((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'maximum':
            {
                return [tfc.maximum((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'pow':
            {
                return [tfc.pow((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'squaredDifference':
            {
                return [tfc.squaredDifference((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'arithmetic';
//# sourceMappingURL=arithmetic_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"SG2k":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'abs':
            return [tfc.abs((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'acos':
            return [tfc.acos((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'acosh':
            return [tfc.acosh((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'asin':
            return [tfc.asin((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'asinh':
            return [tfc.asinh((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'atan':
            return [tfc.atan((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'atanh':
            return [tfc.atanh((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'ceil':
            return [tfc.ceil((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'cos':
            return [tfc.cos((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'cosh':
            return [tfc.cosh((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'elu':
            return [tfc.elu((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'erf':
            return [tfc.erf((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'exp':
            return [tfc.exp((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'expm1':
            {
                return [tfc.expm1((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'floor':
            return [tfc.floor((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'log':
            return [tfc.log((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'log1p':
            {
                return [tfc.log1p((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'neg':
            return [tfc.neg((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'reciprocal':
            {
                return [tfc.reciprocal((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'relu':
            return [tfc.relu((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'round':
            {
                return [tfc.round((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'selu':
            return [tfc.selu((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'sigmoid':
            return [tfc.sigmoid((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'sin':
            return [tfc.sin((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'sign':
            {
                return [tfc.sign((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'sinh':
            {
                return [tfc.sinh((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'softplus':
            {
                return [tfc.softplus((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'sqrt':
            {
                return [tfc.sqrt((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'square':
            {
                return [tfc.square((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'tanh':
            {
                return [tfc.tanh((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'tan':
            return [tfc.tan((0, _utils.getParamValue)('x', node, tensorMap, context))];
        case 'clipByValue':
            return [tfc.clipByValue((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('clipValueMin', node, tensorMap, context), (0, _utils.getParamValue)('clipValueMax', node, tensorMap, context))];
        case 'rsqrt':
            return [tfc.div(tfc.scalar(1.0, 'float32'), tfc.sqrt((0, _utils.getTensor)(node.inputNames[0], tensorMap, context)))];
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'basic_math';
//# sourceMappingURL=basic_math_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"7gjq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = undefined;
exports.executeOp = executeOp;

var _utils = require("./utils");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function executeOp(node, tensorMap, context) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, pred, data_1, inputName, frameId, data, tensor, input;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = node.op;
                    switch (_a) {
                        case 'loopCond':
                            return [3, 1];
                        case 'switch':
                            return [3, 2];
                        case 'merge':
                            return [3, 4];
                        case 'enter':
                            return [3, 5];
                        case 'exit':
                            return [3, 6];
                        case 'nextIteration':
                            return [3, 7];
                    }
                    return [3, 8];
                case 1:
                    return [2, [(0, _utils.getParamValue)('pred', node, tensorMap, context)]];
                case 2:
                    pred = (0, _utils.getParamValue)('pred', node, tensorMap, context);
                    data_1 = (0, _utils.getParamValue)('data', node, tensorMap, context);
                    return [4, pred.data()];
                case 3:
                    return [2, _b.sent()[0] ? [undefined, data_1] : [data_1, undefined]];
                case 4:
                    inputName = node.inputNames.find(function (name) {
                        return (0, _utils.getTensor)(name, tensorMap, context) !== undefined;
                    });
                    return [2, inputName ? [(0, _utils.getTensor)(inputName, tensorMap, context)] : undefined];
                case 5:
                    frameId = (0, _utils.getParamValue)('frameName', node, tensorMap, context);
                    data = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
                    context.enterFrame(frameId);
                    return [2, [data]];
                case 6:
                    tensor = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
                    context.exitFrame();
                    return [2, [tensor]];
                case 7:
                    input = (0, _utils.getParamValue)('tensor', node, tensorMap, context);
                    context.nextIteration();
                    return [2, [input]];
                case 8:
                    throw TypeError("Node type " + node.op + " is not implemented");
            }
        });
    });
}
var CATEGORY = exports.CATEGORY = 'control';
//# sourceMappingURL=control_executor.js.map
},{"./utils":"q/Si"}],"KoBa":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'conv1d':
            {
                var stride = (0, _utils.getParamValue)('stride', node, tensorMap, context);
                var pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
                var dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
                var dilation = (0, _utils.getParamValue)('dilation', node, tensorMap, context);
                return [tfc.conv1d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];
            }
        case 'conv2d':
            {
                var stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
                var pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
                var dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
                var dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
                return [tfc.conv2d((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];
            }
        case 'conv2dTranspose':
            {
                var shape = (0, _utils.getParamValue)('outputShape', node, tensorMap, context);
                var stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
                var pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
                return [tfc.conv2dTranspose((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];
            }
        case 'depthwiseConv2d':
            {
                var stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
                var pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
                var dilations = (0, _utils.getParamValue)('dilations', node, tensorMap, context);
                var dataFormat = (0, _utils.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
                return [tfc.depthwiseConv2d((0, _utils.getParamValue)('input', node, tensorMap, context), (0, _utils.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];
            }
        case 'avgPool':
            {
                var stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
                var pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
                var kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
                return [tfc.avgPool((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
            }
        case 'maxPool':
            {
                var stride = (0, _utils.getParamValue)('strides', node, tensorMap, context);
                var pad = (0, _utils.getParamValue)('pad', node, tensorMap, context);
                var kernelSize = (0, _utils.getParamValue)('kernelSize', node, tensorMap, context);
                return [tfc.maxPool((0, _utils.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'convolution';
//# sourceMappingURL=convolution_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"TPKH":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'fill':
            {
                var shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);
                var value = (0, _utils.getParamValue)('value', node, tensorMap, context);
                return [tfc.fill(shape, value)];
            }
        case 'linspace':
            {
                var start = (0, _utils.getParamValue)('start', node, tensorMap, context);
                var stop_1 = (0, _utils.getParamValue)('stop', node, tensorMap, context);
                var num = (0, _utils.getParamValue)('num', node, tensorMap, context);
                return [tfc.linspace(start, stop_1, num)];
            }
        case 'oneHot':
            {
                var indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
                var depth = (0, _utils.getParamValue)('depth', node, tensorMap, context);
                var onValue = (0, _utils.getParamValue)('onValue', node, tensorMap, context);
                var offValue = (0, _utils.getParamValue)('offValue', node, tensorMap, context);
                return [tfc.oneHot(indices, depth, onValue, offValue)];
            }
        case 'ones':
            {
                return [tfc.ones((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
            }
        case 'onesLike':
            {
                return [tfc.onesLike((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        case 'randomUniform':
            {
                return [tfc.randomUniform((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('minval', node, tensorMap, context), (0, _utils.getParamValue)('maxval', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
            }
        case 'range':
            {
                var start = (0, _utils.getParamValue)('start', node, tensorMap, context);
                var stop_2 = (0, _utils.getParamValue)('stop', node, tensorMap, context);
                var step = (0, _utils.getParamValue)('step', node, tensorMap, context);
                return [tfc.range(start, stop_2, step, (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
            }
        case 'truncatedNormal':
            {
                var shape = (0, _utils.getParamValue)('shape', node, tensorMap, context);
                var mean = (0, _utils.getParamValue)('mean', node, tensorMap, context);
                var stdDev = (0, _utils.getParamValue)('stdDev', node, tensorMap, context);
                var seed = (0, _utils.getParamValue)('seed', node, tensorMap, context);
                return [tfc.truncatedNormal(shape, mean, stdDev, (0, _utils.getParamValue)('dtype', node, tensorMap, context), seed)];
            }
        case 'zeros':
            {
                return [tfc.zeros((0, _utils.getParamValue)('shape', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
            }
        case 'zerosLike':
            {
                return [tfc.zerosLike((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'creation';
//# sourceMappingURL=creation_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"sbzI":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'const':
            {
                return tensorMap[node.name];
            }
        case 'placeholder':
            var def = (0, _utils.getParamValue)('default', node, tensorMap, context);
            return [(0, _utils.getTensor)(node.name, tensorMap, context) || def];
        case 'identity':
        case 'stopGradient':
        case 'fakeQuantWithMinMaxVars':
            return [(0, _utils.getParamValue)('x', node, tensorMap, context)];
        case 'snapshot':
            var snapshot = (0, _utils.getParamValue)('x', node, tensorMap, context);
            return [snapshot.clone()];
        case 'shape':
            return [tfc.tensor1d((0, _utils.getParamValue)('x', node, tensorMap, context).shape, 'int32')];
        case 'noop':
            return [];
        case 'print':
            var input = (0, _utils.getParamValue)('x', node, tensorMap, context);
            var data = (0, _utils.getParamValue)('data', node, tensorMap, context);
            var message = (0, _utils.getParamValue)('message', node, tensorMap, context);
            var summarize = (0, _utils.getParamValue)('summarize', node, tensorMap, context);
            console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');
            console.log(message);
            for (var i = 0; i < data.length; i++) {
                console.log(Array.prototype.slice.call(data[0].dataSync()).slice(0, summarize));
            }
            return [input];
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'graph';
//# sourceMappingURL=graph_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"c+mp":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'resizeBilinear':
            {
                var images = (0, _utils.getParamValue)('images', node, tensorMap, context);
                var size = (0, _utils.getParamValue)('size', node, tensorMap, context);
                var alignCorners = (0, _utils.getParamValue)('alignCorners', node, tensorMap, context);
                return [tfc.image.resizeBilinear(images, [size[0], size[1]], alignCorners)];
            }
        case 'resizeNearestNeighbor':
            {
                var images = (0, _utils.getParamValue)('images', node, tensorMap, context);
                var size = (0, _utils.getParamValue)('size', node, tensorMap, context);
                var alignCorners = (0, _utils.getParamValue)('alignCorners', node, tensorMap, context);
                return [tfc.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners)];
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'image';
//# sourceMappingURL=image_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"21Z/":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'equal':
            {
                return [tfc.equal((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'notEqual':
            {
                return [tfc.notEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'greater':
            {
                return [tfc.greater((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'greaterEqual':
            {
                return [tfc.greaterEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'less':
            {
                return [tfc.less((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'lessEqual':
            {
                return [tfc.lessEqual((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'logicalAnd':
            {
                return [tfc.logicalAnd((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'logicalNot':
            {
                return [tfc.logicalNot((0, _utils.getParamValue)('a', node, tensorMap, context))];
            }
        case 'logicalOr':
            {
                return [tfc.logicalOr((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        case 'where':
            {
                return [tfc.where((0, _utils.getParamValue)('condition', node, tensorMap, context), (0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context))];
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'logical';
//# sourceMappingURL=logical_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"D3OL":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'matMul':
            return [tfc.matMul((0, _utils.getParamValue)('a', node, tensorMap, context), (0, _utils.getParamValue)('b', node, tensorMap, context), (0, _utils.getParamValue)('transposeA', node, tensorMap, context), (0, _utils.getParamValue)('transposeB', node, tensorMap, context))];
        case 'transpose':
            return [tfc.transpose((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('perm', node, tensorMap, context))];
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'matrices';
//# sourceMappingURL=matrices_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"o8Ga":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'batchNormalization':
            {
                return [tfc.batchNormalization((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('mean', node, tensorMap, context), (0, _utils.getParamValue)('variance', node, tensorMap, context), (0, _utils.getParamValue)('epsilon', node, tensorMap, context), (0, _utils.getParamValue)('scale', node, tensorMap, context), (0, _utils.getParamValue)('offset', node, tensorMap, context))];
            }
        case 'localResponseNormalization':
            {
                return [tfc.localResponseNormalization((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('radius', node, tensorMap, context), (0, _utils.getParamValue)('bias', node, tensorMap, context), (0, _utils.getParamValue)('alpha', node, tensorMap, context), (0, _utils.getParamValue)('beta', node, tensorMap, context))];
            }
        case 'softmax':
            {
                return [tfc.softmax((0, _utils.getParamValue)('x', node, tensorMap, context))];
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'normalization';
//# sourceMappingURL=normalization_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"XB5D":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'max':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                var keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
                return [tfc.max((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
            }
        case 'mean':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                var keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
                return [tfc.mean((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
            }
        case 'min':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                var keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
                return [tfc.min((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
            }
        case 'sum':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                var keepDims = (0, _utils.getParamValue)('keepDims', node, tensorMap, context);
                return [tfc.sum((0, _utils.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
            }
        case 'argMax':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                return [tfc.argMax((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
            }
        case 'argMin':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                return [tfc.argMin((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'reduction';
//# sourceMappingURL=reduction_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"+hqx":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'concat':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                var inputs = (0, _utils.getParamValue)('tensors', node, tensorMap, context);
                return [tfc.concat(inputs, axis)];
            }
        case 'gather':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                var input = (0, _utils.getParamValue)('x', node, tensorMap, context);
                var indices = (0, _utils.getParamValue)('indices', node, tensorMap, context);
                return [tfc.gather(input, indices, axis)];
            }
        case 'reverse':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                var input = (0, _utils.getParamValue)('x', node, tensorMap, context);
                return [tfc.reverse(input, axis)];
            }
        case 'slice':
            {
                var begin = (0, _utils.getParamValue)('begin', node, tensorMap, context);
                var size = (0, _utils.getParamValue)('size', node, tensorMap, context);
                return [tfc.slice((0, _utils.getParamValue)('x', node, tensorMap, context), begin, size)];
            }
        case 'stridedSlice':
            {
                var begin = (0, _utils.getParamValue)('begin', node, tensorMap, context);
                var end = (0, _utils.getParamValue)('end', node, tensorMap, context);
                var strides = (0, _utils.getParamValue)('strides', node, tensorMap, context);
                var beginMask = (0, _utils.getParamValue)('beginMask', node, tensorMap, context);
                var endMask = (0, _utils.getParamValue)('endMask', node, tensorMap, context);
                return [tfc.stridedSlice((0, _utils.getParamValue)('x', node, tensorMap, context), begin, end, strides, beginMask, endMask)];
            }
        case 'stack':
            {
                return tfc.tidy(function () {
                    var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                    var tensors = (0, _utils.getParamValue)('tensors', node, tensorMap, context);
                    var shape = tensors[0].shape;
                    var squeezedShape = tensors[0].squeeze().shape;
                    var mapped = tensors.map(function (tensor) {
                        var sameShape = tfc.util.arraysEqual(tensor.shape, shape);
                        if (!sameShape && !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {
                            throw new Error('the input tensors shape does not match');
                        }
                        return sameShape ? tensor : tensor.reshape(shape);
                    });
                    return [tfc.stack(mapped, axis)];
                });
            }
        case 'tile':
            {
                var reps = (0, _utils.getParamValue)('reps', node, tensorMap, context);
                return [tfc.tile((0, _utils.getParamValue)('x', node, tensorMap, context), reps)];
            }
        case 'split':
            {
                var axis = (0, _utils.getParamValue)('axis', node, tensorMap, context);
                var numOrSizeSplits = (0, _utils.getParamValue)('numOrSizeSplits', node, tensorMap, context);
                return tfc.split((0, _utils.getParamValue)('x', node, tensorMap, context), numOrSizeSplits, axis);
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'slice_join';
//# sourceMappingURL=slice_join_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"uzat":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CATEGORY = exports.executeOp = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

var tfc = _interopRequireWildcard(_tfjsCore);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var executeOp = exports.executeOp = function (node, tensorMap, context) {
    switch (node.op) {
        case 'cast':
            {
                return [tfc.cast((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('dtype', node, tensorMap, context))];
            }
        case 'expandDims':
            {
                var axis = node.params['axis'].value;
                return [tfc.expandDims((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
            }
        case 'squeeze':
            {
                var axis = node.params['axis'].value;
                return [tfc.squeeze((0, _utils.getParamValue)('x', node, tensorMap, context), axis)];
            }
        case 'reshape':
            {
                return [tfc.reshape((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.getParamValue)('shape', node, tensorMap, context))];
            }
        case 'pad':
            {
                return [tfc.pad((0, _utils.getParamValue)('x', node, tensorMap, context), (0, _utils.split)((0, _utils.getParamValue)('padding', node, tensorMap, context), 2), (0, _utils.getParamValue)('constantValue', node, tensorMap, context))];
            }
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
};
var CATEGORY = exports.CATEGORY = 'transformation';
//# sourceMappingURL=transformation_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","./utils":"q/Si"}],"SlzC":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.executeOp = executeOp;

var _arithmetic_executor = require('./executors/arithmetic_executor');

var arithmetic = _interopRequireWildcard(_arithmetic_executor);

var _basic_math_executor = require('./executors/basic_math_executor');

var basicMath = _interopRequireWildcard(_basic_math_executor);

var _control_executor = require('./executors/control_executor');

var control = _interopRequireWildcard(_control_executor);

var _convolution_executor = require('./executors/convolution_executor');

var convolution = _interopRequireWildcard(_convolution_executor);

var _creation_executor = require('./executors/creation_executor');

var creation = _interopRequireWildcard(_creation_executor);

var _graph_executor = require('./executors/graph_executor');

var graph = _interopRequireWildcard(_graph_executor);

var _image_executor = require('./executors/image_executor');

var image = _interopRequireWildcard(_image_executor);

var _logical_executor = require('./executors/logical_executor');

var logical = _interopRequireWildcard(_logical_executor);

var _matrices_executor = require('./executors/matrices_executor');

var matrices = _interopRequireWildcard(_matrices_executor);

var _normalization_executor = require('./executors/normalization_executor');

var normalization = _interopRequireWildcard(_normalization_executor);

var _reduction_executor = require('./executors/reduction_executor');

var reduction = _interopRequireWildcard(_reduction_executor);

var _slice_join_executor = require('./executors/slice_join_executor');

var sliceJoin = _interopRequireWildcard(_slice_join_executor);

var _transformation_executor = require('./executors/transformation_executor');

var transformation = _interopRequireWildcard(_transformation_executor);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function executeOp(node, tensorMap, context) {
    switch (node.category) {
        case 'arithmetic':
            return arithmetic.executeOp(node, tensorMap, context);
        case 'basic_math':
            return basicMath.executeOp(node, tensorMap, context);
        case 'control':
            return control.executeOp(node, tensorMap, context);
        case 'convolution':
            return convolution.executeOp(node, tensorMap, context);
        case 'creation':
            return creation.executeOp(node, tensorMap, context);
        case 'image':
            return image.executeOp(node, tensorMap, context);
        case 'graph':
            return graph.executeOp(node, tensorMap, context);
        case 'logical':
            return logical.executeOp(node, tensorMap, context);
        case 'matrices':
            return matrices.executeOp(node, tensorMap, context);
        case 'normalization':
            return normalization.executeOp(node, tensorMap, context);
        case 'reduction':
            return reduction.executeOp(node, tensorMap, context);
        case 'slice_join':
            return sliceJoin.executeOp(node, tensorMap, context);
        case 'transformation':
            return transformation.executeOp(node, tensorMap, context);
        default:
            throw TypeError("Node type " + node.op + " is not implemented");
    }
}
//# sourceMappingURL=operation_executor.js.map
},{"./executors/arithmetic_executor":"2e53","./executors/basic_math_executor":"SG2k","./executors/control_executor":"7gjq","./executors/convolution_executor":"KoBa","./executors/creation_executor":"TPKH","./executors/graph_executor":"sbzI","./executors/image_executor":"c+mp","./executors/logical_executor":"21Z/","./executors/matrices_executor":"D3OL","./executors/normalization_executor":"o8Ga","./executors/reduction_executor":"XB5D","./executors/slice_join_executor":"+hqx","./executors/transformation_executor":"uzat"}],"rH/X":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var ExecutionContext = function () {
    function ExecutionContext(weightMap) {
        this.weightMap = weightMap;
        this.rootContext = { id: 0, frameName: '', iterationId: 0 };
        this.contexts = [this.rootContext];
        this.lastId = 0;
        this.generateCurrentContextIds();
    }
    ExecutionContext.prototype.newFrame = function (id, frameName) {
        return { id: id, frameName: frameName, iterationId: 0 };
    };
    Object.defineProperty(ExecutionContext.prototype, "currentContext", {
        get: function () {
            return this.contexts;
        },
        set: function (contexts) {
            if (this.contexts !== contexts) {
                this.contexts = contexts;
                this.generateCurrentContextIds();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExecutionContext.prototype, "currentContextId", {
        get: function () {
            return this._currentContextIds[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExecutionContext.prototype, "currentContextIds", {
        get: function () {
            return this._currentContextIds;
        },
        enumerable: true,
        configurable: true
    });
    ExecutionContext.prototype.generateCurrentContextIds = function () {
        var names = [];
        for (var i = 0; i < this.contexts.length - 1; i++) {
            var contexts = this.contexts.slice(0, this.contexts.length - i);
            names.push(this.contextIdforContexts(contexts));
        }
        names.push('');
        this._currentContextIds = names;
    };
    ExecutionContext.prototype.contextIdforContexts = function (contexts) {
        return contexts ? contexts.map(function (context) {
            return context.id === 0 && context.iterationId === 0 ? '' : context.frameName + "-" + context.iterationId;
        }).join('/') : '';
    };
    ExecutionContext.prototype.enterFrame = function (frameId) {
        if (this.contexts) {
            this.lastId++;
            this.contexts = this.contexts.slice();
            this.contexts.push(this.newFrame(this.lastId, frameId));
            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
        }
    };
    ExecutionContext.prototype.exitFrame = function () {
        if (this.contexts && this.contexts.length > 1) {
            this.contexts = this.contexts.slice();
            this.contexts.splice(-1);
            this.currentContextIds.shift();
        } else {
            throw new Error('Cannot exit frame, the context is empty');
        }
    };
    ExecutionContext.prototype.nextIteration = function () {
        if (this.contexts && this.contexts.length > 0) {
            this.contexts = this.contexts.slice();
            this.lastId++;
            var context = Object.assign({}, this.contexts[this.contexts.length - 1]);
            context.iterationId += 1;
            context.id = this.lastId;
            this.contexts.splice(-1, 1, context);
            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
        } else {
            throw new Error('Cannot increase frame iteration, the context is empty');
        }
    };
    ExecutionContext.prototype.getWeight = function (name) {
        return this.weightMap[name];
    };
    return ExecutionContext;
}();
exports.ExecutionContext = ExecutionContext;
//# sourceMappingURL=execution_context.js.map
},{}],"n0MS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GraphExecutor = undefined;

var _tfjsCore = require("@tensorflow/tfjs-core");

var _utils = require("../operations/executors/utils");

var _operation_executor = require("../operations/operation_executor");

var _execution_context = require("./execution_context");

var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var GraphExecutor = function () {
    function GraphExecutor(graph) {
        this.graph = graph;
        this.compiledOrder = [];
        this._weightMap = {};
        this.placeholders = graph.placeholders.map(function (node) {
            return node.name;
        });
        this.outputs = graph.outputs.map(function (node) {
            return node.name;
        });
        this.compile();
    }
    Object.defineProperty(GraphExecutor.prototype, "weightMap", {
        get: function () {
            return this._weightMap;
        },
        set: function (weightMap) {
            var weightIds = Object.keys(weightMap).map(function (key) {
                return weightMap[key].map(function (tensor) {
                    return tensor.id;
                });
            });
            this.weightIds = [].concat.apply([], weightIds);
            this._weightMap = weightMap;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GraphExecutor.prototype, "inputNodes", {
        get: function () {
            return this.placeholders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GraphExecutor.prototype, "outputNodes", {
        get: function () {
            return this.outputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GraphExecutor.prototype, "isControlFlowModel", {
        get: function () {
            return this.graph.withControlFlow;
        },
        enumerable: true,
        configurable: true
    });
    GraphExecutor.prototype.compile = function () {
        if (this.graph.withControlFlow) {
            return;
        }
        var stack = this.graph.inputs.slice();
        var visited = {};
        while (stack.length > 0) {
            var node = stack.pop();
            visited[node.name] = true;
            this.compiledOrder.push(node);
            node.children.forEach(function (childNode) {
                if (!visited[childNode.name] && childNode.inputNames.every(function (name) {
                    var nodeName = (0, _utils.getNodeNameAndIndex)(name)[0];
                    return visited[nodeName];
                })) {
                    stack.push(childNode);
                }
            });
        }
    };
    GraphExecutor.prototype.execute = function (inputs, outputs) {
        var _this = this;
        this.checkInput(inputs);
        var result = (0, _tfjsCore.tidy)(function () {
            var context = new _execution_context.ExecutionContext(_this._weightMap);
            var tensors = _this.compiledOrder.reduce(function (map, node) {
                map[node.name] = (0, _operation_executor.executeOp)(node, map, context);
                return map;
            }, __assign({}, _this.weightMap, inputs));
            return _this.findOutputs(tensors, context, outputs);
        });
        return result;
    };
    GraphExecutor.prototype.executeAsync = function (inputs, outputs) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var context, tensors, results, outputIds, inputIdArray, inputIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = new _execution_context.ExecutionContext(this._weightMap);
                        return [4, this.executeWithControlFlow(inputs, context)];
                    case 1:
                        tensors = _a.sent();
                        results = this.findOutputs(tensors, context, outputs);
                        outputIds = Object.keys(results).map(function (key) {
                            return results[key].id;
                        });
                        inputIdArray = Object.keys(inputs).map(function (key) {
                            return inputs[key].map(function (input) {
                                return input.id;
                            });
                        });
                        inputIds = [].concat.apply([], inputIdArray);
                        Object.keys(tensors).forEach(function (key) {
                            var tensorArray = tensors[key];
                            tensorArray.forEach(function (tensor) {
                                if (tensor && outputIds.indexOf(tensor.id) === -1 && inputIds.indexOf(tensor.id) === -1 && _this.weightIds.indexOf(tensor.id) === -1) {
                                    tensor.dispose();
                                }
                            });
                        });
                        return [2, results];
                }
            });
        });
    };
    GraphExecutor.prototype.executeWithControlFlow = function (inputs, context) {
        return __awaiter(this, void 0, void 0, function () {
            var stack, tensorMap, added, item, tensors, nodeName, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        stack = this.graph.inputs.map(function (node) {
                            return { node: node, contexts: context.currentContext };
                        });
                        tensorMap = __assign({}, this.weightMap, inputs);
                        added = {};
                        _c.label = 1;
                    case 1:
                        if (!(stack.length > 0)) return [3, 3];
                        item = stack.pop();
                        context.currentContext = item.contexts;
                        tensors = (0, _operation_executor.executeOp)(item.node, tensorMap, context);
                        nodeName = (0, _utils.getNodeNameAndIndex)(item.node.name, context)[0];
                        _a = tensorMap;
                        _b = nodeName;
                        return [4, tensors];
                    case 2:
                        _a[_b] = _c.sent();
                        item.node.children.forEach(function (childNode) {
                            var nodeName = (0, _utils.getNodeNameAndIndex)(childNode.name, context)[0];
                            if (!added[nodeName]) {
                                if (childNode.op === 'merge') {
                                    if (childNode.inputNames.some(function (name) {
                                        return !!(0, _utils.getTensor)(name, tensorMap, context);
                                    })) {
                                        added[nodeName] = true;
                                        stack.push({ contexts: context.currentContext, node: childNode });
                                    }
                                } else if (childNode.inputNames.every(function (name) {
                                    return !!(0, _utils.getTensor)(name, tensorMap, context);
                                })) {
                                    added[nodeName] = true;
                                    stack.push({ contexts: context.currentContext, node: childNode });
                                }
                            }
                        });
                        return [3, 1];
                    case 3:
                        return [2, tensorMap];
                }
            });
        });
    };
    GraphExecutor.prototype.findOutputs = function (tensorMap, context, outputs) {
        if (outputs && !(outputs instanceof Array)) {
            outputs = [outputs];
        }
        var requestedOutputs = outputs || this.graph.outputs.map(function (node) {
            return node.name;
        });
        return requestedOutputs.reduce(function (map, name) {
            map[name] = (0, _utils.getTensor)(name, tensorMap, context);
            return map;
        }, {});
    };
    GraphExecutor.prototype.dispose = function () {
        var _this = this;
        Object.keys(this.weightMap).forEach(function (key) {
            return _this.weightMap[key].forEach(function (tensor) {
                return tensor.dispose();
            });
        });
    };
    GraphExecutor.prototype.checkInput = function (inputs) {
        var _this = this;
        var inputKeys = Object.keys(inputs);
        var missing = [];
        var extra = [];
        this.placeholders.forEach(function (name) {
            if (inputKeys.indexOf(name) === -1) missing.push(name);
        });
        inputKeys.forEach(function (name) {
            if (_this.placeholders.indexOf(name) === -1) extra.push(name);
        });
        if (missing.length > 0) {
            throw new Error("The dict provided in model.execute(dict) has the keys " + ("[" + inputKeys + "], but is missing the required keys: [" + missing + "]."));
        }
        if (extra.length > 0) {
            throw new Error("The dict provided in model.execute(dict) has " + ("unused keys: [" + extra + "]. Please provide only the following keys: ") + ("[" + this.placeholders + "]."));
        }
    };
    return GraphExecutor;
}();
exports.GraphExecutor = GraphExecutor;
//# sourceMappingURL=graph_executor.js.map
},{"@tensorflow/tfjs-core":"Ppj4","../operations/executors/utils":"q/Si","../operations/operation_executor":"SlzC","./execution_context":"rH/X"}],"VEHD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FrozenModel = undefined;
exports.loadFrozenModel = loadFrozenModel;

var _tfjsCore = require("@tensorflow/tfjs-core");

var tfc = _interopRequireWildcard(_tfjsCore);

var _url = require("url");

var Url = _interopRequireWildcard(_url);

var _compiled_api = require("../data/compiled_api");

var _operation_mapper = require("../operations/operation_mapper");

var _graph_executor = require("./graph_executor");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var FrozenModel = function () {
    function FrozenModel(modelUrl, weightManifestUrl, requestOption) {
        this.modelUrl = modelUrl;
        this.weightManifestUrl = weightManifestUrl;
        this.requestOption = requestOption;
        this.version = 'n/a';
        this.pathPrefix = this.getPathPrefix();
    }
    Object.defineProperty(FrozenModel.prototype, "modelVersion", {
        get: function () {
            return this.version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrozenModel.prototype, "inputNodes", {
        get: function () {
            return this.executor.inputNodes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrozenModel.prototype, "outputNodes", {
        get: function () {
            return this.executor.outputNodes;
        },
        enumerable: true,
        configurable: true
    });
    FrozenModel.prototype.getPathPrefix = function () {
        var url = Url.parse(this.weightManifestUrl);
        var segments = url.pathname.split('/');
        segments.splice(-1);
        url.pathname = segments.join('/');
        return Url.format(url) + '/';
    };
    FrozenModel.prototype.loadRemoteProtoFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, _a, _b, _c, error_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 3,, 4]);
                        return [4, fetch(this.modelUrl, this.requestOption)];
                    case 1:
                        response = _d.sent();
                        _b = (_a = _compiled_api.tensorflow.GraphDef).decode;
                        _c = Uint8Array.bind;
                        return [4, response.arrayBuffer()];
                    case 2:
                        return [2, _b.apply(_a, [new (_c.apply(Uint8Array, [void 0, _d.sent()]))()])];
                    case 3:
                        error_1 = _d.sent();
                        throw new Error(this.modelUrl + " not found. " + error_1);
                    case 4:
                        return [2];
                }
            });
        });
    };
    FrozenModel.prototype.loadWeightManifest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manifest, _a, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3,, 4]);
                        return [4, fetch(this.weightManifestUrl, this.requestOption)];
                    case 1:
                        manifest = _b.sent();
                        _a = this;
                        return [4, manifest.clone().json()];
                    case 2:
                        _a.weightManifest = _b.sent();
                        return [3, 4];
                    case 3:
                        error_2 = _b.sent();
                        throw new Error(this.weightManifestUrl + " not found. " + error_2);
                    case 4:
                        return [2];
                }
            });
        });
    };
    FrozenModel.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var graphPromise, manifestPromise, graph, weightMap;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        graphPromise = this.loadRemoteProtoFile();
                        manifestPromise = this.loadWeightManifest();
                        return [4, Promise.all([graphPromise, manifestPromise])];
                    case 1:
                        graph = _a.sent()[0];
                        this.version = graph.versions.producer + "." + graph.versions.minConsumer;
                        return [4, tfc.io.loadWeights(this.weightManifest, this.pathPrefix, undefined, this.requestOption)];
                    case 2:
                        weightMap = _a.sent();
                        this.executor = new _graph_executor.GraphExecutor(_operation_mapper.OperationMapper.Instance.transformGraph(graph));
                        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);
                        return [2, true];
                }
            });
        });
    };
    FrozenModel.prototype.predict = function (inputs, config) {
        return this.execute(inputs, this.outputNodes);
    };
    FrozenModel.prototype.constructTensorMap = function (inputs) {
        var inputArray = inputs instanceof tfc.Tensor ? [inputs] : inputs;
        if (inputArray.length !== this.inputNodes.length) {
            throw new Error('Input tensor count mismatch,' + ("the frozen model has " + this.inputNodes.length + " placeholders, ") + ("while there are " + inputArray.length + " input tensors."));
        }
        return this.inputNodes.reduce(function (map, inputName, i) {
            map[inputName] = inputArray[i];
            return map;
        }, {});
    };
    FrozenModel.prototype.execute = function (inputs, outputs) {
        outputs = outputs || this.outputNodes;
        if (inputs instanceof tfc.Tensor || Array.isArray(inputs)) {
            inputs = this.constructTensorMap(inputs);
        }
        if (this.executor.isControlFlowModel) {
            throw new Error('The model contains control flow ops, ' + 'please use executeAsync method');
        }
        var result = this.executor.execute(this.convertTensorMapToTensorsMap(inputs), outputs);
        var keys = Object.keys(result);
        return Array.isArray(outputs) && outputs.length > 1 ? outputs.map(function (node) {
            return result[node];
        }) : result[keys[0]];
    };
    FrozenModel.prototype.executeAsync = function (inputs, outputs) {
        return __awaiter(this, void 0, void 0, function () {
            var result, keys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.executor.isControlFlowModel) {
                            throw new Error('The model does not contain control flow ops, ' + 'please use execute method for better performance.');
                        }
                        outputs = outputs || this.outputNodes;
                        if (inputs instanceof tfc.Tensor || Array.isArray(inputs)) {
                            inputs = this.constructTensorMap(inputs);
                        }
                        return [4, this.executor.executeAsync(this.convertTensorMapToTensorsMap(inputs), outputs)];
                    case 1:
                        result = _a.sent();
                        keys = Object.keys(result);
                        return [2, Array.isArray(outputs) && outputs.length > 1 ? outputs.map(function (node) {
                            return result[node];
                        }) : result[keys[0]]];
                }
            });
        });
    };
    FrozenModel.prototype.convertTensorMapToTensorsMap = function (map) {
        return Object.keys(map).reduce(function (newMap, key) {
            newMap[key] = [map[key]];
            return newMap;
        }, {});
    };
    FrozenModel.prototype.dispose = function () {
        this.executor.dispose();
    };
    return FrozenModel;
}();
exports.FrozenModel = FrozenModel;
function loadFrozenModel(modelUrl, weightsManifestUrl, requestOption) {
    return __awaiter(this, void 0, void 0, function () {
        var model;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    model = new FrozenModel(modelUrl, weightsManifestUrl, requestOption);
                    return [4, model.load()];
                case 1:
                    _a.sent();
                    return [2, model];
            }
        });
    });
}
//# sourceMappingURL=frozen_model.js.map
},{"@tensorflow/tfjs-core":"Ppj4","url":"Mej7","../data/compiled_api":"blTb","../operations/operation_mapper":"gxZl","./graph_executor":"n0MS"}],"tvg8":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var version = '0.4.1';
exports.version = version;
//# sourceMappingURL=version.js.map
},{}],"W4UF":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _frozen_model = require('./executor/frozen_model');

Object.defineProperty(exports, 'FrozenModel', {
  enumerable: true,
  get: function () {
    return _frozen_model.FrozenModel;
  }
});
Object.defineProperty(exports, 'loadFrozenModel', {
  enumerable: true,
  get: function () {
    return _frozen_model.loadFrozenModel;
  }
});

var _version = require('./version');

Object.defineProperty(exports, 'version_converter', {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});
},{"./executor/frozen_model":"VEHD","./version":"tvg8"}],"oMBA":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.version = undefined;

var _tfjsCore = require('@tensorflow/tfjs-core');

Object.keys(_tfjsCore).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
            return _tfjsCore[key];
        }
    });
});

var _tfjsLayers = require('@tensorflow/tfjs-layers');

Object.keys(_tfjsLayers).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
            return _tfjsLayers[key];
        }
    });
});

var _tfjsConverter = require('@tensorflow/tfjs-converter');

Object.keys(_tfjsConverter).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
            return _tfjsConverter[key];
        }
    });
});

var _version = require('./version');

var version = exports.version = {
    'tfjs-core': _tfjsCore.version_core,
    'tfjs-layers': _tfjsLayers.version_layers,
    'tfjs-converter': _tfjsConverter.version_converter,
    'tfjs': _version.version
};
//# sourceMappingURL=index.js.map
},{"@tensorflow/tfjs-core":"Ppj4","@tensorflow/tfjs-layers":"ojwZ","@tensorflow/tfjs-converter":"W4UF","./version":"hhq7"}],"KVOZ":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var partNames = exports.partNames = ['nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder', 'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist', 'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle'];
var NUM_KEYPOINTS = exports.NUM_KEYPOINTS = partNames.length;
var partIds = exports.partIds = partNames.reduce(function (result, jointName, i) {
    result[jointName] = i;
    return result;
}, {});
var connectedPartNames = [['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'], ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'], ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'], ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'], ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'], ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip']];
var poseChain = exports.poseChain = [['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'], ['rightEye', 'rightEar'], ['nose', 'leftShoulder'], ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'], ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'], ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'], ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'], ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle']];
var connectedPartIndices = exports.connectedPartIndices = connectedPartNames.map(function (_a) {
    var jointNameA = _a[0],
        jointNameB = _a[1];
    return [partIds[jointNameA], partIds[jointNameB]];
});
//# sourceMappingURL=keypoints.js.map
},{}],"hfse":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getAdjacentKeyPoints = getAdjacentKeyPoints;
exports.getBoundingBox = getBoundingBox;
exports.getBoundingBoxPoints = getBoundingBoxPoints;
exports.toTensorBuffer = toTensorBuffer;
exports.toTensorBuffers3D = toTensorBuffers3D;
exports.scalePose = scalePose;
exports.scalePoses = scalePoses;
exports.getValidResolution = getValidResolution;

var _tfjs = require("@tensorflow/tfjs");

var tf = _interopRequireWildcard(_tfjs);

var _keypoints = require("./keypoints");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

function eitherPointDoesntMeetConfidence(a, b, minConfidence) {
    return a < minConfidence || b < minConfidence;
}
function getAdjacentKeyPoints(keypoints, minConfidence) {
    return _keypoints.connectedPartIndices.reduce(function (result, _a) {
        var leftJoint = _a[0],
            rightJoint = _a[1];
        if (eitherPointDoesntMeetConfidence(keypoints[leftJoint].score, keypoints[rightJoint].score, minConfidence)) {
            return result;
        }
        result.push([keypoints[leftJoint], keypoints[rightJoint]]);
        return result;
    }, []);
}
var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
    POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
function getBoundingBox(keypoints) {
    return keypoints.reduce(function (_a, _b) {
        var maxX = _a.maxX,
            maxY = _a.maxY,
            minX = _a.minX,
            minY = _a.minY;
        var _c = _b.position,
            x = _c.x,
            y = _c.y;
        return {
            maxX: Math.max(maxX, x),
            maxY: Math.max(maxY, y),
            minX: Math.min(minX, x),
            minY: Math.min(minY, y)
        };
    }, {
        maxX: NEGATIVE_INFINITY,
        maxY: NEGATIVE_INFINITY,
        minX: POSITIVE_INFINITY,
        minY: POSITIVE_INFINITY
    });
}
function getBoundingBoxPoints(keypoints) {
    var _a = getBoundingBox(keypoints),
        minX = _a.minX,
        minY = _a.minY,
        maxX = _a.maxX,
        maxY = _a.maxY;
    return [{ x: minX, y: minY }, { x: maxX, y: minY }, { x: maxX, y: maxY }, { x: minX, y: maxY }];
}
function toTensorBuffer(tensor, type) {
    if (type === void 0) {
        type = 'float32';
    }
    return __awaiter(this, void 0, void 0, function () {
        var tensorData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    return [4, tensor.data()];
                case 1:
                    tensorData = _a.sent();
                    return [2, new tf.TensorBuffer(tensor.shape, type, tensorData)];
            }
        });
    });
}
function toTensorBuffers3D(tensors) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2, Promise.all(tensors.map(function (tensor) {
                return toTensorBuffer(tensor, 'float32');
            }))];
        });
    });
}
function scalePose(pose, scaleX, scaleY) {
    return {
        score: pose.score,
        keypoints: pose.keypoints.map(function (_a) {
            var score = _a.score,
                part = _a.part,
                position = _a.position;
            return {
                score: score,
                part: part,
                position: { x: position.x * scaleX, y: position.y * scaleY }
            };
        })
    };
}
function scalePoses(poses, scaleY, scaleX) {
    if (scaleX === 1 && scaleY === 1) {
        return poses;
    }
    return poses.map(function (pose) {
        return scalePose(pose, scaleX, scaleY);
    });
}
function getValidResolution(imageScaleFactor, inputDimension, outputStride) {
    var evenResolution = inputDimension * imageScaleFactor - 1;
    return evenResolution - evenResolution % outputStride + 1;
}
//# sourceMappingURL=util.js.map
},{"@tensorflow/tfjs":"oMBA","./keypoints":"KVOZ"}],"rslq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
function half(k) {
    return Math.floor(k / 2);
}
var MaxHeap = function () {
    function MaxHeap(maxSize, getElementValue) {
        this.priorityQueue = new Array(maxSize);
        this.numberOfElements = -1;
        this.getElementValue = getElementValue;
    }
    MaxHeap.prototype.enqueue = function (x) {
        this.priorityQueue[++this.numberOfElements] = x;
        this.swim(this.numberOfElements);
    };
    MaxHeap.prototype.dequeue = function () {
        var max = this.priorityQueue[0];
        this.exchange(0, this.numberOfElements--);
        this.sink(0);
        this.priorityQueue[this.numberOfElements + 1] = null;
        return max;
    };
    MaxHeap.prototype.empty = function () {
        return this.numberOfElements === -1;
    };
    MaxHeap.prototype.size = function () {
        return this.numberOfElements + 1;
    };
    MaxHeap.prototype.all = function () {
        return this.priorityQueue.slice(0, this.numberOfElements + 1);
    };
    MaxHeap.prototype.max = function () {
        return this.priorityQueue[0];
    };
    MaxHeap.prototype.swim = function (k) {
        while (k > 0 && this.less(half(k), k)) {
            this.exchange(k, half(k));
            k = half(k);
        }
    };
    MaxHeap.prototype.sink = function (k) {
        while (2 * k <= this.numberOfElements) {
            var j = 2 * k;
            if (j < this.numberOfElements && this.less(j, j + 1)) {
                j++;
            }
            if (!this.less(k, j)) {
                break;
            }
            this.exchange(k, j);
            k = j;
        }
    };
    MaxHeap.prototype.getValueAt = function (i) {
        return this.getElementValue(this.priorityQueue[i]);
    };
    MaxHeap.prototype.less = function (i, j) {
        return this.getValueAt(i) < this.getValueAt(j);
    };
    MaxHeap.prototype.exchange = function (i, j) {
        var t = this.priorityQueue[i];
        this.priorityQueue[i] = this.priorityQueue[j];
        this.priorityQueue[j] = t;
    };
    return MaxHeap;
}();
exports.MaxHeap = MaxHeap;
//# sourceMappingURL=maxHeap.js.map
},{}],"1agY":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.buildPartWithScoreQueue = buildPartWithScoreQueue;

var _maxHeap = require('./maxHeap');

function scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores) {
    var _a = scores.shape,
        height = _a[0],
        width = _a[1];
    var localMaximum = true;
    var yStart = Math.max(heatmapY - localMaximumRadius, 0);
    var yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);
    for (var yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {
        var xStart = Math.max(heatmapX - localMaximumRadius, 0);
        var xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);
        for (var xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {
            if (scores.get(yCurrent, xCurrent, keypointId) > score) {
                localMaximum = false;
                break;
            }
        }
        if (!localMaximum) {
            break;
        }
    }
    return localMaximum;
}
function buildPartWithScoreQueue(scoreThreshold, localMaximumRadius, scores) {
    var _a = scores.shape,
        height = _a[0],
        width = _a[1],
        numKeypoints = _a[2];
    var queue = new _maxHeap.MaxHeap(height * width * numKeypoints, function (_a) {
        var score = _a.score;
        return score;
    });
    for (var heatmapY = 0; heatmapY < height; ++heatmapY) {
        for (var heatmapX = 0; heatmapX < width; ++heatmapX) {
            for (var keypointId = 0; keypointId < numKeypoints; ++keypointId) {
                var score = scores.get(heatmapY, heatmapX, keypointId);
                if (score < scoreThreshold) {
                    continue;
                }
                if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores)) {
                    queue.enqueue({ score: score, part: { heatmapY: heatmapY, heatmapX: heatmapX, id: keypointId } });
                }
            }
        }
    }
    return queue;
}
//# sourceMappingURL=buildPartWithScoreQueue.js.map
},{"./maxHeap":"rslq"}],"EXkz":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getOffsetPoint = getOffsetPoint;
exports.getImageCoords = getImageCoords;
exports.fillArray = fillArray;
exports.clamp = clamp;
exports.squaredDistance = squaredDistance;
exports.addVectors = addVectors;
exports.clampVector = clampVector;

var _keypoints = require('../keypoints');

function getOffsetPoint(y, x, keypoint, offsets) {
    return {
        y: offsets.get(y, x, keypoint),
        x: offsets.get(y, x, keypoint + _keypoints.NUM_KEYPOINTS)
    };
}
function getImageCoords(part, outputStride, offsets) {
    var heatmapY = part.heatmapY,
        heatmapX = part.heatmapX,
        keypoint = part.id;
    var _a = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets),
        y = _a.y,
        x = _a.x;
    return {
        x: part.heatmapX * outputStride + x,
        y: part.heatmapY * outputStride + y
    };
}
function fillArray(element, size) {
    var result = new Array(size);
    for (var i = 0; i < size; i++) {
        result[i] = element;
    }
    return result;
}
function clamp(a, min, max) {
    if (a < min) {
        return min;
    }
    if (a > max) {
        return max;
    }
    return a;
}
function squaredDistance(y1, x1, y2, x2) {
    var dy = y2 - y1;
    var dx = x2 - x1;
    return dy * dy + dx * dx;
}
function addVectors(a, b) {
    return { x: a.x + b.x, y: a.y + b.y };
}
function clampVector(a, min, max) {
    return { y: clamp(a.y, min, max), x: clamp(a.x, min, max) };
}
//# sourceMappingURL=util.js.map
},{"../keypoints":"KVOZ"}],"YpNi":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decodePose = decodePose;

var _keypoints = require('../keypoints');

var _util = require('./util');

var parentChildrenTuples = _keypoints.poseChain.map(function (_a) {
    var parentJoinName = _a[0],
        childJoinName = _a[1];
    return [_keypoints.partIds[parentJoinName], _keypoints.partIds[childJoinName]];
});
var parentToChildEdges = parentChildrenTuples.map(function (_a) {
    var childJointId = _a[1];
    return childJointId;
});
var childToParentEdges = parentChildrenTuples.map(function (_a) {
    var parentJointId = _a[0];
    return parentJointId;
});
function getDisplacement(edgeId, point, displacements) {
    var numEdges = displacements.shape[2] / 2;
    return {
        y: displacements.get(point.y, point.x, edgeId),
        x: displacements.get(point.y, point.x, numEdges + edgeId)
    };
}
function getStridedIndexNearPoint(point, outputStride, height, width) {
    return {
        y: (0, _util.clamp)(Math.round(point.y / outputStride), 0, height - 1),
        x: (0, _util.clamp)(Math.round(point.x / outputStride), 0, width - 1)
    };
}
function traverseToTargetKeypoint(edgeId, sourceKeypoint, targetKeypointId, scoresBuffer, offsets, outputStride, displacements) {
    var _a = scoresBuffer.shape,
        height = _a[0],
        width = _a[1];
    var sourceKeypointIndices = getStridedIndexNearPoint(sourceKeypoint.position, outputStride, height, width);
    var displacement = getDisplacement(edgeId, sourceKeypointIndices, displacements);
    var displacedPoint = (0, _util.addVectors)(sourceKeypoint.position, displacement);
    var displacedPointIndices = getStridedIndexNearPoint(displacedPoint, outputStride, height, width);
    var offsetPoint = (0, _util.getOffsetPoint)(displacedPointIndices.y, displacedPointIndices.x, targetKeypointId, offsets);
    var score = scoresBuffer.get(displacedPointIndices.y, displacedPointIndices.x, targetKeypointId);
    var targetKeypoint = (0, _util.addVectors)({
        x: displacedPointIndices.x * outputStride,
        y: displacedPointIndices.y * outputStride
    }, { x: offsetPoint.x, y: offsetPoint.y });
    return { position: targetKeypoint, part: _keypoints.partNames[targetKeypointId], score: score };
}
function decodePose(root, scores, offsets, outputStride, displacementsFwd, displacementsBwd) {
    var numParts = scores.shape[2];
    var numEdges = parentToChildEdges.length;
    var instanceKeypoints = new Array(numParts);
    var rootPart = root.part,
        rootScore = root.score;
    var rootPoint = (0, _util.getImageCoords)(rootPart, outputStride, offsets);
    instanceKeypoints[rootPart.id] = {
        score: rootScore,
        part: _keypoints.partNames[rootPart.id],
        position: rootPoint
    };
    for (var edge = numEdges - 1; edge >= 0; --edge) {
        var sourceKeypointId = parentToChildEdges[edge];
        var targetKeypointId = childToParentEdges[edge];
        if (instanceKeypoints[sourceKeypointId] && !instanceKeypoints[targetKeypointId]) {
            instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores, offsets, outputStride, displacementsBwd);
        }
    }
    for (var edge = 0; edge < numEdges; ++edge) {
        var sourceKeypointId = childToParentEdges[edge];
        var targetKeypointId = parentToChildEdges[edge];
        if (instanceKeypoints[sourceKeypointId] && !instanceKeypoints[targetKeypointId]) {
            instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores, offsets, outputStride, displacementsFwd);
        }
    }
    return instanceKeypoints;
}
//# sourceMappingURL=decodePose.js.map
},{"../keypoints":"KVOZ","./util":"EXkz"}],"gxUn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decodeMultiplePoses = decodeMultiplePoses;

var _util = require("../util");

var _buildPartWithScoreQueue = require("./buildPartWithScoreQueue");

var _decodePose = require("./decodePose");

var _util2 = require("./util");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

function withinNmsRadiusOfCorrespondingPoint(poses, squaredNmsRadius, _a, keypointId) {
    var x = _a.x,
        y = _a.y;
    return poses.some(function (_a) {
        var keypoints = _a.keypoints;
        var correspondingKeypoint = keypoints[keypointId].position;
        return (0, _util2.squaredDistance)(y, x, correspondingKeypoint.y, correspondingKeypoint.x) <= squaredNmsRadius;
    });
}
function getInstanceScore(existingPoses, squaredNmsRadius, instanceKeypoints) {
    var notOverlappedKeypointScores = instanceKeypoints.reduce(function (result, _a, keypointId) {
        var position = _a.position,
            score = _a.score;
        if (!withinNmsRadiusOfCorrespondingPoint(existingPoses, squaredNmsRadius, position, keypointId)) {
            result += score;
        }
        return result;
    }, 0.0);
    return notOverlappedKeypointScores /= instanceKeypoints.length;
}
var kLocalMaximumRadius = 1;
function decodeMultiplePoses(heatmapScores, offsets, displacementsFwd, displacementsBwd, outputStride, maxPoseDetections, scoreThreshold, nmsRadius) {
    if (scoreThreshold === void 0) {
        scoreThreshold = 0.5;
    }
    if (nmsRadius === void 0) {
        nmsRadius = 20;
    }
    return __awaiter(this, void 0, void 0, function () {
        var poses, _a, scoresBuffer, offsetsBuffer, displacementsFwdBuffer, displacementsBwdBuffer, queue, squaredNmsRadius, root, rootImageCoords, keypoints, score;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    poses = [];
                    return [4, (0, _util.toTensorBuffers3D)([heatmapScores, offsets, displacementsFwd, displacementsBwd])];
                case 1:
                    _a = _b.sent(), scoresBuffer = _a[0], offsetsBuffer = _a[1], displacementsFwdBuffer = _a[2], displacementsBwdBuffer = _a[3];
                    queue = (0, _buildPartWithScoreQueue.buildPartWithScoreQueue)(scoreThreshold, kLocalMaximumRadius, scoresBuffer);
                    squaredNmsRadius = nmsRadius * nmsRadius;
                    while (poses.length < maxPoseDetections && !queue.empty()) {
                        root = queue.dequeue();
                        rootImageCoords = (0, _util2.getImageCoords)(root.part, outputStride, offsetsBuffer);
                        if (withinNmsRadiusOfCorrespondingPoint(poses, squaredNmsRadius, rootImageCoords, root.part.id)) {
                            continue;
                        }
                        keypoints = (0, _decodePose.decodePose)(root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer, displacementsBwdBuffer);
                        score = getInstanceScore(poses, squaredNmsRadius, keypoints);
                        poses.push({ keypoints: keypoints, score: score });
                    }
                    return [2, poses];
            }
        });
    });
}
//# sourceMappingURL=decodeMultiplePoses.js.map
},{"../util":"hfse","./buildPartWithScoreQueue":"1agY","./decodePose":"YpNi","./util":"EXkz"}],"82kr":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CheckpointLoader = undefined;

var _tfjs = require('@tensorflow/tfjs');

var MANIFEST_FILE = 'manifest.json';
var CheckpointLoader = function () {
    function CheckpointLoader(urlPath) {
        this.urlPath = urlPath;
        if (this.urlPath.charAt(this.urlPath.length - 1) !== '/') {
            this.urlPath += '/';
        }
    }
    CheckpointLoader.prototype.loadManifest = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', _this.urlPath + MANIFEST_FILE);
            xhr.onload = function () {
                _this.checkpointManifest = JSON.parse(xhr.responseText);
                resolve();
            };
            xhr.onerror = function (error) {
                throw new Error(MANIFEST_FILE + " not found at " + _this.urlPath + ". " + error);
            };
            xhr.send();
        });
    };
    CheckpointLoader.prototype.getCheckpointManifest = function () {
        var _this = this;
        if (this.checkpointManifest == null) {
            return new Promise(function (resolve, reject) {
                _this.loadManifest().then(function () {
                    resolve(_this.checkpointManifest);
                });
            });
        }
        return new Promise(function (resolve, reject) {
            resolve(_this.checkpointManifest);
        });
    };
    CheckpointLoader.prototype.getAllVariables = function () {
        var _this = this;
        if (this.variables != null) {
            return new Promise(function (resolve, reject) {
                resolve(_this.variables);
            });
        }
        return new Promise(function (resolve, reject) {
            _this.getCheckpointManifest().then(function (checkpointDefinition) {
                var variableNames = Object.keys(_this.checkpointManifest);
                var variablePromises = [];
                for (var i = 0; i < variableNames.length; i++) {
                    variablePromises.push(_this.getVariable(variableNames[i]));
                }
                Promise.all(variablePromises).then(function (variables) {
                    _this.variables = {};
                    for (var i = 0; i < variables.length; i++) {
                        _this.variables[variableNames[i]] = variables[i];
                    }
                    resolve(_this.variables);
                });
            });
        });
    };
    CheckpointLoader.prototype.getVariable = function (varName) {
        var _this = this;
        if (!(varName in this.checkpointManifest)) {
            throw new Error('Cannot load non-existant variable ' + varName);
        }
        var variableRequestPromiseMethod = function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.responseType = 'arraybuffer';
            var fname = _this.checkpointManifest[varName].filename;
            xhr.open('GET', _this.urlPath + fname);
            xhr.onload = function () {
                if (xhr.status === 404) {
                    throw new Error("Not found variable " + varName);
                }
                var values = new Float32Array(xhr.response);
                var tensor = _tfjs.Tensor.make(_this.checkpointManifest[varName].shape, { values: values });
                resolve(tensor);
            };
            xhr.onerror = function (error) {
                throw new Error("Could not fetch variable " + varName + ": " + error);
            };
            xhr.send();
        };
        if (this.checkpointManifest == null) {
            return new Promise(function (resolve, reject) {
                _this.loadManifest().then(function () {
                    new Promise(variableRequestPromiseMethod).then(resolve);
                });
            });
        }
        return new Promise(variableRequestPromiseMethod);
    };
    return CheckpointLoader;
}();
exports.CheckpointLoader = CheckpointLoader;
//# sourceMappingURL=checkpoint_loader.js.map
},{"@tensorflow/tfjs":"oMBA"}],"UNrA":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MobileNet = exports.mobileNetArchitectures = undefined;
exports.assertValidOutputStride = assertValidOutputStride;
exports.assertValidResolution = assertValidResolution;
exports.assertValidScaleFactor = assertValidScaleFactor;

var _tfjs = require('@tensorflow/tfjs');

var tf = _interopRequireWildcard(_tfjs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var mobileNet100Architecture = [['conv2d', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1]];
var mobileNet75Architecture = [['conv2d', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1]];
var mobileNet50Architecture = [['conv2d', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 2], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1], ['separableConv', 1]];
var VALID_OUTPUT_STRIDES = [8, 16, 32];
function assertValidOutputStride(outputStride) {
    tf.util.assert(typeof outputStride === 'number', 'outputStride is not a number');
    tf.util.assert(VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0, "outputStride of " + outputStride + " is invalid. " + "It must be either 8, 16, or 32");
}
function assertValidResolution(resolution, outputStride) {
    tf.util.assert(typeof resolution === 'number', 'resolution is not a number');
    tf.util.assert((resolution - 1) % outputStride === 0, "resolution of " + resolution + " is invalid for output stride " + (outputStride + "."));
}
function assertValidScaleFactor(imageScaleFactor) {
    tf.util.assert(typeof imageScaleFactor === 'number', 'imageScaleFactor is not a number');
    tf.util.assert(imageScaleFactor >= 0.2 && imageScaleFactor <= 1.0, 'imageScaleFactor must be between 0.2 and 1.0');
}
var mobileNetArchitectures = exports.mobileNetArchitectures = {
    100: mobileNet100Architecture,
    75: mobileNet75Architecture,
    50: mobileNet50Architecture
};
function toOutputStridedLayers(convolutionDefinition, outputStride) {
    var currentStride = 1;
    var rate = 1;
    return convolutionDefinition.map(function (_a, blockId) {
        var convType = _a[0],
            stride = _a[1];
        var layerStride, layerRate;
        if (currentStride === outputStride) {
            layerStride = 1;
            layerRate = rate;
            rate *= stride;
        } else {
            layerStride = stride;
            layerRate = 1;
            currentStride *= stride;
        }
        return {
            blockId: blockId,
            convType: convType,
            stride: layerStride,
            rate: layerRate,
            outputStride: currentStride
        };
    });
}
var MobileNet = function () {
    function MobileNet(variables, convolutionDefinitions) {
        this.PREPROCESS_DIVISOR = tf.scalar(255.0 / 2);
        this.ONE = tf.scalar(1);
        this.variables = variables;
        this.convolutionDefinitions = convolutionDefinitions;
    }
    MobileNet.prototype.predict = function (input, outputStride) {
        var _this = this;
        var preprocessedInput = tf.cast(input, 'float32').div(this.PREPROCESS_DIVISOR).sub(this.ONE);
        var layers = toOutputStridedLayers(this.convolutionDefinitions, outputStride);
        return layers.reduce(function (previousLayer, _a) {
            var blockId = _a.blockId,
                stride = _a.stride,
                convType = _a.convType,
                rate = _a.rate;
            if (convType === 'conv2d') {
                return _this.conv(previousLayer, stride, blockId);
            } else if (convType === 'separableConv') {
                return _this.separableConv(previousLayer, stride, blockId, rate);
            } else {
                throw Error("Unknown conv type of " + convType);
            }
        }, preprocessedInput);
    };
    MobileNet.prototype.convToOutput = function (mobileNetOutput, outputLayerName) {
        return mobileNetOutput.conv2d(this.weights(outputLayerName), 1, 'same').add(this.biases(outputLayerName));
    };
    MobileNet.prototype.conv = function (inputs, stride, blockId) {
        return inputs.conv2d(this.weights("Conv2d_" + String(blockId)), stride, 'same').add(this.biases("Conv2d_" + String(blockId))).clipByValue(0, 6);
    };
    MobileNet.prototype.separableConv = function (inputs, stride, blockID, dilations) {
        if (dilations === void 0) {
            dilations = 1;
        }
        var dwLayer = "Conv2d_" + String(blockID) + "_depthwise";
        var pwLayer = "Conv2d_" + String(blockID) + "_pointwise";
        var x1 = inputs.depthwiseConv2D(this.depthwiseWeights(dwLayer), stride, 'same', 'NHWC', dilations).add(this.biases(dwLayer)).clipByValue(0, 6);
        var x2 = x1.conv2d(this.weights(pwLayer), [1, 1], 'same').add(this.biases(pwLayer)).clipByValue(0, 6);
        return x2;
    };
    MobileNet.prototype.weights = function (layerName) {
        return this.variables["MobilenetV1/" + layerName + "/weights"];
    };
    MobileNet.prototype.biases = function (layerName) {
        return this.variables["MobilenetV1/" + layerName + "/biases"];
    };
    MobileNet.prototype.depthwiseWeights = function (layerName) {
        return this.variables["MobilenetV1/" + layerName + "/depthwise_weights"];
    };
    MobileNet.prototype.dispose = function () {
        for (var varName in this.variables) {
            this.variables[varName].dispose();
        }
    };
    return MobileNet;
}();
exports.MobileNet = MobileNet;
//# sourceMappingURL=mobilenet.js.map
},{"@tensorflow/tfjs":"oMBA"}],"IJGh":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.checkpoints = undefined;

var _mobilenet = require('./mobilenet');

var GOOGLE_CLOUD_STORAGE_DIR = 'https://storage.googleapis.com/tfjs-models/weights/posenet/';
var checkpoints = exports.checkpoints = {
    1.01: {
        url: GOOGLE_CLOUD_STORAGE_DIR + 'mobilenet_v1_101/',
        architecture: _mobilenet.mobileNetArchitectures[100]
    },
    1.0: {
        url: GOOGLE_CLOUD_STORAGE_DIR + 'mobilenet_v1_100/',
        architecture: _mobilenet.mobileNetArchitectures[100]
    },
    0.75: {
        url: GOOGLE_CLOUD_STORAGE_DIR + 'mobilenet_v1_075/',
        architecture: _mobilenet.mobileNetArchitectures[75]
    },
    0.5: {
        url: GOOGLE_CLOUD_STORAGE_DIR + 'mobilenet_v1_050/',
        architecture: _mobilenet.mobileNetArchitectures[50]
    }
};
//# sourceMappingURL=checkpoints.js.map
},{"./mobilenet":"UNrA"}],"wTwG":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.argmax2d = argmax2d;

var _tfjs = require('@tensorflow/tfjs');

var tf = _interopRequireWildcard(_tfjs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function mod(a, b) {
    return tf.tidy(function () {
        var floored = a.div(tf.scalar(b, 'int32'));
        return a.sub(floored.mul(tf.scalar(b, 'int32')));
    });
}
function argmax2d(inputs) {
    var _a = inputs.shape,
        height = _a[0],
        width = _a[1],
        depth = _a[2];
    return tf.tidy(function () {
        var reshaped = inputs.reshape([height * width, depth]);
        var coords = reshaped.argMax(0);
        var yCoords = coords.div(tf.scalar(width, 'int32')).expandDims(1);
        var xCoords = mod(coords, width).expandDims(1);
        return tf.concat([yCoords, xCoords], 1);
    });
}
//# sourceMappingURL=argmax2d.js.map
},{"@tensorflow/tfjs":"oMBA"}],"F1wA":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getPointsConfidence = getPointsConfidence;
exports.getOffsetVectors = getOffsetVectors;
exports.getOffsetPoints = getOffsetPoints;

var _tfjs = require('@tensorflow/tfjs');

var tf = _interopRequireWildcard(_tfjs);

var _keypoints = require('../keypoints');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function getPointsConfidence(heatmapScores, heatMapCoords) {
    var numKeypoints = heatMapCoords.shape[0];
    var result = new Float32Array(numKeypoints);
    for (var keypoint = 0; keypoint < numKeypoints; keypoint++) {
        var y = heatMapCoords.get(keypoint, 0);
        var x = heatMapCoords.get(keypoint, 1);
        result[keypoint] = heatmapScores.get(y, x, keypoint);
    }
    return result;
}
function getOffsetPoint(y, x, keypoint, offsetsBuffer) {
    return {
        y: offsetsBuffer.get(y, x, keypoint),
        x: offsetsBuffer.get(y, x, keypoint + _keypoints.NUM_KEYPOINTS)
    };
}
function getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer) {
    var result = [];
    for (var keypoint = 0; keypoint < _keypoints.NUM_KEYPOINTS; keypoint++) {
        var heatmapY = heatMapCoordsBuffer.get(keypoint, 0).valueOf();
        var heatmapX = heatMapCoordsBuffer.get(keypoint, 1).valueOf();
        var _a = getOffsetPoint(heatmapY, heatmapX, keypoint, offsetsBuffer),
            x = _a.x,
            y = _a.y;
        result.push(y);
        result.push(x);
    }
    return tf.tensor2d(result, [_keypoints.NUM_KEYPOINTS, 2]);
}
function getOffsetPoints(heatMapCoordsBuffer, outputStride, offsetsBuffer) {
    return tf.tidy(function () {
        var offsetVectors = getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer);
        return heatMapCoordsBuffer.toTensor().mul(tf.scalar(outputStride, 'int32')).toFloat().add(offsetVectors);
    });
}
//# sourceMappingURL=util.js.map
},{"@tensorflow/tfjs":"oMBA","../keypoints":"KVOZ"}],"UEYF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decodeSinglePose = decodeSinglePose;

var _keypoints = require("../keypoints");

var _util = require("../util");

var _argmax2d = require("./argmax2d");

var _util2 = require("./util");

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function decodeSinglePose(heatmapScores, offsets, outputStride) {
    return __awaiter(this, void 0, void 0, function () {
        var totalScore, heatmapValues, _a, scoresBuffer, offsetsBuffer, heatmapValuesBuffer, offsetPoints, offsetPointsBuffer, keypointConfidence, keypoints;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    totalScore = 0.0;
                    heatmapValues = (0, _argmax2d.argmax2d)(heatmapScores);
                    return [4, Promise.all([(0, _util.toTensorBuffer)(heatmapScores), (0, _util.toTensorBuffer)(offsets), (0, _util.toTensorBuffer)(heatmapValues, 'int32')])];
                case 1:
                    _a = _b.sent(), scoresBuffer = _a[0], offsetsBuffer = _a[1], heatmapValuesBuffer = _a[2];
                    offsetPoints = (0, _util2.getOffsetPoints)(heatmapValuesBuffer, outputStride, offsetsBuffer);
                    return [4, (0, _util.toTensorBuffer)(offsetPoints)];
                case 2:
                    offsetPointsBuffer = _b.sent();
                    keypointConfidence = Array.from((0, _util2.getPointsConfidence)(scoresBuffer, heatmapValuesBuffer));
                    keypoints = keypointConfidence.map(function (score, keypointId) {
                        totalScore += score;
                        return {
                            position: {
                                y: offsetPointsBuffer.get(keypointId, 0),
                                x: offsetPointsBuffer.get(keypointId, 1)
                            },
                            part: _keypoints.partNames[keypointId],
                            score: score
                        };
                    });
                    heatmapValues.dispose();
                    offsetPoints.dispose();
                    return [2, { keypoints: keypoints, score: totalScore / keypoints.length }];
            }
        });
    });
}
//# sourceMappingURL=decodeSinglePose.js.map
},{"../keypoints":"KVOZ","../util":"hfse","./argmax2d":"wTwG","./util":"F1wA"}],"japA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PoseNet = undefined;
exports.load = load;

var _tfjs = require("@tensorflow/tfjs");

var tf = _interopRequireWildcard(_tfjs);

var _checkpoint_loader = require("./checkpoint_loader");

var _checkpoints = require("./checkpoints");

var _mobilenet = require("./mobilenet");

var _decodeMultiplePoses = require("./multiPose/decodeMultiplePoses");

var _decodeSinglePose = require("./singlePose/decodeSinglePose");

var _util = require("./util");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function (thisArg, body) {
    var _ = { label: 0, sent: function () {
            if (t[0] & 1) throw t[1];return t[1];
        }, trys: [], ops: [] },
        f,
        y,
        t,
        g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([n, v]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:case 1:
                    t = op;break;
                case 4:
                    _.label++;return { value: op[1], done: false };
                case 5:
                    _.label++;y = op[1];op = [0];continue;
                case 7:
                    op = _.ops.pop();_.trys.pop();continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
    }
};

function toInputTensor(input, resizeHeight, resizeWidth, flipHorizontal) {
    var imageTensor = tf.fromPixels(input);
    if (flipHorizontal) {
        return imageTensor.reverse(1).resizeBilinear([resizeHeight, resizeWidth]);
    } else {
        return imageTensor.resizeBilinear([resizeHeight, resizeWidth]);
    }
}
var PoseNet = function () {
    function PoseNet(mobileNet) {
        this.mobileNet = mobileNet;
    }
    PoseNet.prototype.predictForSinglePose = function (input, outputStride) {
        var _this = this;
        if (outputStride === void 0) {
            outputStride = 16;
        }
        (0, _mobilenet.assertValidOutputStride)(outputStride);
        return tf.tidy(function () {
            var mobileNetOutput = _this.mobileNet.predict(input, outputStride);
            var heatmaps = _this.mobileNet.convToOutput(mobileNetOutput, 'heatmap_2');
            var offsets = _this.mobileNet.convToOutput(mobileNetOutput, 'offset_2');
            return { heatmapScores: heatmaps.sigmoid(), offsets: offsets };
        });
    };
    PoseNet.prototype.predictForMultiPose = function (input, outputStride) {
        var _this = this;
        if (outputStride === void 0) {
            outputStride = 16;
        }
        return tf.tidy(function () {
            var mobileNetOutput = _this.mobileNet.predict(input, outputStride);
            var heatmaps = _this.mobileNet.convToOutput(mobileNetOutput, 'heatmap_2');
            var offsets = _this.mobileNet.convToOutput(mobileNetOutput, 'offset_2');
            var displacementFwd = _this.mobileNet.convToOutput(mobileNetOutput, 'displacement_fwd_2');
            var displacementBwd = _this.mobileNet.convToOutput(mobileNetOutput, 'displacement_bwd_2');
            return {
                heatmapScores: heatmaps.sigmoid(),
                offsets: offsets,
                displacementFwd: displacementFwd,
                displacementBwd: displacementBwd
            };
        });
    };
    PoseNet.prototype.estimateSinglePose = function (input, imageScaleFactor, flipHorizontal, outputStride) {
        if (imageScaleFactor === void 0) {
            imageScaleFactor = 0.5;
        }
        if (flipHorizontal === void 0) {
            flipHorizontal = false;
        }
        if (outputStride === void 0) {
            outputStride = 16;
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var resizedHeight, resizedWidth, _a, heatmapScores, offsets, pose, scaleY, scaleX;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        (0, _mobilenet.assertValidOutputStride)(outputStride);
                        (0, _mobilenet.assertValidScaleFactor)(imageScaleFactor);
                        resizedHeight = (0, _util.getValidResolution)(imageScaleFactor, input.height, outputStride);
                        resizedWidth = (0, _util.getValidResolution)(imageScaleFactor, input.width, outputStride);
                        _a = tf.tidy(function () {
                            var inputTensor = toInputTensor(input, resizedHeight, resizedWidth, flipHorizontal);
                            return _this.predictForSinglePose(inputTensor, outputStride);
                        }), heatmapScores = _a.heatmapScores, offsets = _a.offsets;
                        return [4, (0, _decodeSinglePose.decodeSinglePose)(heatmapScores, offsets, outputStride)];
                    case 1:
                        pose = _b.sent();
                        heatmapScores.dispose();
                        offsets.dispose();
                        scaleY = input.height / resizedHeight;
                        scaleX = input.width / resizedWidth;
                        return [2, (0, _util.scalePose)(pose, scaleY, scaleX)];
                }
            });
        });
    };
    PoseNet.prototype.estimateMultiplePoses = function (input, imageScaleFactor, flipHorizontal, outputStride, maxDetections, scoreThreshold, nmsRadius) {
        if (imageScaleFactor === void 0) {
            imageScaleFactor = 0.5;
        }
        if (flipHorizontal === void 0) {
            flipHorizontal = false;
        }
        if (outputStride === void 0) {
            outputStride = 16;
        }
        if (maxDetections === void 0) {
            maxDetections = 5;
        }
        if (scoreThreshold === void 0) {
            scoreThreshold = .5;
        }
        if (nmsRadius === void 0) {
            nmsRadius = 20;
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var resizedHeight, resizedWidth, _a, heatmapScores, offsets, displacementFwd, displacementBwd, poses, scaleY, scaleX;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        (0, _mobilenet.assertValidOutputStride)(outputStride);
                        (0, _mobilenet.assertValidScaleFactor)(imageScaleFactor);
                        resizedHeight = (0, _util.getValidResolution)(imageScaleFactor, input.height, outputStride);
                        resizedWidth = (0, _util.getValidResolution)(imageScaleFactor, input.width, outputStride);
                        _a = tf.tidy(function () {
                            var inputTensor = toInputTensor(input, resizedHeight, resizedWidth, flipHorizontal);
                            return _this.predictForMultiPose(inputTensor, outputStride);
                        }), heatmapScores = _a.heatmapScores, offsets = _a.offsets, displacementFwd = _a.displacementFwd, displacementBwd = _a.displacementBwd;
                        return [4, (0, _decodeMultiplePoses.decodeMultiplePoses)(heatmapScores, offsets, displacementFwd, displacementBwd, outputStride, maxDetections, scoreThreshold, nmsRadius)];
                    case 1:
                        poses = _b.sent();
                        heatmapScores.dispose();
                        offsets.dispose();
                        displacementFwd.dispose();
                        displacementBwd.dispose();
                        scaleY = input.height / resizedHeight;
                        scaleX = input.width / resizedWidth;
                        return [2, (0, _util.scalePoses)(poses, scaleY, scaleX)];
                }
            });
        });
    };
    PoseNet.prototype.dispose = function () {
        this.mobileNet.dispose();
    };
    return PoseNet;
}();
exports.PoseNet = PoseNet;
function load(multiplier) {
    if (multiplier === void 0) {
        multiplier = 1.01;
    }
    return __awaiter(this, void 0, void 0, function () {
        var possibleMultipliers, checkpoint, checkpointLoader, variables, mobileNet;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (tf == null) {
                        throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please " + "also include @tensorflow/tfjs on the page before using this model.");
                    }
                    possibleMultipliers = Object.keys(_checkpoints.checkpoints);
                    tf.util.assert(typeof multiplier === 'number', "got multiplier type of " + typeof multiplier + " when it should be a " + "number.");
                    tf.util.assert(possibleMultipliers.indexOf(multiplier.toString()) >= 0, "invalid multiplier value of " + multiplier + ".  No checkpoint exists for that " + ("multiplier. Must be one of " + possibleMultipliers.join(',') + "."));
                    checkpoint = _checkpoints.checkpoints[multiplier];
                    checkpointLoader = new _checkpoint_loader.CheckpointLoader(checkpoint.url);
                    return [4, checkpointLoader.getAllVariables()];
                case 1:
                    variables = _a.sent();
                    mobileNet = new _mobilenet.MobileNet(variables, checkpoint.architecture);
                    return [2, new PoseNet(mobileNet)];
            }
        });
    });
}
//# sourceMappingURL=posenet.js.map
},{"@tensorflow/tfjs":"oMBA","./checkpoint_loader":"82kr","./checkpoints":"IJGh","./mobilenet":"UNrA","./multiPose/decodeMultiplePoses":"gxUn","./singlePose/decodeSinglePose":"UEYF","./util":"hfse"}],"A63Z":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PoseNet = exports.load = exports.decodeSinglePose = exports.decodeMultiplePoses = exports.getBoundingBoxPoints = exports.getBoundingBox = exports.getAdjacentKeyPoints = exports.poseChain = exports.partNames = exports.partIds = exports.checkpoints = undefined;

var _checkpoints = require('./checkpoints');

Object.defineProperty(exports, 'checkpoints', {
  enumerable: true,
  get: function () {
    return _checkpoints.checkpoints;
  }
});

var _keypoints = require('./keypoints');

Object.defineProperty(exports, 'partIds', {
  enumerable: true,
  get: function () {
    return _keypoints.partIds;
  }
});
Object.defineProperty(exports, 'partNames', {
  enumerable: true,
  get: function () {
    return _keypoints.partNames;
  }
});
Object.defineProperty(exports, 'poseChain', {
  enumerable: true,
  get: function () {
    return _keypoints.poseChain;
  }
});

var _util = require('./util');

Object.defineProperty(exports, 'getAdjacentKeyPoints', {
  enumerable: true,
  get: function () {
    return _util.getAdjacentKeyPoints;
  }
});
Object.defineProperty(exports, 'getBoundingBox', {
  enumerable: true,
  get: function () {
    return _util.getBoundingBox;
  }
});
Object.defineProperty(exports, 'getBoundingBoxPoints', {
  enumerable: true,
  get: function () {
    return _util.getBoundingBoxPoints;
  }
});

var _decodeMultiplePoses = require('./multiPose/decodeMultiplePoses');

var _posenet = require('./posenet');

var _decodeSinglePose = require('./singlePose/decodeSinglePose');

exports.decodeMultiplePoses = _decodeMultiplePoses.decodeMultiplePoses;
exports.decodeSinglePose = _decodeSinglePose.decodeSinglePose;
exports.load = _posenet.load;
exports.PoseNet = _posenet.PoseNet;
//# sourceMappingURL=index.js.map
},{"./multiPose/decodeMultiplePoses":"gxUn","./posenet":"japA","./singlePose/decodeSinglePose":"UEYF","./checkpoints":"IJGh","./keypoints":"KVOZ","./util":"hfse"}],"W6gy":[function(require,module,exports) {
'use strict';

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _Editor = require('./components/Editor.vue');

var _Editor2 = _interopRequireDefault(_Editor);

var _Example = require('./components/Example.vue');

var _Example2 = _interopRequireDefault(_Example);

var _jimp = require('jimp/browser/lib/jimp');

var _jimp2 = _interopRequireDefault(_jimp);

var _posenet = require('@tensorflow-models/posenet');

var Posenet = _interopRequireWildcard(_posenet);

var _tfjs = require('@tensorflow/tfjs');

var TF = _interopRequireWildcard(_tfjs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

console.log('loaded genkida.js');
// import Buffer from 'buffer';


_vue2.default.component('my-editor', _Editor2.default);
_vue2.default.component('my-example', _Example2.default);

_vue2.default.prototype.$posenet = Posenet;
_vue2.default.prototype.$tf = TF;

new _vue2.default({
  el: '#app',
  data: function () {
    return {
      msg: 'genkida.js'
    };
  }
});
},{"vue":"ApMz","./components/Editor.vue":"/5ie","./components/Example.vue":"1BYO","jimp/browser/lib/jimp":"b+9/","@tensorflow-models/posenet":"A63Z","@tensorflow/tfjs":"oMBA"}]},{},["W6gy"], null)
//# sourceMappingURL=/genkida/genkida.8a62993d.map